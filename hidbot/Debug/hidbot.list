
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd2c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d038  0800d038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d03c  0800d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000314  20000000  0800d040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000366c  20000314  0800d354  00020314  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003980  0800d354  00023980  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a07b  00000000  00000000  0002033d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005def  00000000  00000000  0004a3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ad8  00000000  00000000  000501a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017f0  00000000  00000000  00051c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f131  00000000  00000000  00053470  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008205  00000000  00000000  000625a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006a7a6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006e14  00000000  00000000  0006a824  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000314 	.word	0x20000314
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ce24 	.word	0x0800ce24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000318 	.word	0x20000318
 800014c:	0800ce24 	.word	0x0800ce24

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f000 ffc5 	bl	80010ea <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 fc65 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001c10 	.word	0x20001c10
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000334 	.word	0x20000334
 80001e0:	20000388 	.word	0x20000388

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000588 	.word	0x20000588
 8000214:	200005dc 	.word	0x200005dc

08000218 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
const uint32_t test1 = 12345;
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0ba      	sub	sp, #232	; 0xe8
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800022e:	4618      	mov	r0, r3
 8000230:	f009 f81c 	bl	800926c <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b6e      	ldr	r3, [pc, #440]	; (80003f0 <MX_FREERTOS_Init+0x1d8>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b6e      	ldr	r3, [pc, #440]	; (80003f4 <MX_FREERTOS_Init+0x1dc>)
 800023c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f008 ff92 	bl	8009178 <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b68      	ldr	r3, [pc, #416]	; (80003f8 <MX_FREERTOS_Init+0x1e0>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b68      	ldr	r3, [pc, #416]	; (80003fc <MX_FREERTOS_Init+0x1e4>)
 800025c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f008 ff82 	bl	8009178 <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b62      	ldr	r3, [pc, #392]	; (8000400 <MX_FREERTOS_Init+0x1e8>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

	/*buttons off oneshot time def.*/
	osTimerDef(buttons_off_tmr, Buttons_Off_Callback);
 800027a:	4b62      	ldr	r3, [pc, #392]	; (8000404 <MX_FREERTOS_Init+0x1ec>)
 800027c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	Buttons_Off_Tmr_Handle = osTimerCreate(osTimer(buttons_off_tmr), osTimerOnce,
 8000286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800028a:	2200      	movs	r2, #0
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f008 ff72 	bl	8009178 <osTimerCreate>
 8000294:	4602      	mov	r2, r0
 8000296:	4b5c      	ldr	r3, [pc, #368]	; (8000408 <MX_FREERTOS_Init+0x1f0>)
 8000298:	601a      	str	r2, [r3, #0]
	NULL);

//NF20211125_MEM_KEY_ENTRY======================================================
   char tmr_name[10];
   for(int i = 0; i < HID_ENTRY_TIMERS_NUM;i++ ){
 800029a:	2300      	movs	r3, #0
 800029c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80002a0:	e021      	b.n	80002e6 <MX_FREERTOS_Init+0xce>
	   sprintf(tmr_name, "t%d",i);
 80002a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80002a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80002aa:	4958      	ldr	r1, [pc, #352]	; (800040c <MX_FREERTOS_Init+0x1f4>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f00c f999 	bl	800c5e4 <siprintf>
	   const osTimerDef_t tmr_name = { (hid_entry_tmr_callback_array[i]), NULL};
 80002b2:	4a57      	ldr	r2, [pc, #348]	; (8000410 <MX_FREERTOS_Init+0x1f8>)
 80002b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
	   hid_entry_tmr_handle_arr[i] = osTimerCreate(&tmr_name, osTimerOnce,
 80002c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f008 ff54 	bl	8009178 <osTimerCreate>
 80002d0:	4601      	mov	r1, r0
 80002d2:	4a50      	ldr	r2, [pc, #320]	; (8000414 <MX_FREERTOS_Init+0x1fc>)
 80002d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < HID_ENTRY_TIMERS_NUM;i++ ){
 80002dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002e0:	3301      	adds	r3, #1
 80002e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80002e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	ddd9      	ble.n	80002a2 <MX_FREERTOS_Init+0x8a>
//NF_20211115_HID_COMMAND==============================================Е========

	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 80002ee:	4b4a      	ldr	r3, [pc, #296]	; (8000418 <MX_FREERTOS_Init+0x200>)
 80002f0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80002f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 80002fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f008 ffcb 	bl	800929c <osMessageCreate>
 8000306:	4602      	mov	r2, r0
 8000308:	4b44      	ldr	r3, [pc, #272]	; (800041c <MX_FREERTOS_Init+0x204>)
 800030a:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 800030c:	4b42      	ldr	r3, [pc, #264]	; (8000418 <MX_FREERTOS_Init+0x200>)
 800030e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 8000318:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f008 ffbc 	bl	800929c <osMessageCreate>
 8000324:	4602      	mov	r2, r0
 8000326:	4b3e      	ldr	r3, [pc, #248]	; (8000420 <MX_FREERTOS_Init+0x208>)
 8000328:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800032a:	4b3e      	ldr	r3, [pc, #248]	; (8000424 <MX_FREERTOS_Init+0x20c>)
 800032c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000330:	461d      	mov	r5, r3
 8000332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800033e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f008 feb7 	bl	80090b8 <osThreadCreate>
 800034a:	4602      	mov	r2, r0
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <MX_FREERTOS_Init+0x210>)
 800034e:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 8000350:	4b36      	ldr	r3, [pc, #216]	; (800042c <MX_FREERTOS_Init+0x214>)
 8000352:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000356:	461d      	mov	r5, r3
 8000358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 8000364:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f008 fea4 	bl	80090b8 <osThreadCreate>
 8000370:	4602      	mov	r2, r0
 8000372:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <MX_FREERTOS_Init+0x218>)
 8000374:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000376:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <MX_FREERTOS_Init+0x21c>)
 8000378:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800037c:	461d      	mov	r5, r3
 800037e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 800038a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f008 fe91 	bl	80090b8 <osThreadCreate>
 8000396:	4602      	mov	r2, r0
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_FREERTOS_Init+0x220>)
 800039a:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <MX_FREERTOS_Init+0x224>)
 800039e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80003a2:	461d      	mov	r5, r3
 80003a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 80003b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f008 fe7e 	bl	80090b8 <osThreadCreate>
 80003bc:	4602      	mov	r2, r0
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <MX_FREERTOS_Init+0x228>)
 80003c0:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_FREERTOS_Init+0x22c>)
 80003c4:	f107 040c 	add.w	r4, r7, #12
 80003c8:	461d      	mov	r5, r3
 80003ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f008 fe6b 	bl	80090b8 <osThreadCreate>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_FREERTOS_Init+0x230>)
 80003e6:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

}
 80003e8:	bf00      	nop
 80003ea:	37e8      	adds	r7, #232	; 0xe8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bdb0      	pop	{r4, r5, r7, pc}
 80003f0:	20001c5c 	.word	0x20001c5c
 80003f4:	08000491 	.word	0x08000491
 80003f8:	20001c50 	.word	0x20001c50
 80003fc:	080004d9 	.word	0x080004d9
 8000400:	20001c1c 	.word	0x20001c1c
 8000404:	08000549 	.word	0x08000549
 8000408:	20001c54 	.word	0x20001c54
 800040c:	0800ce3c 	.word	0x0800ce3c
 8000410:	20000000 	.word	0x20000000
 8000414:	20001c20 	.word	0x20001c20
 8000418:	0800ce40 	.word	0x0800ce40
 800041c:	20001c68 	.word	0x20001c68
 8000420:	20001c48 	.word	0x20001c48
 8000424:	0800ce5c 	.word	0x0800ce5c
 8000428:	20001c18 	.word	0x20001c18
 800042c:	0800ce84 	.word	0x0800ce84
 8000430:	20001c64 	.word	0x20001c64
 8000434:	0800ceac 	.word	0x0800ceac
 8000438:	20001c60 	.word	0x20001c60
 800043c:	0800ced4 	.word	0x0800ced4
 8000440:	20001c4c 	.word	0x20001c4c
 8000444:	0800cf00 	.word	0x0800cf00
 8000448:	20001c58 	.word	0x20001c58

0800044c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000454:	f00b fc18 	bl	800bc88 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1; //HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <StartDefaultTask+0x30>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 800045e:	f00b fc13 	bl	800bc88 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 8000462:	2301      	movs	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	73bb      	strb	r3, [r7, #14]

	init_hid();
 800046a:	f000 fa0f 	bl	800088c <init_hid>
//				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
//
//			}
//			tst = 0;
//		}
		osDelay(1);
 800046e:	2001      	movs	r0, #1
 8000470:	f008 fe6e 	bl	8009150 <osDelay>
		vTaskSuspend(NULL);
 8000474:	2000      	movs	r0, #0
 8000476:	f00a fab5 	bl	800a9e4 <vTaskSuspend>
		osDelay(1);
 800047a:	e7f8      	b.n	800046e <StartDefaultTask+0x22>
 800047c:	20000330 	.word	0x20000330

08000480 <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000488:	2001      	movs	r0, #1
 800048a:	f008 fe61 	bl	8009150 <osDelay>
 800048e:	e7fb      	b.n	8000488 <Start_Ram_MSD_Task+0x8>

08000490 <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <delay_click_event_tmr_Callback+0x3c>)
 800049a:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 800049c:	2300      	movs	r3, #0
 800049e:	81fb      	strh	r3, [r7, #14]
 80004a0:	e007      	b.n	80004b2 <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 80004a2:	89fb      	ldrh	r3, [r7, #14]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	4413      	add	r3, r2
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 80004ac:	89fb      	ldrh	r3, [r7, #14]
 80004ae:	3301      	adds	r3, #1
 80004b0:	81fb      	strh	r3, [r7, #14]
 80004b2:	89fb      	ldrh	r3, [r7, #14]
 80004b4:	2b19      	cmp	r3, #25
 80004b6:	d9f4      	bls.n	80004a2 <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 80004b8:	221c      	movs	r2, #28
 80004ba:	4905      	ldr	r1, [pc, #20]	; (80004d0 <delay_click_event_tmr_Callback+0x40>)
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <delay_click_event_tmr_Callback+0x44>)
 80004be:	f007 fc1d 	bl	8007cfc <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 80004c2:	bf00      	nop
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20001c6e 	.word	0x20001c6e
 80004d0:	20001c6c 	.word	0x20001c6c
 80004d4:	200031cc 	.word	0x200031cc

080004d8 <periodic_click_event_Callback>:
//test1
#define TEST_STR_LEN 12
char test_str[TEST_STR_LEN] = "osalexandeko";

/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
//		i = 1;
//		hid_state.mouseHID.x=-100;
//	}
///////////////////////////////////////////////////////////////////////////////////////
	static uint16_t i = 0;
	hid_state.curr_hid_type = KEYBOARD_TYPE;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <periodic_click_event_Callback+0x5c>)
 80004e2:	220f      	movs	r2, #15
 80004e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hid_state.keyboardHID.k_a = test_str[i++] - 0x5D;
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <periodic_click_event_Callback+0x60>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	b291      	uxth	r1, r2
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <periodic_click_event_Callback+0x60>)
 80004f2:	8011      	strh	r1, [r2, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <periodic_click_event_Callback+0x64>)
 80004f8:	5c9b      	ldrb	r3, [r3, r2]
 80004fa:	3b5d      	subs	r3, #93	; 0x5d
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <periodic_click_event_Callback+0x5c>)
 8000500:	709a      	strb	r2, [r3, #2]
	hid_state.keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_SHIFT;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <periodic_click_event_Callback+0x5c>)
 8000504:	2202      	movs	r2, #2
 8000506:	705a      	strb	r2, [r3, #1]
	if (TEST_STR_LEN <= i) {
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <periodic_click_event_Callback+0x60>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	2b0b      	cmp	r3, #11
 800050e:	d902      	bls.n	8000516 <periodic_click_event_Callback+0x3e>
		i = 0;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <periodic_click_event_Callback+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	801a      	strh	r2, [r3, #0]
	}
	//hid_state.keyboardHID.k_b = USB_HID_KEY_B;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000516:	221c      	movs	r2, #28
 8000518:	4906      	ldr	r1, [pc, #24]	; (8000534 <periodic_click_event_Callback+0x5c>)
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <periodic_click_event_Callback+0x68>)
 800051c:	f007 fbee 	bl	8007cfc <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));

	osTimerStart(Buttons_Off_Tmr_Handle, 100);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <periodic_click_event_Callback+0x6c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2164      	movs	r1, #100	; 0x64
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fe5a 	bl	80091e0 <osTimerStart>

}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20001c6c 	.word	0x20001c6c
 8000538:	200009dc 	.word	0x200009dc
 800053c:	20000028 	.word	0x20000028
 8000540:	200031cc 	.word	0x200031cc
 8000544:	20001c54 	.word	0x20001c54

08000548 <Buttons_Off_Callback>:

/**
 * Callback to switch buttons off.
 * @param argument
 */
void Buttons_Off_Callback(void const * argument) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//hid_state.curr_hid_type = KEYBOARD_TYPE;
	hid_state.keyboardHID.k_a = 0;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <Buttons_Off_Callback+0x20>)
 8000552:	2200      	movs	r2, #0
 8000554:	709a      	strb	r2, [r3, #2]
	//hid_state.keyboardHID.k_b = 0;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000556:	221c      	movs	r2, #28
 8000558:	4903      	ldr	r1, [pc, #12]	; (8000568 <Buttons_Off_Callback+0x20>)
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <Buttons_Off_Callback+0x24>)
 800055c:	f007 fbce 	bl	8007cfc <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20001c6c 	.word	0x20001c6c
 800056c:	200031cc 	.word	0x200031cc

08000570 <hid_entry_tmr_callback_0>:
	HETCS_EXIT,

} hid_entry_tmr_callback_state;


void hid_entry_tmr_callback_0(void const * argument){
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <hid_entry_tmr_callback_0+0x3c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <hid_entry_tmr_callback_0+0x16>
 8000580:	2b01      	cmp	r3, #1
 8000582:	d00b      	beq.n	800059c <hid_entry_tmr_callback_0+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 8000584:	e00e      	b.n	80005a4 <hid_entry_tmr_callback_0+0x34>
		st = HETCS_EXIT;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <hid_entry_tmr_callback_0+0x3c>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[0], 5000);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <hid_entry_tmr_callback_0+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f241 3188 	movw	r1, #5000	; 0x1388
 8000594:	4618      	mov	r0, r3
 8000596:	f008 fe23 	bl	80091e0 <osTimerStart>
		break;
 800059a:	e003      	b.n	80005a4 <hid_entry_tmr_callback_0+0x34>
		st = HETCS_ENTER;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <hid_entry_tmr_callback_0+0x3c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
		break;
 80005a2:	bf00      	nop
	}
	}
	return;
 80005a4:	bf00      	nop
}
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200009de 	.word	0x200009de
 80005b0:	20001c20 	.word	0x20001c20

080005b4 <hid_entry_tmr_callback_1>:
void hid_entry_tmr_callback_1(void const * argument){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <hid_entry_tmr_callback_1+0x3c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <hid_entry_tmr_callback_1+0x16>
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d00b      	beq.n	80005e0 <hid_entry_tmr_callback_1+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 80005c8:	e00e      	b.n	80005e8 <hid_entry_tmr_callback_1+0x34>
		st = HETCS_EXIT;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <hid_entry_tmr_callback_1+0x3c>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[1], 5000);
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <hid_entry_tmr_callback_1+0x40>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80005d8:	4618      	mov	r0, r3
 80005da:	f008 fe01 	bl	80091e0 <osTimerStart>
		break;
 80005de:	e003      	b.n	80005e8 <hid_entry_tmr_callback_1+0x34>
		st = HETCS_ENTER;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <hid_entry_tmr_callback_1+0x3c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
		break;
 80005e6:	bf00      	nop
	}
	}
	return;
 80005e8:	bf00      	nop
}
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200009df 	.word	0x200009df
 80005f4:	20001c20 	.word	0x20001c20

080005f8 <hid_entry_tmr_callback_2>:

void hid_entry_tmr_callback_2(void const * argument){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <hid_entry_tmr_callback_2+0x3c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d002      	beq.n	800060e <hid_entry_tmr_callback_2+0x16>
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00b      	beq.n	8000624 <hid_entry_tmr_callback_2+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 800060c:	e00e      	b.n	800062c <hid_entry_tmr_callback_2+0x34>
		st = HETCS_EXIT;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <hid_entry_tmr_callback_2+0x3c>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[2], 5000);
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <hid_entry_tmr_callback_2+0x40>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f241 3188 	movw	r1, #5000	; 0x1388
 800061c:	4618      	mov	r0, r3
 800061e:	f008 fddf 	bl	80091e0 <osTimerStart>
		break;
 8000622:	e003      	b.n	800062c <hid_entry_tmr_callback_2+0x34>
		st = HETCS_ENTER;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <hid_entry_tmr_callback_2+0x3c>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
		break;
 800062a:	bf00      	nop
	}
	}
	return;
 800062c:	bf00      	nop
}
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200009e0 	.word	0x200009e0
 8000638:	20001c20 	.word	0x20001c20

0800063c <hid_entry_tmr_callback_3>:
void hid_entry_tmr_callback_3(void const * argument){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <hid_entry_tmr_callback_3+0x3c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <hid_entry_tmr_callback_3+0x16>
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00b      	beq.n	8000668 <hid_entry_tmr_callback_3+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 8000650:	e00e      	b.n	8000670 <hid_entry_tmr_callback_3+0x34>
		st = HETCS_EXIT;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <hid_entry_tmr_callback_3+0x3c>)
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[3], 5000);
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <hid_entry_tmr_callback_3+0x40>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000660:	4618      	mov	r0, r3
 8000662:	f008 fdbd 	bl	80091e0 <osTimerStart>
		break;
 8000666:	e003      	b.n	8000670 <hid_entry_tmr_callback_3+0x34>
		st = HETCS_ENTER;
 8000668:	4b03      	ldr	r3, [pc, #12]	; (8000678 <hid_entry_tmr_callback_3+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		break;
 800066e:	bf00      	nop
	}
	}
	return;
 8000670:	bf00      	nop
}
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200009e1 	.word	0x200009e1
 800067c:	20001c20 	.word	0x20001c20

08000680 <hid_entry_tmr_callback_4>:

void hid_entry_tmr_callback_4(void const * argument){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <hid_entry_tmr_callback_4+0x3c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d002      	beq.n	8000696 <hid_entry_tmr_callback_4+0x16>
 8000690:	2b01      	cmp	r3, #1
 8000692:	d00b      	beq.n	80006ac <hid_entry_tmr_callback_4+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 8000694:	e00e      	b.n	80006b4 <hid_entry_tmr_callback_4+0x34>
		st = HETCS_EXIT;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <hid_entry_tmr_callback_4+0x3c>)
 8000698:	2201      	movs	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[4], 5000);
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <hid_entry_tmr_callback_4+0x40>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	f241 3188 	movw	r1, #5000	; 0x1388
 80006a4:	4618      	mov	r0, r3
 80006a6:	f008 fd9b 	bl	80091e0 <osTimerStart>
		break;
 80006aa:	e003      	b.n	80006b4 <hid_entry_tmr_callback_4+0x34>
		st = HETCS_ENTER;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <hid_entry_tmr_callback_4+0x3c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
		break;
 80006b2:	bf00      	nop
	}
	}
	return;
 80006b4:	bf00      	nop
}
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	200009e2 	.word	0x200009e2
 80006c0:	20001c20 	.word	0x20001c20

080006c4 <hid_entry_tmr_callback_5>:
void hid_entry_tmr_callback_5(void const * argument){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <hid_entry_tmr_callback_5+0x3c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <hid_entry_tmr_callback_5+0x16>
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d00b      	beq.n	80006f0 <hid_entry_tmr_callback_5+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 80006d8:	e00e      	b.n	80006f8 <hid_entry_tmr_callback_5+0x34>
		st = HETCS_EXIT;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <hid_entry_tmr_callback_5+0x3c>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[5], 5000);
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <hid_entry_tmr_callback_5+0x40>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 fd79 	bl	80091e0 <osTimerStart>
		break;
 80006ee:	e003      	b.n	80006f8 <hid_entry_tmr_callback_5+0x34>
		st = HETCS_ENTER;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <hid_entry_tmr_callback_5+0x3c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
		break;
 80006f6:	bf00      	nop
	}
	}
	return;
 80006f8:	bf00      	nop
}
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200009e3 	.word	0x200009e3
 8000704:	20001c20 	.word	0x20001c20

08000708 <hid_entry_tmr_callback_6>:

void hid_entry_tmr_callback_6(void const * argument){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <hid_entry_tmr_callback_6+0x3c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d002      	beq.n	800071e <hid_entry_tmr_callback_6+0x16>
 8000718:	2b01      	cmp	r3, #1
 800071a:	d00b      	beq.n	8000734 <hid_entry_tmr_callback_6+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 800071c:	e00e      	b.n	800073c <hid_entry_tmr_callback_6+0x34>
		st = HETCS_EXIT;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <hid_entry_tmr_callback_6+0x3c>)
 8000720:	2201      	movs	r2, #1
 8000722:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[6], 5000);
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <hid_entry_tmr_callback_6+0x40>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f241 3188 	movw	r1, #5000	; 0x1388
 800072c:	4618      	mov	r0, r3
 800072e:	f008 fd57 	bl	80091e0 <osTimerStart>
		break;
 8000732:	e003      	b.n	800073c <hid_entry_tmr_callback_6+0x34>
		st = HETCS_ENTER;
 8000734:	4b03      	ldr	r3, [pc, #12]	; (8000744 <hid_entry_tmr_callback_6+0x3c>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
		break;
 800073a:	bf00      	nop
	}
	}
	return;
 800073c:	bf00      	nop
}
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200009e4 	.word	0x200009e4
 8000748:	20001c20 	.word	0x20001c20

0800074c <hid_entry_tmr_callback_7>:
void hid_entry_tmr_callback_7(void const * argument){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <hid_entry_tmr_callback_7+0x3c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <hid_entry_tmr_callback_7+0x16>
 800075c:	2b01      	cmp	r3, #1
 800075e:	d00b      	beq.n	8000778 <hid_entry_tmr_callback_7+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 8000760:	e00e      	b.n	8000780 <hid_entry_tmr_callback_7+0x34>
		st = HETCS_EXIT;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <hid_entry_tmr_callback_7+0x3c>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[7], 5000);
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <hid_entry_tmr_callback_7+0x40>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	f241 3188 	movw	r1, #5000	; 0x1388
 8000770:	4618      	mov	r0, r3
 8000772:	f008 fd35 	bl	80091e0 <osTimerStart>
		break;
 8000776:	e003      	b.n	8000780 <hid_entry_tmr_callback_7+0x34>
		st = HETCS_ENTER;
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <hid_entry_tmr_callback_7+0x3c>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
		break;
 800077e:	bf00      	nop
	}
	}
	return;
 8000780:	bf00      	nop
}
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200009e5 	.word	0x200009e5
 800078c:	20001c20 	.word	0x20001c20

08000790 <hid_entry_tmr_callback_8>:

void hid_entry_tmr_callback_8(void const * argument){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <hid_entry_tmr_callback_8+0x3c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <hid_entry_tmr_callback_8+0x16>
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d00b      	beq.n	80007bc <hid_entry_tmr_callback_8+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 80007a4:	e00e      	b.n	80007c4 <hid_entry_tmr_callback_8+0x34>
		st = HETCS_EXIT;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <hid_entry_tmr_callback_8+0x3c>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[8], 5000);
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <hid_entry_tmr_callback_8+0x40>)
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80007b4:	4618      	mov	r0, r3
 80007b6:	f008 fd13 	bl	80091e0 <osTimerStart>
		break;
 80007ba:	e003      	b.n	80007c4 <hid_entry_tmr_callback_8+0x34>
		st = HETCS_ENTER;
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <hid_entry_tmr_callback_8+0x3c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
		break;
 80007c2:	bf00      	nop
	}
	}
	return;
 80007c4:	bf00      	nop
}
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	200009e6 	.word	0x200009e6
 80007d0:	20001c20 	.word	0x20001c20

080007d4 <hid_entry_tmr_callback_9>:
void hid_entry_tmr_callback_9(void const * argument){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	static hid_entry_tmr_callback_state st = HETCS_ENTER;
	switch (st) {
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <hid_entry_tmr_callback_9+0x3c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <hid_entry_tmr_callback_9+0x16>
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d00b      	beq.n	8000800 <hid_entry_tmr_callback_9+0x2c>
	case HETCS_EXIT: {
		st = HETCS_ENTER;
		break;
	}
	default: {
		break;
 80007e8:	e00e      	b.n	8000808 <hid_entry_tmr_callback_9+0x34>
		st = HETCS_EXIT;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <hid_entry_tmr_callback_9+0x3c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	701a      	strb	r2, [r3, #0]
		osTimerStart(hid_entry_tmr_handle_arr[9], 5000);
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <hid_entry_tmr_callback_9+0x40>)
 80007f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f4:	f241 3188 	movw	r1, #5000	; 0x1388
 80007f8:	4618      	mov	r0, r3
 80007fa:	f008 fcf1 	bl	80091e0 <osTimerStart>
		break;
 80007fe:	e003      	b.n	8000808 <hid_entry_tmr_callback_9+0x34>
		st = HETCS_ENTER;
 8000800:	4b03      	ldr	r3, [pc, #12]	; (8000810 <hid_entry_tmr_callback_9+0x3c>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
		break;
 8000806:	bf00      	nop
	}
	}
	return;
 8000808:	bf00      	nop
}
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200009e7 	.word	0x200009e7
 8000814:	20001c20 	.word	0x20001c20

08000818 <Start_Hid_Task>:
}
//==============================================================================


/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	//uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
	//static uint8_t bit_select = 0x01;

	//osTimerStart(Left_Shift_Off_Tmr_Handle, 1000);

	osDelay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f008 fc95 	bl	8009150 <osDelay>

	//test1
	for (int i = 0; i < HID_ENTRY_TIMERS_NUM; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e00f      	b.n	800084c <Start_Hid_Task+0x34>

		osTimerStart(hid_entry_tmr_handle_arr[i], 100 + 10 * i);
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <Start_Hid_Task+0x44>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	3364      	adds	r3, #100	; 0x64
 8000840:	4619      	mov	r1, r3
 8000842:	f008 fccd 	bl	80091e0 <osTimerStart>
	for (int i = 0; i < HID_ENTRY_TIMERS_NUM; i++) {
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2b09      	cmp	r3, #9
 8000850:	ddec      	ble.n	800082c <Start_Hid_Task+0x14>
	}

	/* Infinite loop */
	for (;;) {
//		//test1
		osDelay(10);
 8000852:	200a      	movs	r0, #10
 8000854:	f008 fc7c 	bl	8009150 <osDelay>
 8000858:	e7fb      	b.n	8000852 <Start_Hid_Task+0x3a>
 800085a:	bf00      	nop
 800085c:	20001c20 	.word	0x20001c20

08000860 <Start_Usb_Task>:
 	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f008 fc71 	bl	8009150 <osDelay>
		vTaskSuspend(NULL);
 800086e:	2000      	movs	r0, #0
 8000870:	f00a f8b8 	bl	800a9e4 <vTaskSuspend>
		osDelay(1);
 8000874:	e7f8      	b.n	8000868 <Start_Usb_Task+0x8>

08000876 <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 800087e:	2000      	movs	r0, #0
 8000880:	f00a f8b0 	bl	800a9e4 <vTaskSuspend>
	//osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f008 fc63 	bl	8009150 <osDelay>
 800088a:	e7fb      	b.n	8000884 <Start_Mouse_Task+0xe>

0800088c <init_hid>:
//	(hid_state.mouseHID.buttons) ?
//			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);
//
//}

uint8_t init_hid(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <init_hid+0x20>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <init_hid+0x20>)
 8000898:	2200      	movs	r2, #0
 800089a:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <init_hid+0x20>)
 800089e:	2202      	movs	r2, #2
 80008a0:	771a      	strb	r2, [r3, #28]
	return 0;
 80008a2:	2300      	movs	r3, #0
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20001c6c 	.word	0x20001c6c

080008b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0310 	add.w	r3, r7, #16
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c4:	4a19      	ldr	r2, [pc, #100]	; (800092c <MX_GPIO_Init+0x7c>)
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_GPIO_Init+0x7c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_GPIO_Init+0x7c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0320 	and.w	r3, r3, #32
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_GPIO_Init+0x7c>)
 80008de:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_GPIO_Init+0x7c>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f043 0308 	orr.w	r3, r3, #8
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_GPIO_Init+0x7c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0308 	and.w	r3, r3, #8
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <MX_GPIO_Init+0x7c>)
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_GPIO_Init+0x7c>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_GPIO_Init+0x7c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800090c:	2302      	movs	r3, #2
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000914:	2301      	movs	r3, #1
 8000916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0x80>)
 8000920:	f000 fc00 	bl	8001124 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40021000 	.word	0x40021000
 8000930:	40010c00 	.word	0x40010c00

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000938:	f000 fac8 	bl	8000ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093c:	f000 f80d 	bl	800095a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000940:	f7ff ffb6 	bl	80008b0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000944:	f7ff fc04 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 8000948:	f000 f95e 	bl	8000c08 <MX_TIM1_Init>
  MX_FATFS_Init();
 800094c:	f005 fdda 	bl	8006504 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000950:	f7ff fc62 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000954:	f008 fba9 	bl	80090aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000958:	e7fe      	b.n	8000958 <main+0x24>

0800095a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b094      	sub	sp, #80	; 0x50
 800095e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000964:	2228      	movs	r2, #40	; 0x28
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f00b fe32 	bl	800c5d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098a:	2301      	movs	r3, #1
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 fa21 	bl	8002df8 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009bc:	f000 f83a 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2101      	movs	r1, #1
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fc8b 	bl	80032f8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009e8:	f000 f824 	bl	8000a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009ec:	2310      	movs	r3, #16
 80009ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80009f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fe35 	bl	8003668 <HAL_RCCEx_PeriphCLKConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a04:	f000 f816 	bl	8000a34 <Error_Handler>
  }
}
 8000a08:	bf00      	nop
 8000a0a:	3750      	adds	r7, #80	; 0x50
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a22:	f000 fa69 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40000800 	.word	0x40000800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <Error_Handler+0x6>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a42:	4a18      	ldr	r2, [pc, #96]	; (8000aa4 <HAL_MspInit+0x68>)
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_MspInit+0x68>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_MspInit+0x68>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4a12      	ldr	r2, [pc, #72]	; (8000aa4 <HAL_MspInit+0x68>)
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_MspInit+0x68>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x68>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210f      	movs	r1, #15
 8000a76:	f06f 0001 	mvn.w	r0, #1
 8000a7a:	f000 fb0c 	bl	8001096 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <HAL_MspInit+0x6c>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_MspInit+0x6c>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40010000 	.word	0x40010000

08000aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	201e      	movs	r0, #30
 8000ac2:	f000 fae8 	bl	8001096 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ac6:	201e      	movs	r0, #30
 8000ac8:	f000 fb01 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000acc:	4a1f      	ldr	r2, [pc, #124]	; (8000b4c <HAL_InitTick+0xa0>)
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_InitTick+0xa0>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	61d3      	str	r3, [r2, #28]
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_InitTick+0xa0>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ae4:	f107 0210 	add.w	r2, r7, #16
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f002 fd6c 	bl	80035cc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000af4:	f002 fd56 	bl	80035a4 <HAL_RCC_GetPCLK1Freq>
 8000af8:	4603      	mov	r3, r0
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	4a13      	ldr	r2, [pc, #76]	; (8000b50 <HAL_InitTick+0xa4>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	0c9b      	lsrs	r3, r3, #18
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <HAL_InitTick+0xac>)
 8000b10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b18:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b2e:	f002 fe51 	bl	80037d4 <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d104      	bne.n	8000b42 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <HAL_InitTick+0xa8>)
 8000b3a:	f002 fe9b 	bl	8003874 <HAL_TIM_Base_Start_IT>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3730      	adds	r7, #48	; 0x30
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	431bde83 	.word	0x431bde83
 8000b54:	20001c90 	.word	0x20001c90
 8000b58:	40000800 	.word	0x40000800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
	...

08000b88 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b8e:	f000 fd54 	bl	800163a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20003690 	.word	0x20003690

08000b9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM4_IRQHandler+0x10>)
 8000ba2:	f002 feb9 	bl	8003918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20001c90 	.word	0x20001c90

08000bb0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x50>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x16>
		heap_end = &end;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <_sbrk+0x50>)
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <_sbrk+0x54>)
 8000bc4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <_sbrk+0x50>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <_sbrk+0x50>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	466a      	mov	r2, sp
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d907      	bls.n	8000bea <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000bda:	f00b fcc5 	bl	800c568 <__errno>
 8000bde:	4602      	mov	r2, r0
 8000be0:	230c      	movs	r3, #12
 8000be2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	e006      	b.n	8000bf8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <_sbrk+0x50>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <_sbrk+0x50>)
 8000bf4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200009e8 	.word	0x200009e8
 8000c04:	20003980 	.word	0x20003980

08000c08 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c26:	4a1f      	ldr	r2, [pc, #124]	; (8000ca4 <MX_TIM1_Init+0x9c>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c52:	f002 fdbf 	bl	80037d4 <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f7ff feea 	bl	8000a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c6e:	f002 ff5b 	bl	8003b28 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c78:	f7ff fedc 	bl	8000a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c84:	463b      	mov	r3, r7
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_TIM1_Init+0x98>)
 8000c8a:	f003 f921 	bl	8003ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c94:	f7ff fece 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20001cd8 	.word	0x20001cd8
 8000ca4:	40012c00 	.word	0x40012c00

08000ca8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x34>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <HAL_TIM_Base_MspInit+0x38>)
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_TIM_Base_MspInit+0x38>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc4:	6193      	str	r3, [r2, #24]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_TIM_Base_MspInit+0x38>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40012c00 	.word	0x40012c00
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000cee:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d14:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000d16:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000d2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000d42:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bc80      	pop	{r7}
 8000d4c:	4770      	bx	lr
	...

08000d50 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	4613      	mov	r3, r2
 8000d62:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000d6e:	89bb      	ldrh	r3, [r7, #12]
 8000d70:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61bb      	str	r3, [r7, #24]
 8000d76:	e00f      	b.n	8000d98 <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000d78:	69fa      	ldr	r2, [r7, #28]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <STORAGE_Read_FS+0x60>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	7dfa      	ldrb	r2, [r7, #23]
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	3301      	adds	r3, #1
 8000d96:	61bb      	str	r3, [r7, #24]
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	025b      	lsls	r3, r3, #9
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8e9      	bhi.n	8000d78 <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000da4:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	20001d20 	.word	0x20001d20

08000db4 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	025b      	lsls	r3, r3, #9
 8000dcc:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	e00e      	b.n	8000df6 <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	4413      	add	r3, r2
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4413      	add	r3, r2
 8000de8:	7dfa      	ldrb	r2, [r7, #23]
 8000dea:	b2d1      	uxtb	r1, r2
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <STORAGE_Write_FS+0x64>)
 8000dee:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	3301      	adds	r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	89bb      	ldrh	r3, [r7, #12]
 8000df8:	025b      	lsls	r3, r3, #9
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d8ea      	bhi.n	8000dd8 <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f814 	bl	8000e30 <eof_check>
	st_info.blk_len = blk_len;
 8000e08:	89bb      	ldrh	r3, [r7, #12]
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <STORAGE_Write_FS+0x68>)
 8000e0c:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000e0e:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20001d20 	.word	0x20001d20
 8000e1c:	200009ec 	.word	0x200009ec

08000e20 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000e24:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
	...

08000e30 <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <eof_check+0x84>)
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	8019      	strh	r1, [r3, #0]
 8000e44:	3302      	adds	r3, #2
 8000e46:	0c12      	lsrs	r2, r2, #16
 8000e48:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	e022      	b.n	8000e98 <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e017      	b.n	8000e88 <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a16      	ldr	r2, [pc, #88]	; (8000eb8 <eof_check+0x88>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	f107 010c 	add.w	r1, r7, #12
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	440b      	add	r3, r1
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d10e      	bne.n	8000e90 <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d803      	bhi.n	8000e80 <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	e003      	b.n	8000e88 <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000e80:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <eof_check+0x8c>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e011      	b.n	8000eac <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d9e4      	bls.n	8000e58 <eof_check+0x28>
 8000e8e:	e000      	b.n	8000e92 <eof_check+0x62>
				break;
 8000e90:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	01db      	lsls	r3, r3, #7
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	441a      	add	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8d2      	bhi.n	8000e52 <eof_check+0x22>
			return;
		}	
	}
	
}
 8000eac:	371c      	adds	r7, #28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	0800cf1c 	.word	0x0800cf1c
 8000eb8:	20001d20 	.word	0x20001d20
 8000ebc:	200009ec 	.word	0x200009ec

08000ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_Init+0x28>)
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x28>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f8cf 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f7ff fde2 	bl	8000aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff fda8 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	2000005c 	.word	0x2000005c
 8000f18:	20002d20 	.word	0x20002d20

08000f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20002d20 	.word	0x20002d20

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_EnableIRQ+0x34>)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	095b      	lsrs	r3, r3, #5
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	f002 021f 	and.w	r2, r2, #31
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	490d      	ldr	r1, [pc, #52]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	4909      	ldr	r1, [pc, #36]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	2201      	movs	r2, #1
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	1e5a      	subs	r2, r3, #1
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	401a      	ands	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001066:	2101      	movs	r1, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	1e59      	subs	r1, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff51 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff66 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ffb4 	bl	8001020 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff83 	bl	8000fcc <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff59 	bl	8000f94 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e00e      	b.n	800111a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	795b      	ldrb	r3, [r3, #5]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f833 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b08b      	sub	sp, #44	; 0x2c
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e127      	b.n	8001388 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001138:	2201      	movs	r2, #1
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	429a      	cmp	r2, r3
 8001152:	f040 8116 	bne.w	8001382 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b12      	cmp	r3, #18
 800115c:	d034      	beq.n	80011c8 <HAL_GPIO_Init+0xa4>
 800115e:	2b12      	cmp	r3, #18
 8001160:	d80d      	bhi.n	800117e <HAL_GPIO_Init+0x5a>
 8001162:	2b02      	cmp	r3, #2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x9a>
 8001166:	2b02      	cmp	r3, #2
 8001168:	d804      	bhi.n	8001174 <HAL_GPIO_Init+0x50>
 800116a:	2b00      	cmp	r3, #0
 800116c:	d031      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
 800116e:	2b01      	cmp	r3, #1
 8001170:	d01c      	beq.n	80011ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001172:	e048      	b.n	8001206 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001174:	2b03      	cmp	r3, #3
 8001176:	d043      	beq.n	8001200 <HAL_GPIO_Init+0xdc>
 8001178:	2b11      	cmp	r3, #17
 800117a:	d01b      	beq.n	80011b4 <HAL_GPIO_Init+0x90>
          break;
 800117c:	e043      	b.n	8001206 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800117e:	4a89      	ldr	r2, [pc, #548]	; (80013a4 <HAL_GPIO_Init+0x280>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d026      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
 8001184:	4a87      	ldr	r2, [pc, #540]	; (80013a4 <HAL_GPIO_Init+0x280>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d806      	bhi.n	8001198 <HAL_GPIO_Init+0x74>
 800118a:	4a87      	ldr	r2, [pc, #540]	; (80013a8 <HAL_GPIO_Init+0x284>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d020      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
 8001190:	4a86      	ldr	r2, [pc, #536]	; (80013ac <HAL_GPIO_Init+0x288>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d01d      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
          break;
 8001196:	e036      	b.n	8001206 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001198:	4a85      	ldr	r2, [pc, #532]	; (80013b0 <HAL_GPIO_Init+0x28c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d019      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
 800119e:	4a85      	ldr	r2, [pc, #532]	; (80013b4 <HAL_GPIO_Init+0x290>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d016      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
 80011a4:	4a84      	ldr	r2, [pc, #528]	; (80013b8 <HAL_GPIO_Init+0x294>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xae>
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e028      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e023      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01e      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e019      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e012      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e008      	b.n	8001206 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e002      	b.n	8001206 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2bff      	cmp	r3, #255	; 0xff
 800120a:	d801      	bhi.n	8001210 <HAL_GPIO_Init+0xec>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	e001      	b.n	8001214 <HAL_GPIO_Init+0xf0>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3304      	adds	r3, #4
 8001214:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	2bff      	cmp	r3, #255	; 0xff
 800121a:	d802      	bhi.n	8001222 <HAL_GPIO_Init+0xfe>
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x104>
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3b08      	subs	r3, #8
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	210f      	movs	r1, #15
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	401a      	ands	r2, r3
 800123a:	6a39      	ldr	r1, [r7, #32]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	431a      	orrs	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 8096 	beq.w	8001382 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001256:	4a59      	ldr	r2, [pc, #356]	; (80013bc <HAL_GPIO_Init+0x298>)
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_GPIO_Init+0x298>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b56      	ldr	r3, [pc, #344]	; (80013bc <HAL_GPIO_Init+0x298>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800126e:	4a54      	ldr	r2, [pc, #336]	; (80013c0 <HAL_GPIO_Init+0x29c>)
 8001270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x2a0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x19e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x2a4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x19a>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x2a8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x196>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_GPIO_Init+0x2ac>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x192>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x1a0>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e004      	b.n	80012c4 <HAL_GPIO_Init+0x1a0>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e002      	b.n	80012c4 <HAL_GPIO_Init+0x1a0>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x1a0>
 80012c2:	2300      	movs	r3, #0
 80012c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c6:	f002 0203 	and.w	r2, r2, #3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	4093      	lsls	r3, r2
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d4:	493a      	ldr	r1, [pc, #232]	; (80013c0 <HAL_GPIO_Init+0x29c>)
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012ee:	4939      	ldr	r1, [pc, #228]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 80012f0:	4b38      	ldr	r3, [pc, #224]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
 80012fa:	e006      	b.n	800130a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fc:	4935      	ldr	r1, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4013      	ands	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001316:	492f      	ldr	r1, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	4013      	ands	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800133e:	4925      	ldr	r1, [pc, #148]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001340:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800134c:	4921      	ldr	r1, [pc, #132]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 800134e:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4013      	ands	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001366:	491b      	ldr	r1, [pc, #108]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	60cb      	str	r3, [r1, #12]
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001374:	4917      	ldr	r1, [pc, #92]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_GPIO_Init+0x2b0>)
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	4013      	ands	r3, r2
 8001380:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	3301      	adds	r3, #1
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	f47f aed0 	bne.w	8001138 <HAL_GPIO_Init+0x14>
  }
}
 8001398:	bf00      	nop
 800139a:	372c      	adds	r7, #44	; 0x2c
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	10210000 	.word	0x10210000
 80013a8:	10110000 	.word	0x10110000
 80013ac:	10120000 	.word	0x10120000
 80013b0:	10310000 	.word	0x10310000
 80013b4:	10320000 	.word	0x10320000
 80013b8:	10220000 	.word	0x10220000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000
 80013c4:	40010800 	.word	0x40010800
 80013c8:	40010c00 	.word	0x40010c00
 80013cc:	40011000 	.word	0x40011000
 80013d0:	40011400 	.word	0x40011400
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b08b      	sub	sp, #44	; 0x2c
 80013dc:	af06      	add	r7, sp, #24
 80013de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0fd      	b.n	80015e6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d106      	bne.n	8001404 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f00a fdcc 	bl	800bf9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2203      	movs	r2, #3
 8001408:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fdf3 	bl	8003ffc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	687e      	ldr	r6, [r7, #4]
 800141e:	466d      	mov	r5, sp
 8001420:	f106 0410 	add.w	r4, r6, #16
 8001424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	602b      	str	r3, [r5, #0]
 800142c:	1d33      	adds	r3, r6, #4
 800142e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001430:	6838      	ldr	r0, [r7, #0]
 8001432:	f002 fdbd 	bl	8003fb0 <USB_CoreInit>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0ce      	b.n	80015e6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fdee 	bl	8004030 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	e04c      	b.n	80014f4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3301      	adds	r3, #1
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	440b      	add	r3, r1
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	b298      	uxth	r0, r3
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	3336      	adds	r3, #54	; 0x36
 8001498:	4602      	mov	r2, r0
 800149a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	440b      	add	r3, r1
 80014ac:	3303      	adds	r3, #3
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	3338      	adds	r3, #56	; 0x38
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	333c      	adds	r3, #60	; 0x3c
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014da:	7bfa      	ldrb	r2, [r7, #15]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	440b      	add	r3, r1
 80014e8:	3340      	adds	r3, #64	; 0x40
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	3301      	adds	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3ad      	bcc.n	800145a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]
 8001502:	e044      	b.n	800158e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800151a:	7bfa      	ldrb	r2, [r7, #15]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	440b      	add	r3, r1
 8001528:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001546:	7bfa      	ldrb	r2, [r7, #15]
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	440b      	add	r3, r1
 8001554:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800155c:	7bfa      	ldrb	r2, [r7, #15]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	440b      	add	r3, r1
 800156a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	3301      	adds	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	429a      	cmp	r2, r3
 8001596:	d3b5      	bcc.n	8001504 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	687e      	ldr	r6, [r7, #4]
 80015a0:	466d      	mov	r5, sp
 80015a2:	f106 0410 	add.w	r4, r6, #16
 80015a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	602b      	str	r3, [r5, #0]
 80015ae:	1d33      	adds	r3, r6, #4
 80015b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f002 fd48 	bl	8004048 <USB_DevInit>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2202      	movs	r2, #2
 80015c2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00d      	b.n	80015e6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 fed9 	bl	8006396 <USB_DevDisconnect>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_PCD_Start+0x16>
 8001600:	2302      	movs	r3, #2
 8001602:	e016      	b.n	8001632 <HAL_PCD_Start+0x44>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f002 fcdd 	bl	8003fd0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001616:	2101      	movs	r1, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f00a ff48 	bl	800c4ae <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f004 fead 	bl	8006382 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b088      	sub	sp, #32
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f004 feaf 	bl	80063aa <USB_ReadInterrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001656:	d102      	bne.n	800165e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fb8e 	bl	8001d7a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f004 fea1 	bl	80063aa <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d112      	bne.n	800169a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001680:	b292      	uxth	r2, r2
 8001682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001686:	b292      	uxth	r2, r2
 8001688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f00a fd00 	bl	800c092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001692:	2100      	movs	r1, #0
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f925 	bl	80018e4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fe83 	bl	80063aa <USB_ReadInterrupts>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016ae:	d10b      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80016bc:	b292      	uxth	r2, r2
 80016be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016c2:	b292      	uxth	r2, r2
 80016c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f004 fe6c 	bl	80063aa <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016dc:	d10b      	bne.n	80016f6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80016ea:	b292      	uxth	r2, r2
 80016ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016f0:	b292      	uxth	r2, r2
 80016f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fe55 	bl	80063aa <USB_ReadInterrupts>
 8001700:	4603      	mov	r3, r0
 8001702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170a:	d126      	bne.n	800175a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001718:	b292      	uxth	r2, r2
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	b292      	uxth	r2, r2
 8001720:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001730:	b292      	uxth	r2, r2
 8001732:	f022 0208 	bic.w	r2, r2, #8
 8001736:	b292      	uxth	r2, r2
 8001738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f00a fce1 	bl	800c104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6812      	ldr	r2, [r2, #0]
 800174a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800174e:	b292      	uxth	r2, r2
 8001750:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001754:	b292      	uxth	r2, r2
 8001756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f004 fe23 	bl	80063aa <USB_ReadInterrupts>
 8001764:	4603      	mov	r3, r0
 8001766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800176a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800176e:	f040 8084 	bne.w	800187a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001772:	2300      	movs	r3, #0
 8001774:	77fb      	strb	r3, [r7, #31]
 8001776:	e011      	b.n	800179c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001778:	7ffb      	ldrb	r3, [r7, #31]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4611      	mov	r1, r2
 8001780:	7ffa      	ldrb	r2, [r7, #31]
 8001782:	0092      	lsls	r2, r2, #2
 8001784:	440a      	add	r2, r1
 8001786:	8812      	ldrh	r2, [r2, #0]
 8001788:	b292      	uxth	r2, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	f107 0120 	add.w	r1, r7, #32
 8001790:	440b      	add	r3, r1
 8001792:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001796:	7ffb      	ldrb	r3, [r7, #31]
 8001798:	3301      	adds	r3, #1
 800179a:	77fb      	strb	r3, [r7, #31]
 800179c:	7ffb      	ldrb	r3, [r7, #31]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d9ea      	bls.n	8001778 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80017ae:	b292      	uxth	r2, r2
 80017b0:	f042 0201 	orr.w	r2, r2, #1
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80017c6:	b292      	uxth	r2, r2
 80017c8:	f022 0201 	bic.w	r2, r2, #1
 80017cc:	b292      	uxth	r2, r2
 80017ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80017d2:	bf00      	nop
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f6      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80017f2:	b292      	uxth	r2, r2
 80017f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017f8:	b292      	uxth	r2, r2
 80017fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	77fb      	strb	r3, [r7, #31]
 8001802:	e010      	b.n	8001826 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	441a      	add	r2, r3
 8001810:	7ffb      	ldrb	r3, [r7, #31]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	f107 0120 	add.w	r1, r7, #32
 8001818:	440b      	add	r3, r1
 800181a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800181e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	3301      	adds	r3, #1
 8001824:	77fb      	strb	r3, [r7, #31]
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b07      	cmp	r3, #7
 800182a:	d9eb      	bls.n	8001804 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001838:	b292      	uxth	r2, r2
 800183a:	f042 0208 	orr.w	r2, r2, #8
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001850:	b292      	uxth	r2, r2
 8001852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001856:	b292      	uxth	r2, r2
 8001858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001868:	b292      	uxth	r2, r2
 800186a:	f042 0204 	orr.w	r2, r2, #4
 800186e:	b292      	uxth	r2, r2
 8001870:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f00a fc2b 	bl	800c0d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f004 fd93 	bl	80063aa <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800188a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800188e:	d10e      	bne.n	80018ae <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800189c:	b292      	uxth	r2, r2
 800189e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018a2:	b292      	uxth	r2, r2
 80018a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f00a fbe4 	bl	800c076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f004 fd79 	bl	80063aa <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c2:	d10b      	bne.n	80018dc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80018d0:	b292      	uxth	r2, r2
 80018d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80018dc:	bf00      	nop
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d101      	bne.n	80018fe <HAL_PCD_SetAddress+0x1a>
 80018fa:	2302      	movs	r3, #2
 80018fc:	e013      	b.n	8001926 <HAL_PCD_SetAddress+0x42>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fd20 	bl	800635c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	4608      	mov	r0, r1
 8001938:	4611      	mov	r1, r2
 800193a:	461a      	mov	r2, r3
 800193c:	4603      	mov	r3, r0
 800193e:	70fb      	strb	r3, [r7, #3]
 8001940:	460b      	mov	r3, r1
 8001942:	803b      	strh	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800194c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001950:	2b00      	cmp	r3, #0
 8001952:	da0e      	bge.n	8001972 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	705a      	strb	r2, [r3, #1]
 8001970:	e00e      	b.n	8001990 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 0207 	and.w	r2, r3, #7
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800199c:	883a      	ldrh	r2, [r7, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	78ba      	ldrb	r2, [r7, #2]
 80019a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	785b      	ldrb	r3, [r3, #1]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019ba:	78bb      	ldrb	r3, [r7, #2]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d102      	bne.n	80019c6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_PCD_EP_Open+0xa6>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e00e      	b.n	80019f2 <HAL_PCD_EP_Open+0xc4>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 fb66 	bl	80040b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80019f0:	7afb      	ldrb	r3, [r7, #11]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da0e      	bge.n	8001a2c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	705a      	strb	r2, [r3, #1]
 8001a2a:	e00e      	b.n	8001a4a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	f003 0207 	and.w	r2, r3, #7
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_PCD_EP_Close+0x6a>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e00e      	b.n	8001a82 <HAL_PCD_EP_Close+0x88>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fe82 	bl	800477c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	460b      	mov	r3, r1
 8001a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9a:	7afb      	ldrb	r3, [r7, #11]
 8001a9c:	f003 0207 	and.w	r2, r3, #7
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6979      	ldr	r1, [r7, #20]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 f834 	bl	8004b54 <USB_EPStartXfer>
 8001aec:	e005      	b.n	8001afa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f82d 	bl	8004b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 0207 	and.w	r2, r3, #7
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d106      	bne.n	8001ba2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 ffda 	bl	8004b54 <USB_EPStartXfer>
 8001ba0:	e005      	b.n	8001bae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 ffd3 	bl	8004b54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d901      	bls.n	8001bd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e04c      	b.n	8001c70 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	da0e      	bge.n	8001bfc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	1c5a      	adds	r2, r3, #1
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	705a      	strb	r2, [r3, #1]
 8001bfa:	e00c      	b.n	8001c16 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_PCD_EP_SetStall+0x7e>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e01c      	b.n	8001c70 <HAL_PCD_EP_SetStall+0xb8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fa8c 	bl	8006162 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d108      	bne.n	8001c66 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f004 fbb1 	bl	80063c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	f003 020f 	and.w	r2, r3, #15
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d901      	bls.n	8001c96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e040      	b.n	8001d18 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da0e      	bge.n	8001cbc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	705a      	strb	r2, [r3, #1]
 8001cba:	e00e      	b.n	8001cda <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 0207 	and.w	r2, r3, #7
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ce0:	78fb      	ldrb	r3, [r7, #3]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_PCD_EP_ClrStall+0x82>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e00e      	b.n	8001d18 <HAL_PCD_EP_ClrStall+0xa0>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68f9      	ldr	r1, [r7, #12]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 fa7a 	bl	8006202 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_PCD_EP_Flush+0x1a>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e01b      	b.n	8001d72 <HAL_PCD_EP_Flush+0x52>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da09      	bge.n	8001d5e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f002 f996 	bl	8004088 <USB_FlushTxFifo>
 8001d5c:	e004      	b.n	8001d68 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 f99b 	bl	800409e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b08e      	sub	sp, #56	; 0x38
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d82:	e2ec      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001d9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8161 	bne.w	8002066 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d152      	bne.n	8001e54 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3328      	adds	r3, #40	; 0x28
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	3302      	adds	r3, #2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	441a      	add	r2, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001e12:	2100      	movs	r1, #0
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f00a f914 	bl	800c042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 829b 	beq.w	800235e <PCD_EP_ISR_Handler+0x5e4>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 8296 	bne.w	800235e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001e42:	b2d2      	uxtb	r2, r2
 8001e44:	b292      	uxth	r2, r2
 8001e46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e52:	e284      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d034      	beq.n	8001ed8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4413      	add	r3, r2
 8001e82:	3306      	adds	r3, #6
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f004 fada 	bl	8006466 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	843b      	strh	r3, [r7, #32]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	8c3a      	ldrh	r2, [r7, #32]
 8001ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ecc:	b292      	uxth	r2, r2
 8001ece:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f00a f889 	bl	800bfe8 <HAL_PCD_SetupStageCallback>
 8001ed6:	e242      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ed8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f280 823e 	bge.w	800235e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eee:	4013      	ands	r3, r2
 8001ef0:	83fb      	strh	r3, [r7, #30]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	8bfa      	ldrh	r2, [r7, #30]
 8001ef8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001efc:	b292      	uxth	r2, r2
 8001efe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	3306      	adds	r3, #6
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d019      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x1ee>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d015      	beq.n	8001f68 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	6959      	ldr	r1, [r3, #20]
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f004 fa8a 	bl	8006466 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	441a      	add	r2, r3
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f60:	2100      	movs	r1, #0
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f00a f852 	bl	800c00c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f040 81f2 	bne.w	800235e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4413      	add	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d112      	bne.n	8001fc8 <PCD_EP_ISR_Handler+0x24e>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	801a      	strh	r2, [r3, #0]
 8001fc6:	e02f      	b.n	8002028 <PCD_EP_ISR_Handler+0x2ae>
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8001fce:	d813      	bhi.n	8001ff8 <PCD_EP_ISR_Handler+0x27e>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	085b      	lsrs	r3, r3, #1
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <PCD_EP_ISR_Handler+0x270>
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	801a      	strh	r2, [r3, #0]
 8001ff6:	e017      	b.n	8002028 <PCD_EP_ISR_Handler+0x2ae>
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <PCD_EP_ISR_Handler+0x298>
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	3b01      	subs	r3, #1
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
 8002012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002014:	b29b      	uxth	r3, r3
 8002016:	029b      	lsls	r3, r3, #10
 8002018:	b29b      	uxth	r3, r3
 800201a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002022:	b29a      	uxth	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002038:	827b      	strh	r3, [r7, #18]
 800203a:	8a7b      	ldrh	r3, [r7, #18]
 800203c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002040:	827b      	strh	r3, [r7, #18]
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002048:	827b      	strh	r3, [r7, #18]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	8a7b      	ldrh	r3, [r7, #18]
 8002050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002060:	b29b      	uxth	r3, r3
 8002062:	8013      	strh	r3, [r2, #0]
 8002064:	e17b      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002078:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800207c:	2b00      	cmp	r3, #0
 800207e:	f280 80ea 	bge.w	8002256 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002098:	4013      	ands	r3, r2
 800209a:	823b      	strh	r3, [r7, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	8a3a      	ldrh	r2, [r7, #16]
 80020ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020b0:	b292      	uxth	r2, r2
 80020b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80020b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4413      	add	r3, r2
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	7b1b      	ldrb	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d122      	bne.n	8002118 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	3306      	adds	r3, #6
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	6812      	ldr	r2, [r2, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80020fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	6959      	ldr	r1, [r3, #20]
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	88da      	ldrh	r2, [r3, #6]
 8002110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002112:	f004 f9a8 	bl	8006466 <USB_ReadPMA>
 8002116:	e07c      	b.n	8002212 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d108      	bne.n	8002132 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002122:	461a      	mov	r2, r3
 8002124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f927 	bl	800237a <HAL_PCD_EP_DB_Receive>
 800212c:	4603      	mov	r3, r0
 800212e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002130:	e06f      	b.n	8002212 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214c:	81fb      	strh	r3, [r7, #14]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800216e:	b29b      	uxth	r3, r3
 8002170:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d021      	beq.n	80021d0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002194:	b29b      	uxth	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	3302      	adds	r3, #2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d02a      	beq.n	8002212 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	891a      	ldrh	r2, [r3, #8]
 80021c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021ca:	f004 f94c 	bl	8006466 <USB_ReadPMA>
 80021ce:	e020      	b.n	8002212 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d8:	b29b      	uxth	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	3306      	adds	r3, #6
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80021fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	6959      	ldr	r1, [r3, #20]
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	895a      	ldrh	r2, [r3, #10]
 800220c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800220e:	f004 f92a 	bl	8006466 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	69da      	ldr	r2, [r3, #28]
 8002216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002218:	441a      	add	r2, r3
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002224:	441a      	add	r2, r3
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <PCD_EP_ISR_Handler+0x4c2>
 8002232:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d206      	bcs.n	800224a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f009 fee2 	bl	800c00c <HAL_PCD_DataOutStageCallback>
 8002248:	e005      	b.n	8002256 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002250:	4618      	mov	r0, r3
 8002252:	f002 fc7f 	bl	8004b54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225c:	2b00      	cmp	r3, #0
 800225e:	d07e      	beq.n	800235e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002260:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	81bb      	strh	r3, [r7, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	441a      	add	r2, r3
 800229e:	89bb      	ldrh	r3, [r7, #12]
 80022a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	78db      	ldrb	r3, [r3, #3]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d00c      	beq.n	80022ce <PCD_EP_ISR_Handler+0x554>
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	78db      	ldrb	r3, [r3, #3]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d146      	bne.n	8002352 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80022c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d141      	bne.n	8002352 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	3302      	adds	r3, #2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f6:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	897b      	ldrh	r3, [r7, #10]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d906      	bls.n	8002310 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	897b      	ldrh	r3, [r7, #10]
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	619a      	str	r2, [r3, #24]
 800230e:	e002      	b.n	8002316 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	4619      	mov	r1, r3
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f009 fe8c 	bl	800c042 <HAL_PCD_DataInStageCallback>
 800232a:	e018      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	897b      	ldrh	r3, [r7, #10]
 8002332:	441a      	add	r2, r3
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	897b      	ldrh	r3, [r7, #10]
 800233e:	441a      	add	r2, r3
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fc02 	bl	8004b54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002350:	e005      	b.n	800235e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002354:	461a      	mov	r2, r3
 8002356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f91b 	bl	8002594 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002366:	b29b      	uxth	r3, r3
 8002368:	b21b      	sxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	f6ff ad0a 	blt.w	8001d84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3738      	adds	r7, #56	; 0x38
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b088      	sub	sp, #32
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	4613      	mov	r3, r2
 8002386:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d07e      	beq.n	8002490 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	3302      	adds	r3, #2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ba:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	8bfb      	ldrh	r3, [r7, #30]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d306      	bcc.n	80023d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	8bfb      	ldrh	r3, [r7, #30]
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e002      	b.n	80023da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d123      	bne.n	800242a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fc:	83bb      	strh	r3, [r7, #28]
 80023fe:	8bbb      	ldrh	r3, [r7, #28]
 8002400:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002404:	83bb      	strh	r3, [r7, #28]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	441a      	add	r2, r3
 8002414:	8bbb      	ldrh	r3, [r7, #28]
 8002416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002426:	b29b      	uxth	r3, r3
 8002428:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01f      	beq.n	8002474 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	837b      	strh	r3, [r7, #26]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	8b7b      	ldrh	r3, [r7, #26]
 8002460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800246c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8087 	beq.w	800258a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6959      	ldr	r1, [r3, #20]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	891a      	ldrh	r2, [r3, #8]
 8002488:	8bfb      	ldrh	r3, [r7, #30]
 800248a:	f003 ffec 	bl	8006466 <USB_ReadPMA>
 800248e:	e07c      	b.n	800258a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002498:	b29b      	uxth	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	3306      	adds	r3, #6
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	8bfb      	ldrh	r3, [r7, #30]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d306      	bcc.n	80024d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	8bfb      	ldrh	r3, [r7, #30]
 80024ca:	1ad2      	subs	r2, r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	619a      	str	r2, [r3, #24]
 80024d0:	e002      	b.n	80024d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d123      	bne.n	8002528 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	833b      	strh	r3, [r7, #24]
 80024fc:	8b3b      	ldrh	r3, [r7, #24]
 80024fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002502:	833b      	strh	r3, [r7, #24]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	8b3b      	ldrh	r3, [r7, #24]
 8002514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	b29b      	uxth	r3, r3
 8002526:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11f      	bne.n	8002572 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29b      	uxth	r3, r3
 8002544:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254c:	82fb      	strh	r3, [r7, #22]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	441a      	add	r2, r3
 800255c:	8afb      	ldrh	r3, [r7, #22]
 800255e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800256e:	b29b      	uxth	r3, r3
 8002570:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002572:	8bfb      	ldrh	r3, [r7, #30]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	895a      	ldrh	r2, [r3, #10]
 8002584:	8bfb      	ldrh	r3, [r7, #30]
 8002586:	f003 ff6e 	bl	8006466 <USB_ReadPMA>
    }
  }

  return count;
 800258a:	8bfb      	ldrh	r3, [r7, #30]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0a4      	sub	sp, #144	; 0x90
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	4613      	mov	r3, r2
 80025a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 81dd 	beq.w	8002968 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3302      	adds	r3, #2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d907      	bls.n	80025f6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80025ee:	1ad2      	subs	r2, r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	619a      	str	r2, [r3, #24]
 80025f4:	e002      	b.n	80025fc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f040 80bb 	bne.w	800277c <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d126      	bne.n	800265c <HAL_PCD_EP_DB_Transmit+0xc8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002622:	4413      	add	r3, r2
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800262e:	4413      	add	r3, r2
 8002630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002634:	67bb      	str	r3, [r7, #120]	; 0x78
 8002636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002640:	b29a      	uxth	r2, r3
 8002642:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	b29b      	uxth	r3, r3
 800264c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002654:	b29a      	uxth	r2, r3
 8002656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002658:	801a      	strh	r2, [r3, #0]
 800265a:	e01a      	b.n	8002692 <HAL_PCD_EP_DB_Transmit+0xfe>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d116      	bne.n	8002692 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	677b      	str	r3, [r7, #116]	; 0x74
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002678:	4413      	add	r3, r2
 800267a:	677b      	str	r3, [r7, #116]	; 0x74
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	011a      	lsls	r2, r3, #4
 8002682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002684:	4413      	add	r3, r2
 8002686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800268a:	673b      	str	r3, [r7, #112]	; 0x70
 800268c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800268e:	2200      	movs	r2, #0
 8002690:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d126      	bne.n	80026ee <HAL_PCD_EP_DB_Transmit+0x15a>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026b4:	4413      	add	r3, r2
 80026b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	011a      	lsls	r2, r3, #4
 80026be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c0:	4413      	add	r3, r2
 80026c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
 80026c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	e017      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x18a>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	785b      	ldrb	r3, [r3, #1]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d113      	bne.n	800271e <HAL_PCD_EP_DB_Transmit+0x18a>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002704:	4413      	add	r3, r2
 8002706:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	011a      	lsls	r2, r3, #4
 800270e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002710:	4413      	add	r3, r2
 8002712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002716:	663b      	str	r3, [r7, #96]	; 0x60
 8002718:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800271a:	2200      	movs	r2, #0
 800271c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f009 fc8c 	bl	800c042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 82f1 	beq.w	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002750:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800276a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800276e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002776:	b29b      	uxth	r3, r3
 8002778:	8013      	strh	r3, [r2, #0]
 800277a:	e2cd      	b.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d021      	beq.n	80027ca <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80027b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	f040 82a1 	bne.w	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80027de:	441a      	add	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80027ec:	441a      	add	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	6a1a      	ldr	r2, [r3, #32]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d30b      	bcc.n	8002816 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800280e:	1ad2      	subs	r2, r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	621a      	str	r2, [r3, #32]
 8002814:	e017      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d108      	bne.n	8002830 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 800281e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800282e:	e00a      	b.n	8002846 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d163      	bne.n	8002916 <HAL_PCD_EP_DB_Transmit+0x382>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	65bb      	str	r3, [r7, #88]	; 0x58
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002862:	4413      	add	r3, r2
 8002864:	65bb      	str	r3, [r7, #88]	; 0x58
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	011a      	lsls	r2, r3, #4
 800286c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800286e:	4413      	add	r3, r2
 8002870:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002874:	657b      	str	r3, [r7, #84]	; 0x54
 8002876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d112      	bne.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x310>
 800287e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002888:	b29a      	uxth	r2, r3
 800288a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289c:	b29a      	uxth	r2, r3
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	801a      	strh	r2, [r3, #0]
 80028a2:	e055      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a8:	2b3e      	cmp	r3, #62	; 0x3e
 80028aa:	d817      	bhi.n	80028dc <HAL_PCD_EP_DB_Transmit+0x348>
 80028ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b0:	085b      	lsrs	r3, r3, #1
 80028b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <HAL_PCD_EP_DB_Transmit+0x338>
 80028c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c6:	3301      	adds	r3, #1
 80028c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	029b      	lsls	r3, r3, #10
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	801a      	strh	r2, [r3, #0]
 80028da:	e039      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d104      	bne.n	80028fc <HAL_PCD_EP_DB_Transmit+0x368>
 80028f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002900:	b29b      	uxth	r3, r3
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	b29b      	uxth	r3, r3
 8002906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290e:	b29a      	uxth	r2, r3
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	801a      	strh	r2, [r3, #0]
 8002914:	e01c      	b.n	8002950 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	785b      	ldrb	r3, [r3, #1]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d118      	bne.n	8002950 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	653b      	str	r3, [r7, #80]	; 0x50
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292c:	b29b      	uxth	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002932:	4413      	add	r3, r2
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	011a      	lsls	r2, r3, #4
 800293c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293e:	4413      	add	r3, r2
 8002940:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	b29a      	uxth	r2, r3
 800294c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800294e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	6959      	ldr	r1, [r3, #20]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	891a      	ldrh	r2, [r3, #8]
 800295c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002960:	b29b      	uxth	r3, r3
 8002962:	f003 fd3c 	bl	80063de <USB_WritePMA>
 8002966:	e1d7      	b.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	3306      	adds	r3, #6
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4413      	add	r3, r2
 8002986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002990:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800299c:	429a      	cmp	r2, r3
 800299e:	d307      	bcc.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80029a8:	1ad2      	subs	r2, r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	619a      	str	r2, [r3, #24]
 80029ae:	e002      	b.n	80029b6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80b9 	bne.w	8002b32 <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d126      	bne.n	8002a16 <HAL_PCD_EP_DB_Transmit+0x482>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029dc:	4413      	add	r3, r2
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	011a      	lsls	r2, r3, #4
 80029e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e8:	4413      	add	r3, r2
 80029ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029ee:	647b      	str	r3, [r7, #68]	; 0x44
 80029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fe:	801a      	strh	r2, [r3, #0]
 8002a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	e01a      	b.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	785b      	ldrb	r3, [r3, #1]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d116      	bne.n	8002a4c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a32:	4413      	add	r3, r2
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	4413      	add	r3, r2
 8002a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	2200      	movs	r2, #0
 8002a4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d126      	bne.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x514>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	4413      	add	r3, r2
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	011a      	lsls	r2, r3, #4
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e017      	b.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x544>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d113      	bne.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x544>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	4413      	add	r3, r2
 8002ac0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	011a      	lsls	r2, r3, #4
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	4413      	add	r3, r2
 8002acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f009 faaf 	bl	800c042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8114 	bne.w	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	441a      	add	r2, r3
 8002b1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8013      	strh	r3, [r2, #0]
 8002b30:	e0f2      	b.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d11f      	bne.n	8002b7c <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b56:	853b      	strh	r3, [r7, #40]	; 0x28
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	441a      	add	r2, r3
 8002b66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	f040 80c8 	bne.w	8002d18 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002b90:	441a      	add	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002b9e:	441a      	add	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d30b      	bcc.n	8002bc8 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc0:	1ad2      	subs	r2, r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	621a      	str	r2, [r3, #32]
 8002bc6:	e017      	b.n	8002bf8 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 8002bd0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002bd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002be0:	e00a      	b.n	8002bf8 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2200      	movs	r2, #0
 8002bee:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	785b      	ldrb	r3, [r3, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d163      	bne.n	8002cce <HAL_PCD_EP_DB_Transmit+0x73a>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	623b      	str	r3, [r7, #32]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	623b      	str	r3, [r7, #32]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	011a      	lsls	r2, r3, #4
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	4413      	add	r3, r2
 8002c28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d112      	bne.n	8002c5c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	801a      	strh	r2, [r3, #0]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	e052      	b.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c60:	2b3e      	cmp	r3, #62	; 0x3e
 8002c62:	d817      	bhi.n	8002c94 <HAL_PCD_EP_DB_Transmit+0x700>
 8002c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d004      	beq.n	8002c84 <HAL_PCD_EP_DB_Transmit+0x6f0>
 8002c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	029b      	lsls	r3, r3, #10
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	e036      	b.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_PCD_EP_DB_Transmit+0x720>
 8002caa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	801a      	strh	r2, [r3, #0]
 8002ccc:	e019      	b.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d115      	bne.n	8002d02 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	011a      	lsls	r2, r3, #4
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6959      	ldr	r1, [r3, #20]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	895a      	ldrh	r2, [r3, #10]
 8002d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f003 fb63 	bl	80063de <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d32:	82fb      	strh	r3, [r7, #22]
 8002d34:	8afb      	ldrh	r3, [r7, #22]
 8002d36:	f083 0310 	eor.w	r3, r3, #16
 8002d3a:	82fb      	strh	r3, [r7, #22]
 8002d3c:	8afb      	ldrh	r3, [r7, #22]
 8002d3e:	f083 0320 	eor.w	r3, r3, #32
 8002d42:	82fb      	strh	r3, [r7, #22]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	441a      	add	r2, r3
 8002d52:	8afb      	ldrh	r3, [r7, #22]
 8002d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3790      	adds	r7, #144	; 0x90
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	817b      	strh	r3, [r7, #10]
 8002d80:	4613      	mov	r3, r2
 8002d82:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	897b      	ldrh	r3, [r7, #10]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	e009      	b.n	8002dbc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002da8:	897a      	ldrh	r2, [r7, #10]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002dbc:	893b      	ldrh	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	80da      	strh	r2, [r3, #6]
 8002dd0:	e00b      	b.n	8002dea <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e26c      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 8087 	beq.w	8002f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e18:	4b92      	ldr	r3, [pc, #584]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 030c 	and.w	r3, r3, #12
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d00c      	beq.n	8002e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e24:	4b8f      	ldr	r3, [pc, #572]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d112      	bne.n	8002e56 <HAL_RCC_OscConfig+0x5e>
 8002e30:	4b8c      	ldr	r3, [pc, #560]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3c:	d10b      	bne.n	8002e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3e:	4b89      	ldr	r3, [pc, #548]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x12c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d168      	bne.n	8002f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e246      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x76>
 8002e60:	4a80      	ldr	r2, [pc, #512]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e62:	4b80      	ldr	r3, [pc, #512]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	e02e      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4a7b      	ldr	r2, [pc, #492]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	4b7a      	ldr	r3, [pc, #488]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4a78      	ldr	r2, [pc, #480]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	4b77      	ldr	r3, [pc, #476]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xbc>
 8002e9a:	4a72      	ldr	r2, [pc, #456]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	4b71      	ldr	r3, [pc, #452]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xd4>
 8002eb4:	4a6b      	ldr	r2, [pc, #428]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	4b6b      	ldr	r3, [pc, #428]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	4b68      	ldr	r3, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe f822 	bl	8000f1c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe f81e 	bl	8000f1c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1fa      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b5d      	ldr	r3, [pc, #372]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xe4>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe f80e 	bl	8000f1c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe f80a 	bl	8000f1c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	; 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1e6      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b53      	ldr	r3, [pc, #332]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x10c>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f32:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f3e:	4b49      	ldr	r3, [pc, #292]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x18c>
 8002f4a:	4b46      	ldr	r3, [pc, #280]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b43      	ldr	r3, [pc, #268]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x176>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1ba      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	493d      	ldr	r1, [pc, #244]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	4b3c      	ldr	r3, [pc, #240]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fd ffc3 	bl	8000f1c <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fd ffbf 	bl	8000f1c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e19b      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	492a      	ldr	r1, [pc, #168]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7fd ffa2 	bl	8000f1c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fd ff9e 	bl	8000f1c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e17a      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03a      	beq.n	800307c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d019      	beq.n	8003042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003014:	f7fd ff82 	bl	8000f1c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fd ff7e 	bl	8000f1c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e15a      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <HAL_RCC_OscConfig+0x26c>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800303a:	2001      	movs	r0, #1
 800303c:	f000 faf6 	bl	800362c <RCC_Delay>
 8003040:	e01c      	b.n	800307c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_RCC_OscConfig+0x274>)
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fd ff68 	bl	8000f1c <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304e:	e00f      	b.n	8003070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003050:	f7fd ff64 	bl	8000f1c <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d908      	bls.n	8003070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e140      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	42420000 	.word	0x42420000
 800306c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b9e      	ldr	r3, [pc, #632]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e9      	bne.n	8003050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a6 	beq.w	80031d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b97      	ldr	r3, [pc, #604]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4a94      	ldr	r2, [pc, #592]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800309c:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	61d3      	str	r3, [r2, #28]
 80030a6:	4b91      	ldr	r3, [pc, #580]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b8e      	ldr	r3, [pc, #568]	; (80032f0 <HAL_RCC_OscConfig+0x4f8>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4a8b      	ldr	r2, [pc, #556]	; (80032f0 <HAL_RCC_OscConfig+0x4f8>)
 80030c4:	4b8a      	ldr	r3, [pc, #552]	; (80032f0 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fd ff25 	bl	8000f1c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fd ff21 	bl	8000f1c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	; 0x64
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e0fd      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b81      	ldr	r3, [pc, #516]	; (80032f0 <HAL_RCC_OscConfig+0x4f8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x312>
 80030fc:	4a7b      	ldr	r2, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80030fe:	4b7b      	ldr	r3, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6213      	str	r3, [r2, #32]
 8003108:	e02d      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x334>
 8003112:	4a76      	ldr	r2, [pc, #472]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003114:	4b75      	ldr	r3, [pc, #468]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	4a73      	ldr	r2, [pc, #460]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003120:	4b72      	ldr	r3, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6213      	str	r3, [r2, #32]
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x356>
 8003134:	4a6d      	ldr	r2, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003136:	4b6d      	ldr	r3, [pc, #436]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6213      	str	r3, [r2, #32]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003142:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6213      	str	r3, [r2, #32]
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x36e>
 800314e:	4a67      	ldr	r2, [pc, #412]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6213      	str	r3, [r2, #32]
 800315a:	4a64      	ldr	r2, [pc, #400]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800315c:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fd fed5 	bl	8000f1c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fd fed1 	bl	8000f1c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0ab      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b57      	ldr	r3, [pc, #348]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x37e>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd febf 	bl	8000f1c <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fd febb 	bl	8000f1c <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e095      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4a48      	ldr	r2, [pc, #288]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 8081 	beq.w	80032e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e0:	4b42      	ldr	r3, [pc, #264]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d061      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d146      	bne.n	8003282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_OscConfig+0x4fc>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fd fe8f 	bl	8000f1c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003202:	f7fd fe8b 	bl	8000f1c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e067      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d108      	bne.n	800323c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800322a:	4930      	ldr	r1, [pc, #192]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800323c:	482b      	ldr	r0, [pc, #172]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 800323e:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a19      	ldr	r1, [r3, #32]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	430b      	orrs	r3, r1
 8003250:	4313      	orrs	r3, r2
 8003252:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x4fc>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fd fe5f 	bl	8000f1c <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fe5b 	bl	8000f1c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e037      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003274:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x46a>
 8003280:	e02f      	b.n	80032e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <HAL_RCC_OscConfig+0x4fc>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fe48 	bl	8000f1c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003290:	f7fd fe44 	bl	8000f1c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e020      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x498>
 80032ae:	e018      	b.n	80032e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e013      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_OscConfig+0x4f4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d106      	bne.n	80032de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d001      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42420060 	.word	0x42420060

080032f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0d0      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800330c:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0207 	and.w	r2, r3, #7
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d210      	bcs.n	800333c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4967      	ldr	r1, [pc, #412]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0207 	bic.w	r2, r3, #7
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0207 	and.w	r2, r3, #7
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e0b8      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d020      	beq.n	800338a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003354:	4a59      	ldr	r2, [pc, #356]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800335e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800336c:	4a53      	ldr	r2, [pc, #332]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003376:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4950      	ldr	r1, [pc, #320]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4b50      	ldr	r3, [pc, #320]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d040      	beq.n	8003418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d115      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e07f      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d107      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b6:	4b41      	ldr	r3, [pc, #260]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e073      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e06b      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033d6:	4939      	ldr	r1, [pc, #228]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	4b38      	ldr	r3, [pc, #224]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 0203 	bic.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e8:	f7fd fd98 	bl	8000f1c <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f0:	f7fd fd94 	bl	8000f1c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e053      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	4b2d      	ldr	r3, [pc, #180]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 020c 	and.w	r2, r3, #12
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	429a      	cmp	r2, r3
 8003416:	d1eb      	bne.n	80033f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0207 	and.w	r2, r3, #7
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4924      	ldr	r1, [pc, #144]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 0207 	bic.w	r2, r3, #7
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0207 	and.w	r2, r3, #7
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e032      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003454:	4919      	ldr	r1, [pc, #100]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003456:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003472:	4912      	ldr	r1, [pc, #72]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003486:	f000 f821 	bl	80034cc <HAL_RCC_GetSysClockFreq>
 800348a:	4601      	mov	r1, r0
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	fa21 f303 	lsr.w	r3, r1, r3
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_RCC_ClockConfig+0x1cc>)
 80034a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_RCC_ClockConfig+0x1d0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd fb00 	bl	8000aac <HAL_InitTick>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40022000 	.word	0x40022000
 80034bc:	40021000 	.word	0x40021000
 80034c0:	0800cfd4 	.word	0x0800cfd4
 80034c4:	20000054 	.word	0x20000054
 80034c8:	20000058 	.word	0x20000058

080034cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034cc:	b490      	push	{r4, r7}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_RCC_GetSysClockFreq+0xb0>)
 80034d4:	1d3c      	adds	r4, r7, #4
 80034d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	2300      	movs	r3, #0
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b04      	cmp	r3, #4
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x40>
 8003506:	2b08      	cmp	r3, #8
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x46>
 800350a:	e02d      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800350c:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800350e:	623b      	str	r3, [r7, #32]
      break;
 8003510:	e02d      	b.n	800356e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	0c9b      	lsrs	r3, r3, #18
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800351e:	4413      	add	r3, r2
 8003520:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003524:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d013      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c5b      	lsrs	r3, r3, #17
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800353e:	4413      	add	r3, r2
 8003540:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003544:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800354a:	fb02 f203 	mul.w	r2, r2, r3
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	e004      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4a0c      	ldr	r2, [pc, #48]	; (800358c <HAL_RCC_GetSysClockFreq+0xc0>)
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	623b      	str	r3, [r7, #32]
      break;
 8003566:	e002      	b.n	800356e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCC_GetSysClockFreq+0xbc>)
 800356a:	623b      	str	r3, [r7, #32]
      break;
 800356c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800356e:	6a3b      	ldr	r3, [r7, #32]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3728      	adds	r7, #40	; 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bc90      	pop	{r4, r7}
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	0800cf20 	.word	0x0800cf20
 8003580:	0800cf30 	.word	0x0800cf30
 8003584:	40021000 	.word	0x40021000
 8003588:	007a1200 	.word	0x007a1200
 800358c:	003d0900 	.word	0x003d0900

08003590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003594:	4b02      	ldr	r3, [pc, #8]	; (80035a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	20000054 	.word	0x20000054

080035a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035a8:	f7ff fff2 	bl	8003590 <HAL_RCC_GetHCLKFreq>
 80035ac:	4601      	mov	r1, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0a1b      	lsrs	r3, r3, #8
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4a03      	ldr	r2, [pc, #12]	; (80035c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	0800cfe4 	.word	0x0800cfe4

080035cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	220f      	movs	r2, #15
 80035da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_GetClockConfig+0x58>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0203 	and.w	r2, r3, #3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_RCC_GetClockConfig+0x58>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_GetClockConfig+0x58>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003600:	4b08      	ldr	r3, [pc, #32]	; (8003624 <HAL_RCC_GetClockConfig+0x58>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	08db      	lsrs	r3, r3, #3
 8003606:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <HAL_RCC_GetClockConfig+0x5c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40021000 	.word	0x40021000
 8003628:	40022000 	.word	0x40022000

0800362c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <RCC_Delay+0x34>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <RCC_Delay+0x38>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	0a5b      	lsrs	r3, r3, #9
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	fb02 f303 	mul.w	r3, r2, r3
 8003646:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003648:	bf00      	nop
  }
  while (Delay --);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1e5a      	subs	r2, r3, #1
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f9      	bne.n	8003648 <RCC_Delay+0x1c>
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000054 	.word	0x20000054
 8003664:	10624dd3 	.word	0x10624dd3

08003668 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d07d      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003684:	2300      	movs	r3, #0
 8003686:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003688:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4a4c      	ldr	r2, [pc, #304]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	61d3      	str	r3, [r2, #28]
 80036a0:	4b49      	ldr	r3, [pc, #292]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b46      	ldr	r3, [pc, #280]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d118      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036bc:	4a43      	ldr	r2, [pc, #268]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036be:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c8:	f7fd fc28 	bl	8000f1c <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ce:	e008      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d0:	f7fd fc24 	bl	8000f1c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e06d      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e2:	4b3a      	ldr	r3, [pc, #232]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ee:	4b36      	ldr	r3, [pc, #216]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d02e      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	d027      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800370c:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003714:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371c:	4b2c      	ldr	r3, [pc, #176]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003722:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d014      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fd fbf3 	bl	8000f1c <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003738:	e00a      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd fbef 	bl	8000f1c <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	f241 3288 	movw	r2, #5000	; 0x1388
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e036      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ee      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800375c:	491a      	ldr	r1, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	4313      	orrs	r3, r2
 800376c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800376e:	7dfb      	ldrb	r3, [r7, #23]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d105      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800378c:	490e      	ldr	r1, [pc, #56]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d008      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037aa:	4907      	ldr	r1, [pc, #28]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	42420440 	.word	0x42420440

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e041      	b.n	800386a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fa54 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4619      	mov	r1, r3
 8003812:	4610      	mov	r0, r2
 8003814:	f000 fa64 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	d001      	beq.n	800388c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e03a      	b.n	8003902 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	68d2      	ldr	r2, [r2, #12]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_TIM_Base_Start_IT+0x98>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x58>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b6:	d009      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x58>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a14      	ldr	r2, [pc, #80]	; (8003910 <HAL_TIM_Base_Start_IT+0x9c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x58>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_TIM_Base_Start_IT+0xa0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d111      	bne.n	80038f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d010      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	e007      	b.n	8003900 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800

08003918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d122      	bne.n	8003974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d11b      	bne.n	8003974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0202 	mvn.w	r2, #2
 8003944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9a4 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003960:	e005      	b.n	800396e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f997 	bl	8003c96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f9a6 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d122      	bne.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d11b      	bne.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0204 	mvn.w	r2, #4
 8003998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f97a 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f96d 	bl	8003c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f97c 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d122      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b08      	cmp	r3, #8
 80039e2:	d11b      	bne.n	8003a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f06f 0208 	mvn.w	r2, #8
 80039ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2204      	movs	r2, #4
 80039f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f950 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003a08:	e005      	b.n	8003a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f943 	bl	8003c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f952 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d122      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b10      	cmp	r3, #16
 8003a36:	d11b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0210 	mvn.w	r2, #16
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2208      	movs	r2, #8
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f926 	bl	8003ca8 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f919 	bl	8003c96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f928 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0201 	mvn.w	r2, #1
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fc ffba 	bl	8000a10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d107      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa6b 	bl	8003f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d10e      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d107      	bne.n	8003af4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f8ec 	bl	8003ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d10e      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d107      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0220 	mvn.w	r2, #32
 8003b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fa36 	bl	8003f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIM_ConfigClockSource+0x18>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e0a6      	b.n	8003c8e <HAL_TIM_ConfigClockSource+0x166>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d067      	beq.n	8003c48 <HAL_TIM_ConfigClockSource+0x120>
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d80b      	bhi.n	8003b94 <HAL_TIM_ConfigClockSource+0x6c>
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d073      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d802      	bhi.n	8003b8a <HAL_TIM_ConfigClockSource+0x62>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d06f      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b88:	e078      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d06c      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
 8003b8e:	2b30      	cmp	r3, #48	; 0x30
 8003b90:	d06a      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b92:	e073      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b94:	2b70      	cmp	r3, #112	; 0x70
 8003b96:	d00d      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0x8c>
 8003b98:	2b70      	cmp	r3, #112	; 0x70
 8003b9a:	d804      	bhi.n	8003ba6 <HAL_TIM_ConfigClockSource+0x7e>
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d033      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0xe0>
 8003ba0:	2b60      	cmp	r3, #96	; 0x60
 8003ba2:	d041      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ba4:	e06a      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	d066      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x152>
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d017      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003bb2:	e063      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f000 f965 	bl	8003e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e04c      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 f94e 	bl	8003e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	6892      	ldr	r2, [r2, #8]
 8003c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c04:	609a      	str	r2, [r3, #8]
      break;
 8003c06:	e039      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f000 f8c5 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2150      	movs	r1, #80	; 0x50
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f91c 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c26:	e029      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f000 f8e3 	bl	8003e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2160      	movs	r1, #96	; 0x60
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f90c 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c46:	e019      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f000 f8a5 	bl	8003da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2140      	movs	r1, #64	; 0x40
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f8fc 	bl	8003e5e <TIM_ITRx_SetConfig>
      break;
 8003c66:	e009      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 f8f3 	bl	8003e5e <TIM_ITRx_SetConfig>
        break;
 8003c78:	e000      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a29      	ldr	r2, [pc, #164]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a19      	ldr	r2, [pc, #100]	; (8003d9c <TIM_Base_SetConfig+0xbc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <TIM_Base_SetConfig+0xc0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <TIM_Base_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]
}
 8003d8e:	bf00      	nop
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f023 030a 	bic.w	r3, r3, #10
 8003de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f023 0210 	bic.w	r2, r3, #16
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	011b      	lsls	r3, r3, #4
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f043 0307 	orr.w	r3, r3, #7
 8003e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	021a      	lsls	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e046      	b.n	8003f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00e      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f34:	d009      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d004      	beq.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d10c      	bne.n	8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800

08003f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	f107 0014 	add.w	r0, r7, #20
 8003fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	b004      	add	sp, #16
 8003fce:	4770      	bx	lr

08003fd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fe0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003fe4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004004:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004008:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	b29b      	uxth	r3, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	b29b      	uxth	r3, r3
 800401a:	4013      	ands	r3, r2
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004048:	b084      	sub	sp, #16
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	f107 0014 	add.w	r0, r7, #20
 8004056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	b004      	add	sp, #16
 8004086:	4770      	bx	lr

08004088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
	...

080040b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b09b      	sub	sp, #108	; 0x6c
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	78db      	ldrb	r3, [r3, #3]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d81f      	bhi.n	8004126 <USB_ActivateEndpoint+0x72>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <USB_ActivateEndpoint+0x38>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004119 	.word	0x08004119
 80040f4:	0800412f 	.word	0x0800412f
 80040f8:	0800410b 	.word	0x0800410b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004104:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004108:	e012      	b.n	8004130 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800410a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800410e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004112:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004116:	e00b      	b.n	8004130 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004118:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800411c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004120:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004124:	e004      	b.n	8004130 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800412c:	e000      	b.n	8004130 <USB_ActivateEndpoint+0x7c>
      break;
 800412e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800413e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800414e:	b29b      	uxth	r3, r3
 8004150:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	b29b      	uxth	r3, r3
 8004160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004168:	b29a      	uxth	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	4313      	orrs	r3, r2
 8004172:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	441a      	add	r2, r3
 8004180:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800418c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	7b1b      	ldrb	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8153 	bne.w	8004448 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 808e 	beq.w	80042c8 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041bc:	4413      	add	r3, r2
 80041be:	65bb      	str	r3, [r7, #88]	; 0x58
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	011a      	lsls	r2, r3, #4
 80041c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ce:	657b      	str	r3, [r7, #84]	; 0x54
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	88db      	ldrh	r3, [r3, #6]
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80041f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01d      	beq.n	8004238 <USB_ActivateEndpoint+0x184>
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	78db      	ldrb	r3, [r3, #3]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d024      	beq.n	800428a <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004256:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800425a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800425e:	f083 0320 	eor.w	r3, r3, #32
 8004262:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004284:	b29b      	uxth	r3, r3
 8004286:	8013      	strh	r3, [r2, #0]
 8004288:	e271      	b.n	800476e <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	441a      	add	r2, r3
 80042ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80042b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	8013      	strh	r3, [r2, #0]
 80042c6:	e252      	b.n	800476e <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	4413      	add	r3, r2
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	011a      	lsls	r2, r3, #4
 80042e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	88db      	ldrh	r3, [r3, #6]
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004306:	b29b      	uxth	r3, r3
 8004308:	461a      	mov	r2, r3
 800430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430c:	4413      	add	r3, r2
 800430e:	643b      	str	r3, [r7, #64]	; 0x40
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	4413      	add	r3, r2
 800431a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d112      	bne.n	800434e <USB_ActivateEndpoint+0x29a>
 8004328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004332:	b29a      	uxth	r2, r3
 8004334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29a      	uxth	r2, r3
 8004348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e02f      	b.n	80043ae <USB_ActivateEndpoint+0x2fa>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b3e      	cmp	r3, #62	; 0x3e
 8004354:	d813      	bhi.n	800437e <USB_ActivateEndpoint+0x2ca>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	085b      	lsrs	r3, r3, #1
 800435c:	663b      	str	r3, [r7, #96]	; 0x60
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <USB_ActivateEndpoint+0x2bc>
 800436a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800436c:	3301      	adds	r3, #1
 800436e:	663b      	str	r3, [r7, #96]	; 0x60
 8004370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004372:	b29b      	uxth	r3, r3
 8004374:	029b      	lsls	r3, r3, #10
 8004376:	b29a      	uxth	r2, r3
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	801a      	strh	r2, [r3, #0]
 800437c:	e017      	b.n	80043ae <USB_ActivateEndpoint+0x2fa>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	663b      	str	r3, [r7, #96]	; 0x60
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <USB_ActivateEndpoint+0x2e4>
 8004392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004394:	3b01      	subs	r3, #1
 8004396:	663b      	str	r3, [r7, #96]	; 0x60
 8004398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800439a:	b29b      	uxth	r3, r3
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	b29b      	uxth	r3, r3
 80043a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	877b      	strh	r3, [r7, #58]	; 0x3a
 80043bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80043be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01b      	beq.n	80043fe <USB_ActivateEndpoint+0x34a>
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	441a      	add	r2, r3
 80043e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80043ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004414:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004416:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004418:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800441c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800441e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004420:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004424:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
 8004446:	e192      	b.n	800476e <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	441a      	add	r2, r3
 800446a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800446c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004474:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447c:	b29b      	uxth	r3, r3
 800447e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800448a:	b29b      	uxth	r3, r3
 800448c:	461a      	mov	r2, r3
 800448e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004490:	4413      	add	r3, r2
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	011a      	lsls	r2, r3, #4
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	4413      	add	r3, r2
 800449e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	891b      	ldrh	r3, [r3, #8]
 80044a8:	085b      	lsrs	r3, r3, #1
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	4413      	add	r3, r2
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	011a      	lsls	r2, r3, #4
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	895b      	ldrh	r3, [r3, #10]
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	b29b      	uxth	r3, r3
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 8091 	bne.w	8004614 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004500:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01b      	beq.n	8004542 <USB_ActivateEndpoint+0x48e>
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	843b      	strh	r3, [r7, #32]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	8c3b      	ldrh	r3, [r7, #32]
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	83fb      	strh	r3, [r7, #30]
 8004550:	8bfb      	ldrh	r3, [r7, #30]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01b      	beq.n	8004592 <USB_ActivateEndpoint+0x4de>
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	83bb      	strh	r3, [r7, #28]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	441a      	add	r2, r3
 800457c:	8bbb      	ldrh	r3, [r7, #28]
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	837b      	strh	r3, [r7, #26]
 80045aa:	8b7b      	ldrh	r3, [r7, #26]
 80045ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045b0:	837b      	strh	r3, [r7, #26]
 80045b2:	8b7b      	ldrh	r3, [r7, #26]
 80045b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80045b8:	837b      	strh	r3, [r7, #26]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	441a      	add	r2, r3
 80045c4:	8b7b      	ldrh	r3, [r7, #26]
 80045c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045f0:	833b      	strh	r3, [r7, #24]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	441a      	add	r2, r3
 80045fc:	8b3b      	ldrh	r3, [r7, #24]
 80045fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	b29b      	uxth	r3, r3
 8004610:	8013      	strh	r3, [r2, #0]
 8004612:	e0ac      	b.n	800476e <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	82fb      	strh	r3, [r7, #22]
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01b      	beq.n	8004664 <USB_ActivateEndpoint+0x5b0>
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29b      	uxth	r3, r3
 800463a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004642:	82bb      	strh	r3, [r7, #20]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	8abb      	ldrh	r3, [r7, #20]
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	827b      	strh	r3, [r7, #18]
 8004672:	8a7b      	ldrh	r3, [r7, #18]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <USB_ActivateEndpoint+0x600>
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	823b      	strh	r3, [r7, #16]
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	8a3b      	ldrh	r3, [r7, #16]
 80046a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	78db      	ldrb	r3, [r3, #3]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d020      	beq.n	80046fe <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d2:	81fb      	strh	r3, [r7, #14]
 80046d4:	89fb      	ldrh	r3, [r7, #14]
 80046d6:	f083 0320 	eor.w	r3, r3, #32
 80046da:	81fb      	strh	r3, [r7, #14]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	89fb      	ldrh	r3, [r7, #14]
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]
 80046fc:	e01b      	b.n	8004736 <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004714:	81bb      	strh	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	89bb      	ldrh	r3, [r7, #12]
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474c:	817b      	strh	r3, [r7, #10]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	897b      	ldrh	r3, [r7, #10]
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800476e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004772:	4618      	mov	r0, r3
 8004774:	376c      	adds	r7, #108	; 0x6c
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800477c:	b480      	push	{r7}
 800477e:	b08d      	sub	sp, #52	; 0x34
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	7b1b      	ldrb	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f040 808e 	bne.w	80048ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	785b      	ldrb	r3, [r3, #1]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d044      	beq.n	8004822 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01b      	beq.n	80047e8 <USB_DeactivateEndpoint+0x6c>
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80047d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	441a      	add	r2, r3
 800480a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800480c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481c:	b29b      	uxth	r3, r3
 800481e:	8013      	strh	r3, [r2, #0]
 8004820:	e192      	b.n	8004b48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004830:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01b      	beq.n	8004872 <USB_DeactivateEndpoint+0xf6>
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004850:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	441a      	add	r2, r3
 800485c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800485e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800486a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486e:	b29b      	uxth	r3, r3
 8004870:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004888:	84bb      	strh	r3, [r7, #36]	; 0x24
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	441a      	add	r2, r3
 8004894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004896:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	8013      	strh	r3, [r2, #0]
 80048aa:	e14d      	b.n	8004b48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 80a5 	bne.w	8004a00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	881b      	ldrh	r3, [r3, #0]
 80048c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80048c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <USB_DeactivateEndpoint+0x18a>
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	843b      	strh	r3, [r7, #32]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	8c3b      	ldrh	r3, [r7, #32]
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	83fb      	strh	r3, [r7, #30]
 8004914:	8bfb      	ldrh	r3, [r7, #30]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01b      	beq.n	8004956 <USB_DeactivateEndpoint+0x1da>
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	83bb      	strh	r3, [r7, #28]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8bbb      	ldrh	r3, [r7, #28]
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	837b      	strh	r3, [r7, #26]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	8b7b      	ldrh	r3, [r7, #26]
 800497a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	833b      	strh	r3, [r7, #24]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	441a      	add	r2, r3
 80049b0:	8b3b      	ldrh	r3, [r7, #24]
 80049b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049dc:	82fb      	strh	r3, [r7, #22]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	8afb      	ldrh	r3, [r7, #22]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]
 80049fe:	e0a3      	b.n	8004b48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	881b      	ldrh	r3, [r3, #0]
 8004a0c:	82bb      	strh	r3, [r7, #20]
 8004a0e:	8abb      	ldrh	r3, [r7, #20]
 8004a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01b      	beq.n	8004a50 <USB_DeactivateEndpoint+0x2d4>
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2e:	827b      	strh	r3, [r7, #18]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	8a7b      	ldrh	r3, [r7, #18]
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	823b      	strh	r3, [r7, #16]
 8004a5e:	8a3b      	ldrh	r3, [r7, #16]
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <USB_DeactivateEndpoint+0x324>
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7e:	81fb      	strh	r3, [r7, #14]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	89fb      	ldrh	r3, [r7, #14]
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	81bb      	strh	r3, [r7, #12]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	441a      	add	r2, r3
 8004ac2:	89bb      	ldrh	r3, [r7, #12]
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	881b      	ldrh	r3, [r3, #0]
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aee:	817b      	strh	r3, [r7, #10]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	441a      	add	r2, r3
 8004afa:	897b      	ldrh	r3, [r7, #10]
 8004afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	813b      	strh	r3, [r7, #8]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	441a      	add	r2, r3
 8004b32:	893b      	ldrh	r3, [r7, #8]
 8004b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3734      	adds	r7, #52	; 0x34
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr

08004b54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b0ce      	sub	sp, #312	; 0x138
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	1d3b      	adds	r3, r7, #4
 8004b5c:	6018      	str	r0, [r3, #0]
 8004b5e:	463b      	mov	r3, r7
 8004b60:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b62:	463b      	mov	r3, r7
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	785b      	ldrb	r3, [r3, #1]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f040 873e 	bne.w	80059ea <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	463b      	mov	r3, r7
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d905      	bls.n	8004b8a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004b7e:	463b      	mov	r3, r7
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004b88:	e004      	b.n	8004b94 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b94:	463b      	mov	r3, r7
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	7b1b      	ldrb	r3, [r3, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d12e      	bne.n	8004bfc <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6959      	ldr	r1, [r3, #20]
 8004ba4:	463b      	mov	r3, r7
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	88da      	ldrh	r2, [r3, #6]
 8004baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	1d38      	adds	r0, r7, #4
 8004bb2:	6800      	ldr	r0, [r0, #0]
 8004bb4:	f001 fc13 	bl	80063de <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bd6:	463b      	mov	r3, r7
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004be2:	4413      	add	r3, r2
 8004be4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	f000 bec2 	b.w	8005980 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	78db      	ldrb	r3, [r3, #3]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	f040 836a 	bne.w	80052dc <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c08:	463b      	mov	r3, r7
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	463b      	mov	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f240 830e 	bls.w	8005236 <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	463b      	mov	r3, r7
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004c38:	1d3b      	adds	r3, r7, #4
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	441a      	add	r2, r3
 8004c46:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c52:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c5e:	463b      	mov	r3, r7
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6a1a      	ldr	r2, [r3, #32]
 8004c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c68:	1ad2      	subs	r2, r2, r3
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	463b      	mov	r3, r7
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 817c 	beq.w	8004f84 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c94:	463b      	mov	r3, r7
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d16f      	bne.n	8004d7e <USB_EPStartXfer+0x22a>
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ca6:	1d3b      	adds	r3, r7, #4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	011a      	lsls	r2, r3, #4
 8004cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cc8:	4413      	add	r3, r2
 8004cca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004cd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <USB_EPStartXfer+0x1b4>
 8004cda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cec:	801a      	strh	r2, [r3, #0]
 8004cee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d04:	801a      	strh	r2, [r3, #0]
 8004d06:	e05b      	b.n	8004dc0 <USB_EPStartXfer+0x26c>
 8004d08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d0e:	d818      	bhi.n	8004d42 <USB_EPStartXfer+0x1ee>
 8004d10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d14:	085b      	lsrs	r3, r3, #1
 8004d16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d004      	beq.n	8004d30 <USB_EPStartXfer+0x1dc>
 8004d26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004d30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	029b      	lsls	r3, r3, #10
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	e03e      	b.n	8004dc0 <USB_EPStartXfer+0x26c>
 8004d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004d4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <USB_EPStartXfer+0x20e>
 8004d58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004d62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d7a:	801a      	strh	r2, [r3, #0]
 8004d7c:	e020      	b.n	8004dc0 <USB_EPStartXfer+0x26c>
 8004d7e:	463b      	mov	r3, r7
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11b      	bne.n	8004dc0 <USB_EPStartXfer+0x26c>
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d98:	4413      	add	r3, r2
 8004d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d9e:	463b      	mov	r3, r7
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	011a      	lsls	r2, r3, #4
 8004da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004daa:	4413      	add	r3, r2
 8004dac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004db0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004dbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	895b      	ldrh	r3, [r3, #10]
 8004dc6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dca:	463b      	mov	r3, r7
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6959      	ldr	r1, [r3, #20]
 8004dd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004dda:	1d38      	adds	r0, r7, #4
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f001 fafe 	bl	80063de <USB_WritePMA>
            ep->xfer_buff += len;
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695a      	ldr	r2, [r3, #20]
 8004de8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dec:	441a      	add	r2, r3
 8004dee:	463b      	mov	r3, r7
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004df4:	463b      	mov	r3, r7
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d909      	bls.n	8004e18 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6a1a      	ldr	r2, [r3, #32]
 8004e0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	463b      	mov	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	621a      	str	r2, [r3, #32]
 8004e16:	e008      	b.n	8004e2a <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e18:	463b      	mov	r3, r7
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8004e22:	463b      	mov	r3, r7
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d16f      	bne.n	8004f14 <USB_EPStartXfer+0x3c0>
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e3c:	1d3b      	adds	r3, r7, #4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	461a      	mov	r2, r3
 8004e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e52:	463b      	mov	r3, r7
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	011a      	lsls	r2, r3, #4
 8004e5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e5e:	4413      	add	r3, r2
 8004e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <USB_EPStartXfer+0x34a>
 8004e70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9a:	801a      	strh	r2, [r3, #0]
 8004e9c:	e05f      	b.n	8004f5e <USB_EPStartXfer+0x40a>
 8004e9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ea2:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea4:	d818      	bhi.n	8004ed8 <USB_EPStartXfer+0x384>
 8004ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004eb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d004      	beq.n	8004ec6 <USB_EPStartXfer+0x372>
 8004ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	029b      	lsls	r3, r3, #10
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ed4:	801a      	strh	r2, [r3, #0]
 8004ed6:	e042      	b.n	8004f5e <USB_EPStartXfer+0x40a>
 8004ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004edc:	095b      	lsrs	r3, r3, #5
 8004ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d104      	bne.n	8004ef8 <USB_EPStartXfer+0x3a4>
 8004eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	029b      	lsls	r3, r3, #10
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f10:	801a      	strh	r2, [r3, #0]
 8004f12:	e024      	b.n	8004f5e <USB_EPStartXfer+0x40a>
 8004f14:	463b      	mov	r3, r7
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d11f      	bne.n	8004f5e <USB_EPStartXfer+0x40a>
 8004f1e:	1d3b      	adds	r3, r7, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f26:	1d3b      	adds	r3, r7, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	461a      	mov	r2, r3
 8004f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f36:	4413      	add	r3, r2
 8004f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	011a      	lsls	r2, r3, #4
 8004f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f48:	4413      	add	r3, r2
 8004f4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	891b      	ldrh	r3, [r3, #8]
 8004f64:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f68:	463b      	mov	r3, r7
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6959      	ldr	r1, [r3, #20]
 8004f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004f78:	1d38      	adds	r0, r7, #4
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	f001 fa2f 	bl	80063de <USB_WritePMA>
 8004f80:	f000 bcfe 	b.w	8005980 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d164      	bne.n	8005058 <USB_EPStartXfer+0x504>
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa2:	4413      	add	r3, r2
 8004fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	011a      	lsls	r2, r3, #4
 8004fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d112      	bne.n	8004fe6 <USB_EPStartXfer+0x492>
 8004fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e057      	b.n	8005096 <USB_EPStartXfer+0x542>
 8004fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fea:	2b3e      	cmp	r3, #62	; 0x3e
 8004fec:	d817      	bhi.n	800501e <USB_EPStartXfer+0x4ca>
 8004fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <USB_EPStartXfer+0x4ba>
 8005004:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005008:	3301      	adds	r3, #1
 800500a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800500e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005012:	b29b      	uxth	r3, r3
 8005014:	029b      	lsls	r3, r3, #10
 8005016:	b29a      	uxth	r2, r3
 8005018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	e03b      	b.n	8005096 <USB_EPStartXfer+0x542>
 800501e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005028:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2b00      	cmp	r3, #0
 8005032:	d104      	bne.n	800503e <USB_EPStartXfer+0x4ea>
 8005034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005038:	3b01      	subs	r3, #1
 800503a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800503e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005042:	b29b      	uxth	r3, r3
 8005044:	029b      	lsls	r3, r3, #10
 8005046:	b29b      	uxth	r3, r3
 8005048:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800504c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005050:	b29a      	uxth	r2, r3
 8005052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	e01e      	b.n	8005096 <USB_EPStartXfer+0x542>
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d119      	bne.n	8005096 <USB_EPStartXfer+0x542>
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	677b      	str	r3, [r7, #116]	; 0x74
 8005068:	1d3b      	adds	r3, r7, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005070:	b29b      	uxth	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005076:	4413      	add	r3, r2
 8005078:	677b      	str	r3, [r7, #116]	; 0x74
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005084:	4413      	add	r3, r2
 8005086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800508a:	673b      	str	r3, [r7, #112]	; 0x70
 800508c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005090:	b29a      	uxth	r2, r3
 8005092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005094:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	891b      	ldrh	r3, [r3, #8]
 800509c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80050b0:	1d38      	adds	r0, r7, #4
 80050b2:	6800      	ldr	r0, [r0, #0]
 80050b4:	f001 f993 	bl	80063de <USB_WritePMA>
            ep->xfer_buff += len;
 80050b8:	463b      	mov	r3, r7
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695a      	ldr	r2, [r3, #20]
 80050be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050c2:	441a      	add	r2, r3
 80050c4:	463b      	mov	r3, r7
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80050ca:	463b      	mov	r3, r7
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	463b      	mov	r3, r7
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d909      	bls.n	80050ee <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a1a      	ldr	r2, [r3, #32]
 80050e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050e4:	1ad2      	subs	r2, r2, r3
 80050e6:	463b      	mov	r3, r7
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	621a      	str	r2, [r3, #32]
 80050ec:	e008      	b.n	8005100 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 80050ee:	463b      	mov	r3, r7
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80050f8:	463b      	mov	r3, r7
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2200      	movs	r2, #0
 80050fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d164      	bne.n	80051da <USB_EPStartXfer+0x686>
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	66bb      	str	r3, [r7, #104]	; 0x68
 8005116:	1d3b      	adds	r3, r7, #4
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511e:	b29b      	uxth	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005124:	4413      	add	r3, r2
 8005126:	66bb      	str	r3, [r7, #104]	; 0x68
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	011a      	lsls	r2, r3, #4
 8005130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005132:	4413      	add	r3, r2
 8005134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005138:	667b      	str	r3, [r7, #100]	; 0x64
 800513a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800513e:	2b00      	cmp	r3, #0
 8005140:	d112      	bne.n	8005168 <USB_EPStartXfer+0x614>
 8005142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800514c:	b29a      	uxth	r2, r3
 800514e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005160:	b29a      	uxth	r2, r3
 8005162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e054      	b.n	8005212 <USB_EPStartXfer+0x6be>
 8005168:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800516c:	2b3e      	cmp	r3, #62	; 0x3e
 800516e:	d817      	bhi.n	80051a0 <USB_EPStartXfer+0x64c>
 8005170:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005174:	085b      	lsrs	r3, r3, #1
 8005176:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800517a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <USB_EPStartXfer+0x63c>
 8005186:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800518a:	3301      	adds	r3, #1
 800518c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005190:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005194:	b29b      	uxth	r3, r3
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	b29a      	uxth	r2, r3
 800519a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519c:	801a      	strh	r2, [r3, #0]
 800519e:	e038      	b.n	8005212 <USB_EPStartXfer+0x6be>
 80051a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <USB_EPStartXfer+0x66c>
 80051b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051ba:	3b01      	subs	r3, #1
 80051bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	029b      	lsls	r3, r3, #10
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e01b      	b.n	8005212 <USB_EPStartXfer+0x6be>
 80051da:	463b      	mov	r3, r7
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	785b      	ldrb	r3, [r3, #1]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d116      	bne.n	8005212 <USB_EPStartXfer+0x6be>
 80051e4:	1d3b      	adds	r3, r7, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f2:	4413      	add	r3, r2
 80051f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051f6:	463b      	mov	r3, r7
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	011a      	lsls	r2, r3, #4
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005200:	4413      	add	r3, r2
 8005202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005206:	663b      	str	r3, [r7, #96]	; 0x60
 8005208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800520c:	b29a      	uxth	r2, r3
 800520e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005212:	463b      	mov	r3, r7
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	895b      	ldrh	r3, [r3, #10]
 8005218:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6959      	ldr	r1, [r3, #20]
 8005222:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005226:	b29b      	uxth	r3, r3
 8005228:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800522c:	1d38      	adds	r0, r7, #4
 800522e:	6800      	ldr	r0, [r0, #0]
 8005230:	f001 f8d5 	bl	80063de <USB_WritePMA>
 8005234:	e3a4      	b.n	8005980 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005240:	1d3b      	adds	r3, r7, #4
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800527c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005280:	b29b      	uxth	r3, r3
 8005282:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	65bb      	str	r3, [r7, #88]	; 0x58
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005292:	b29b      	uxth	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005298:	4413      	add	r3, r2
 800529a:	65bb      	str	r3, [r7, #88]	; 0x58
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ac:	657b      	str	r3, [r7, #84]	; 0x54
 80052ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052b8:	463b      	mov	r3, r7
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	891b      	ldrh	r3, [r3, #8]
 80052be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c2:	463b      	mov	r3, r7
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6959      	ldr	r1, [r3, #20]
 80052c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80052d2:	1d38      	adds	r0, r7, #4
 80052d4:	6800      	ldr	r0, [r0, #0]
 80052d6:	f001 f882 	bl	80063de <USB_WritePMA>
 80052da:	e351      	b.n	8005980 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80052dc:	1d3b      	adds	r3, r7, #4
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	463b      	mov	r3, r7
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80052fa:	1d3b      	adds	r3, r7, #4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005320:	463b      	mov	r3, r7
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	463b      	mov	r3, r7
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005332:	1d3b      	adds	r3, r7, #4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8178 	beq.w	800563e <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d164      	bne.n	8005428 <USB_EPStartXfer+0x8d4>
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	64bb      	str	r3, [r7, #72]	; 0x48
 8005364:	1d3b      	adds	r3, r7, #4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800536c:	b29b      	uxth	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	4413      	add	r3, r2
 8005374:	64bb      	str	r3, [r7, #72]	; 0x48
 8005376:	463b      	mov	r3, r7
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	011a      	lsls	r2, r3, #4
 800537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005380:	4413      	add	r3, r2
 8005382:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005386:	647b      	str	r3, [r7, #68]	; 0x44
 8005388:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800538c:	2b00      	cmp	r3, #0
 800538e:	d112      	bne.n	80053b6 <USB_EPStartXfer+0x862>
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	881b      	ldrh	r3, [r3, #0]
 8005394:	b29b      	uxth	r3, r3
 8005396:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800539a:	b29a      	uxth	r2, r3
 800539c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e054      	b.n	8005460 <USB_EPStartXfer+0x90c>
 80053b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053ba:	2b3e      	cmp	r3, #62	; 0x3e
 80053bc:	d817      	bhi.n	80053ee <USB_EPStartXfer+0x89a>
 80053be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <USB_EPStartXfer+0x88a>
 80053d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053d8:	3301      	adds	r3, #1
 80053da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	029b      	lsls	r3, r3, #10
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e038      	b.n	8005460 <USB_EPStartXfer+0x90c>
 80053ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053fc:	f003 031f 	and.w	r3, r3, #31
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <USB_EPStartXfer+0x8ba>
 8005404:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005408:	3b01      	subs	r3, #1
 800540a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800540e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29b      	uxth	r3, r3
 8005418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005420:	b29a      	uxth	r2, r3
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e01b      	b.n	8005460 <USB_EPStartXfer+0x90c>
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d116      	bne.n	8005460 <USB_EPStartXfer+0x90c>
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005440:	4413      	add	r3, r2
 8005442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	011a      	lsls	r2, r3, #4
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	4413      	add	r3, r2
 8005450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005454:	643b      	str	r3, [r7, #64]	; 0x40
 8005456:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800545a:	b29a      	uxth	r2, r3
 800545c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	895b      	ldrh	r3, [r3, #10]
 8005466:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800546a:	463b      	mov	r3, r7
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6959      	ldr	r1, [r3, #20]
 8005470:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005474:	b29b      	uxth	r3, r3
 8005476:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800547a:	1d38      	adds	r0, r7, #4
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f000 ffae 	bl	80063de <USB_WritePMA>
          ep->xfer_buff += len;
 8005482:	463b      	mov	r3, r7
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800548c:	441a      	add	r2, r3
 800548e:	463b      	mov	r3, r7
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	463b      	mov	r3, r7
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d909      	bls.n	80054b8 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	463b      	mov	r3, r7
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	621a      	str	r2, [r3, #32]
 80054b6:	e008      	b.n	80054ca <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 80054c2:	463b      	mov	r3, r7
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80054ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 8256 	beq.w	8005980 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054d4:	463b      	mov	r3, r7
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d172      	bne.n	80055c4 <USB_EPStartXfer+0xa70>
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e4:	1d3b      	adds	r3, r7, #4
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f2:	4413      	add	r3, r2
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f6:	463b      	mov	r3, r7
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	011a      	lsls	r2, r3, #4
 80054fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005500:	4413      	add	r3, r2
 8005502:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005506:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11a      	bne.n	800554a <USB_EPStartXfer+0x9f6>
 8005514:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005522:	b29a      	uxth	r2, r3
 8005524:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	801a      	strh	r2, [r3, #0]
 800552c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553e:	b29a      	uxth	r2, r3
 8005540:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e067      	b.n	800561a <USB_EPStartXfer+0xac6>
 800554a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800554e:	2b3e      	cmp	r3, #62	; 0x3e
 8005550:	d819      	bhi.n	8005586 <USB_EPStartXfer+0xa32>
 8005552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800555c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <USB_EPStartXfer+0xa1e>
 8005568:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800556c:	3301      	adds	r3, #1
 800556e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005576:	b29b      	uxth	r3, r3
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	b29a      	uxth	r2, r3
 800557c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	e049      	b.n	800561a <USB_EPStartXfer+0xac6>
 8005586:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <USB_EPStartXfer+0xa52>
 800559c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e02a      	b.n	800561a <USB_EPStartXfer+0xac6>
 80055c4:	463b      	mov	r3, r7
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d125      	bne.n	800561a <USB_EPStartXfer+0xac6>
 80055ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055d2:	1d3a      	adds	r2, r7, #4
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	1d3b      	adds	r3, r7, #4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	4619      	mov	r1, r3
 80055e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	440a      	add	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4413      	add	r3, r2
 8005602:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005610:	b29a      	uxth	r2, r3
 8005612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800561a:	463b      	mov	r3, r7
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	891b      	ldrh	r3, [r3, #8]
 8005620:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005624:	463b      	mov	r3, r7
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6959      	ldr	r1, [r3, #20]
 800562a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800562e:	b29b      	uxth	r3, r3
 8005630:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005634:	1d38      	adds	r0, r7, #4
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	f000 fed1 	bl	80063de <USB_WritePMA>
 800563c:	e1a0      	b.n	8005980 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	785b      	ldrb	r3, [r3, #1]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d17a      	bne.n	800573e <USB_EPStartXfer+0xbea>
 8005648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564c:	1d3a      	adds	r2, r7, #4
 800564e:	6812      	ldr	r2, [r2, #0]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	1d3b      	adds	r3, r7, #4
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	4619      	mov	r1, r3
 800565e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005662:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	440a      	add	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4413      	add	r3, r2
 800567c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800568a:	2b00      	cmp	r3, #0
 800568c:	d11a      	bne.n	80056c4 <USB_EPStartXfer+0xb70>
 800568e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29b      	uxth	r3, r3
 8005698:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800569c:	b29a      	uxth	r2, r3
 800569e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	e067      	b.n	8005794 <USB_EPStartXfer+0xc40>
 80056c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056c8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ca:	d819      	bhi.n	8005700 <USB_EPStartXfer+0xbac>
 80056cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056d0:	085b      	lsrs	r3, r3, #1
 80056d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80056d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d004      	beq.n	80056ec <USB_EPStartXfer+0xb98>
 80056e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80056e6:	3301      	adds	r3, #1
 80056e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80056ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	029b      	lsls	r3, r3, #10
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	e049      	b.n	8005794 <USB_EPStartXfer+0xc40>
 8005700:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005704:	095b      	lsrs	r3, r3, #5
 8005706:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800570a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <USB_EPStartXfer+0xbcc>
 8005716:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800571a:	3b01      	subs	r3, #1
 800571c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005720:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005724:	b29b      	uxth	r3, r3
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	b29b      	uxth	r3, r3
 800572a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005732:	b29a      	uxth	r2, r3
 8005734:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	e02a      	b.n	8005794 <USB_EPStartXfer+0xc40>
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	785b      	ldrb	r3, [r3, #1]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d125      	bne.n	8005794 <USB_EPStartXfer+0xc40>
 8005748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574c:	1d3a      	adds	r2, r7, #4
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575a:	b29b      	uxth	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005762:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005766:	6812      	ldr	r2, [r2, #0]
 8005768:	440a      	add	r2, r1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	463b      	mov	r3, r7
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	011a      	lsls	r2, r3, #4
 8005774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4413      	add	r3, r2
 800577c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005780:	f107 0320 	add.w	r3, r7, #32
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800578a:	b29a      	uxth	r2, r3
 800578c:	f107 0320 	add.w	r3, r7, #32
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	891b      	ldrh	r3, [r3, #8]
 800579a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80057ae:	1d38      	adds	r0, r7, #4
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f000 fe14 	bl	80063de <USB_WritePMA>
          ep->xfer_buff += len;
 80057b6:	463b      	mov	r3, r7
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057c0:	441a      	add	r2, r3
 80057c2:	463b      	mov	r3, r7
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d909      	bls.n	80057ec <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6a1a      	ldr	r2, [r3, #32]
 80057de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057e2:	1ad2      	subs	r2, r2, r3
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	621a      	str	r2, [r3, #32]
 80057ea:	e008      	b.n	80057fe <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 80057f6:	463b      	mov	r3, r7
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2200      	movs	r2, #0
 80057fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80057fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80bc 	beq.w	8005980 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005808:	f107 031c 	add.w	r3, r7, #28
 800580c:	1d3a      	adds	r2, r7, #4
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d17a      	bne.n	8005912 <USB_EPStartXfer+0xdbe>
 800581c:	f107 0318 	add.w	r3, r7, #24
 8005820:	1d3a      	adds	r2, r7, #4
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	1d3b      	adds	r3, r7, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800582e:	b29b      	uxth	r3, r3
 8005830:	4619      	mov	r1, r3
 8005832:	f107 0318 	add.w	r3, r7, #24
 8005836:	f107 0218 	add.w	r2, r7, #24
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	440a      	add	r2, r1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	463b      	mov	r3, r7
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	f107 0318 	add.w	r3, r7, #24
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4413      	add	r3, r2
 8005850:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11a      	bne.n	8005898 <USB_EPStartXfer+0xd44>
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005870:	b29a      	uxth	r2, r3
 8005872:	f107 0314 	add.w	r3, r7, #20
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	f107 0314 	add.w	r3, r7, #20
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	801a      	strh	r2, [r3, #0]
 8005896:	e062      	b.n	800595e <USB_EPStartXfer+0xe0a>
 8005898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800589c:	2b3e      	cmp	r3, #62	; 0x3e
 800589e:	d819      	bhi.n	80058d4 <USB_EPStartXfer+0xd80>
 80058a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <USB_EPStartXfer+0xd6c>
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ba:	3301      	adds	r3, #1
 80058bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	f107 0314 	add.w	r3, r7, #20
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	801a      	strh	r2, [r3, #0]
 80058d2:	e044      	b.n	800595e <USB_EPStartXfer+0xe0a>
 80058d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058e2:	f003 031f 	and.w	r3, r3, #31
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <USB_EPStartXfer+0xda0>
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	029b      	lsls	r3, r3, #10
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e025      	b.n	800595e <USB_EPStartXfer+0xe0a>
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	785b      	ldrb	r3, [r3, #1]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d120      	bne.n	800595e <USB_EPStartXfer+0xe0a>
 800591c:	1d3b      	adds	r3, r7, #4
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005924:	b29b      	uxth	r3, r3
 8005926:	4619      	mov	r1, r3
 8005928:	f107 031c 	add.w	r3, r7, #28
 800592c:	f107 021c 	add.w	r2, r7, #28
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	440a      	add	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	463b      	mov	r3, r7
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011a      	lsls	r2, r3, #4
 800593e:	f107 031c 	add.w	r3, r7, #28
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4413      	add	r3, r2
 8005946:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800594a:	f107 0310 	add.w	r3, r7, #16
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005954:	b29a      	uxth	r2, r3
 8005956:	f107 0310 	add.w	r3, r7, #16
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	895b      	ldrh	r3, [r3, #10]
 8005964:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6959      	ldr	r1, [r3, #20]
 800596e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005972:	b29b      	uxth	r3, r3
 8005974:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005978:	1d38      	adds	r0, r7, #4
 800597a:	6800      	ldr	r0, [r0, #0]
 800597c:	f000 fd2f 	bl	80063de <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	463b      	mov	r3, r7
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	b29b      	uxth	r3, r3
 8005992:	f107 020e 	add.w	r2, r7, #14
 8005996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599e:	8013      	strh	r3, [r2, #0]
 80059a0:	f107 030e 	add.w	r3, r7, #14
 80059a4:	f107 020e 	add.w	r2, r7, #14
 80059a8:	8812      	ldrh	r2, [r2, #0]
 80059aa:	f082 0210 	eor.w	r2, r2, #16
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	f107 030e 	add.w	r3, r7, #14
 80059b4:	f107 020e 	add.w	r2, r7, #14
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	f082 0220 	eor.w	r2, r2, #32
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	f107 030e 	add.w	r3, r7, #14
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	8013      	strh	r3, [r2, #0]
 80059e8:	e3b5      	b.n	8006156 <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	7b1b      	ldrb	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f040 8090 	bne.w	8005b16 <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d90e      	bls.n	8005a24 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8005a06:	463b      	mov	r3, r7
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8005a10:	463b      	mov	r3, r7
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	619a      	str	r2, [r3, #24]
 8005a22:	e008      	b.n	8005a36 <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8005a24:	463b      	mov	r3, r7
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a36:	1d3b      	adds	r3, r7, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a3e:	1d3b      	adds	r3, r7, #4
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a4e:	4413      	add	r3, r2
 8005a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	011a      	lsls	r2, r3, #4
 8005a5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a60:	4413      	add	r3, r2
 8005a62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d116      	bne.n	8005aa0 <USB_EPStartXfer+0xf4c>
 8005a72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e32c      	b.n	80060fa <USB_EPStartXfer+0x15a6>
 8005aa0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa6:	d818      	bhi.n	8005ada <USB_EPStartXfer+0xf86>
 8005aa8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ab2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <USB_EPStartXfer+0xf74>
 8005abe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ac8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e30f      	b.n	80060fa <USB_EPStartXfer+0x15a6>
 8005ada:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d104      	bne.n	8005afa <USB_EPStartXfer+0xfa6>
 8005af0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005af4:	3b01      	subs	r3, #1
 8005af6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005afa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e2f1      	b.n	80060fa <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	78db      	ldrb	r3, [r3, #3]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f040 818f 	bne.w	8005e40 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b22:	463b      	mov	r3, r7
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d175      	bne.n	8005c18 <USB_EPStartXfer+0x10c4>
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b34:	1d3b      	adds	r3, r7, #4
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b44:	4413      	add	r3, r2
 8005b46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	011a      	lsls	r2, r3, #4
 8005b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b56:	4413      	add	r3, r2
 8005b58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d116      	bne.n	8005b98 <USB_EPStartXfer+0x1044>
 8005b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e065      	b.n	8005c64 <USB_EPStartXfer+0x1110>
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba0:	d81a      	bhi.n	8005bd8 <USB_EPStartXfer+0x1084>
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bae:	463b      	mov	r3, r7
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d004      	beq.n	8005bc6 <USB_EPStartXfer+0x1072>
 8005bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e045      	b.n	8005c64 <USB_EPStartXfer+0x1110>
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <USB_EPStartXfer+0x10a8>
 8005bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c14:	801a      	strh	r2, [r3, #0]
 8005c16:	e025      	b.n	8005c64 <USB_EPStartXfer+0x1110>
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d120      	bne.n	8005c64 <USB_EPStartXfer+0x1110>
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	011a      	lsls	r2, r3, #4
 8005c48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c56:	463b      	mov	r3, r7
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	785b      	ldrb	r3, [r3, #1]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d175      	bne.n	8005d62 <USB_EPStartXfer+0x120e>
 8005c76:	1d3b      	adds	r3, r7, #4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c8e:	4413      	add	r3, r2
 8005c90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c94:	463b      	mov	r3, r7
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	011a      	lsls	r2, r3, #4
 8005c9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <USB_EPStartXfer+0x118e>
 8005cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cc6:	801a      	strh	r2, [r3, #0]
 8005cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e061      	b.n	8005da6 <USB_EPStartXfer+0x1252>
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cea:	d81a      	bhi.n	8005d22 <USB_EPStartXfer+0x11ce>
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005cf8:	463b      	mov	r3, r7
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <USB_EPStartXfer+0x11bc>
 8005d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e041      	b.n	8005da6 <USB_EPStartXfer+0x1252>
 8005d22:	463b      	mov	r3, r7
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <USB_EPStartXfer+0x11f2>
 8005d3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d40:	3b01      	subs	r3, #1
 8005d42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	e021      	b.n	8005da6 <USB_EPStartXfer+0x1252>
 8005d62:	463b      	mov	r3, r7
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d11c      	bne.n	8005da6 <USB_EPStartXfer+0x1252>
 8005d6c:	1d3b      	adds	r3, r7, #4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d82:	463b      	mov	r3, r7
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	011a      	lsls	r2, r3, #4
 8005d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d8e:	4413      	add	r3, r2
 8005d90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d98:	463b      	mov	r3, r7
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005da4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 81a4 	beq.w	80060fa <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005dc6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <USB_EPStartXfer+0x128a>
 8005dd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10d      	bne.n	8005dfa <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8187 	bne.w	80060fa <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8180 	bne.w	80060fa <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	463b      	mov	r3, r7
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	441a      	add	r2, r3
 8005e26:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
 8005e3e:	e15c      	b.n	80060fa <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e40:	463b      	mov	r3, r7
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	78db      	ldrb	r3, [r3, #3]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	f040 8155 	bne.w	80060f6 <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	463b      	mov	r3, r7
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d90e      	bls.n	8005e7a <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e70:	1ad2      	subs	r2, r2, r3
 8005e72:	463b      	mov	r3, r7
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	619a      	str	r2, [r3, #24]
 8005e78:	e008      	b.n	8005e8c <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8005e84:	463b      	mov	r3, r7
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e8c:	463b      	mov	r3, r7
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d16f      	bne.n	8005f76 <USB_EPStartXfer+0x1422>
 8005e96:	1d3b      	adds	r3, r7, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e9e:	1d3b      	adds	r3, r7, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eae:	4413      	add	r3, r2
 8005eb0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	011a      	lsls	r2, r3, #4
 8005ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <USB_EPStartXfer+0x13ac>
 8005ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e05f      	b.n	8005fc0 <USB_EPStartXfer+0x146c>
 8005f00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f04:	2b3e      	cmp	r3, #62	; 0x3e
 8005f06:	d818      	bhi.n	8005f3a <USB_EPStartXfer+0x13e6>
 8005f08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <USB_EPStartXfer+0x13d4>
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e042      	b.n	8005fc0 <USB_EPStartXfer+0x146c>
 8005f3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <USB_EPStartXfer+0x1406>
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f54:	3b01      	subs	r3, #1
 8005f56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	029b      	lsls	r3, r3, #10
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e024      	b.n	8005fc0 <USB_EPStartXfer+0x146c>
 8005f76:	463b      	mov	r3, r7
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d11f      	bne.n	8005fc0 <USB_EPStartXfer+0x146c>
 8005f80:	1d3b      	adds	r3, r7, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	4413      	add	r3, r2
 8005f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f9e:	463b      	mov	r3, r7
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	1d3b      	adds	r3, r7, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d16f      	bne.n	80060b2 <USB_EPStartXfer+0x155e>
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fea:	4413      	add	r3, r2
 8005fec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	011a      	lsls	r2, r3, #4
 8005ff8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006002:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006006:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <USB_EPStartXfer+0x14e8>
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e05e      	b.n	80060fa <USB_EPStartXfer+0x15a6>
 800603c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006040:	2b3e      	cmp	r3, #62	; 0x3e
 8006042:	d818      	bhi.n	8006076 <USB_EPStartXfer+0x1522>
 8006044:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006048:	085b      	lsrs	r3, r3, #1
 800604a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800604e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <USB_EPStartXfer+0x1510>
 800605a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800605e:	3301      	adds	r3, #1
 8006060:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006064:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29a      	uxth	r2, r3
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e041      	b.n	80060fa <USB_EPStartXfer+0x15a6>
 8006076:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006080:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006084:	f003 031f 	and.w	r3, r3, #31
 8006088:	2b00      	cmp	r3, #0
 800608a:	d104      	bne.n	8006096 <USB_EPStartXfer+0x1542>
 800608c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006090:	3b01      	subs	r3, #1
 8006092:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006096:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800609a:	b29b      	uxth	r3, r3
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	b29b      	uxth	r3, r3
 80060a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e023      	b.n	80060fa <USB_EPStartXfer+0x15a6>
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d11e      	bne.n	80060fa <USB_EPStartXfer+0x15a6>
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060cc:	4413      	add	r3, r2
 80060ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	011a      	lsls	r2, r3, #4
 80060da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80060de:	4413      	add	r3, r2
 80060e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f2:	801a      	strh	r2, [r3, #0]
 80060f4:	e001      	b.n	80060fa <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e02e      	b.n	8006158 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060fa:	1d3b      	adds	r3, r7, #4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	463b      	mov	r3, r7
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006118:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800611c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006120:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006124:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006128:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800612c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006130:	1d3b      	adds	r3, r7, #4
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	463b      	mov	r3, r7
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800614a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800614e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006152:	b29b      	uxth	r3, r3
 8006154:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	785b      	ldrb	r3, [r3, #1]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d020      	beq.n	80061b6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618a:	81fb      	strh	r3, [r7, #14]
 800618c:	89fb      	ldrh	r3, [r7, #14]
 800618e:	f083 0310 	eor.w	r3, r3, #16
 8006192:	81fb      	strh	r3, [r7, #14]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	441a      	add	r2, r3
 800619e:	89fb      	ldrh	r3, [r7, #14]
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]
 80061b4:	e01f      	b.n	80061f6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	81bb      	strh	r3, [r7, #12]
 80061ce:	89bb      	ldrh	r3, [r7, #12]
 80061d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061d4:	81bb      	strh	r3, [r7, #12]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	89bb      	ldrh	r3, [r7, #12]
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bc80      	pop	{r7}
 8006200:	4770      	bx	lr

08006202 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006202:	b480      	push	{r7}
 8006204:	b087      	sub	sp, #28
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	7b1b      	ldrb	r3, [r3, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	f040 809d 	bne.w	8006350 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	785b      	ldrb	r3, [r3, #1]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d04c      	beq.n	80062b8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	82fb      	strh	r3, [r7, #22]
 800622c:	8afb      	ldrh	r3, [r7, #22]
 800622e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01b      	beq.n	800626e <USB_EPClearStall+0x6c>
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624c:	82bb      	strh	r3, [r7, #20]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	441a      	add	r2, r3
 8006258:	8abb      	ldrh	r3, [r7, #20]
 800625a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800625e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800626a:	b29b      	uxth	r3, r3
 800626c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	78db      	ldrb	r3, [r3, #3]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d06c      	beq.n	8006350 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628c:	827b      	strh	r3, [r7, #18]
 800628e:	8a7b      	ldrh	r3, [r7, #18]
 8006290:	f083 0320 	eor.w	r3, r3, #32
 8006294:	827b      	strh	r3, [r7, #18]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	441a      	add	r2, r3
 80062a0:	8a7b      	ldrh	r3, [r7, #18]
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]
 80062b6:	e04b      	b.n	8006350 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	823b      	strh	r3, [r7, #16]
 80062c6:	8a3b      	ldrh	r3, [r7, #16]
 80062c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01b      	beq.n	8006308 <USB_EPClearStall+0x106>
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	81fb      	strh	r3, [r7, #14]
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	89fb      	ldrh	r3, [r7, #14]
 80062f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006304:	b29b      	uxth	r3, r3
 8006306:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	81bb      	strh	r3, [r7, #12]
 8006320:	89bb      	ldrh	r3, [r7, #12]
 8006322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006326:	81bb      	strh	r3, [r7, #12]
 8006328:	89bb      	ldrh	r3, [r7, #12]
 800632a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800632e:	81bb      	strh	r3, [r7, #12]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	89bb      	ldrh	r3, [r7, #12]
 800633c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2280      	movs	r2, #128	; 0x80
 8006372:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80063bc:	68fb      	ldr	r3, [r7, #12]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bc80      	pop	{r7}
 80063c6:	4770      	bx	lr

080063c8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063de:	b480      	push	{r7}
 80063e0:	b08d      	sub	sp, #52	; 0x34
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	4611      	mov	r1, r2
 80063ea:	461a      	mov	r2, r3
 80063ec:	460b      	mov	r3, r1
 80063ee:	80fb      	strh	r3, [r7, #6]
 80063f0:	4613      	mov	r3, r2
 80063f2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063f4:	88bb      	ldrh	r3, [r7, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	085b      	lsrs	r3, r3, #1
 80063fa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	005a      	lsls	r2, r3, #1
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006416:	e01e      	b.n	8006456 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	3301      	adds	r3, #1
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	021b      	lsls	r3, r3, #8
 800642c:	b29b      	uxth	r3, r3
 800642e:	461a      	mov	r2, r3
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	b29a      	uxth	r2, r3
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	3302      	adds	r3, #2
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	3302      	adds	r3, #2
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	3301      	adds	r3, #1
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	3b01      	subs	r3, #1
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1dd      	bne.n	8006418 <USB_WritePMA+0x3a>
  }
}
 800645c:	bf00      	nop
 800645e:	3734      	adds	r7, #52	; 0x34
 8006460:	46bd      	mov	sp, r7
 8006462:	bc80      	pop	{r7}
 8006464:	4770      	bx	lr

08006466 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006466:	b480      	push	{r7}
 8006468:	b08b      	sub	sp, #44	; 0x2c
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	4611      	mov	r1, r2
 8006472:	461a      	mov	r2, r3
 8006474:	460b      	mov	r3, r1
 8006476:	80fb      	strh	r3, [r7, #6]
 8006478:	4613      	mov	r3, r2
 800647a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800647c:	88bb      	ldrh	r3, [r7, #4]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b29b      	uxth	r3, r3
 8006482:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800648c:	88fb      	ldrh	r3, [r7, #6]
 800648e:	005a      	lsls	r2, r3, #1
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006498:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	e01b      	b.n	80064d8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	3302      	adds	r3, #2
 80064ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	3301      	adds	r3, #1
 80064ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	3301      	adds	r3, #1
 80064ca:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	3302      	adds	r3, #2
 80064d0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	3b01      	subs	r3, #1
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e0      	bne.n	80064a0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80064de:	88bb      	ldrh	r3, [r7, #4]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	701a      	strb	r2, [r3, #0]
  }
}
 80064fa:	bf00      	nop
 80064fc:	372c      	adds	r7, #44	; 0x2c
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <MX_FATFS_Init+0x18>)
 800650a:	4805      	ldr	r0, [pc, #20]	; (8006520 <MX_FATFS_Init+0x1c>)
 800650c:	f002 fd96 	bl	800903c <FATFS_LinkDriver>
 8006510:	4603      	mov	r3, r0
 8006512:	461a      	mov	r2, r3
 8006514:	4b03      	ldr	r3, [pc, #12]	; (8006524 <MX_FATFS_Init+0x20>)
 8006516:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006518:	bf00      	nop
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20002d24 	.word	0x20002d24
 8006520:	20000060 	.word	0x20000060
 8006524:	20002d28 	.word	0x20002d28

08006528 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <USER_initialize+0x20>)
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006538:	4b03      	ldr	r3, [pc, #12]	; (8006548 <USER_initialize+0x20>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	2000005d 	.word	0x2000005d

0800654c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006556:	4b05      	ldr	r3, [pc, #20]	; (800656c <USER_status+0x20>)
 8006558:	2201      	movs	r2, #1
 800655a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800655c:	4b03      	ldr	r3, [pc, #12]	; (800656c <USER_status+0x20>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	bc80      	pop	{r7}
 800656a:	4770      	bx	lr
 800656c:	2000005d 	.word	0x2000005d

08006570 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006580:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	bc80      	pop	{r7}
 800658a:	4770      	bx	lr

0800658c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800659c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	603a      	str	r2, [r7, #0]
 80065b2:	71fb      	strb	r3, [r7, #7]
 80065b4:	460b      	mov	r3, r1
 80065b6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	73fb      	strb	r3, [r7, #15]
    return res;
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	7c1b      	ldrb	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d115      	bne.n	8006608 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80065dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e0:	2202      	movs	r2, #2
 80065e2:	2101      	movs	r1, #1
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f005 fe06 	bl	800c1f6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80065f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065f6:	2202      	movs	r2, #2
 80065f8:	2181      	movs	r1, #129	; 0x81
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f005 fdfb 	bl	800c1f6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	62da      	str	r2, [r3, #44]	; 0x2c
 8006606:	e012      	b.n	800662e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006608:	2340      	movs	r3, #64	; 0x40
 800660a:	2202      	movs	r2, #2
 800660c:	2101      	movs	r1, #1
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f005 fdf1 	bl	800c1f6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	2202      	movs	r2, #2
 8006620:	2181      	movs	r1, #129	; 0x81
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f005 fde7 	bl	800c1f6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800662e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006632:	f005 ff27 	bl	800c484 <USBD_static_malloc>
 8006636:	4602      	mov	r2, r0
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006648:	2302      	movs	r3, #2
 800664a:	e003      	b.n	8006654 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f9d9 	bl	8006a04 <MSC_BOT_Init>

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006668:	2101      	movs	r1, #1
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f005 fde9 	bl	800c242 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006678:	2181      	movs	r1, #129	; 0x81
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f005 fde1 	bl	800c242 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa06 	bl	8006a98 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d009      	beq.n	80066aa <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	4618      	mov	r0, r3
 800669e:	f005 fefd 	bl	800c49c <USBD_static_free>
    pdev->pClassData  = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c4:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d04d      	beq.n	8006776 <USBD_MSC_Setup+0xc2>
 80066da:	2b20      	cmp	r3, #32
 80066dc:	f040 8113 	bne.w	8006906 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2bfe      	cmp	r3, #254	; 0xfe
 80066e6:	d002      	beq.n	80066ee <USBD_MSC_Setup+0x3a>
 80066e8:	2bff      	cmp	r3, #255	; 0xff
 80066ea:	d024      	beq.n	8006736 <USBD_MSC_Setup+0x82>
 80066ec:	e03b      	b.n	8006766 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	885b      	ldrh	r3, [r3, #2]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d118      	bne.n	8006728 <USBD_MSC_Setup+0x74>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	88db      	ldrh	r3, [r3, #6]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d114      	bne.n	8006728 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006704:	2b00      	cmp	r3, #0
 8006706:	da0f      	bge.n	8006728 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	4798      	blx	r3
 8006712:	4603      	mov	r3, r0
 8006714:	461a      	mov	r2, r3
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2201      	movs	r2, #1
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f002 fbbd 	bl	8008ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006726:	e025      	b.n	8006774 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f002 fb4e 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8006730:	2302      	movs	r3, #2
 8006732:	75fb      	strb	r3, [r7, #23]
          break;
 8006734:	e01e      	b.n	8006774 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	885b      	ldrh	r3, [r3, #2]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10c      	bne.n	8006758 <USBD_MSC_Setup+0xa4>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	88db      	ldrh	r3, [r3, #6]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d108      	bne.n	8006758 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800674c:	2b00      	cmp	r3, #0
 800674e:	db03      	blt.n	8006758 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f987 	bl	8006a64 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006756:	e00d      	b.n	8006774 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f002 fb36 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8006760:	2302      	movs	r3, #2
 8006762:	75fb      	strb	r3, [r7, #23]
          break;
 8006764:	e006      	b.n	8006774 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fb2f 	bl	8008dcc <USBD_CtlError>
          ret = USBD_FAIL;
 800676e:	2302      	movs	r3, #2
 8006770:	75fb      	strb	r3, [r7, #23]
          break;
 8006772:	bf00      	nop
      }
      break;
 8006774:	e0ce      	b.n	8006914 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b0b      	cmp	r3, #11
 800677c:	f200 80bb 	bhi.w	80068f6 <USBD_MSC_Setup+0x242>
 8006780:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <USBD_MSC_Setup+0xd4>)
 8006782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006786:	bf00      	nop
 8006788:	080067b9 	.word	0x080067b9
 800678c:	0800682f 	.word	0x0800682f
 8006790:	080068f7 	.word	0x080068f7
 8006794:	080068f7 	.word	0x080068f7
 8006798:	080068f7 	.word	0x080068f7
 800679c:	080068f7 	.word	0x080068f7
 80067a0:	080068f7 	.word	0x080068f7
 80067a4:	080068f7 	.word	0x080068f7
 80067a8:	080068f7 	.word	0x080068f7
 80067ac:	080068f7 	.word	0x080068f7
 80067b0:	080067e1 	.word	0x080067e1
 80067b4:	08006809 	.word	0x08006809
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067be:	2b03      	cmp	r3, #3
 80067c0:	d107      	bne.n	80067d2 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80067c2:	f107 030e 	add.w	r3, r7, #14
 80067c6:	2202      	movs	r2, #2
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f002 fb68 	bl	8008ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067d0:	e098      	b.n	8006904 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f002 faf9 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 80067da:	2302      	movs	r3, #2
 80067dc:	75fb      	strb	r3, [r7, #23]
          break;
 80067de:	e091      	b.n	8006904 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d107      	bne.n	80067fa <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3304      	adds	r3, #4
 80067ee:	2201      	movs	r2, #1
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f002 fb54 	bl	8008ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067f8:	e084      	b.n	8006904 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f002 fae5 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	75fb      	strb	r3, [r7, #23]
          break;
 8006806:	e07d      	b.n	8006904 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680e:	2b03      	cmp	r3, #3
 8006810:	d106      	bne.n	8006820 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	885b      	ldrh	r3, [r3, #2]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800681e:	e071      	b.n	8006904 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006820:	6839      	ldr	r1, [r7, #0]
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f002 fad2 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	75fb      	strb	r3, [r7, #23]
          break;
 800682c:	e06a      	b.n	8006904 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	889b      	ldrh	r3, [r3, #4]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f005 fd22 	bl	800c280 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	889b      	ldrh	r3, [r3, #4]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f005 fcfc 	bl	800c242 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	889b      	ldrh	r3, [r3, #4]
 800684e:	b25b      	sxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	da23      	bge.n	800689c <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	f003 020f 	and.w	r2, r3, #15
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	3318      	adds	r3, #24
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7c1b      	ldrb	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687c:	2202      	movs	r2, #2
 800687e:	2181      	movs	r1, #129	; 0x81
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f005 fcb8 	bl	800c1f6 <USBD_LL_OpenEP>
 8006886:	e005      	b.n	8006894 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006888:	2340      	movs	r3, #64	; 0x40
 800688a:	2202      	movs	r2, #2
 800688c:	2181      	movs	r1, #129	; 0x81
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f005 fcb1 	bl	800c1f6 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	62da      	str	r2, [r3, #44]	; 0x2c
 800689a:	e024      	b.n	80068e6 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	889b      	ldrh	r3, [r3, #4]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 020f 	and.w	r2, r3, #15
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80068b6:	2200      	movs	r2, #0
 80068b8:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7c1b      	ldrb	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80068c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068c6:	2202      	movs	r2, #2
 80068c8:	2101      	movs	r1, #1
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f005 fc93 	bl	800c1f6 <USBD_LL_OpenEP>
 80068d0:	e005      	b.n	80068de <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80068d2:	2340      	movs	r3, #64	; 0x40
 80068d4:	2202      	movs	r2, #2
 80068d6:	2101      	movs	r1, #1
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f005 fc8c 	bl	800c1f6 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	889b      	ldrh	r3, [r3, #4]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa50 	bl	8006d94 <MSC_BOT_CplClrFeature>
          break;
 80068f4:	e006      	b.n	8006904 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f002 fa67 	bl	8008dcc <USBD_CtlError>
          ret = USBD_FAIL;
 80068fe:	2302      	movs	r3, #2
 8006900:	75fb      	strb	r3, [r7, #23]
          break;
 8006902:	bf00      	nop
      }
      break;
 8006904:	e006      	b.n	8006914 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 fa5f 	bl	8008dcc <USBD_CtlError>
      ret = USBD_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	75fb      	strb	r3, [r7, #23]
      break;
 8006912:	bf00      	nop
  }

  return ret;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800692c:	78fb      	ldrb	r3, [r7, #3]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 f8c1 	bl	8006ab8 <MSC_BOT_DataIn>

  return USBD_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f8e2 	bl	8006b1a <MSC_BOT_DataOut>

  return USBD_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800696e:	4b03      	ldr	r3, [pc, #12]	; (800697c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	200000ac 	.word	0x200000ac

08006980 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800698e:	4b03      	ldr	r3, [pc, #12]	; (800699c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	200000cc 	.word	0x200000cc

080069a0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	200000ec 	.word	0x200000ec

080069c0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	220a      	movs	r2, #10
 80069cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80069ce:	4b03      	ldr	r3, [pc, #12]	; (80069dc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	2000010c 	.word	0x2000010c

080069e0 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d003      	beq.n	80069f8 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2000      	movs	r0, #0
 8006a3a:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f005 fc1e 	bl	800c280 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006a44:	2181      	movs	r1, #129	; 0x81
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f005 fc1a 	bl	800c280 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006a52:	231f      	movs	r3, #31
 8006a54:	2101      	movs	r1, #1
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f005 fcdd 	bl	800c416 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a72:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006a86:	231f      	movs	r3, #31
 8006a88:	2101      	movs	r1, #1
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f005 fcc3 	bl	800c416 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006a90:	bf00      	nop
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	721a      	strb	r2, [r3, #8]
}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bc80      	pop	{r7}
 8006ab6:	4770      	bx	lr

08006ab8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aca:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	7a1b      	ldrb	r3, [r3, #8]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d004      	beq.n	8006ade <MSC_BOT_DataIn+0x26>
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	db19      	blt.n	8006b0c <MSC_BOT_DataIn+0x54>
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	dc17      	bgt.n	8006b0c <MSC_BOT_DataIn+0x54>
 8006adc:	e011      	b.n	8006b02 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006aea:	461a      	mov	r2, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f979 	bl	8006de4 <SCSI_ProcessCmd>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	da0b      	bge.n	8006b10 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006af8:	2101      	movs	r1, #1
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f8f0 	bl	8006ce0 <MSC_BOT_SendCSW>
      }
      break;
 8006b00:	e006      	b.n	8006b10 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006b02:	2100      	movs	r1, #0
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f8eb 	bl	8006ce0 <MSC_BOT_SendCSW>
      break;
 8006b0a:	e002      	b.n	8006b12 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <MSC_BOT_DataIn+0x5a>
      break;
 8006b10:	bf00      	nop
  }
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	7a1b      	ldrb	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <MSC_BOT_DataOut+0x22>
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d004      	beq.n	8006b44 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006b3a:	e015      	b.n	8006b68 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f817 	bl	8006b70 <MSC_BOT_CBW_Decode>
      break;
 8006b42:	e011      	b.n	8006b68 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006b50:	461a      	mov	r2, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f946 	bl	8006de4 <SCSI_ProcessCmd>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	da03      	bge.n	8006b66 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006b5e:	2101      	movs	r1, #1
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f8bd 	bl	8006ce0 <MSC_BOT_SendCSW>
      break;
 8006b66:	bf00      	nop
  }
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006b98:	2101      	movs	r1, #1
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f005 fc5e 	bl	800c45c <USBD_LL_GetRxDataSize>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b1f      	cmp	r3, #31
 8006ba4:	d114      	bne.n	8006bd0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006bac:	4a32      	ldr	r2, [pc, #200]	; (8006c78 <MSC_BOT_CBW_Decode+0x108>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d10e      	bne.n	8006bd0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d809      	bhi.n	8006bd0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8006bcc:	2b10      	cmp	r3, #16
 8006bce:	d90e      	bls.n	8006bee <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006bd6:	2320      	movs	r3, #32
 8006bd8:	2205      	movs	r2, #5
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fc48 	bl	8007470 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2202      	movs	r2, #2
 8006be4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8a6 	bl	8006d38 <MSC_BOT_Abort>
 8006bec:	e041      	b.n	8006c72 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f8f1 	bl	8006de4 <SCSI_ProcessCmd>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	da0c      	bge.n	8006c22 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	7a1b      	ldrb	r3, [r3, #8]
 8006c0c:	2b05      	cmp	r3, #5
 8006c0e:	d104      	bne.n	8006c1a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006c10:	2101      	movs	r1, #1
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f864 	bl	8006ce0 <MSC_BOT_SendCSW>
 8006c18:	e02b      	b.n	8006c72 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f88c 	bl	8006d38 <MSC_BOT_Abort>
 8006c20:	e027      	b.n	8006c72 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	7a1b      	ldrb	r3, [r3, #8]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d022      	beq.n	8006c70 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d01e      	beq.n	8006c70 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d01a      	beq.n	8006c70 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f103 010c 	add.w	r1, r3, #12
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	895b      	ldrh	r3, [r3, #10]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f814 	bl	8006c7c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006c54:	e00d      	b.n	8006c72 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	895b      	ldrh	r3, [r3, #10]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d104      	bne.n	8006c68 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006c5e:	2100      	movs	r1, #0
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f83d 	bl	8006ce0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006c66:	e004      	b.n	8006c72 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f865 	bl	8006d38 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006c6e:	e000      	b.n	8006c72 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006c70:	bf00      	nop
    }
  }
}
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	43425355 	.word	0x43425355

08006c7c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c90:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d204      	bcs.n	8006ca8 <MSC_BOT_SendData+0x2c>
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	e000      	b.n	8006caa <MSC_BOT_SendData+0x2e>
 8006ca8:	88fb      	ldrh	r3, [r7, #6]
 8006caa:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006cb2:	88fb      	ldrh	r3, [r7, #6]
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006cca:	8a7b      	ldrh	r3, [r7, #18]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	2181      	movs	r1, #129	; 0x81
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f005 fb7d 	bl	800c3d0 <USBD_LL_Transmit>
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <MSC_BOT_SendCSW+0x54>)
 8006cf8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	78fa      	ldrb	r2, [r7, #3]
 8006d00:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006d10:	230d      	movs	r3, #13
 8006d12:	2181      	movs	r1, #129	; 0x81
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f005 fb5b 	bl	800c3d0 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006d20:	231f      	movs	r3, #31
 8006d22:	2101      	movs	r1, #1
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f005 fb76 	bl	800c416 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	53425355 	.word	0x53425355

08006d38 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10c      	bne.n	8006d6c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006d64:	2101      	movs	r1, #1
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f005 faa9 	bl	800c2be <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006d6c:	2181      	movs	r1, #129	; 0x81
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f005 faa5 	bl	800c2be <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	7a5b      	ldrb	r3, [r3, #9]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d107      	bne.n	8006d8c <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006d82:	231f      	movs	r3, #31
 8006d84:	2101      	movs	r1, #1
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f005 fb45 	bl	800c416 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	7a5b      	ldrb	r3, [r3, #9]
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d107      	bne.n	8006dc0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006db0:	2181      	movs	r1, #129	; 0x81
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f005 fa83 	bl	800c2be <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	725a      	strb	r2, [r3, #9]
 8006dbe:	e00d      	b.n	8006ddc <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da08      	bge.n	8006dda <MSC_BOT_CplClrFeature+0x46>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	7a5b      	ldrb	r3, [r3, #9]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d004      	beq.n	8006dda <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ff84 	bl	8006ce0 <MSC_BOT_SendCSW>
 8006dd8:	e000      	b.n	8006ddc <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006dda:	bf00      	nop
  }
}
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	460b      	mov	r3, r1
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b5a      	cmp	r3, #90	; 0x5a
 8006df8:	f200 810e 	bhi.w	8007018 <SCSI_ProcessCmd+0x234>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <SCSI_ProcessCmd+0x20>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006f71 	.word	0x08006f71
 8006e08:	08007019 	.word	0x08007019
 8006e0c:	08007019 	.word	0x08007019
 8006e10:	08006f7f 	.word	0x08006f7f
 8006e14:	08007019 	.word	0x08007019
 8006e18:	08007019 	.word	0x08007019
 8006e1c:	08007019 	.word	0x08007019
 8006e20:	08007019 	.word	0x08007019
 8006e24:	08007019 	.word	0x08007019
 8006e28:	08007019 	.word	0x08007019
 8006e2c:	08007019 	.word	0x08007019
 8006e30:	08007019 	.word	0x08007019
 8006e34:	08007019 	.word	0x08007019
 8006e38:	08007019 	.word	0x08007019
 8006e3c:	08007019 	.word	0x08007019
 8006e40:	08007019 	.word	0x08007019
 8006e44:	08007019 	.word	0x08007019
 8006e48:	08007019 	.word	0x08007019
 8006e4c:	08006f8d 	.word	0x08006f8d
 8006e50:	08007019 	.word	0x08007019
 8006e54:	08007019 	.word	0x08007019
 8006e58:	08007019 	.word	0x08007019
 8006e5c:	08007019 	.word	0x08007019
 8006e60:	08007019 	.word	0x08007019
 8006e64:	08007019 	.word	0x08007019
 8006e68:	08007019 	.word	0x08007019
 8006e6c:	08006fb7 	.word	0x08006fb7
 8006e70:	08006f9b 	.word	0x08006f9b
 8006e74:	08007019 	.word	0x08007019
 8006e78:	08007019 	.word	0x08007019
 8006e7c:	08006fa9 	.word	0x08006fa9
 8006e80:	08007019 	.word	0x08007019
 8006e84:	08007019 	.word	0x08007019
 8006e88:	08007019 	.word	0x08007019
 8006e8c:	08007019 	.word	0x08007019
 8006e90:	08006fd3 	.word	0x08006fd3
 8006e94:	08007019 	.word	0x08007019
 8006e98:	08006fe1 	.word	0x08006fe1
 8006e9c:	08007019 	.word	0x08007019
 8006ea0:	08007019 	.word	0x08007019
 8006ea4:	08006fef 	.word	0x08006fef
 8006ea8:	08007019 	.word	0x08007019
 8006eac:	08006ffd 	.word	0x08006ffd
 8006eb0:	08007019 	.word	0x08007019
 8006eb4:	08007019 	.word	0x08007019
 8006eb8:	08007019 	.word	0x08007019
 8006ebc:	08007019 	.word	0x08007019
 8006ec0:	0800700b 	.word	0x0800700b
 8006ec4:	08007019 	.word	0x08007019
 8006ec8:	08007019 	.word	0x08007019
 8006ecc:	08007019 	.word	0x08007019
 8006ed0:	08007019 	.word	0x08007019
 8006ed4:	08007019 	.word	0x08007019
 8006ed8:	08007019 	.word	0x08007019
 8006edc:	08007019 	.word	0x08007019
 8006ee0:	08007019 	.word	0x08007019
 8006ee4:	08007019 	.word	0x08007019
 8006ee8:	08007019 	.word	0x08007019
 8006eec:	08007019 	.word	0x08007019
 8006ef0:	08007019 	.word	0x08007019
 8006ef4:	08007019 	.word	0x08007019
 8006ef8:	08007019 	.word	0x08007019
 8006efc:	08007019 	.word	0x08007019
 8006f00:	08007019 	.word	0x08007019
 8006f04:	08007019 	.word	0x08007019
 8006f08:	08007019 	.word	0x08007019
 8006f0c:	08007019 	.word	0x08007019
 8006f10:	08007019 	.word	0x08007019
 8006f14:	08007019 	.word	0x08007019
 8006f18:	08007019 	.word	0x08007019
 8006f1c:	08007019 	.word	0x08007019
 8006f20:	08007019 	.word	0x08007019
 8006f24:	08007019 	.word	0x08007019
 8006f28:	08007019 	.word	0x08007019
 8006f2c:	08007019 	.word	0x08007019
 8006f30:	08007019 	.word	0x08007019
 8006f34:	08007019 	.word	0x08007019
 8006f38:	08007019 	.word	0x08007019
 8006f3c:	08007019 	.word	0x08007019
 8006f40:	08007019 	.word	0x08007019
 8006f44:	08007019 	.word	0x08007019
 8006f48:	08007019 	.word	0x08007019
 8006f4c:	08007019 	.word	0x08007019
 8006f50:	08007019 	.word	0x08007019
 8006f54:	08007019 	.word	0x08007019
 8006f58:	08007019 	.word	0x08007019
 8006f5c:	08007019 	.word	0x08007019
 8006f60:	08007019 	.word	0x08007019
 8006f64:	08007019 	.word	0x08007019
 8006f68:	08007019 	.word	0x08007019
 8006f6c:	08006fc5 	.word	0x08006fc5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	4619      	mov	r1, r3
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f85c 	bl	8007034 <SCSI_TestUnitReady>
      break;
 8006f7c:	e055      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4619      	mov	r1, r3
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fa09 	bl	800739c <SCSI_RequestSense>
      break;
 8006f8a:	e04e      	b.n	800702a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	4619      	mov	r1, r3
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f888 	bl	80070a8 <SCSI_Inquiry>
      break;
 8006f98:	e047      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 fa9e 	bl	80074e2 <SCSI_StartStopUnit>
      break;
 8006fa6:	e040      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006fa8:	7afb      	ldrb	r3, [r7, #11]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4619      	mov	r1, r3
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fa97 	bl	80074e2 <SCSI_StartStopUnit>
      break;
 8006fb4:	e039      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f99d 	bl	80072fc <SCSI_ModeSense6>
      break;
 8006fc2:	e032      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 f9be 	bl	800734c <SCSI_ModeSense10>
      break;
 8006fd0:	e02b      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f92a 	bl	8007232 <SCSI_ReadFormatCapacity>
      break;
 8006fde:	e024      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006fe0:	7afb      	ldrb	r3, [r7, #11]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f8bc 	bl	8007164 <SCSI_ReadCapacity10>
      break;
 8006fec:	e01d      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fa88 	bl	800750a <SCSI_Read10>
      break;
 8006ffa:	e016      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4619      	mov	r1, r3
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fb0d 	bl	8007622 <SCSI_Write10>
      break;
 8007008:	e00f      	b.n	800702a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800700a:	7afb      	ldrb	r3, [r7, #11]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4619      	mov	r1, r3
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fbb6 	bl	8007782 <SCSI_Verify10>
      break;
 8007016:	e008      	b.n	800702a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007018:	7af9      	ldrb	r1, [r7, #11]
 800701a:	2320      	movs	r3, #32
 800701c:	2205      	movs	r2, #5
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fa26 	bl	8007470 <SCSI_SenseCode>
      return -1;
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	e000      	b.n	800702c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	460b      	mov	r3, r1
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007048:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800705a:	2320      	movs	r3, #32
 800705c:	2205      	movs	r2, #5
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fa06 	bl	8007470 <SCSI_SenseCode>

    return -1;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	e019      	b.n	800709e <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	7afa      	ldrb	r2, [r7, #11]
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800707e:	7af9      	ldrb	r1, [r7, #11]
 8007080:	233a      	movs	r3, #58	; 0x3a
 8007082:	2202      	movs	r2, #2
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f9f3 	bl	8007470 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2205      	movs	r2, #5
 800708e:	721a      	strb	r2, [r3, #8]

    return -1;
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	e003      	b.n	800709e <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	815a      	strh	r2, [r3, #10]

  return 0;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b089      	sub	sp, #36	; 0x24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	460b      	mov	r3, r1
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	3301      	adds	r3, #1
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d014      	beq.n	80070f6 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80070cc:	2307      	movs	r3, #7
 80070ce:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	8bfa      	ldrh	r2, [r7, #30]
 80070d4:	815a      	strh	r2, [r3, #10]

    while (len)
 80070d6:	e00a      	b.n	80070ee <SCSI_Inquiry+0x46>
    {
      len--;
 80070d8:	8bfb      	ldrh	r3, [r7, #30]
 80070da:	3b01      	subs	r3, #1
 80070dc:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80070de:	8bfb      	ldrh	r3, [r7, #30]
 80070e0:	8bfa      	ldrh	r2, [r7, #30]
 80070e2:	491f      	ldr	r1, [pc, #124]	; (8007160 <SCSI_Inquiry+0xb8>)
 80070e4:	5c89      	ldrb	r1, [r1, r2]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	4413      	add	r3, r2
 80070ea:	460a      	mov	r2, r1
 80070ec:	731a      	strb	r2, [r3, #12]
    while (len)
 80070ee:	8bfb      	ldrh	r3, [r7, #30]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f1      	bne.n	80070d8 <SCSI_Inquiry+0x30>
 80070f4:	e02e      	b.n	8007154 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070fc:	69d9      	ldr	r1, [r3, #28]
 80070fe:	7afa      	ldrb	r2, [r7, #11]
 8007100:	4613      	mov	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	3304      	adds	r3, #4
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	b29b      	uxth	r3, r3
 8007114:	3305      	adds	r3, #5
 8007116:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	8bfa      	ldrh	r2, [r7, #30]
 8007122:	429a      	cmp	r2, r3
 8007124:	d303      	bcc.n	800712e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3304      	adds	r3, #4
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	8bfa      	ldrh	r2, [r7, #30]
 8007132:	815a      	strh	r2, [r3, #10]

    while (len)
 8007134:	e00b      	b.n	800714e <SCSI_Inquiry+0xa6>
    {
      len--;
 8007136:	8bfb      	ldrh	r3, [r7, #30]
 8007138:	3b01      	subs	r3, #1
 800713a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 800713c:	8bfb      	ldrh	r3, [r7, #30]
 800713e:	8bfa      	ldrh	r2, [r7, #30]
 8007140:	6979      	ldr	r1, [r7, #20]
 8007142:	440a      	add	r2, r1
 8007144:	7811      	ldrb	r1, [r2, #0]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	4413      	add	r3, r2
 800714a:	460a      	mov	r2, r1
 800714c:	731a      	strb	r2, [r3, #12]
    while (len)
 800714e:	8bfb      	ldrh	r3, [r7, #30]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3724      	adds	r7, #36	; 0x24
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr
 8007160:	0800cfec 	.word	0x0800cfec

08007164 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	460b      	mov	r3, r1
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007178:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800718e:	7af8      	ldrb	r0, [r7, #11]
 8007190:	4798      	blx	r3
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007198:	7af9      	ldrb	r1, [r7, #11]
 800719a:	233a      	movs	r3, #58	; 0x3a
 800719c:	2202      	movs	r2, #2
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f966 	bl	8007470 <SCSI_SenseCode>
    return -1;
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	e03f      	b.n	800722a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80071b0:	3b01      	subs	r3, #1
 80071b2:	0e1b      	lsrs	r3, r3, #24
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80071c0:	3b01      	subs	r3, #1
 80071c2:	0c1b      	lsrs	r3, r3, #16
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80071d0:	3b01      	subs	r3, #1
 80071d2:	0a1b      	lsrs	r3, r3, #8
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80071f0:	161b      	asrs	r3, r3, #24
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80071fe:	141b      	asrs	r3, r3, #16
 8007200:	b2da      	uxtb	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800720c:	0a1b      	lsrs	r3, r3, #8
 800720e:	b29b      	uxth	r3, r3
 8007210:	b2da      	uxtb	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800721c:	b2da      	uxtb	r2, r3
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2208      	movs	r2, #8
 8007226:	815a      	strh	r2, [r3, #10]
    return 0;
 8007228:	2300      	movs	r3, #0
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b088      	sub	sp, #32
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	460b      	mov	r3, r1
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007246:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007248:	2300      	movs	r3, #0
 800724a:	83fb      	strh	r3, [r7, #30]
 800724c:	e007      	b.n	800725e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800724e:	8bfb      	ldrh	r3, [r7, #30]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	4413      	add	r3, r2
 8007254:	2200      	movs	r2, #0
 8007256:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007258:	8bfb      	ldrh	r3, [r7, #30]
 800725a:	3301      	adds	r3, #1
 800725c:	83fb      	strh	r3, [r7, #30]
 800725e:	8bfb      	ldrh	r3, [r7, #30]
 8007260:	2b0b      	cmp	r3, #11
 8007262:	d9f4      	bls.n	800724e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f107 0216 	add.w	r2, r7, #22
 8007270:	f107 0110 	add.w	r1, r7, #16
 8007274:	7af8      	ldrb	r0, [r7, #11]
 8007276:	4798      	blx	r3
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800727e:	7af9      	ldrb	r1, [r7, #11]
 8007280:	233a      	movs	r3, #58	; 0x3a
 8007282:	2202      	movs	r2, #2
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f8f3 	bl	8007470 <SCSI_SenseCode>
    return -1;
 800728a:	f04f 33ff 	mov.w	r3, #4294967295
 800728e:	e030      	b.n	80072f2 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2208      	movs	r2, #8
 8007294:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3b01      	subs	r3, #1
 800729a:	0e1b      	lsrs	r3, r3, #24
 800729c:	b2da      	uxtb	r2, r3
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	3b01      	subs	r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2202      	movs	r2, #2
 80072ca:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80072cc:	8afb      	ldrh	r3, [r7, #22]
 80072ce:	141b      	asrs	r3, r3, #16
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80072d6:	8afb      	ldrh	r3, [r7, #22]
 80072d8:	0a1b      	lsrs	r3, r3, #8
 80072da:	b29b      	uxth	r3, r3
 80072dc:	b2da      	uxtb	r2, r3
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80072e2:	8afb      	ldrh	r3, [r7, #22]
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	220c      	movs	r2, #12
 80072ee:	815a      	strh	r2, [r3, #10]
    return 0;
 80072f0:	2300      	movs	r3, #0
  }
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	460b      	mov	r3, r1
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007310:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007312:	2308      	movs	r3, #8
 8007314:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	8afa      	ldrh	r2, [r7, #22]
 800731a:	815a      	strh	r2, [r3, #10]

  while (len)
 800731c:	e00a      	b.n	8007334 <SCSI_ModeSense6+0x38>
  {
    len--;
 800731e:	8afb      	ldrh	r3, [r7, #22]
 8007320:	3b01      	subs	r3, #1
 8007322:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007324:	8afb      	ldrh	r3, [r7, #22]
 8007326:	8afa      	ldrh	r2, [r7, #22]
 8007328:	4907      	ldr	r1, [pc, #28]	; (8007348 <SCSI_ModeSense6+0x4c>)
 800732a:	5c89      	ldrb	r1, [r1, r2]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4413      	add	r3, r2
 8007330:	460a      	mov	r2, r1
 8007332:	731a      	strb	r2, [r3, #12]
  while (len)
 8007334:	8afb      	ldrh	r3, [r7, #22]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1f1      	bne.n	800731e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	0800cff4 	.word	0x0800cff4

0800734c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	460b      	mov	r3, r1
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800735a:	2308      	movs	r3, #8
 800735c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007364:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	8afa      	ldrh	r2, [r7, #22]
 800736a:	815a      	strh	r2, [r3, #10]

  while (len)
 800736c:	e00a      	b.n	8007384 <SCSI_ModeSense10+0x38>
  {
    len--;
 800736e:	8afb      	ldrh	r3, [r7, #22]
 8007370:	3b01      	subs	r3, #1
 8007372:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007374:	8afb      	ldrh	r3, [r7, #22]
 8007376:	8afa      	ldrh	r2, [r7, #22]
 8007378:	4907      	ldr	r1, [pc, #28]	; (8007398 <SCSI_ModeSense10+0x4c>)
 800737a:	5c89      	ldrb	r1, [r1, r2]
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4413      	add	r3, r2
 8007380:	460a      	mov	r2, r1
 8007382:	731a      	strb	r2, [r3, #12]
  while (len)
 8007384:	8afb      	ldrh	r3, [r7, #22]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1f1      	bne.n	800736e <SCSI_ModeSense10+0x22>
  }

  return 0;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	bc80      	pop	{r7}
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	0800cffc 	.word	0x0800cffc

0800739c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	460b      	mov	r3, r1
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b0:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
 80073b6:	e007      	b.n	80073c8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4413      	add	r3, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	3301      	adds	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b11      	cmp	r3, #17
 80073cc:	d9f4      	bls.n	80073b8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2270      	movs	r2, #112	; 0x70
 80073d2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	220c      	movs	r2, #12
 80073d8:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d02e      	beq.n	8007448 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	3347      	adds	r3, #71	; 0x47
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4413      	add	r3, r2
 80073f8:	791a      	ldrb	r2, [r3, #4]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	3347      	adds	r3, #71	; 0x47
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	4413      	add	r3, r2
 800740c:	7a5a      	ldrb	r2, [r3, #9]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	3347      	adds	r3, #71	; 0x47
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	4413      	add	r3, r2
 8007420:	7a1a      	ldrb	r2, [r3, #8]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800742c:	3301      	adds	r3, #1
 800742e:	b2da      	uxtb	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800743c:	2b04      	cmp	r3, #4
 800743e:	d103      	bne.n	8007448 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2212      	movs	r2, #18
 800744c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3304      	adds	r3, #4
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b12      	cmp	r3, #18
 8007456:	d805      	bhi.n	8007464 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b29a      	uxth	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	4608      	mov	r0, r1
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	4603      	mov	r3, r0
 8007480:	70fb      	strb	r3, [r7, #3]
 8007482:	460b      	mov	r3, r1
 8007484:	70bb      	strb	r3, [r7, #2]
 8007486:	4613      	mov	r3, r2
 8007488:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007490:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	3347      	adds	r3, #71	; 0x47
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	4413      	add	r3, r2
 80074a0:	78ba      	ldrb	r2, [r7, #2]
 80074a2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	3347      	adds	r3, #71	; 0x47
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	2200      	movs	r2, #0
 80074b4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80074bc:	3301      	adds	r3, #1
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d103      	bne.n	80074d8 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b087      	sub	sp, #28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	460b      	mov	r3, r1
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f6:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	815a      	strh	r2, [r3, #10]
  return 0;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	bc80      	pop	{r7}
 8007508:	4770      	bx	lr

0800750a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	460b      	mov	r3, r1
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	7a1b      	ldrb	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d16e      	bne.n	8007606 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800752e:	b25b      	sxtb	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	db0a      	blt.n	800754a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800753a:	2320      	movs	r3, #32
 800753c:	2205      	movs	r2, #5
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff ff96 	bl	8007470 <SCSI_SenseCode>
      return -1;
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	e067      	b.n	800761a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	7afa      	ldrb	r2, [r7, #11]
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d008      	beq.n	8007570 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800755e:	7af9      	ldrb	r1, [r7, #11]
 8007560:	233a      	movs	r3, #58	; 0x3a
 8007562:	2202      	movs	r2, #2
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7ff ff83 	bl	8007470 <SCSI_SenseCode>
      return -1;
 800756a:	f04f 33ff 	mov.w	r3, #4294967295
 800756e:	e054      	b.n	800761a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3302      	adds	r3, #2
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3303      	adds	r3, #3
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007580:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3304      	adds	r3, #4
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800758a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	3205      	adds	r2, #5
 8007590:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007592:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3307      	adds	r3, #7
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	3208      	adds	r2, #8
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80075bc:	7af9      	ldrb	r1, [r7, #11]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f912 	bl	80077e8 <SCSI_CheckAddressRange>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da02      	bge.n	80075d0 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80075ca:	f04f 33ff 	mov.w	r3, #4294967295
 80075ce:	e024      	b.n	800761a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	2202      	movs	r2, #2
 80075d4:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80075e2:	6979      	ldr	r1, [r7, #20]
 80075e4:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 80075e8:	fb01 f303 	mul.w	r3, r1, r3
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d00a      	beq.n	8007606 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80075f6:	2320      	movs	r3, #32
 80075f8:	2205      	movs	r2, #5
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff ff38 	bl	8007470 <SCSI_SenseCode>
      return -1;
 8007600:	f04f 33ff 	mov.w	r3, #4294967295
 8007604:	e009      	b.n	800761a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800760c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	4619      	mov	r1, r3
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f90a 	bl	800782c <SCSI_ProcessRead>
 8007618:	4603      	mov	r3, r0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	60f8      	str	r0, [r7, #12]
 800762a:	460b      	mov	r3, r1
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	7a1b      	ldrb	r3, [r3, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8096 	bne.w	800776e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007648:	b25b      	sxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	da0a      	bge.n	8007664 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007654:	2320      	movs	r3, #32
 8007656:	2205      	movs	r2, #5
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff ff09 	bl	8007470 <SCSI_SenseCode>
      return -1;
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	e08a      	b.n	800777a <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	7afa      	ldrb	r2, [r7, #11]
 800766e:	4610      	mov	r0, r2
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d008      	beq.n	800768a <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007678:	7af9      	ldrb	r1, [r7, #11]
 800767a:	233a      	movs	r3, #58	; 0x3a
 800767c:	2202      	movs	r2, #2
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff fef6 	bl	8007470 <SCSI_SenseCode>
      return -1;
 8007684:	f04f 33ff 	mov.w	r3, #4294967295
 8007688:	e077      	b.n	800777a <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	7afa      	ldrb	r2, [r7, #11]
 8007694:	4610      	mov	r0, r2
 8007696:	4798      	blx	r3
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d008      	beq.n	80076b0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800769e:	7af9      	ldrb	r1, [r7, #11]
 80076a0:	2327      	movs	r3, #39	; 0x27
 80076a2:	2202      	movs	r2, #2
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fee3 	bl	8007470 <SCSI_SenseCode>
      return -1;
 80076aa:	f04f 33ff 	mov.w	r3, #4294967295
 80076ae:	e064      	b.n	800777a <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3302      	adds	r3, #2
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3303      	adds	r3, #3
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80076c0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3304      	adds	r3, #4
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80076ca:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	3205      	adds	r2, #5
 80076d0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80076d2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3307      	adds	r3, #7
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	3208      	adds	r2, #8
 80076e6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80076e8:	431a      	orrs	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076fc:	7af9      	ldrb	r1, [r7, #11]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f872 	bl	80077e8 <SCSI_CheckAddressRange>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	da02      	bge.n	8007710 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
 800770e:	e034      	b.n	800777a <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800771c:	fb02 f303 	mul.w	r3, r2, r3
 8007720:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	429a      	cmp	r2, r3
 800772c:	d00a      	beq.n	8007744 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007734:	2320      	movs	r3, #32
 8007736:	2205      	movs	r2, #5
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff fe99 	bl	8007470 <SCSI_SenseCode>
      return -1;
 800773e:	f04f 33ff 	mov.w	r3, #4294967295
 8007742:	e01a      	b.n	800777a <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800774a:	bf28      	it	cs
 800774c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007750:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2201      	movs	r2, #1
 8007756:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f103 020c 	add.w	r2, r3, #12
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	b29b      	uxth	r3, r3
 8007762:	2101      	movs	r1, #1
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f004 fe56 	bl	800c416 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800776a:	2300      	movs	r3, #0
 800776c:	e005      	b.n	800777a <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	4619      	mov	r1, r3
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 f8ce 	bl	8007914 <SCSI_ProcessWrite>
 8007778:	4603      	mov	r3, r0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b086      	sub	sp, #24
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	460b      	mov	r3, r1
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80077a6:	7af9      	ldrb	r1, [r7, #11]
 80077a8:	2324      	movs	r3, #36	; 0x24
 80077aa:	2205      	movs	r2, #5
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f7ff fe5f 	bl	8007470 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295
 80077b6:	e013      	b.n	80077e0 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80077c4:	7af9      	ldrb	r1, [r7, #11]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f80e 	bl	80077e8 <SCSI_CheckAddressRange>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	da02      	bge.n	80077d8 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80077d2:	f04f 33ff 	mov.w	r3, #4294967295
 80077d6:	e003      	b.n	80077e0 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2200      	movs	r2, #0
 80077dc:	815a      	strh	r2, [r3, #10]
  return 0;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	607a      	str	r2, [r7, #4]
 80077f2:	603b      	str	r3, [r7, #0]
 80077f4:	460b      	mov	r3, r1
 80077f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077fe:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	441a      	add	r2, r3
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800780c:	429a      	cmp	r2, r3
 800780e:	d908      	bls.n	8007822 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007810:	7af9      	ldrb	r1, [r7, #11]
 8007812:	2321      	movs	r3, #33	; 0x21
 8007814:	2205      	movs	r2, #5
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff fe2a 	bl	8007470 <SCSI_SenseCode>
    return -1;
 800781c:	f04f 33ff 	mov.w	r3, #4294967295
 8007820:	e000      	b.n	8007824 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800782c:	b590      	push	{r4, r7, lr}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007858:	bf28      	it	cs
 800785a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800785e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007866:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800787a:	4618      	mov	r0, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007882:	b29b      	uxth	r3, r3
 8007884:	78f8      	ldrb	r0, [r7, #3]
 8007886:	47a0      	blx	r4
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	da08      	bge.n	80078a0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800788e:	78f9      	ldrb	r1, [r7, #3]
 8007890:	2311      	movs	r3, #17
 8007892:	2204      	movs	r2, #4
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff fdeb 	bl	8007470 <SCSI_SenseCode>
    return -1;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295
 800789e:	e035      	b.n	800790c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f103 020c 	add.w	r2, r3, #12
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	2181      	movs	r1, #129	; 0x81
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f004 fd8f 	bl	800c3d0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80078be:	4619      	mov	r1, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80078da:	4619      	mov	r1, r3
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	fbb3 f3f1 	udiv	r3, r3, r1
 80078e2:	1ad2      	subs	r2, r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad2      	subs	r2, r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2203      	movs	r2, #3
 8007908:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	bd90      	pop	{r4, r7, pc}

08007914 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007914:	b590      	push	{r4, r7, lr}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007926:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007934:	fb02 f303 	mul.w	r3, r2, r3
 8007938:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007940:	bf28      	it	cs
 8007942:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007946:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800794e:	695c      	ldr	r4, [r3, #20]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f103 010c 	add.w	r1, r3, #12
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007962:	4618      	mov	r0, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800796a:	b29b      	uxth	r3, r3
 800796c:	78f8      	ldrb	r0, [r7, #3]
 800796e:	47a0      	blx	r4
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	da08      	bge.n	8007988 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007976:	78f9      	ldrb	r1, [r7, #3]
 8007978:	2303      	movs	r3, #3
 800797a:	2204      	movs	r2, #4
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff fd77 	bl	8007470 <SCSI_SenseCode>

    return -1;
 8007982:	f04f 33ff 	mov.w	r3, #4294967295
 8007986:	e045      	b.n	8007a14 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007994:	4619      	mov	r1, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	fbb3 f3f1 	udiv	r3, r3, r1
 800799c:	441a      	add	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80079b0:	4619      	mov	r1, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80079b8:	1ad2      	subs	r2, r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d104      	bne.n	80079e4 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80079da:	2100      	movs	r1, #0
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff f97f 	bl	8006ce0 <MSC_BOT_SendCSW>
 80079e2:	e016      	b.n	8007a12 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f8:	bf28      	it	cs
 80079fa:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80079fe:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f103 020c 	add.w	r2, r3, #12
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f004 fd02 	bl	800c416 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd90      	pop	{r4, r7, pc}

08007a1c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	2203      	movs	r2, #3
 8007a30:	2181      	movs	r1, #129	; 0x81
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f004 fbdf 	bl	800c1f6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007a3e:	2302      	movs	r3, #2
 8007a40:	2203      	movs	r2, #3
 8007a42:	2101      	movs	r1, #1
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f004 fbd6 	bl	800c1f6 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007a52:	2018      	movs	r0, #24
 8007a54:	f004 fd16 	bl	800c484 <USBD_static_malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d102      	bne.n	8007a70 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e011      	b.n	8007a94 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a76:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f004 fcc1 	bl	800c416 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007aaa:	2181      	movs	r1, #129	; 0x81
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f004 fbc8 	bl	800c242 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007ab8:	2101      	movs	r1, #1
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f004 fbc1 	bl	800c242 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00e      	beq.n	8007af0 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f004 fcda 	bl	800c49c <USBD_static_free>
    pdev->pClassData = NULL;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d051      	beq.n	8007bce <USBD_CUSTOM_HID_Setup+0xd2>
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	f040 80d8 	bne.w	8007ce0 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	3b02      	subs	r3, #2
 8007b36:	2b09      	cmp	r3, #9
 8007b38:	d841      	bhi.n	8007bbe <USBD_CUSTOM_HID_Setup+0xc2>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_CUSTOM_HID_Setup+0x44>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007b77 	.word	0x08007b77
 8007b48:	08007bbf 	.word	0x08007bbf
 8007b4c:	08007bbf 	.word	0x08007bbf
 8007b50:	08007bbf 	.word	0x08007bbf
 8007b54:	08007bbf 	.word	0x08007bbf
 8007b58:	08007bbf 	.word	0x08007bbf
 8007b5c:	08007ba9 	.word	0x08007ba9
 8007b60:	08007b87 	.word	0x08007b87
 8007b64:	08007b69 	.word	0x08007b69
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	885b      	ldrh	r3, [r3, #2]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	605a      	str	r2, [r3, #4]
          break;
 8007b74:	e02a      	b.n	8007bcc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 f98e 	bl	8008ea0 <USBD_CtlSendData>
          break;
 8007b84:	e022      	b.n	8007bcc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	885b      	ldrh	r3, [r3, #2]
 8007b8a:	0a1b      	lsrs	r3, r3, #8
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	609a      	str	r2, [r3, #8]
          break;
 8007b96:	e019      	b.n	8007bcc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f97d 	bl	8008ea0 <USBD_CtlSendData>
          break;
 8007ba6:	e011      	b.n	8007bcc <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2201      	movs	r2, #1
 8007bac:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007bae:	6939      	ldr	r1, [r7, #16]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	88db      	ldrh	r3, [r3, #6]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f9a0 	bl	8008efc <USBD_CtlPrepareRx>
          break;
 8007bbc:	e006      	b.n	8007bcc <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 f903 	bl	8008dcc <USBD_CtlError>
          ret = USBD_FAIL;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8007bca:	bf00      	nop
      }
      break;
 8007bcc:	e08f      	b.n	8007cee <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	785b      	ldrb	r3, [r3, #1]
 8007bd2:	2b0b      	cmp	r3, #11
 8007bd4:	d87c      	bhi.n	8007cd0 <USBD_CUSTOM_HID_Setup+0x1d4>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <USBD_CUSTOM_HID_Setup+0xe0>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c0d 	.word	0x08007c0d
 8007be0:	08007cd1 	.word	0x08007cd1
 8007be4:	08007cd1 	.word	0x08007cd1
 8007be8:	08007cd1 	.word	0x08007cd1
 8007bec:	08007cd1 	.word	0x08007cd1
 8007bf0:	08007cd1 	.word	0x08007cd1
 8007bf4:	08007c35 	.word	0x08007c35
 8007bf8:	08007cd1 	.word	0x08007cd1
 8007bfc:	08007cd1 	.word	0x08007cd1
 8007c00:	08007cd1 	.word	0x08007cd1
 8007c04:	08007c83 	.word	0x08007c83
 8007c08:	08007cab 	.word	0x08007cab
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d107      	bne.n	8007c26 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c16:	f107 030e 	add.w	r3, r7, #14
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f93e 	bl	8008ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c24:	e05b      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f8cf 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8007c2e:	2302      	movs	r3, #2
 8007c30:	75fb      	strb	r3, [r7, #23]
          break;
 8007c32:	e054      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	885b      	ldrh	r3, [r3, #2]
 8007c38:	0a1b      	lsrs	r3, r3, #8
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b22      	cmp	r3, #34	; 0x22
 8007c3e:	d10b      	bne.n	8007c58 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	2b5f      	cmp	r3, #95	; 0x5f
 8007c46:	bf28      	it	cs
 8007c48:	235f      	movcs	r3, #95	; 0x5f
 8007c4a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	61bb      	str	r3, [r7, #24]
 8007c56:	e00d      	b.n	8007c74 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	0a1b      	lsrs	r3, r3, #8
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b21      	cmp	r3, #33	; 0x21
 8007c62:	d107      	bne.n	8007c74 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007c64:	4b24      	ldr	r3, [pc, #144]	; (8007cf8 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8007c66:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	88db      	ldrh	r3, [r3, #6]
 8007c6c:	2b09      	cmp	r3, #9
 8007c6e:	bf28      	it	cs
 8007c70:	2309      	movcs	r3, #9
 8007c72:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007c74:	8bfb      	ldrh	r3, [r7, #30]
 8007c76:	461a      	mov	r2, r3
 8007c78:	69b9      	ldr	r1, [r7, #24]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 f910 	bl	8008ea0 <USBD_CtlSendData>
          break;
 8007c80:	e02d      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d107      	bne.n	8007c9c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	330c      	adds	r3, #12
 8007c90:	2201      	movs	r2, #1
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f903 	bl	8008ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c9a:	e020      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f001 f894 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ca8:	e019      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	d106      	bne.n	8007cc2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	461a      	mov	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cc0:	e00d      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f881 	bl	8008dcc <USBD_CtlError>
            ret = USBD_FAIL;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8007cce:	e006      	b.n	8007cde <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 f87a 	bl	8008dcc <USBD_CtlError>
          ret = USBD_FAIL;
 8007cd8:	2302      	movs	r3, #2
 8007cda:	75fb      	strb	r3, [r7, #23]
          break;
 8007cdc:	bf00      	nop
      }
      break;
 8007cde:	e006      	b.n	8007cee <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 f872 	bl	8008dcc <USBD_CtlError>
      ret = USBD_FAIL;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	75fb      	strb	r3, [r7, #23]
      break;
 8007cec:	bf00      	nop
  }
  return ret;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3720      	adds	r7, #32
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	200001d4 	.word	0x200001d4

08007cfc <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d10:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d10f      	bne.n	8007d3c <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	7d1b      	ldrb	r3, [r3, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d109      	bne.n	8007d38 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2201      	movs	r2, #1
 8007d28:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007d2a:	88fb      	ldrh	r3, [r7, #6]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	2181      	movs	r1, #129	; 0x81
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f004 fb4d 	bl	800c3d0 <USBD_LL_Transmit>
 8007d36:	e001      	b.n	8007d3c <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2229      	movs	r2, #41	; 0x29
 8007d54:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007d56:	4b03      	ldr	r3, [pc, #12]	; (8007d64 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000150 	.word	0x20000150

08007d68 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2229      	movs	r2, #41	; 0x29
 8007d74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007d76:	4b03      	ldr	r3, [pc, #12]	; (8007d84 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bc80      	pop	{r7}
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	2000017c 	.word	0x2000017c

08007d88 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2229      	movs	r2, #41	; 0x29
 8007d94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007d96:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	200001a8 	.word	0x200001a8

08007da8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dba:	2200      	movs	r2, #0
 8007dbc:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr

08007dca <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ddc:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	7810      	ldrb	r0, [r2, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	7852      	ldrb	r2, [r2, #1]
 8007dee:	4611      	mov	r1, r2
 8007df0:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	2302      	movs	r3, #2
 8007df6:	2101      	movs	r1, #1
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f004 fb0c 	bl	800c416 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e16:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d10c      	bne.n	8007e3a <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	7810      	ldrb	r0, [r2, #0]
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	7852      	ldrb	r2, [r2, #1]
 8007e30:	4611      	mov	r1, r2
 8007e32:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	220a      	movs	r2, #10
 8007e50:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	200001e0 	.word	0x200001e0

08007e64 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	e01a      	b.n	8007ede <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	79fa      	ldrb	r2, [r7, #7]
 8007ed4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ed6:	68f8      	ldr	r0, [r7, #12]
 8007ed8:	f004 f922 	bl	800c120 <USBD_LL_Init>

  return USBD_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	e001      	b.n	8007f0c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bc80      	pop	{r7}
 8007f16:	4770      	bx	lr

08007f18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f004 f94d 	bl	800c1c0 <USBD_LL_Start>

  return USBD_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007f50:	2302      	movs	r3, #2
 8007f52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	4611      	mov	r1, r2
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	4798      	blx	r3

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 feca 	bl	8008d54 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007fce:	461a      	mov	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007fdc:	f003 031f 	and.w	r3, r3, #31
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d00c      	beq.n	8007ffe <USBD_LL_SetupStage+0x56>
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d302      	bcc.n	8007fee <USBD_LL_SetupStage+0x46>
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d010      	beq.n	800800e <USBD_LL_SetupStage+0x66>
 8007fec:	e017      	b.n	800801e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9ca 	bl	8008390 <USBD_StdDevReq>
      break;
 8007ffc:	e01a      	b.n	8008034 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa2c 	bl	8008464 <USBD_StdItfReq>
      break;
 800800c:	e012      	b.n	8008034 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fa6a 	bl	80084f0 <USBD_StdEPReq>
      break;
 800801c:	e00a      	b.n	8008034 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008028:	b2db      	uxtb	r3, r3
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f004 f946 	bl	800c2be <USBD_LL_StallEP>
      break;
 8008032:	bf00      	nop
  }

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b086      	sub	sp, #24
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	460b      	mov	r3, r1
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800804c:	7afb      	ldrb	r3, [r7, #11]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d14b      	bne.n	80080ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008058:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008060:	2b03      	cmp	r3, #3
 8008062:	d134      	bne.n	80080ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d919      	bls.n	80080a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	68da      	ldr	r2, [r3, #12]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	1ad2      	subs	r2, r2, r3
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008086:	429a      	cmp	r2, r3
 8008088:	d203      	bcs.n	8008092 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800808e:	b29b      	uxth	r3, r3
 8008090:	e002      	b.n	8008098 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008096:	b29b      	uxth	r3, r3
 8008098:	461a      	mov	r2, r3
 800809a:	6879      	ldr	r1, [r7, #4]
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 ff4b 	bl	8008f38 <USBD_CtlContinueRx>
 80080a2:	e038      	b.n	8008116 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d105      	bne.n	80080c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 ff48 	bl	8008f5c <USBD_CtlSendStatus>
 80080cc:	e023      	b.n	8008116 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	d11e      	bne.n	8008116 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f004 f8eb 	bl	800c2be <USBD_LL_StallEP>
 80080e8:	e015      	b.n	8008116 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00d      	beq.n	8008112 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d108      	bne.n	8008112 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	4611      	mov	r1, r2
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	4798      	blx	r3
 8008110:	e001      	b.n	8008116 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008112:	2302      	movs	r3, #2
 8008114:	e000      	b.n	8008118 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	460b      	mov	r3, r1
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800812e:	7afb      	ldrb	r3, [r7, #11]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d17f      	bne.n	8008234 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3314      	adds	r3, #20
 8008138:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008140:	2b02      	cmp	r3, #2
 8008142:	d15c      	bne.n	80081fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d915      	bls.n	800817c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	68da      	ldr	r2, [r3, #12]
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	1ad2      	subs	r2, r2, r3
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	b29b      	uxth	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 feb5 	bl	8008ed8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800816e:	2300      	movs	r3, #0
 8008170:	2200      	movs	r2, #0
 8008172:	2100      	movs	r1, #0
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f004 f94e 	bl	800c416 <USBD_LL_PrepareReceive>
 800817a:	e04e      	b.n	800821a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	6912      	ldr	r2, [r2, #16]
 8008184:	fbb3 f1f2 	udiv	r1, r3, r2
 8008188:	fb02 f201 	mul.w	r2, r2, r1
 800818c:	1a9b      	subs	r3, r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11c      	bne.n	80081cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800819a:	429a      	cmp	r2, r3
 800819c:	d316      	bcc.n	80081cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d20f      	bcs.n	80081cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f000 fe91 	bl	8008ed8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081be:	2300      	movs	r3, #0
 80081c0:	2200      	movs	r2, #0
 80081c2:	2100      	movs	r1, #0
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f004 f926 	bl	800c416 <USBD_LL_PrepareReceive>
 80081ca:	e026      	b.n	800821a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d105      	bne.n	80081ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081ee:	2180      	movs	r1, #128	; 0x80
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f004 f864 	bl	800c2be <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fec3 	bl	8008f82 <USBD_CtlReceiveStatus>
 80081fc:	e00d      	b.n	800821a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008204:	2b04      	cmp	r3, #4
 8008206:	d004      	beq.n	8008212 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f004 f852 	bl	800c2be <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008220:	2b01      	cmp	r3, #1
 8008222:	d11d      	bne.n	8008260 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fe83 	bl	8007f30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008232:	e015      	b.n	8008260 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00d      	beq.n	800825c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008246:	2b03      	cmp	r3, #3
 8008248:	d108      	bne.n	800825c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	7afa      	ldrb	r2, [r7, #11]
 8008254:	4611      	mov	r1, r2
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	4798      	blx	r3
 800825a:	e001      	b.n	8008260 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800825c:	2302      	movs	r3, #2
 800825e:	e000      	b.n	8008262 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008272:	2340      	movs	r3, #64	; 0x40
 8008274:	2200      	movs	r2, #0
 8008276:	2100      	movs	r1, #0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f003 ffbc 	bl	800c1f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2240      	movs	r2, #64	; 0x40
 800828a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800828e:	2340      	movs	r3, #64	; 0x40
 8008290:	2200      	movs	r2, #0
 8008292:	2180      	movs	r1, #128	; 0x80
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f003 ffae 	bl	800c1f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2240      	movs	r2, #64	; 0x40
 80082a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2201      	movs	r2, #1
 80082aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6852      	ldr	r2, [r2, #4]
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	4611      	mov	r1, r2
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
  }

  return USBD_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	bc80      	pop	{r7}
 8008308:	4770      	bx	lr

0800830a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2204      	movs	r2, #4
 8008322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr

08008332 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008340:	2b04      	cmp	r3, #4
 8008342:	d105      	bne.n	8008350 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836a:	2b03      	cmp	r3, #3
 800836c:	d10b      	bne.n	8008386 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d005      	beq.n	8008386 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a6:	2b20      	cmp	r3, #32
 80083a8:	d004      	beq.n	80083b4 <USBD_StdDevReq+0x24>
 80083aa:	2b40      	cmp	r3, #64	; 0x40
 80083ac:	d002      	beq.n	80083b4 <USBD_StdDevReq+0x24>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <USBD_StdDevReq+0x34>
 80083b2:	e04c      	b.n	800844e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	4798      	blx	r3
      break;
 80083c2:	e049      	b.n	8008458 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	785b      	ldrb	r3, [r3, #1]
 80083c8:	2b09      	cmp	r3, #9
 80083ca:	d83a      	bhi.n	8008442 <USBD_StdDevReq+0xb2>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <USBD_StdDevReq+0x44>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	08008425 	.word	0x08008425
 80083d8:	08008439 	.word	0x08008439
 80083dc:	08008443 	.word	0x08008443
 80083e0:	0800842f 	.word	0x0800842f
 80083e4:	08008443 	.word	0x08008443
 80083e8:	08008407 	.word	0x08008407
 80083ec:	080083fd 	.word	0x080083fd
 80083f0:	08008443 	.word	0x08008443
 80083f4:	0800841b 	.word	0x0800841b
 80083f8:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f9d4 	bl	80087ac <USBD_GetDescriptor>
          break;
 8008404:	e022      	b.n	800844c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008406:	6839      	ldr	r1, [r7, #0]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fb37 	bl	8008a7c <USBD_SetAddress>
          break;
 800840e:	e01d      	b.n	800844c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb74 	bl	8008b00 <USBD_SetConfig>
          break;
 8008418:	e018      	b.n	800844c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fbfd 	bl	8008c1c <USBD_GetConfig>
          break;
 8008422:	e013      	b.n	800844c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008424:	6839      	ldr	r1, [r7, #0]
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fc2c 	bl	8008c84 <USBD_GetStatus>
          break;
 800842c:	e00e      	b.n	800844c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 fc5a 	bl	8008cea <USBD_SetFeature>
          break;
 8008436:	e009      	b.n	800844c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc69 	bl	8008d12 <USBD_ClrFeature>
          break;
 8008440:	e004      	b.n	800844c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fcc1 	bl	8008dcc <USBD_CtlError>
          break;
 800844a:	bf00      	nop
      }
      break;
 800844c:	e004      	b.n	8008458 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800844e:	6839      	ldr	r1, [r7, #0]
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fcbb 	bl	8008dcc <USBD_CtlError>
      break;
 8008456:	bf00      	nop
  }

  return ret;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop

08008464 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800846e:	2300      	movs	r3, #0
 8008470:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800847a:	2b20      	cmp	r3, #32
 800847c:	d003      	beq.n	8008486 <USBD_StdItfReq+0x22>
 800847e:	2b40      	cmp	r3, #64	; 0x40
 8008480:	d001      	beq.n	8008486 <USBD_StdItfReq+0x22>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d12a      	bne.n	80084dc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848c:	3b01      	subs	r3, #1
 800848e:	2b02      	cmp	r3, #2
 8008490:	d81d      	bhi.n	80084ce <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	889b      	ldrh	r3, [r3, #4]
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b01      	cmp	r3, #1
 800849a:	d813      	bhi.n	80084c4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	88db      	ldrh	r3, [r3, #6]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d110      	bne.n	80084d8 <USBD_StdItfReq+0x74>
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10d      	bne.n	80084d8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fd4d 	bl	8008f5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084c2:	e009      	b.n	80084d8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fc80 	bl	8008dcc <USBD_CtlError>
          break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fc7b 	bl	8008dcc <USBD_CtlError>
          break;
 80084d6:	e000      	b.n	80084da <USBD_StdItfReq+0x76>
          break;
 80084d8:	bf00      	nop
      }
      break;
 80084da:	e004      	b.n	80084e6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fc74 	bl	8008dcc <USBD_CtlError>
      break;
 80084e4:	bf00      	nop
  }

  return USBD_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	889b      	ldrh	r3, [r3, #4]
 8008502:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800850c:	2b20      	cmp	r3, #32
 800850e:	d004      	beq.n	800851a <USBD_StdEPReq+0x2a>
 8008510:	2b40      	cmp	r3, #64	; 0x40
 8008512:	d002      	beq.n	800851a <USBD_StdEPReq+0x2a>
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <USBD_StdEPReq+0x3a>
 8008518:	e13d      	b.n	8008796 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
      break;
 8008528:	e13a      	b.n	80087a0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008532:	2b20      	cmp	r3, #32
 8008534:	d10a      	bne.n	800854c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
 8008544:	4603      	mov	r3, r0
 8008546:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
 800854a:	e12a      	b.n	80087a2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d03e      	beq.n	80085d2 <USBD_StdEPReq+0xe2>
 8008554:	2b03      	cmp	r3, #3
 8008556:	d002      	beq.n	800855e <USBD_StdEPReq+0x6e>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d070      	beq.n	800863e <USBD_StdEPReq+0x14e>
 800855c:	e115      	b.n	800878a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	2b02      	cmp	r3, #2
 8008566:	d002      	beq.n	800856e <USBD_StdEPReq+0x7e>
 8008568:	2b03      	cmp	r3, #3
 800856a:	d015      	beq.n	8008598 <USBD_StdEPReq+0xa8>
 800856c:	e02b      	b.n	80085c6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00c      	beq.n	800858e <USBD_StdEPReq+0x9e>
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b80      	cmp	r3, #128	; 0x80
 8008578:	d009      	beq.n	800858e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f003 fe9d 	bl	800c2be <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008584:	2180      	movs	r1, #128	; 0x80
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f003 fe99 	bl	800c2be <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800858c:	e020      	b.n	80085d0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800858e:	6839      	ldr	r1, [r7, #0]
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fc1b 	bl	8008dcc <USBD_CtlError>
              break;
 8008596:	e01b      	b.n	80085d0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	885b      	ldrh	r3, [r3, #2]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10e      	bne.n	80085be <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <USBD_StdEPReq+0xce>
 80085a6:	7bbb      	ldrb	r3, [r7, #14]
 80085a8:	2b80      	cmp	r3, #128	; 0x80
 80085aa:	d008      	beq.n	80085be <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	88db      	ldrh	r3, [r3, #6]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f003 fe80 	bl	800c2be <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fccc 	bl	8008f5c <USBD_CtlSendStatus>

              break;
 80085c4:	e004      	b.n	80085d0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fbff 	bl	8008dcc <USBD_CtlError>
              break;
 80085ce:	bf00      	nop
          }
          break;
 80085d0:	e0e0      	b.n	8008794 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d002      	beq.n	80085e2 <USBD_StdEPReq+0xf2>
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d015      	beq.n	800860c <USBD_StdEPReq+0x11c>
 80085e0:	e026      	b.n	8008630 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00c      	beq.n	8008602 <USBD_StdEPReq+0x112>
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b80      	cmp	r3, #128	; 0x80
 80085ec:	d009      	beq.n	8008602 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f003 fe63 	bl	800c2be <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80085f8:	2180      	movs	r1, #128	; 0x80
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f003 fe5f 	bl	800c2be <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008600:	e01c      	b.n	800863c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fbe1 	bl	8008dcc <USBD_CtlError>
              break;
 800860a:	e017      	b.n	800863c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	885b      	ldrh	r3, [r3, #2]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d112      	bne.n	800863a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f003 fe6a 	bl	800c2fc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc97 	bl	8008f5c <USBD_CtlSendStatus>
              }
              break;
 800862e:	e004      	b.n	800863a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008630:	6839      	ldr	r1, [r7, #0]
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fbca 	bl	8008dcc <USBD_CtlError>
              break;
 8008638:	e000      	b.n	800863c <USBD_StdEPReq+0x14c>
              break;
 800863a:	bf00      	nop
          }
          break;
 800863c:	e0aa      	b.n	8008794 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008644:	2b02      	cmp	r3, #2
 8008646:	d002      	beq.n	800864e <USBD_StdEPReq+0x15e>
 8008648:	2b03      	cmp	r3, #3
 800864a:	d032      	beq.n	80086b2 <USBD_StdEPReq+0x1c2>
 800864c:	e097      	b.n	800877e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <USBD_StdEPReq+0x174>
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b80      	cmp	r3, #128	; 0x80
 8008658:	d004      	beq.n	8008664 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800865a:	6839      	ldr	r1, [r7, #0]
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbb5 	bl	8008dcc <USBD_CtlError>
                break;
 8008662:	e091      	b.n	8008788 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da0b      	bge.n	8008684 <USBD_StdEPReq+0x194>
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	3310      	adds	r3, #16
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	4413      	add	r3, r2
 8008680:	3304      	adds	r3, #4
 8008682:	e00b      	b.n	800869c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	4413      	add	r3, r2
 800869a:	3304      	adds	r3, #4
 800869c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2202      	movs	r2, #2
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fbf8 	bl	8008ea0 <USBD_CtlSendData>
              break;
 80086b0:	e06a      	b.n	8008788 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	da11      	bge.n	80086de <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	f003 020f 	and.w	r2, r3, #15
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	3318      	adds	r3, #24
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d117      	bne.n	8008704 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fb78 	bl	8008dcc <USBD_CtlError>
                  break;
 80086dc:	e054      	b.n	8008788 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	f003 020f 	and.w	r2, r3, #15
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d104      	bne.n	8008704 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fb65 	bl	8008dcc <USBD_CtlError>
                  break;
 8008702:	e041      	b.n	8008788 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008708:	2b00      	cmp	r3, #0
 800870a:	da0b      	bge.n	8008724 <USBD_StdEPReq+0x234>
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008712:	4613      	mov	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	3310      	adds	r3, #16
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	3304      	adds	r3, #4
 8008722:	e00b      	b.n	800873c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008724:	7bbb      	ldrb	r3, [r7, #14]
 8008726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <USBD_StdEPReq+0x25a>
 8008744:	7bbb      	ldrb	r3, [r7, #14]
 8008746:	2b80      	cmp	r3, #128	; 0x80
 8008748:	d103      	bne.n	8008752 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e00e      	b.n	8008770 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f003 fdef 	bl	800c33a <USBD_LL_IsStallEP>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2201      	movs	r2, #1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e002      	b.n	8008770 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2202      	movs	r2, #2
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fb92 	bl	8008ea0 <USBD_CtlSendData>
              break;
 800877c:	e004      	b.n	8008788 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fb23 	bl	8008dcc <USBD_CtlError>
              break;
 8008786:	bf00      	nop
          }
          break;
 8008788:	e004      	b.n	8008794 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb1d 	bl	8008dcc <USBD_CtlError>
          break;
 8008792:	bf00      	nop
      }
      break;
 8008794:	e004      	b.n	80087a0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fb17 	bl	8008dcc <USBD_CtlError>
      break;
 800879e:	bf00      	nop
  }

  return ret;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	885b      	ldrh	r3, [r3, #2]
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	3b01      	subs	r3, #1
 80087cc:	2b06      	cmp	r3, #6
 80087ce:	f200 8128 	bhi.w	8008a22 <USBD_GetDescriptor+0x276>
 80087d2:	a201      	add	r2, pc, #4	; (adr r2, 80087d8 <USBD_GetDescriptor+0x2c>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	0800880d 	.word	0x0800880d
 80087e0:	0800884d 	.word	0x0800884d
 80087e4:	08008a23 	.word	0x08008a23
 80087e8:	08008a23 	.word	0x08008a23
 80087ec:	080089c3 	.word	0x080089c3
 80087f0:	080089ef 	.word	0x080089ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
      break;
 800880a:	e112      	b.n	8008a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	7c1b      	ldrb	r3, [r3, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10d      	bne.n	8008830 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	f107 0208 	add.w	r2, r7, #8
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
 8008824:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	3301      	adds	r3, #1
 800882a:	2202      	movs	r2, #2
 800882c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800882e:	e100      	b.n	8008a32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	f107 0208 	add.w	r2, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	2202      	movs	r2, #2
 8008848:	701a      	strb	r2, [r3, #0]
      break;
 800884a:	e0f2      	b.n	8008a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	885b      	ldrh	r3, [r3, #2]
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b05      	cmp	r3, #5
 8008854:	f200 80ac 	bhi.w	80089b0 <USBD_GetDescriptor+0x204>
 8008858:	a201      	add	r2, pc, #4	; (adr r2, 8008860 <USBD_GetDescriptor+0xb4>)
 800885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885e:	bf00      	nop
 8008860:	08008879 	.word	0x08008879
 8008864:	080088ad 	.word	0x080088ad
 8008868:	080088e1 	.word	0x080088e1
 800886c:	08008915 	.word	0x08008915
 8008870:	08008949 	.word	0x08008949
 8008874:	0800897d 	.word	0x0800897d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889a:	e091      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fa94 	bl	8008dcc <USBD_CtlError>
            err++;
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	3301      	adds	r3, #1
 80088a8:	72fb      	strb	r3, [r7, #11]
          break;
 80088aa:	e089      	b.n	80089c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7c12      	ldrb	r2, [r2, #16]
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ce:	e077      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa7a 	bl	8008dcc <USBD_CtlError>
            err++;
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	3301      	adds	r3, #1
 80088dc:	72fb      	strb	r3, [r7, #11]
          break;
 80088de:	e06f      	b.n	80089c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7c12      	ldrb	r2, [r2, #16]
 80088f8:	f107 0108 	add.w	r1, r7, #8
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008902:	e05d      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa60 	bl	8008dcc <USBD_CtlError>
            err++;
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	3301      	adds	r3, #1
 8008910:	72fb      	strb	r3, [r7, #11]
          break;
 8008912:	e055      	b.n	80089c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008936:	e043      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa46 	bl	8008dcc <USBD_CtlError>
            err++;
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	3301      	adds	r3, #1
 8008944:	72fb      	strb	r3, [r7, #11]
          break;
 8008946:	e03b      	b.n	80089c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800895a:	695b      	ldr	r3, [r3, #20]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7c12      	ldrb	r2, [r2, #16]
 8008960:	f107 0108 	add.w	r1, r7, #8
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896a:	e029      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa2c 	bl	8008dcc <USBD_CtlError>
            err++;
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	3301      	adds	r3, #1
 8008978:	72fb      	strb	r3, [r7, #11]
          break;
 800897a:	e021      	b.n	80089c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	7c12      	ldrb	r2, [r2, #16]
 8008994:	f107 0108 	add.w	r1, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800899e:	e00f      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa12 	bl	8008dcc <USBD_CtlError>
            err++;
 80089a8:	7afb      	ldrb	r3, [r7, #11]
 80089aa:	3301      	adds	r3, #1
 80089ac:	72fb      	strb	r3, [r7, #11]
          break;
 80089ae:	e007      	b.n	80089c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa0a 	bl	8008dcc <USBD_CtlError>
          err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80089be:	e038      	b.n	8008a32 <USBD_GetDescriptor+0x286>
 80089c0:	e037      	b.n	8008a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7c1b      	ldrb	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d109      	bne.n	80089de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d2:	f107 0208 	add.w	r2, r7, #8
 80089d6:	4610      	mov	r0, r2
 80089d8:	4798      	blx	r3
 80089da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089dc:	e029      	b.n	8008a32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f9f3 	bl	8008dcc <USBD_CtlError>
        err++;
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	3301      	adds	r3, #1
 80089ea:	72fb      	strb	r3, [r7, #11]
      break;
 80089ec:	e021      	b.n	8008a32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	7c1b      	ldrb	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d10d      	bne.n	8008a12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	f107 0208 	add.w	r2, r7, #8
 8008a02:	4610      	mov	r0, r2
 8008a04:	4798      	blx	r3
 8008a06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	2207      	movs	r2, #7
 8008a0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a10:	e00f      	b.n	8008a32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a12:	6839      	ldr	r1, [r7, #0]
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f9d9 	bl	8008dcc <USBD_CtlError>
        err++;
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a20:	e007      	b.n	8008a32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f9d1 	bl	8008dcc <USBD_CtlError>
      err++;
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a30:	bf00      	nop
  }

  if (err != 0U)
 8008a32:	7afb      	ldrb	r3, [r7, #11]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d11c      	bne.n	8008a72 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a38:	893b      	ldrh	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d011      	beq.n	8008a62 <USBD_GetDescriptor+0x2b6>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	88db      	ldrh	r3, [r3, #6]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	88da      	ldrh	r2, [r3, #6]
 8008a4a:	893b      	ldrh	r3, [r7, #8]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	bf28      	it	cs
 8008a50:	4613      	movcs	r3, r2
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a56:	893b      	ldrh	r3, [r7, #8]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	68f9      	ldr	r1, [r7, #12]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa1f 	bl	8008ea0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	88db      	ldrh	r3, [r3, #6]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d104      	bne.n	8008a74 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa76 	bl	8008f5c <USBD_CtlSendStatus>
 8008a70:	e000      	b.n	8008a74 <USBD_GetDescriptor+0x2c8>
    return;
 8008a72:	bf00      	nop
    }
  }
}
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop

08008a7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	889b      	ldrh	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d130      	bne.n	8008af0 <USBD_SetAddress+0x74>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d12c      	bne.n	8008af0 <USBD_SetAddress+0x74>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	885b      	ldrh	r3, [r3, #2]
 8008a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a9c:	d828      	bhi.n	8008af0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab0:	2b03      	cmp	r3, #3
 8008ab2:	d104      	bne.n	8008abe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f988 	bl	8008dcc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008abc:	e01c      	b.n	8008af8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	7bfa      	ldrb	r2, [r7, #15]
 8008ac2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f003 fc61 	bl	800c392 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fa43 	bl	8008f5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae4:	e008      	b.n	8008af8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aee:	e003      	b.n	8008af8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f96a 	bl	8008dcc <USBD_CtlError>
  }
}
 8008af8:	bf00      	nop
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	b2da      	uxtb	r2, r3
 8008b10:	4b41      	ldr	r3, [pc, #260]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b14:	4b40      	ldr	r3, [pc, #256]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d904      	bls.n	8008b26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f954 	bl	8008dcc <USBD_CtlError>
 8008b24:	e075      	b.n	8008c12 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d002      	beq.n	8008b36 <USBD_SetConfig+0x36>
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d023      	beq.n	8008b7c <USBD_SetConfig+0x7c>
 8008b34:	e062      	b.n	8008bfc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b36:	4b38      	ldr	r3, [pc, #224]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01a      	beq.n	8008b74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008b3e:	4b36      	ldr	r3, [pc, #216]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2203      	movs	r2, #3
 8008b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b50:	4b31      	ldr	r3, [pc, #196]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	4619      	mov	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7ff f9f4 	bl	8007f44 <USBD_SetClassConfig>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d104      	bne.n	8008b6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008b62:	6839      	ldr	r1, [r7, #0]
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f931 	bl	8008dcc <USBD_CtlError>
            return;
 8008b6a:	e052      	b.n	8008c12 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9f5 	bl	8008f5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b72:	e04e      	b.n	8008c12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f9f1 	bl	8008f5c <USBD_CtlSendStatus>
        break;
 8008b7a:	e04a      	b.n	8008c12 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008b7c:	4b26      	ldr	r3, [pc, #152]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d112      	bne.n	8008baa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008b8c:	4b22      	ldr	r3, [pc, #136]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	461a      	mov	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b96:	4b20      	ldr	r3, [pc, #128]	; (8008c18 <USBD_SetConfig+0x118>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff f9f0 	bl	8007f82 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9da 	bl	8008f5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ba8:	e033      	b.n	8008c12 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008baa:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <USBD_SetConfig+0x118>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d01d      	beq.n	8008bf4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff f9de 	bl	8007f82 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <USBD_SetConfig+0x118>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008bd0:	4b11      	ldr	r3, [pc, #68]	; (8008c18 <USBD_SetConfig+0x118>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff f9b4 	bl	8007f44 <USBD_SetClassConfig>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d104      	bne.n	8008bec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008be2:	6839      	ldr	r1, [r7, #0]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 f8f1 	bl	8008dcc <USBD_CtlError>
            return;
 8008bea:	e012      	b.n	8008c12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f9b5 	bl	8008f5c <USBD_CtlSendStatus>
        break;
 8008bf2:	e00e      	b.n	8008c12 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 f9b1 	bl	8008f5c <USBD_CtlSendStatus>
        break;
 8008bfa:	e00a      	b.n	8008c12 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f8e4 	bl	8008dcc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c04:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <USBD_SetConfig+0x118>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff f9b9 	bl	8007f82 <USBD_ClrClassConfig>
        break;
 8008c10:	bf00      	nop
    }
  }
}
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	200009f4 	.word	0x200009f4

08008c1c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d004      	beq.n	8008c38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f8cb 	bl	8008dcc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c36:	e021      	b.n	8008c7c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	db17      	blt.n	8008c72 <USBD_GetConfig+0x56>
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	dd02      	ble.n	8008c4c <USBD_GetConfig+0x30>
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d00b      	beq.n	8008c62 <USBD_GetConfig+0x46>
 8008c4a:	e012      	b.n	8008c72 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3308      	adds	r3, #8
 8008c56:	2201      	movs	r2, #1
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f920 	bl	8008ea0 <USBD_CtlSendData>
        break;
 8008c60:	e00c      	b.n	8008c7c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3304      	adds	r3, #4
 8008c66:	2201      	movs	r2, #1
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f918 	bl	8008ea0 <USBD_CtlSendData>
        break;
 8008c70:	e004      	b.n	8008c7c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f8a9 	bl	8008dcc <USBD_CtlError>
        break;
 8008c7a:	bf00      	nop
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c94:	3b01      	subs	r3, #1
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d81e      	bhi.n	8008cd8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	88db      	ldrh	r3, [r3, #6]
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d004      	beq.n	8008cac <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f891 	bl	8008dcc <USBD_CtlError>
        break;
 8008caa:	e01a      	b.n	8008ce2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	f043 0202 	orr.w	r2, r3, #2
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	330c      	adds	r3, #12
 8008ccc:	2202      	movs	r2, #2
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f8e5 	bl	8008ea0 <USBD_CtlSendData>
      break;
 8008cd6:	e004      	b.n	8008ce2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f876 	bl	8008dcc <USBD_CtlError>
      break;
 8008ce0:	bf00      	nop
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b082      	sub	sp, #8
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	885b      	ldrh	r3, [r3, #2]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d106      	bne.n	8008d0a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 f929 	bl	8008f5c <USBD_CtlSendStatus>
  }
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d22:	3b01      	subs	r3, #1
 8008d24:	2b02      	cmp	r3, #2
 8008d26:	d80b      	bhi.n	8008d40 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	885b      	ldrh	r3, [r3, #2]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d10c      	bne.n	8008d4a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f90f 	bl	8008f5c <USBD_CtlSendStatus>
      }
      break;
 8008d3e:	e004      	b.n	8008d4a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f842 	bl	8008dcc <USBD_CtlError>
      break;
 8008d48:	e000      	b.n	8008d4c <USBD_ClrFeature+0x3a>
      break;
 8008d4a:	bf00      	nop
  }
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781a      	ldrb	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	785a      	ldrb	r2, [r3, #1]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	3302      	adds	r3, #2
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	3303      	adds	r3, #3
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	021b      	lsls	r3, r3, #8
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	3305      	adds	r3, #5
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	021b      	lsls	r3, r3, #8
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	4413      	add	r3, r2
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	3306      	adds	r3, #6
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	3307      	adds	r3, #7
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	4413      	add	r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	80da      	strh	r2, [r3, #6]

}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc80      	pop	{r7}
 8008dca:	4770      	bx	lr

08008dcc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008dd6:	2180      	movs	r1, #128	; 0x80
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f003 fa70 	bl	800c2be <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f003 fa6c 	bl	800c2be <USBD_LL_StallEP>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b086      	sub	sp, #24
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d032      	beq.n	8008e6a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f834 	bl	8008e72 <USBD_GetLen>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	005b      	lsls	r3, r3, #1
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	75fa      	strb	r2, [r7, #23]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	4413      	add	r3, r2
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	7812      	ldrb	r2, [r2, #0]
 8008e28:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	75fa      	strb	r2, [r7, #23]
 8008e30:	461a      	mov	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	4413      	add	r3, r2
 8008e36:	2203      	movs	r2, #3
 8008e38:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e3a:	e012      	b.n	8008e62 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	75fa      	strb	r2, [r7, #23]
 8008e42:	461a      	mov	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	441a      	add	r2, r3
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	1c59      	adds	r1, r3, #1
 8008e4c:	60f9      	str	r1, [r7, #12]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	1c5a      	adds	r2, r3, #1
 8008e56:	75fa      	strb	r2, [r7, #23]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	2200      	movs	r2, #0
 8008e60:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e8      	bne.n	8008e3c <USBD_GetString+0x4e>
    }
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3718      	adds	r7, #24
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008e7e:	e005      	b.n	8008e8c <USBD_GetLen+0x1a>
  {
    len++;
 8008e80:	7bfb      	ldrb	r3, [r7, #15]
 8008e82:	3301      	adds	r3, #1
 8008e84:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1f5      	bne.n	8008e80 <USBD_GetLen+0xe>
  }

  return len;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008eb6:	88fa      	ldrh	r2, [r7, #6]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ebc:	88fa      	ldrh	r2, [r7, #6]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f003 fa81 	bl	800c3d0 <USBD_LL_Transmit>

  return USBD_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ee6:	88fb      	ldrh	r3, [r7, #6]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	2100      	movs	r1, #0
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f003 fa6f 	bl	800c3d0 <USBD_LL_Transmit>

  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2203      	movs	r2, #3
 8008f0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f12:	88fa      	ldrh	r2, [r7, #6]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008f1a:	88fa      	ldrh	r2, [r7, #6]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	2100      	movs	r1, #0
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f003 fa74 	bl	800c416 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	4613      	mov	r3, r2
 8008f44:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f46:	88fb      	ldrh	r3, [r7, #6]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f003 fa62 	bl	800c416 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2204      	movs	r2, #4
 8008f68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f003 fa2c 	bl	800c3d0 <USBD_LL_Transmit>

  return USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b082      	sub	sp, #8
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2205      	movs	r2, #5
 8008f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f92:	2300      	movs	r3, #0
 8008f94:	2200      	movs	r2, #0
 8008f96:	2100      	movs	r1, #0
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f003 fa3c 	bl	800c416 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008fc0:	7a5b      	ldrb	r3, [r3, #9]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d831      	bhi.n	800902c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008fca:	7a5b      	ldrb	r3, [r3, #9]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4b19      	ldr	r3, [pc, #100]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008fd8:	7a5b      	ldrb	r3, [r3, #9]
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	4a16      	ldr	r2, [pc, #88]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008fe6:	4b14      	ldr	r3, [pc, #80]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008fe8:	7a5b      	ldrb	r3, [r3, #9]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008ff0:	4413      	add	r3, r2
 8008ff2:	79fa      	ldrb	r2, [r7, #7]
 8008ff4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8008ff8:	7a5b      	ldrb	r3, [r3, #9]
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	1c5a      	adds	r2, r3, #1
 8008ffe:	b2d1      	uxtb	r1, r2
 8009000:	4a0d      	ldr	r2, [pc, #52]	; (8009038 <FATFS_LinkDriverEx+0x90>)
 8009002:	7251      	strb	r1, [r2, #9]
 8009004:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009006:	7dbb      	ldrb	r3, [r7, #22]
 8009008:	3330      	adds	r3, #48	; 0x30
 800900a:	b2da      	uxtb	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	3301      	adds	r3, #1
 8009014:	223a      	movs	r2, #58	; 0x3a
 8009016:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	3302      	adds	r3, #2
 800901c:	222f      	movs	r2, #47	; 0x2f
 800901e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	3303      	adds	r3, #3
 8009024:	2200      	movs	r2, #0
 8009026:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
}
 800902e:	4618      	mov	r0, r3
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr
 8009038:	200009f8 	.word	0x200009f8

0800903c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009046:	2200      	movs	r2, #0
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff ffac 	bl	8008fa8 <FATFS_LinkDriverEx>
 8009050:	4603      	mov	r3, r0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	4603      	mov	r3, r0
 8009062:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009064:	2300      	movs	r3, #0
 8009066:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800906c:	2b84      	cmp	r3, #132	; 0x84
 800906e:	d005      	beq.n	800907c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009070:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	3303      	adds	r3, #3
 800907a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800907c:	68fb      	ldr	r3, [r7, #12]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	bc80      	pop	{r7}
 8009086:	4770      	bx	lr

08009088 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800908e:	f3ef 8305 	mrs	r3, IPSR
 8009092:	607b      	str	r3, [r7, #4]
  return(result);
 8009094:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009096:	2b00      	cmp	r3, #0
 8009098:	bf14      	ite	ne
 800909a:	2301      	movne	r3, #1
 800909c:	2300      	moveq	r3, #0
 800909e:	b2db      	uxtb	r3, r3
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80090ae:	f001 fd2b 	bl	800ab08 <vTaskStartScheduler>
  
  return osOK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80090b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090ba:	b089      	sub	sp, #36	; 0x24
 80090bc:	af04      	add	r7, sp, #16
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d020      	beq.n	800910c <osThreadCreate+0x54>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d01c      	beq.n	800910c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685c      	ldr	r4, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681d      	ldr	r5, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691e      	ldr	r6, [r3, #16]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff ffb8 	bl	800905a <makeFreeRtosPriority>
 80090ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090f4:	9202      	str	r2, [sp, #8]
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	9100      	str	r1, [sp, #0]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	4632      	mov	r2, r6
 80090fe:	4629      	mov	r1, r5
 8009100:	4620      	mov	r0, r4
 8009102:	f001 fab5 	bl	800a670 <xTaskCreateStatic>
 8009106:	4603      	mov	r3, r0
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	e01c      	b.n	8009146 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685c      	ldr	r4, [r3, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009118:	b29e      	uxth	r6, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff ff9a 	bl	800905a <makeFreeRtosPriority>
 8009126:	4602      	mov	r2, r0
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	9301      	str	r3, [sp, #4]
 800912e:	9200      	str	r2, [sp, #0]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	4632      	mov	r2, r6
 8009134:	4629      	mov	r1, r5
 8009136:	4620      	mov	r0, r4
 8009138:	f001 faf3 	bl	800a722 <xTaskCreate>
 800913c:	4603      	mov	r3, r0
 800913e:	2b01      	cmp	r3, #1
 8009140:	d001      	beq.n	8009146 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009142:	2300      	movs	r3, #0
 8009144:	e000      	b.n	8009148 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009146:	68fb      	ldr	r3, [r7, #12]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009150 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <osDelay+0x16>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	e000      	b.n	8009168 <osDelay+0x18>
 8009166:	2301      	movs	r3, #1
 8009168:	4618      	mov	r0, r3
 800916a:	f001 fc07 	bl	800a97c <vTaskDelay>
  
  return osOK;
 800916e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af02      	add	r7, sp, #8
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	460b      	mov	r3, r1
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d013      	beq.n	80091b6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	2b01      	cmp	r3, #1
 8009192:	d101      	bne.n	8009198 <osTimerCreate+0x20>
 8009194:	2101      	movs	r1, #1
 8009196:	e000      	b.n	800919a <osTimerCreate+0x22>
 8009198:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80091a2:	9201      	str	r2, [sp, #4]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	460a      	mov	r2, r1
 80091aa:	2101      	movs	r1, #1
 80091ac:	480b      	ldr	r0, [pc, #44]	; (80091dc <osTimerCreate+0x64>)
 80091ae:	f002 fa56 	bl	800b65e <xTimerCreateStatic>
 80091b2:	4603      	mov	r3, r0
 80091b4:	e00e      	b.n	80091d4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80091b6:	7afb      	ldrb	r3, [r7, #11]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <osTimerCreate+0x48>
 80091bc:	2201      	movs	r2, #1
 80091be:	e000      	b.n	80091c2 <osTimerCreate+0x4a>
 80091c0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2101      	movs	r1, #1
 80091cc:	4803      	ldr	r0, [pc, #12]	; (80091dc <osTimerCreate+0x64>)
 80091ce:	f002 fa25 	bl	800b61c <xTimerCreate>
 80091d2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	0800cf34 	.word	0x0800cf34

080091e0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <osTimerStart+0x20>
    ticks = 1;
 80091fc:	2301      	movs	r3, #1
 80091fe:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8009200:	f7ff ff42 	bl	8009088 <inHandlerMode>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01b      	beq.n	8009242 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800920a:	f107 020c 	add.w	r2, r7, #12
 800920e:	2300      	movs	r3, #0
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4613      	mov	r3, r2
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	2109      	movs	r1, #9
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f002 fa8d 	bl	800b738 <xTimerGenericCommand>
 800921e:	4603      	mov	r3, r0
 8009220:	2b01      	cmp	r3, #1
 8009222:	d002      	beq.n	800922a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8009224:	23ff      	movs	r3, #255	; 0xff
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e018      	b.n	800925c <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d015      	beq.n	800925c <osTimerStart+0x7c>
 8009230:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <osTimerStart+0x88>)
 8009232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	e00c      	b.n	800925c <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8009242:	2300      	movs	r3, #0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	2300      	movs	r3, #0
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	2104      	movs	r1, #4
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f002 fa73 	bl	800b738 <xTimerGenericCommand>
 8009252:	4603      	mov	r3, r0
 8009254:	2b01      	cmp	r3, #1
 8009256:	d001      	beq.n	800925c <osTimerStart+0x7c>
      result = osErrorOS;
 8009258:	23ff      	movs	r3, #255	; 0xff
 800925a:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800925c:	697b      	ldr	r3, [r7, #20]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	e000ed04 	.word	0xe000ed04

0800926c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4619      	mov	r1, r3
 8009282:	2001      	movs	r0, #1
 8009284:	f000 fe02 	bl	8009e8c <xQueueCreateMutexStatic>
 8009288:	4603      	mov	r3, r0
 800928a:	e003      	b.n	8009294 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800928c:	2001      	movs	r0, #1
 800928e:	f000 fde5 	bl	8009e5c <xQueueCreateMutex>
 8009292:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800929c:	b590      	push	{r4, r7, lr}
 800929e:	b085      	sub	sp, #20
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d012      	beq.n	80092d4 <osMessageCreate+0x38>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00e      	beq.n	80092d4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6859      	ldr	r1, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68dc      	ldr	r4, [r3, #12]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	4623      	mov	r3, r4
 80092cc:	f000 fcde 	bl	8009c8c <xQueueGenericCreateStatic>
 80092d0:	4603      	mov	r3, r0
 80092d2:	e008      	b.n	80092e6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	4619      	mov	r1, r3
 80092e0:	f000 fd46 	bl	8009d70 <xQueueGenericCreate>
 80092e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd90      	pop	{r4, r7, pc}

080092ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f103 0208 	add.w	r2, r3, #8
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f04f 32ff 	mov.w	r2, #4294967295
 8009306:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f103 0208 	add.w	r2, r3, #8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f103 0208 	add.w	r2, r3, #8
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800933a:	bf00      	nop
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]
}
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr

0800938a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800938a:	b480      	push	{r7}
 800938c:	b085      	sub	sp, #20
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093a0:	d103      	bne.n	80093aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	e00c      	b.n	80093c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3308      	adds	r3, #8
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	e002      	b.n	80093b8 <vListInsert+0x2e>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d9f6      	bls.n	80093b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	601a      	str	r2, [r3, #0]
}
 80093f0:	bf00      	nop
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr

080093fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6892      	ldr	r2, [r2, #8]
 8009410:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6852      	ldr	r2, [r2, #4]
 800941a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d103      	bne.n	800942e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	1e5a      	subs	r2, r3, #1
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3b04      	subs	r3, #4
 800945c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3b04      	subs	r3, #4
 800946a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f023 0201 	bic.w	r2, r3, #1
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3b04      	subs	r3, #4
 800947a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800947c:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <pxPortInitialiseStack+0x54>)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3b14      	subs	r3, #20
 8009486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3b20      	subs	r3, #32
 8009492:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009494:	68fb      	ldr	r3, [r7, #12]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr
 80094a0:	080094a5 	.word	0x080094a5

080094a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094a4:	b480      	push	{r7}
 80094a6:	b085      	sub	sp, #20
 80094a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094ae:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <prvTaskExitError+0x4c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b6:	d009      	beq.n	80094cc <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	e7fe      	b.n	80094ca <prvTaskExitError+0x26>
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094de:	bf00      	nop
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d0fc      	beq.n	80094e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094e6:	bf00      	nop
 80094e8:	3714      	adds	r7, #20
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr
 80094f0:	200001ec 	.word	0x200001ec
	...

08009500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009500:	4b07      	ldr	r3, [pc, #28]	; (8009520 <pxCurrentTCBConst2>)
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	6808      	ldr	r0, [r1, #0]
 8009506:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800950a:	f380 8809 	msr	PSP, r0
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f04f 0000 	mov.w	r0, #0
 8009516:	f380 8811 	msr	BASEPRI, r0
 800951a:	f04e 0e0d 	orr.w	lr, lr, #13
 800951e:	4770      	bx	lr

08009520 <pxCurrentTCBConst2>:
 8009520:	200019c4 	.word	0x200019c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop

08009528 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009528:	4806      	ldr	r0, [pc, #24]	; (8009544 <prvPortStartFirstTask+0x1c>)
 800952a:	6800      	ldr	r0, [r0, #0]
 800952c:	6800      	ldr	r0, [r0, #0]
 800952e:	f380 8808 	msr	MSP, r0
 8009532:	b662      	cpsie	i
 8009534:	b661      	cpsie	f
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	df00      	svc	0
 8009540:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009542:	bf00      	nop
 8009544:	e000ed08 	.word	0xe000ed08

08009548 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800954e:	4b31      	ldr	r3, [pc, #196]	; (8009614 <xPortStartScheduler+0xcc>)
 8009550:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	22ff      	movs	r2, #255	; 0xff
 800955e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b2db      	uxtb	r3, r3
 8009566:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009570:	b2da      	uxtb	r2, r3
 8009572:	4b29      	ldr	r3, [pc, #164]	; (8009618 <xPortStartScheduler+0xd0>)
 8009574:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <xPortStartScheduler+0xd4>)
 8009578:	2207      	movs	r2, #7
 800957a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800957c:	e009      	b.n	8009592 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800957e:	4b27      	ldr	r3, [pc, #156]	; (800961c <xPortStartScheduler+0xd4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3b01      	subs	r3, #1
 8009584:	4a25      	ldr	r2, [pc, #148]	; (800961c <xPortStartScheduler+0xd4>)
 8009586:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	b2db      	uxtb	r3, r3
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	b2db      	uxtb	r3, r3
 8009590:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800959a:	2b80      	cmp	r3, #128	; 0x80
 800959c:	d0ef      	beq.n	800957e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800959e:	4b1f      	ldr	r3, [pc, #124]	; (800961c <xPortStartScheduler+0xd4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1c3 0307 	rsb	r3, r3, #7
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d009      	beq.n	80095be <xPortStartScheduler+0x76>
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	60bb      	str	r3, [r7, #8]
 80095bc:	e7fe      	b.n	80095bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095be:	4b17      	ldr	r3, [pc, #92]	; (800961c <xPortStartScheduler+0xd4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	4a15      	ldr	r2, [pc, #84]	; (800961c <xPortStartScheduler+0xd4>)
 80095c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095c8:	4b14      	ldr	r3, [pc, #80]	; (800961c <xPortStartScheduler+0xd4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095d0:	4a12      	ldr	r2, [pc, #72]	; (800961c <xPortStartScheduler+0xd4>)
 80095d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095dc:	4a10      	ldr	r2, [pc, #64]	; (8009620 <xPortStartScheduler+0xd8>)
 80095de:	4b10      	ldr	r3, [pc, #64]	; (8009620 <xPortStartScheduler+0xd8>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095e8:	4a0d      	ldr	r2, [pc, #52]	; (8009620 <xPortStartScheduler+0xd8>)
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <xPortStartScheduler+0xd8>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095f4:	f000 f8b0 	bl	8009758 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095f8:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <xPortStartScheduler+0xdc>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095fe:	f7ff ff93 	bl	8009528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009602:	f001 fc59 	bl	800aeb8 <vTaskSwitchContext>
	prvTaskExitError();
 8009606:	f7ff ff4d 	bl	80094a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	e000e400 	.word	0xe000e400
 8009618:	20000a04 	.word	0x20000a04
 800961c:	20000a08 	.word	0x20000a08
 8009620:	e000ed20 	.word	0xe000ed20
 8009624:	200001ec 	.word	0x200001ec

08009628 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009640:	4b0e      	ldr	r3, [pc, #56]	; (800967c <vPortEnterCritical+0x54>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	4a0d      	ldr	r2, [pc, #52]	; (800967c <vPortEnterCritical+0x54>)
 8009648:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800964a:	4b0c      	ldr	r3, [pc, #48]	; (800967c <vPortEnterCritical+0x54>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b01      	cmp	r3, #1
 8009650:	d10e      	bne.n	8009670 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009652:	4b0b      	ldr	r3, [pc, #44]	; (8009680 <vPortEnterCritical+0x58>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d009      	beq.n	8009670 <vPortEnterCritical+0x48>
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	603b      	str	r3, [r7, #0]
 800966e:	e7fe      	b.n	800966e <vPortEnterCritical+0x46>
	}
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	bc80      	pop	{r7}
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	200001ec 	.word	0x200001ec
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800968a:	4b10      	ldr	r3, [pc, #64]	; (80096cc <vPortExitCritical+0x48>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d109      	bne.n	80096a6 <vPortExitCritical+0x22>
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	607b      	str	r3, [r7, #4]
 80096a4:	e7fe      	b.n	80096a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80096a6:	4b09      	ldr	r3, [pc, #36]	; (80096cc <vPortExitCritical+0x48>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	4a07      	ldr	r2, [pc, #28]	; (80096cc <vPortExitCritical+0x48>)
 80096ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096b0:	4b06      	ldr	r3, [pc, #24]	; (80096cc <vPortExitCritical+0x48>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <vPortExitCritical+0x3e>
 80096b8:	2300      	movs	r3, #0
 80096ba:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr
 80096cc:	200001ec 	.word	0x200001ec

080096d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096d0:	f3ef 8009 	mrs	r0, PSP
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <pxCurrentTCBConst>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80096e0:	6010      	str	r0, [r2, #0]
 80096e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80096e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096ea:	f380 8811 	msr	BASEPRI, r0
 80096ee:	f001 fbe3 	bl	800aeb8 <vTaskSwitchContext>
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009706:	f380 8809 	msr	PSP, r0
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	4770      	bx	lr

08009710 <pxCurrentTCBConst>:
 8009710:	200019c4 	.word	0x200019c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009730:	f001 fb06 	bl	800ad40 <xTaskIncrementTick>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <SysTick_Handler+0x3c>)
 800973c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009740:	601a      	str	r2, [r3, #0]
 8009742:	2300      	movs	r3, #0
 8009744:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009758:	b480      	push	{r7}
 800975a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800975c:	4b0a      	ldr	r3, [pc, #40]	; (8009788 <vPortSetupTimerInterrupt+0x30>)
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <vPortSetupTimerInterrupt+0x34>)
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009768:	4a09      	ldr	r2, [pc, #36]	; (8009790 <vPortSetupTimerInterrupt+0x38>)
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vPortSetupTimerInterrupt+0x3c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	490a      	ldr	r1, [pc, #40]	; (8009798 <vPortSetupTimerInterrupt+0x40>)
 8009770:	fba1 1303 	umull	r1, r3, r1, r3
 8009774:	099b      	lsrs	r3, r3, #6
 8009776:	3b01      	subs	r3, #1
 8009778:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800977a:	4b03      	ldr	r3, [pc, #12]	; (8009788 <vPortSetupTimerInterrupt+0x30>)
 800977c:	2207      	movs	r2, #7
 800977e:	601a      	str	r2, [r3, #0]
}
 8009780:	bf00      	nop
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr
 8009788:	e000e010 	.word	0xe000e010
 800978c:	e000e018 	.word	0xe000e018
 8009790:	e000e014 	.word	0xe000e014
 8009794:	20000054 	.word	0x20000054
 8009798:	10624dd3 	.word	0x10624dd3

0800979c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097a2:	f3ef 8305 	mrs	r3, IPSR
 80097a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2b0f      	cmp	r3, #15
 80097ac:	d913      	bls.n	80097d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097ae:	4a15      	ldr	r2, [pc, #84]	; (8009804 <vPortValidateInterruptPriority+0x68>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097b8:	4b13      	ldr	r3, [pc, #76]	; (8009808 <vPortValidateInterruptPriority+0x6c>)
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	7afa      	ldrb	r2, [r7, #11]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d209      	bcs.n	80097d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	607b      	str	r3, [r7, #4]
 80097d4:	e7fe      	b.n	80097d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097d6:	4b0d      	ldr	r3, [pc, #52]	; (800980c <vPortValidateInterruptPriority+0x70>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80097de:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <vPortValidateInterruptPriority+0x74>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d909      	bls.n	80097fa <vPortValidateInterruptPriority+0x5e>
 80097e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	603b      	str	r3, [r7, #0]
 80097f8:	e7fe      	b.n	80097f8 <vPortValidateInterruptPriority+0x5c>
	}
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr
 8009804:	e000e3f0 	.word	0xe000e3f0
 8009808:	20000a04 	.word	0x20000a04
 800980c:	e000ed0c 	.word	0xe000ed0c
 8009810:	20000a08 	.word	0x20000a08

08009814 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08a      	sub	sp, #40	; 0x28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009820:	f001 f9d6 	bl	800abd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009824:	4b57      	ldr	r3, [pc, #348]	; (8009984 <pvPortMalloc+0x170>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d101      	bne.n	8009830 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800982c:	f000 f90c 	bl	8009a48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009830:	4b55      	ldr	r3, [pc, #340]	; (8009988 <pvPortMalloc+0x174>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4013      	ands	r3, r2
 8009838:	2b00      	cmp	r3, #0
 800983a:	f040 808c 	bne.w	8009956 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01c      	beq.n	800987e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009844:	2208      	movs	r2, #8
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4413      	add	r3, r2
 800984a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b00      	cmp	r3, #0
 8009854:	d013      	beq.n	800987e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f023 0307 	bic.w	r3, r3, #7
 800985c:	3308      	adds	r3, #8
 800985e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f003 0307 	and.w	r3, r3, #7
 8009866:	2b00      	cmp	r3, #0
 8009868:	d009      	beq.n	800987e <pvPortMalloc+0x6a>
 800986a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986e:	f383 8811 	msr	BASEPRI, r3
 8009872:	f3bf 8f6f 	isb	sy
 8009876:	f3bf 8f4f 	dsb	sy
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	e7fe      	b.n	800987c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d068      	beq.n	8009956 <pvPortMalloc+0x142>
 8009884:	4b41      	ldr	r3, [pc, #260]	; (800998c <pvPortMalloc+0x178>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	429a      	cmp	r2, r3
 800988c:	d863      	bhi.n	8009956 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800988e:	4b40      	ldr	r3, [pc, #256]	; (8009990 <pvPortMalloc+0x17c>)
 8009890:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009892:	4b3f      	ldr	r3, [pc, #252]	; (8009990 <pvPortMalloc+0x17c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009898:	e004      	b.n	80098a4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d203      	bcs.n	80098b6 <pvPortMalloc+0xa2>
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1f1      	bne.n	800989a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098b6:	4b33      	ldr	r3, [pc, #204]	; (8009984 <pvPortMalloc+0x170>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098bc:	429a      	cmp	r2, r3
 80098be:	d04a      	beq.n	8009956 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2208      	movs	r2, #8
 80098c6:	4413      	add	r3, r2
 80098c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	685a      	ldr	r2, [r3, #4]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	1ad2      	subs	r2, r2, r3
 80098da:	2308      	movs	r3, #8
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	429a      	cmp	r2, r3
 80098e0:	d91e      	bls.n	8009920 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4413      	add	r3, r2
 80098e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <pvPortMalloc+0xf4>
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	e7fe      	b.n	8009906 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1ad2      	subs	r2, r2, r3
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f000 f8f6 	bl	8009b0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009920:	4b1a      	ldr	r3, [pc, #104]	; (800998c <pvPortMalloc+0x178>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	4a18      	ldr	r2, [pc, #96]	; (800998c <pvPortMalloc+0x178>)
 800992c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800992e:	4b17      	ldr	r3, [pc, #92]	; (800998c <pvPortMalloc+0x178>)
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b18      	ldr	r3, [pc, #96]	; (8009994 <pvPortMalloc+0x180>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	429a      	cmp	r2, r3
 8009938:	d203      	bcs.n	8009942 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <pvPortMalloc+0x178>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a15      	ldr	r2, [pc, #84]	; (8009994 <pvPortMalloc+0x180>)
 8009940:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	4b10      	ldr	r3, [pc, #64]	; (8009988 <pvPortMalloc+0x174>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	431a      	orrs	r2, r3
 800994c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009956:	f001 f949 	bl	800abec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	2b00      	cmp	r3, #0
 8009962:	d009      	beq.n	8009978 <pvPortMalloc+0x164>
 8009964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	e7fe      	b.n	8009976 <pvPortMalloc+0x162>
	return pvReturn;
 8009978:	69fb      	ldr	r3, [r7, #28]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3728      	adds	r7, #40	; 0x28
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200019b4 	.word	0x200019b4
 8009988:	200019c0 	.word	0x200019c0
 800998c:	200019b8 	.word	0x200019b8
 8009990:	200019ac 	.word	0x200019ac
 8009994:	200019bc 	.word	0x200019bc

08009998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d046      	beq.n	8009a38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099aa:	2308      	movs	r3, #8
 80099ac:	425b      	negs	r3, r3
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4413      	add	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	4b20      	ldr	r3, [pc, #128]	; (8009a40 <vPortFree+0xa8>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4013      	ands	r3, r2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <vPortFree+0x42>
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	60fb      	str	r3, [r7, #12]
 80099d8:	e7fe      	b.n	80099d8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <vPortFree+0x5e>
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	60bb      	str	r3, [r7, #8]
 80099f4:	e7fe      	b.n	80099f4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <vPortFree+0xa8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4013      	ands	r3, r2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d019      	beq.n	8009a38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d115      	bne.n	8009a38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <vPortFree+0xa8>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	43db      	mvns	r3, r3
 8009a16:	401a      	ands	r2, r3
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a1c:	f001 f8d8 	bl	800abd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	4b07      	ldr	r3, [pc, #28]	; (8009a44 <vPortFree+0xac>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4413      	add	r3, r2
 8009a2a:	4a06      	ldr	r2, [pc, #24]	; (8009a44 <vPortFree+0xac>)
 8009a2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a2e:	6938      	ldr	r0, [r7, #16]
 8009a30:	f000 f86c 	bl	8009b0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a34:	f001 f8da 	bl	800abec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a38:	bf00      	nop
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	200019c0 	.word	0x200019c0
 8009a44:	200019b8 	.word	0x200019b8

08009a48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a4e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009a52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a54:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <prvHeapInit+0xac>)
 8009a56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f003 0307 	and.w	r3, r3, #7
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00c      	beq.n	8009a7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3307      	adds	r3, #7
 8009a66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0307 	bic.w	r3, r3, #7
 8009a6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	4a1f      	ldr	r2, [pc, #124]	; (8009af4 <prvHeapInit+0xac>)
 8009a78:	4413      	add	r3, r2
 8009a7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a80:	4a1d      	ldr	r2, [pc, #116]	; (8009af8 <prvHeapInit+0xb0>)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a86:	4b1c      	ldr	r3, [pc, #112]	; (8009af8 <prvHeapInit+0xb0>)
 8009a88:	2200      	movs	r2, #0
 8009a8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	4413      	add	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a94:	2208      	movs	r2, #8
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f023 0307 	bic.w	r3, r3, #7
 8009aa2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4a15      	ldr	r2, [pc, #84]	; (8009afc <prvHeapInit+0xb4>)
 8009aa8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009aaa:	4b14      	ldr	r3, [pc, #80]	; (8009afc <prvHeapInit+0xb4>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ab2:	4b12      	ldr	r3, [pc, #72]	; (8009afc <prvHeapInit+0xb4>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	1ad2      	subs	r2, r2, r3
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ac8:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <prvHeapInit+0xb4>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4a0a      	ldr	r2, [pc, #40]	; (8009b00 <prvHeapInit+0xb8>)
 8009ad6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	4a09      	ldr	r2, [pc, #36]	; (8009b04 <prvHeapInit+0xbc>)
 8009ade:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ae0:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <prvHeapInit+0xc0>)
 8009ae2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ae6:	601a      	str	r2, [r3, #0]
}
 8009ae8:	bf00      	nop
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000a0c 	.word	0x20000a0c
 8009af8:	200019ac 	.word	0x200019ac
 8009afc:	200019b4 	.word	0x200019b4
 8009b00:	200019bc 	.word	0x200019bc
 8009b04:	200019b8 	.word	0x200019b8
 8009b08:	200019c0 	.word	0x200019c0

08009b0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b14:	4b27      	ldr	r3, [pc, #156]	; (8009bb4 <prvInsertBlockIntoFreeList+0xa8>)
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	e002      	b.n	8009b20 <prvInsertBlockIntoFreeList+0x14>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d3f7      	bcc.n	8009b1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d108      	bne.n	8009b4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	441a      	add	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	441a      	add	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d118      	bne.n	8009b94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <prvInsertBlockIntoFreeList+0xac>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d00d      	beq.n	8009b8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	441a      	add	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	e008      	b.n	8009b9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b8a:	4b0b      	ldr	r3, [pc, #44]	; (8009bb8 <prvInsertBlockIntoFreeList+0xac>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	601a      	str	r2, [r3, #0]
 8009b92:	e003      	b.n	8009b9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d002      	beq.n	8009baa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bc80      	pop	{r7}
 8009bb2:	4770      	bx	lr
 8009bb4:	200019ac 	.word	0x200019ac
 8009bb8:	200019b4 	.word	0x200019b4

08009bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d109      	bne.n	8009be4 <xQueueGenericReset+0x28>
 8009bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	60bb      	str	r3, [r7, #8]
 8009be2:	e7fe      	b.n	8009be2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009be4:	f7ff fd20 	bl	8009628 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c14:	3b01      	subs	r3, #1
 8009c16:	68f9      	ldr	r1, [r7, #12]
 8009c18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c1a:	fb01 f303 	mul.w	r3, r1, r3
 8009c1e:	441a      	add	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	22ff      	movs	r2, #255	; 0xff
 8009c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	22ff      	movs	r2, #255	; 0xff
 8009c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d114      	bne.n	8009c64 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d01a      	beq.n	8009c78 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3310      	adds	r3, #16
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 f9de 	bl	800b008 <xTaskRemoveFromEventList>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d012      	beq.n	8009c78 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c52:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <xQueueGenericReset+0xcc>)
 8009c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	e009      	b.n	8009c78 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3310      	adds	r3, #16
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff fb40 	bl	80092ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3324      	adds	r3, #36	; 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fb3b 	bl	80092ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c78:	f7ff fd04 	bl	8009684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c7c:	2301      	movs	r3, #1
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	e000ed04 	.word	0xe000ed04

08009c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08e      	sub	sp, #56	; 0x38
 8009c90:	af02      	add	r7, sp, #8
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
 8009c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d109      	bne.n	8009cb4 <xQueueGenericCreateStatic+0x28>
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cb2:	e7fe      	b.n	8009cb2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d109      	bne.n	8009cce <xQueueGenericCreateStatic+0x42>
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	627b      	str	r3, [r7, #36]	; 0x24
 8009ccc:	e7fe      	b.n	8009ccc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <xQueueGenericCreateStatic+0x4e>
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <xQueueGenericCreateStatic+0x52>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <xQueueGenericCreateStatic+0x54>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d109      	bne.n	8009cf8 <xQueueGenericCreateStatic+0x6c>
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	623b      	str	r3, [r7, #32]
 8009cf6:	e7fe      	b.n	8009cf6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <xQueueGenericCreateStatic+0x78>
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d101      	bne.n	8009d08 <xQueueGenericCreateStatic+0x7c>
 8009d04:	2301      	movs	r3, #1
 8009d06:	e000      	b.n	8009d0a <xQueueGenericCreateStatic+0x7e>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <xQueueGenericCreateStatic+0x96>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e7fe      	b.n	8009d20 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d22:	2348      	movs	r3, #72	; 0x48
 8009d24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2b48      	cmp	r3, #72	; 0x48
 8009d2a:	d009      	beq.n	8009d40 <xQueueGenericCreateStatic+0xb4>
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	e7fe      	b.n	8009d3e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00d      	beq.n	8009d66 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	68b9      	ldr	r1, [r7, #8]
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f842 	bl	8009dea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3730      	adds	r7, #48	; 0x30
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	; 0x28
 8009d74:	af02      	add	r7, sp, #8
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d109      	bne.n	8009d98 <xQueueGenericCreate+0x28>
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	613b      	str	r3, [r7, #16]
 8009d96:	e7fe      	b.n	8009d96 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d102      	bne.n	8009da4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61fb      	str	r3, [r7, #28]
 8009da2:	e004      	b.n	8009dae <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	fb02 f303 	mul.w	r3, r2, r3
 8009dac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	3348      	adds	r3, #72	; 0x48
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fd2e 	bl	8009814 <pvPortMalloc>
 8009db8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00f      	beq.n	8009de0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	3348      	adds	r3, #72	; 0x48
 8009dc4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dce:	79fa      	ldrb	r2, [r7, #7]
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	68b9      	ldr	r1, [r7, #8]
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f000 f805 	bl	8009dea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009de0:	69bb      	ldr	r3, [r7, #24]
	}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3720      	adds	r7, #32
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b084      	sub	sp, #16
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	607a      	str	r2, [r7, #4]
 8009df6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	e002      	b.n	8009e0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e0c:	69bb      	ldr	r3, [r7, #24]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e18:	2101      	movs	r1, #1
 8009e1a:	69b8      	ldr	r0, [r7, #24]
 8009e1c:	f7ff fece 	bl	8009bbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00e      	beq.n	8009e54 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f838 	bl	8009ec4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b086      	sub	sp, #24
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009e66:	2301      	movs	r3, #1
 8009e68:	617b      	str	r3, [r7, #20]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009e6e:	79fb      	ldrb	r3, [r7, #7]
 8009e70:	461a      	mov	r2, r3
 8009e72:	6939      	ldr	r1, [r7, #16]
 8009e74:	6978      	ldr	r0, [r7, #20]
 8009e76:	f7ff ff7b 	bl	8009d70 <xQueueGenericCreate>
 8009e7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f7ff ffd3 	bl	8009e28 <prvInitialiseMutex>

		return pxNewQueue;
 8009e82:	68fb      	ldr	r3, [r7, #12]
	}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af02      	add	r7, sp, #8
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	6939      	ldr	r1, [r7, #16]
 8009eaa:	6978      	ldr	r0, [r7, #20]
 8009eac:	f7ff feee 	bl	8009c8c <xQueueGenericCreateStatic>
 8009eb0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009eb2:	68f8      	ldr	r0, [r7, #12]
 8009eb4:	f7ff ffb8 	bl	8009e28 <prvInitialiseMutex>

		return pxNewQueue;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
	}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3718      	adds	r7, #24
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
	...

08009ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08e      	sub	sp, #56	; 0x38
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d109      	bne.n	8009ef4 <xQueueGenericSend+0x30>
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ef2:	e7fe      	b.n	8009ef2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d103      	bne.n	8009f02 <xQueueGenericSend+0x3e>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <xQueueGenericSend+0x42>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <xQueueGenericSend+0x44>
 8009f06:	2300      	movs	r3, #0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d109      	bne.n	8009f20 <xQueueGenericSend+0x5c>
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f1e:	e7fe      	b.n	8009f1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d103      	bne.n	8009f2e <xQueueGenericSend+0x6a>
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <xQueueGenericSend+0x6e>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <xQueueGenericSend+0x70>
 8009f32:	2300      	movs	r3, #0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <xQueueGenericSend+0x88>
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	623b      	str	r3, [r7, #32]
 8009f4a:	e7fe      	b.n	8009f4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f4c:	f001 fa16 	bl	800b37c <xTaskGetSchedulerState>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d102      	bne.n	8009f5c <xQueueGenericSend+0x98>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <xQueueGenericSend+0x9c>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e000      	b.n	8009f62 <xQueueGenericSend+0x9e>
 8009f60:	2300      	movs	r3, #0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <xQueueGenericSend+0xb6>
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	e7fe      	b.n	8009f78 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f7a:	f7ff fb55 	bl	8009628 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d302      	bcc.n	8009f90 <xQueueGenericSend+0xcc>
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	d129      	bne.n	8009fe4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f96:	f000 f9ff 	bl	800a398 <prvCopyDataToQueue>
 8009f9a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d010      	beq.n	8009fc6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	3324      	adds	r3, #36	; 0x24
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f001 f82d 	bl	800b008 <xTaskRemoveFromEventList>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d013      	beq.n	8009fdc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009fb4:	4b3f      	ldr	r3, [pc, #252]	; (800a0b4 <xQueueGenericSend+0x1f0>)
 8009fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	e00a      	b.n	8009fdc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d007      	beq.n	8009fdc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fcc:	4b39      	ldr	r3, [pc, #228]	; (800a0b4 <xQueueGenericSend+0x1f0>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fdc:	f7ff fb52 	bl	8009684 <vPortExitCritical>
				return pdPASS;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e063      	b.n	800a0ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d103      	bne.n	8009ff2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fea:	f7ff fb4b 	bl	8009684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e05c      	b.n	800a0ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d106      	bne.n	800a006 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f001 f865 	bl	800b0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a002:	2301      	movs	r3, #1
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a006:	f7ff fb3d 	bl	8009684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a00a:	f000 fde1 	bl	800abd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a00e:	f7ff fb0b 	bl	8009628 <vPortEnterCritical>
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a018:	b25b      	sxtb	r3, r3
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d103      	bne.n	800a028 <xQueueGenericSend+0x164>
 800a020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a02e:	b25b      	sxtb	r3, r3
 800a030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a034:	d103      	bne.n	800a03e <xQueueGenericSend+0x17a>
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a03e:	f7ff fb21 	bl	8009684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a042:	1d3a      	adds	r2, r7, #4
 800a044:	f107 0314 	add.w	r3, r7, #20
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 f854 	bl	800b0f8 <xTaskCheckForTimeOut>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d124      	bne.n	800a0a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a058:	f000 fa96 	bl	800a588 <prvIsQueueFull>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d018      	beq.n	800a094 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	3310      	adds	r3, #16
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4611      	mov	r1, r2
 800a06a:	4618      	mov	r0, r3
 800a06c:	f000 ff7e 	bl	800af6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a072:	f000 fa21 	bl	800a4b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a076:	f000 fdb9 	bl	800abec <xTaskResumeAll>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f47f af7c 	bne.w	8009f7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a082:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <xQueueGenericSend+0x1f0>)
 800a084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	f3bf 8f4f 	dsb	sy
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	e772      	b.n	8009f7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a096:	f000 fa0f 	bl	800a4b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a09a:	f000 fda7 	bl	800abec <xTaskResumeAll>
 800a09e:	e76c      	b.n	8009f7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a0a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a0a2:	f000 fa09 	bl	800a4b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0a6:	f000 fda1 	bl	800abec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a0aa:	2300      	movs	r3, #0
		}
	}
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3738      	adds	r7, #56	; 0x38
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	e000ed04 	.word	0xe000ed04

0800a0b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08e      	sub	sp, #56	; 0x38
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d109      	bne.n	800a0e4 <xQueueGenericSendFromISR+0x2c>
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e2:	e7fe      	b.n	800a0e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d103      	bne.n	800a0f2 <xQueueGenericSendFromISR+0x3a>
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <xQueueGenericSendFromISR+0x3e>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e000      	b.n	800a0f8 <xQueueGenericSendFromISR+0x40>
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d109      	bne.n	800a110 <xQueueGenericSendFromISR+0x58>
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	623b      	str	r3, [r7, #32]
 800a10e:	e7fe      	b.n	800a10e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d103      	bne.n	800a11e <xQueueGenericSendFromISR+0x66>
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <xQueueGenericSendFromISR+0x6a>
 800a11e:	2301      	movs	r3, #1
 800a120:	e000      	b.n	800a124 <xQueueGenericSendFromISR+0x6c>
 800a122:	2300      	movs	r3, #0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <xQueueGenericSendFromISR+0x84>
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	f383 8811 	msr	BASEPRI, r3
 800a130:	f3bf 8f6f 	isb	sy
 800a134:	f3bf 8f4f 	dsb	sy
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	e7fe      	b.n	800a13a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a13c:	f7ff fb2e 	bl	800979c <vPortValidateInterruptPriority>
	__asm volatile
 800a140:	f3ef 8211 	mrs	r2, BASEPRI
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	61ba      	str	r2, [r7, #24]
 800a156:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a158:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a164:	429a      	cmp	r2, r3
 800a166:	d302      	bcc.n	800a16e <xQueueGenericSendFromISR+0xb6>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d12c      	bne.n	800a1c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a17e:	f000 f90b 	bl	800a398 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a182:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a18a:	d112      	bne.n	800a1b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d016      	beq.n	800a1c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	3324      	adds	r3, #36	; 0x24
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 ff35 	bl	800b008 <xTaskRemoveFromEventList>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00e      	beq.n	800a1c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e007      	b.n	800a1c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	b25a      	sxtb	r2, r3
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a1c6:	e001      	b.n	800a1cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3738      	adds	r7, #56	; 0x38
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08c      	sub	sp, #48	; 0x30
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d109      	bne.n	800a20e <xQueueReceive+0x2e>
	__asm volatile
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	623b      	str	r3, [r7, #32]
 800a20c:	e7fe      	b.n	800a20c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d103      	bne.n	800a21c <xQueueReceive+0x3c>
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <xQueueReceive+0x40>
 800a21c:	2301      	movs	r3, #1
 800a21e:	e000      	b.n	800a222 <xQueueReceive+0x42>
 800a220:	2300      	movs	r3, #0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <xQueueReceive+0x5a>
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	61fb      	str	r3, [r7, #28]
 800a238:	e7fe      	b.n	800a238 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a23a:	f001 f89f 	bl	800b37c <xTaskGetSchedulerState>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d102      	bne.n	800a24a <xQueueReceive+0x6a>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <xQueueReceive+0x6e>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e000      	b.n	800a250 <xQueueReceive+0x70>
 800a24e:	2300      	movs	r3, #0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d109      	bne.n	800a268 <xQueueReceive+0x88>
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	61bb      	str	r3, [r7, #24]
 800a266:	e7fe      	b.n	800a266 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a268:	f7ff f9de 	bl	8009628 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	2b00      	cmp	r3, #0
 800a276:	d01f      	beq.n	800a2b8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a278:	68b9      	ldr	r1, [r7, #8]
 800a27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27c:	f000 f8f6 	bl	800a46c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	1e5a      	subs	r2, r3, #1
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00f      	beq.n	800a2b0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	3310      	adds	r3, #16
 800a294:	4618      	mov	r0, r3
 800a296:	f000 feb7 	bl	800b008 <xTaskRemoveFromEventList>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2a0:	4b3c      	ldr	r3, [pc, #240]	; (800a394 <xQueueReceive+0x1b4>)
 800a2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a6:	601a      	str	r2, [r3, #0]
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2b0:	f7ff f9e8 	bl	8009684 <vPortExitCritical>
				return pdPASS;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e069      	b.n	800a38c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d103      	bne.n	800a2c6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2be:	f7ff f9e1 	bl	8009684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	e062      	b.n	800a38c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d106      	bne.n	800a2da <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2cc:	f107 0310 	add.w	r3, r7, #16
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 fefb 	bl	800b0cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2da:	f7ff f9d3 	bl	8009684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2de:	f000 fc77 	bl	800abd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2e2:	f7ff f9a1 	bl	8009628 <vPortEnterCritical>
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ec:	b25b      	sxtb	r3, r3
 800a2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2f2:	d103      	bne.n	800a2fc <xQueueReceive+0x11c>
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a302:	b25b      	sxtb	r3, r3
 800a304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a308:	d103      	bne.n	800a312 <xQueueReceive+0x132>
 800a30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a312:	f7ff f9b7 	bl	8009684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a316:	1d3a      	adds	r2, r7, #4
 800a318:	f107 0310 	add.w	r3, r7, #16
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 feea 	bl	800b0f8 <xTaskCheckForTimeOut>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d123      	bne.n	800a372 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a32a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a32c:	f000 f916 	bl	800a55c <prvIsQueueEmpty>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d017      	beq.n	800a366 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a338:	3324      	adds	r3, #36	; 0x24
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	4611      	mov	r1, r2
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fe14 	bl	800af6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a346:	f000 f8b7 	bl	800a4b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a34a:	f000 fc4f 	bl	800abec <xTaskResumeAll>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d189      	bne.n	800a268 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <xQueueReceive+0x1b4>)
 800a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	e780      	b.n	800a268 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a368:	f000 f8a6 	bl	800a4b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a36c:	f000 fc3e 	bl	800abec <xTaskResumeAll>
 800a370:	e77a      	b.n	800a268 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a374:	f000 f8a0 	bl	800a4b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a378:	f000 fc38 	bl	800abec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a37c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a37e:	f000 f8ed 	bl	800a55c <prvIsQueueEmpty>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	f43f af6f 	beq.w	800a268 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a38a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3730      	adds	r7, #48	; 0x30
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	e000ed04 	.word	0xe000ed04

0800a398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10d      	bne.n	800a3d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d14d      	bne.n	800a45a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 fff8 	bl	800b3b8 <xTaskPriorityDisinherit>
 800a3c8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	605a      	str	r2, [r3, #4]
 800a3d0:	e043      	b.n	800a45a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d119      	bne.n	800a40c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6898      	ldr	r0, [r3, #8]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	f002 f8ea 	bl	800c5bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	441a      	add	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d32b      	bcc.n	800a45a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	609a      	str	r2, [r3, #8]
 800a40a:	e026      	b.n	800a45a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68d8      	ldr	r0, [r3, #12]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	461a      	mov	r2, r3
 800a416:	68b9      	ldr	r1, [r7, #8]
 800a418:	f002 f8d0 	bl	800c5bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	68da      	ldr	r2, [r3, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a424:	425b      	negs	r3, r3
 800a426:	441a      	add	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	429a      	cmp	r2, r3
 800a436:	d207      	bcs.n	800a448 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a440:	425b      	negs	r3, r3
 800a442:	441a      	add	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d105      	bne.n	800a45a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	3b01      	subs	r3, #1
 800a458:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a462:	697b      	ldr	r3, [r7, #20]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d018      	beq.n	800a4b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68da      	ldr	r2, [r3, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	441a      	add	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	d303      	bcc.n	800a4a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68d9      	ldr	r1, [r3, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6838      	ldr	r0, [r7, #0]
 800a4ac:	f002 f886 	bl	800c5bc <memcpy>
	}
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a4c0:	f7ff f8b2 	bl	8009628 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4cc:	e011      	b.n	800a4f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d012      	beq.n	800a4fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3324      	adds	r3, #36	; 0x24
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fd94 	bl	800b008 <xTaskRemoveFromEventList>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a4e6:	f000 fe67 	bl	800b1b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	dce9      	bgt.n	800a4ce <prvUnlockQueue+0x16>
 800a4fa:	e000      	b.n	800a4fe <prvUnlockQueue+0x46>
					break;
 800a4fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	22ff      	movs	r2, #255	; 0xff
 800a502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a506:	f7ff f8bd 	bl	8009684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a50a:	f7ff f88d 	bl	8009628 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a514:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a516:	e011      	b.n	800a53c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d012      	beq.n	800a546 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3310      	adds	r3, #16
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fd6f 	bl	800b008 <xTaskRemoveFromEventList>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d001      	beq.n	800a534 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a530:	f000 fe42 	bl	800b1b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a534:	7bbb      	ldrb	r3, [r7, #14]
 800a536:	3b01      	subs	r3, #1
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a53c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a540:	2b00      	cmp	r3, #0
 800a542:	dce9      	bgt.n	800a518 <prvUnlockQueue+0x60>
 800a544:	e000      	b.n	800a548 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a546:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	22ff      	movs	r2, #255	; 0xff
 800a54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a550:	f7ff f898 	bl	8009684 <vPortExitCritical>
}
 800a554:	bf00      	nop
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a564:	f7ff f860 	bl	8009628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d102      	bne.n	800a576 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a570:	2301      	movs	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
 800a574:	e001      	b.n	800a57a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a57a:	f7ff f883 	bl	8009684 <vPortExitCritical>

	return xReturn;
 800a57e:	68fb      	ldr	r3, [r7, #12]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a590:	f7ff f84a 	bl	8009628 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d102      	bne.n	800a5a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	e001      	b.n	800a5aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a5aa:	f7ff f86b 	bl	8009684 <vPortExitCritical>

	return xReturn;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e014      	b.n	800a5f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a5c8:	4a0e      	ldr	r2, [pc, #56]	; (800a604 <vQueueAddToRegistry+0x4c>)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10b      	bne.n	800a5ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a5d4:	490b      	ldr	r1, [pc, #44]	; (800a604 <vQueueAddToRegistry+0x4c>)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a5de:	4a09      	ldr	r2, [pc, #36]	; (800a604 <vQueueAddToRegistry+0x4c>)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	4413      	add	r3, r2
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a5ea:	e005      	b.n	800a5f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	60fb      	str	r3, [r7, #12]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2b07      	cmp	r3, #7
 800a5f6:	d9e7      	bls.n	800a5c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a5f8:	bf00      	nop
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bc80      	pop	{r7}
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	2000318c 	.word	0x2000318c

0800a608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a618:	f7ff f806 	bl	8009628 <vPortEnterCritical>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a622:	b25b      	sxtb	r3, r3
 800a624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a628:	d103      	bne.n	800a632 <vQueueWaitForMessageRestricted+0x2a>
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a638:	b25b      	sxtb	r3, r3
 800a63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63e:	d103      	bne.n	800a648 <vQueueWaitForMessageRestricted+0x40>
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a648:	f7ff f81c 	bl	8009684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	2b00      	cmp	r3, #0
 800a652:	d106      	bne.n	800a662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	3324      	adds	r3, #36	; 0x24
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	4618      	mov	r0, r3
 800a65e:	f000 fca9 	bl	800afb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a662:	6978      	ldr	r0, [r7, #20]
 800a664:	f7ff ff28 	bl	800a4b8 <prvUnlockQueue>
	}
 800a668:	bf00      	nop
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a670:	b580      	push	{r7, lr}
 800a672:	b08e      	sub	sp, #56	; 0x38
 800a674:	af04      	add	r7, sp, #16
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a680:	2b00      	cmp	r3, #0
 800a682:	d109      	bne.n	800a698 <xTaskCreateStatic+0x28>
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	623b      	str	r3, [r7, #32]
 800a696:	e7fe      	b.n	800a696 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d109      	bne.n	800a6b2 <xTaskCreateStatic+0x42>
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	61fb      	str	r3, [r7, #28]
 800a6b0:	e7fe      	b.n	800a6b0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a6b2:	2354      	movs	r3, #84	; 0x54
 800a6b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2b54      	cmp	r3, #84	; 0x54
 800a6ba:	d009      	beq.n	800a6d0 <xTaskCreateStatic+0x60>
 800a6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	e7fe      	b.n	800a6ce <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d01e      	beq.n	800a714 <xTaskCreateStatic+0xa4>
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01b      	beq.n	800a714 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	9303      	str	r3, [sp, #12]
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	f107 0314 	add.w	r3, r7, #20
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	68b9      	ldr	r1, [r7, #8]
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f000 f850 	bl	800a7ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a70c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a70e:	f000 f8cb 	bl	800a8a8 <prvAddNewTaskToReadyList>
 800a712:	e001      	b.n	800a718 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a714:	2300      	movs	r3, #0
 800a716:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a718:	697b      	ldr	r3, [r7, #20]
	}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3728      	adds	r7, #40	; 0x28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a722:	b580      	push	{r7, lr}
 800a724:	b08c      	sub	sp, #48	; 0x30
 800a726:	af04      	add	r7, sp, #16
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	603b      	str	r3, [r7, #0]
 800a72e:	4613      	mov	r3, r2
 800a730:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a732:	88fb      	ldrh	r3, [r7, #6]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4618      	mov	r0, r3
 800a738:	f7ff f86c 	bl	8009814 <pvPortMalloc>
 800a73c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00e      	beq.n	800a762 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a744:	2054      	movs	r0, #84	; 0x54
 800a746:	f7ff f865 	bl	8009814 <pvPortMalloc>
 800a74a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	631a      	str	r2, [r3, #48]	; 0x30
 800a758:	e005      	b.n	800a766 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a75a:	6978      	ldr	r0, [r7, #20]
 800a75c:	f7ff f91c 	bl	8009998 <vPortFree>
 800a760:	e001      	b.n	800a766 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d017      	beq.n	800a79c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a774:	88fa      	ldrh	r2, [r7, #6]
 800a776:	2300      	movs	r3, #0
 800a778:	9303      	str	r3, [sp, #12]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	9302      	str	r3, [sp, #8]
 800a77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f000 f80e 	bl	800a7ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a790:	69f8      	ldr	r0, [r7, #28]
 800a792:	f000 f889 	bl	800a8a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a796:	2301      	movs	r3, #1
 800a798:	61bb      	str	r3, [r7, #24]
 800a79a:	e002      	b.n	800a7a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a79c:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
	}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	009b      	lsls	r3, r3, #2
 800a7c8:	4413      	add	r3, r2
 800a7ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	f023 0307 	bic.w	r3, r3, #7
 800a7d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <prvInitialiseNewTask+0x46>
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	617b      	str	r3, [r7, #20]
 800a7f0:	e7fe      	b.n	800a7f0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	e012      	b.n	800a81e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	7819      	ldrb	r1, [r3, #0]
 800a800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	4413      	add	r3, r2
 800a806:	3334      	adds	r3, #52	; 0x34
 800a808:	460a      	mov	r2, r1
 800a80a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	4413      	add	r3, r2
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	3301      	adds	r3, #1
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	2b0f      	cmp	r3, #15
 800a822:	d9e9      	bls.n	800a7f8 <prvInitialiseNewTask+0x4c>
 800a824:	e000      	b.n	800a828 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a826:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a832:	2b06      	cmp	r3, #6
 800a834:	d901      	bls.n	800a83a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a836:	2306      	movs	r3, #6
 800a838:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a83e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a844:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	2200      	movs	r2, #0
 800a84a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	3304      	adds	r3, #4
 800a850:	4618      	mov	r0, r3
 800a852:	f7fe fd6b 	bl	800932c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	3318      	adds	r3, #24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fd66 	bl	800932c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a864:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a868:	f1c3 0207 	rsb	r2, r3, #7
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a874:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	2200      	movs	r2, #0
 800a87a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	2200      	movs	r2, #0
 800a880:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	68f9      	ldr	r1, [r7, #12]
 800a888:	69b8      	ldr	r0, [r7, #24]
 800a88a:	f7fe fddf 	bl	800944c <pxPortInitialiseStack>
 800a88e:	4602      	mov	r2, r0
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a89e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8a0:	bf00      	nop
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8b0:	f7fe feba 	bl	8009628 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8b4:	4b2a      	ldr	r3, [pc, #168]	; (800a960 <prvAddNewTaskToReadyList+0xb8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	4a29      	ldr	r2, [pc, #164]	; (800a960 <prvAddNewTaskToReadyList+0xb8>)
 800a8bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8be:	4b29      	ldr	r3, [pc, #164]	; (800a964 <prvAddNewTaskToReadyList+0xbc>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8c6:	4a27      	ldr	r2, [pc, #156]	; (800a964 <prvAddNewTaskToReadyList+0xbc>)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8cc:	4b24      	ldr	r3, [pc, #144]	; (800a960 <prvAddNewTaskToReadyList+0xb8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d110      	bne.n	800a8f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8d4:	f000 fc94 	bl	800b200 <prvInitialiseTaskLists>
 800a8d8:	e00d      	b.n	800a8f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8da:	4b23      	ldr	r3, [pc, #140]	; (800a968 <prvAddNewTaskToReadyList+0xc0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8e2:	4b20      	ldr	r3, [pc, #128]	; (800a964 <prvAddNewTaskToReadyList+0xbc>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d802      	bhi.n	800a8f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8f0:	4a1c      	ldr	r2, [pc, #112]	; (800a964 <prvAddNewTaskToReadyList+0xbc>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8f6:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <prvAddNewTaskToReadyList+0xc4>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	4a1b      	ldr	r2, [pc, #108]	; (800a96c <prvAddNewTaskToReadyList+0xc4>)
 800a8fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a904:	2201      	movs	r2, #1
 800a906:	409a      	lsls	r2, r3
 800a908:	4b19      	ldr	r3, [pc, #100]	; (800a970 <prvAddNewTaskToReadyList+0xc8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	4a18      	ldr	r2, [pc, #96]	; (800a970 <prvAddNewTaskToReadyList+0xc8>)
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	4613      	mov	r3, r2
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	4413      	add	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4a15      	ldr	r2, [pc, #84]	; (800a974 <prvAddNewTaskToReadyList+0xcc>)
 800a920:	441a      	add	r2, r3
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3304      	adds	r3, #4
 800a926:	4619      	mov	r1, r3
 800a928:	4610      	mov	r0, r2
 800a92a:	f7fe fd0b 	bl	8009344 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a92e:	f7fe fea9 	bl	8009684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a932:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <prvAddNewTaskToReadyList+0xc0>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00e      	beq.n	800a958 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a93a:	4b0a      	ldr	r3, [pc, #40]	; (800a964 <prvAddNewTaskToReadyList+0xbc>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	429a      	cmp	r2, r3
 800a946:	d207      	bcs.n	800a958 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a948:	4b0b      	ldr	r3, [pc, #44]	; (800a978 <prvAddNewTaskToReadyList+0xd0>)
 800a94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	20001ac4 	.word	0x20001ac4
 800a964:	200019c4 	.word	0x200019c4
 800a968:	20001ad0 	.word	0x20001ad0
 800a96c:	20001ae0 	.word	0x20001ae0
 800a970:	20001acc 	.word	0x20001acc
 800a974:	200019c8 	.word	0x200019c8
 800a978:	e000ed04 	.word	0xe000ed04

0800a97c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d016      	beq.n	800a9bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a98e:	4b13      	ldr	r3, [pc, #76]	; (800a9dc <vTaskDelay+0x60>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <vTaskDelay+0x2e>
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	60bb      	str	r3, [r7, #8]
 800a9a8:	e7fe      	b.n	800a9a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a9aa:	f000 f911 	bl	800abd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fd85 	bl	800b4c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9b6:	f000 f919 	bl	800abec <xTaskResumeAll>
 800a9ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d107      	bne.n	800a9d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a9c2:	4b07      	ldr	r3, [pc, #28]	; (800a9e0 <vTaskDelay+0x64>)
 800a9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9d2:	bf00      	nop
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20001aec 	.word	0x20001aec
 800a9e0:	e000ed04 	.word	0xe000ed04

0800a9e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a9ec:	f7fe fe1c 	bl	8009628 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <vTaskSuspend+0x18>
 800a9f6:	4b3c      	ldr	r3, [pc, #240]	; (800aae8 <vTaskSuspend+0x104>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	e000      	b.n	800a9fe <vTaskSuspend+0x1a>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fe fcf8 	bl	80093fa <uxListRemove>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d115      	bne.n	800aa3c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa14:	4935      	ldr	r1, [pc, #212]	; (800aaec <vTaskSuspend+0x108>)
 800aa16:	4613      	mov	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	440b      	add	r3, r1
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10a      	bne.n	800aa3c <vTaskSuspend+0x58>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa30:	43da      	mvns	r2, r3
 800aa32:	4b2f      	ldr	r3, [pc, #188]	; (800aaf0 <vTaskSuspend+0x10c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4013      	ands	r3, r2
 800aa38:	4a2d      	ldr	r2, [pc, #180]	; (800aaf0 <vTaskSuspend+0x10c>)
 800aa3a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3318      	adds	r3, #24
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fcd6 	bl	80093fa <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	4827      	ldr	r0, [pc, #156]	; (800aaf4 <vTaskSuspend+0x110>)
 800aa56:	f7fe fc75 	bl	8009344 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d103      	bne.n	800aa6e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800aa6e:	f7fe fe09 	bl	8009684 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800aa72:	4b21      	ldr	r3, [pc, #132]	; (800aaf8 <vTaskSuspend+0x114>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800aa7a:	f7fe fdd5 	bl	8009628 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800aa7e:	f000 fc59 	bl	800b334 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800aa82:	f7fe fdff 	bl	8009684 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800aa86:	4b18      	ldr	r3, [pc, #96]	; (800aae8 <vTaskSuspend+0x104>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d126      	bne.n	800aade <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800aa90:	4b19      	ldr	r3, [pc, #100]	; (800aaf8 <vTaskSuspend+0x114>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d016      	beq.n	800aac6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800aa98:	4b18      	ldr	r3, [pc, #96]	; (800aafc <vTaskSuspend+0x118>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d009      	beq.n	800aab4 <vTaskSuspend+0xd0>
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	60bb      	str	r3, [r7, #8]
 800aab2:	e7fe      	b.n	800aab2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800aab4:	4b12      	ldr	r3, [pc, #72]	; (800ab00 <vTaskSuspend+0x11c>)
 800aab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	f3bf 8f4f 	dsb	sy
 800aac0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aac4:	e00b      	b.n	800aade <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800aac6:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <vTaskSuspend+0x110>)
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <vTaskSuspend+0x120>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d103      	bne.n	800aada <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <vTaskSuspend+0x104>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
	}
 800aad8:	e001      	b.n	800aade <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800aada:	f000 f9ed 	bl	800aeb8 <vTaskSwitchContext>
	}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200019c4 	.word	0x200019c4
 800aaec:	200019c8 	.word	0x200019c8
 800aaf0:	20001acc 	.word	0x20001acc
 800aaf4:	20001ab0 	.word	0x20001ab0
 800aaf8:	20001ad0 	.word	0x20001ad0
 800aafc:	20001aec 	.word	0x20001aec
 800ab00:	e000ed04 	.word	0xe000ed04
 800ab04:	20001ac4 	.word	0x20001ac4

0800ab08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab16:	463a      	mov	r2, r7
 800ab18:	1d39      	adds	r1, r7, #4
 800ab1a:	f107 0308 	add.w	r3, r7, #8
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7f5 fb48 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	9202      	str	r2, [sp, #8]
 800ab2c:	9301      	str	r3, [sp, #4]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	9300      	str	r3, [sp, #0]
 800ab32:	2300      	movs	r3, #0
 800ab34:	460a      	mov	r2, r1
 800ab36:	4920      	ldr	r1, [pc, #128]	; (800abb8 <vTaskStartScheduler+0xb0>)
 800ab38:	4820      	ldr	r0, [pc, #128]	; (800abbc <vTaskStartScheduler+0xb4>)
 800ab3a:	f7ff fd99 	bl	800a670 <xTaskCreateStatic>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	4b1f      	ldr	r3, [pc, #124]	; (800abc0 <vTaskStartScheduler+0xb8>)
 800ab42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab44:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <vTaskStartScheduler+0xb8>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e001      	b.n	800ab56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d102      	bne.n	800ab62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab5c:	f000 fd16 	bl	800b58c <xTimerCreateTimerTask>
 800ab60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d115      	bne.n	800ab94 <vTaskStartScheduler+0x8c>
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab7a:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <vTaskStartScheduler+0xbc>)
 800ab7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <vTaskStartScheduler+0xc0>)
 800ab84:	2201      	movs	r2, #1
 800ab86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <vTaskStartScheduler+0xc4>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab8e:	f7fe fcdb 	bl	8009548 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab92:	e00d      	b.n	800abb0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab94:	697b      	ldr	r3, [r7, #20]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d109      	bne.n	800abb0 <vTaskStartScheduler+0xa8>
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	e7fe      	b.n	800abae <vTaskStartScheduler+0xa6>
}
 800abb0:	bf00      	nop
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	0800cf38 	.word	0x0800cf38
 800abbc:	0800b1d1 	.word	0x0800b1d1
 800abc0:	20001ae8 	.word	0x20001ae8
 800abc4:	20001ae4 	.word	0x20001ae4
 800abc8:	20001ad0 	.word	0x20001ad0
 800abcc:	20001ac8 	.word	0x20001ac8

0800abd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <vTaskSuspendAll+0x18>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3301      	adds	r3, #1
 800abda:	4a03      	ldr	r2, [pc, #12]	; (800abe8 <vTaskSuspendAll+0x18>)
 800abdc:	6013      	str	r3, [r2, #0]
}
 800abde:	bf00      	nop
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	20001aec 	.word	0x20001aec

0800abec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abfa:	4b41      	ldr	r3, [pc, #260]	; (800ad00 <xTaskResumeAll+0x114>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <xTaskResumeAll+0x2a>
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	603b      	str	r3, [r7, #0]
 800ac14:	e7fe      	b.n	800ac14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac16:	f7fe fd07 	bl	8009628 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac1a:	4b39      	ldr	r3, [pc, #228]	; (800ad00 <xTaskResumeAll+0x114>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	4a37      	ldr	r2, [pc, #220]	; (800ad00 <xTaskResumeAll+0x114>)
 800ac22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac24:	4b36      	ldr	r3, [pc, #216]	; (800ad00 <xTaskResumeAll+0x114>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d161      	bne.n	800acf0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac2c:	4b35      	ldr	r3, [pc, #212]	; (800ad04 <xTaskResumeAll+0x118>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d05d      	beq.n	800acf0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac34:	e02e      	b.n	800ac94 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ac36:	4b34      	ldr	r3, [pc, #208]	; (800ad08 <xTaskResumeAll+0x11c>)
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	3318      	adds	r3, #24
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7fe fbd9 	bl	80093fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7fe fbd4 	bl	80093fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac56:	2201      	movs	r2, #1
 800ac58:	409a      	lsls	r2, r3
 800ac5a:	4b2c      	ldr	r3, [pc, #176]	; (800ad0c <xTaskResumeAll+0x120>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	4a2a      	ldr	r2, [pc, #168]	; (800ad0c <xTaskResumeAll+0x120>)
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4a27      	ldr	r2, [pc, #156]	; (800ad10 <xTaskResumeAll+0x124>)
 800ac72:	441a      	add	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4619      	mov	r1, r3
 800ac7a:	4610      	mov	r0, r2
 800ac7c:	f7fe fb62 	bl	8009344 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4b23      	ldr	r3, [pc, #140]	; (800ad14 <xTaskResumeAll+0x128>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d302      	bcc.n	800ac94 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800ac8e:	4b22      	ldr	r3, [pc, #136]	; (800ad18 <xTaskResumeAll+0x12c>)
 800ac90:	2201      	movs	r2, #1
 800ac92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac94:	4b1c      	ldr	r3, [pc, #112]	; (800ad08 <xTaskResumeAll+0x11c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1cc      	bne.n	800ac36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aca2:	f000 fb47 	bl	800b334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aca6:	4b1d      	ldr	r3, [pc, #116]	; (800ad1c <xTaskResumeAll+0x130>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d010      	beq.n	800acd4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acb2:	f000 f845 	bl	800ad40 <xTaskIncrementTick>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800acbc:	4b16      	ldr	r3, [pc, #88]	; (800ad18 <xTaskResumeAll+0x12c>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d1f1      	bne.n	800acb2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800acce:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <xTaskResumeAll+0x130>)
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800acd4:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <xTaskResumeAll+0x12c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d009      	beq.n	800acf0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800acdc:	2301      	movs	r3, #1
 800acde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <xTaskResumeAll+0x134>)
 800ace2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace6:	601a      	str	r2, [r3, #0]
 800ace8:	f3bf 8f4f 	dsb	sy
 800acec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acf0:	f7fe fcc8 	bl	8009684 <vPortExitCritical>

	return xAlreadyYielded;
 800acf4:	68bb      	ldr	r3, [r7, #8]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20001aec 	.word	0x20001aec
 800ad04:	20001ac4 	.word	0x20001ac4
 800ad08:	20001a84 	.word	0x20001a84
 800ad0c:	20001acc 	.word	0x20001acc
 800ad10:	200019c8 	.word	0x200019c8
 800ad14:	200019c4 	.word	0x200019c4
 800ad18:	20001ad8 	.word	0x20001ad8
 800ad1c:	20001ad4 	.word	0x20001ad4
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad2a:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <xTaskGetTickCount+0x18>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad30:	687b      	ldr	r3, [r7, #4]
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	370c      	adds	r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bc80      	pop	{r7}
 800ad3a:	4770      	bx	lr
 800ad3c:	20001ac8 	.word	0x20001ac8

0800ad40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad4a:	4b50      	ldr	r3, [pc, #320]	; (800ae8c <xTaskIncrementTick+0x14c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f040 808c 	bne.w	800ae6c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad54:	4b4e      	ldr	r3, [pc, #312]	; (800ae90 <xTaskIncrementTick+0x150>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad5c:	4a4c      	ldr	r2, [pc, #304]	; (800ae90 <xTaskIncrementTick+0x150>)
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d11f      	bne.n	800ada8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad68:	4b4a      	ldr	r3, [pc, #296]	; (800ae94 <xTaskIncrementTick+0x154>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d009      	beq.n	800ad86 <xTaskIncrementTick+0x46>
 800ad72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	603b      	str	r3, [r7, #0]
 800ad84:	e7fe      	b.n	800ad84 <xTaskIncrementTick+0x44>
 800ad86:	4b43      	ldr	r3, [pc, #268]	; (800ae94 <xTaskIncrementTick+0x154>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	4b42      	ldr	r3, [pc, #264]	; (800ae98 <xTaskIncrementTick+0x158>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a40      	ldr	r2, [pc, #256]	; (800ae94 <xTaskIncrementTick+0x154>)
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	4a40      	ldr	r2, [pc, #256]	; (800ae98 <xTaskIncrementTick+0x158>)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	4b40      	ldr	r3, [pc, #256]	; (800ae9c <xTaskIncrementTick+0x15c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	4a3e      	ldr	r2, [pc, #248]	; (800ae9c <xTaskIncrementTick+0x15c>)
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	f000 fac6 	bl	800b334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ada8:	4b3d      	ldr	r3, [pc, #244]	; (800aea0 <xTaskIncrementTick+0x160>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	429a      	cmp	r2, r3
 800adb0:	d34d      	bcc.n	800ae4e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adb2:	4b38      	ldr	r3, [pc, #224]	; (800ae94 <xTaskIncrementTick+0x154>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <xTaskIncrementTick+0x80>
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <xTaskIncrementTick+0x82>
 800adc0:	2300      	movs	r3, #0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adc6:	4b36      	ldr	r3, [pc, #216]	; (800aea0 <xTaskIncrementTick+0x160>)
 800adc8:	f04f 32ff 	mov.w	r2, #4294967295
 800adcc:	601a      	str	r2, [r3, #0]
					break;
 800adce:	e03e      	b.n	800ae4e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800add0:	4b30      	ldr	r3, [pc, #192]	; (800ae94 <xTaskIncrementTick+0x154>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d203      	bcs.n	800adf0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ade8:	4a2d      	ldr	r2, [pc, #180]	; (800aea0 <xTaskIncrementTick+0x160>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6013      	str	r3, [r2, #0]
						break;
 800adee:	e02e      	b.n	800ae4e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	3304      	adds	r3, #4
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7fe fb00 	bl	80093fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d004      	beq.n	800ae0c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	3318      	adds	r3, #24
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7fe faf7 	bl	80093fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	2201      	movs	r2, #1
 800ae12:	409a      	lsls	r2, r3
 800ae14:	4b23      	ldr	r3, [pc, #140]	; (800aea4 <xTaskIncrementTick+0x164>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	4a22      	ldr	r2, [pc, #136]	; (800aea4 <xTaskIncrementTick+0x164>)
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4a1f      	ldr	r2, [pc, #124]	; (800aea8 <xTaskIncrementTick+0x168>)
 800ae2c:	441a      	add	r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	3304      	adds	r3, #4
 800ae32:	4619      	mov	r1, r3
 800ae34:	4610      	mov	r0, r2
 800ae36:	f7fe fa85 	bl	8009344 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3e:	4b1b      	ldr	r3, [pc, #108]	; (800aeac <xTaskIncrementTick+0x16c>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d3b4      	bcc.n	800adb2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae4c:	e7b1      	b.n	800adb2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae4e:	4b17      	ldr	r3, [pc, #92]	; (800aeac <xTaskIncrementTick+0x16c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae54:	4914      	ldr	r1, [pc, #80]	; (800aea8 <xTaskIncrementTick+0x168>)
 800ae56:	4613      	mov	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	009b      	lsls	r3, r3, #2
 800ae5e:	440b      	add	r3, r1
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d907      	bls.n	800ae76 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ae66:	2301      	movs	r3, #1
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e004      	b.n	800ae76 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <xTaskIncrementTick+0x170>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3301      	adds	r3, #1
 800ae72:	4a0f      	ldr	r2, [pc, #60]	; (800aeb0 <xTaskIncrementTick+0x170>)
 800ae74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae76:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <xTaskIncrementTick+0x174>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d001      	beq.n	800ae82 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ae82:	697b      	ldr	r3, [r7, #20]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	20001aec 	.word	0x20001aec
 800ae90:	20001ac8 	.word	0x20001ac8
 800ae94:	20001a7c 	.word	0x20001a7c
 800ae98:	20001a80 	.word	0x20001a80
 800ae9c:	20001adc 	.word	0x20001adc
 800aea0:	20001ae4 	.word	0x20001ae4
 800aea4:	20001acc 	.word	0x20001acc
 800aea8:	200019c8 	.word	0x200019c8
 800aeac:	200019c4 	.word	0x200019c4
 800aeb0:	20001ad4 	.word	0x20001ad4
 800aeb4:	20001ad8 	.word	0x20001ad8

0800aeb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aebe:	4b26      	ldr	r3, [pc, #152]	; (800af58 <vTaskSwitchContext+0xa0>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d003      	beq.n	800aece <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aec6:	4b25      	ldr	r3, [pc, #148]	; (800af5c <vTaskSwitchContext+0xa4>)
 800aec8:	2201      	movs	r2, #1
 800aeca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aecc:	e03e      	b.n	800af4c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800aece:	4b23      	ldr	r3, [pc, #140]	; (800af5c <vTaskSwitchContext+0xa4>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800aed4:	4b22      	ldr	r3, [pc, #136]	; (800af60 <vTaskSwitchContext+0xa8>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	fab3 f383 	clz	r3, r3
 800aee0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aee2:	7afb      	ldrb	r3, [r7, #11]
 800aee4:	f1c3 031f 	rsb	r3, r3, #31
 800aee8:	617b      	str	r3, [r7, #20]
 800aeea:	491e      	ldr	r1, [pc, #120]	; (800af64 <vTaskSwitchContext+0xac>)
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	440b      	add	r3, r1
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d109      	bne.n	800af12 <vTaskSwitchContext+0x5a>
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	607b      	str	r3, [r7, #4]
 800af10:	e7fe      	b.n	800af10 <vTaskSwitchContext+0x58>
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	4613      	mov	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4a11      	ldr	r2, [pc, #68]	; (800af64 <vTaskSwitchContext+0xac>)
 800af1e:	4413      	add	r3, r2
 800af20:	613b      	str	r3, [r7, #16]
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	685a      	ldr	r2, [r3, #4]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	605a      	str	r2, [r3, #4]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3308      	adds	r3, #8
 800af34:	429a      	cmp	r2, r3
 800af36:	d104      	bne.n	800af42 <vTaskSwitchContext+0x8a>
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	605a      	str	r2, [r3, #4]
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	4a07      	ldr	r2, [pc, #28]	; (800af68 <vTaskSwitchContext+0xb0>)
 800af4a:	6013      	str	r3, [r2, #0]
}
 800af4c:	bf00      	nop
 800af4e:	371c      	adds	r7, #28
 800af50:	46bd      	mov	sp, r7
 800af52:	bc80      	pop	{r7}
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	20001aec 	.word	0x20001aec
 800af5c:	20001ad8 	.word	0x20001ad8
 800af60:	20001acc 	.word	0x20001acc
 800af64:	200019c8 	.word	0x200019c8
 800af68:	200019c4 	.word	0x200019c4

0800af6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d109      	bne.n	800af90 <vTaskPlaceOnEventList+0x24>
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	60fb      	str	r3, [r7, #12]
 800af8e:	e7fe      	b.n	800af8e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af90:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <vTaskPlaceOnEventList+0x44>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3318      	adds	r3, #24
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7fe f9f6 	bl	800938a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af9e:	2101      	movs	r1, #1
 800afa0:	6838      	ldr	r0, [r7, #0]
 800afa2:	f000 fa8d 	bl	800b4c0 <prvAddCurrentTaskToDelayedList>
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	200019c4 	.word	0x200019c4

0800afb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d109      	bne.n	800afda <vTaskPlaceOnEventListRestricted+0x26>
 800afc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	e7fe      	b.n	800afd8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afda:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <vTaskPlaceOnEventListRestricted+0x50>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	3318      	adds	r3, #24
 800afe0:	4619      	mov	r1, r3
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	f7fe f9ae 	bl	8009344 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800afee:	f04f 33ff 	mov.w	r3, #4294967295
 800aff2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aff4:	6879      	ldr	r1, [r7, #4]
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f000 fa62 	bl	800b4c0 <prvAddCurrentTaskToDelayedList>
	}
 800affc:	bf00      	nop
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	200019c4 	.word	0x200019c4

0800b008 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d109      	bne.n	800b032 <xTaskRemoveFromEventList+0x2a>
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	60fb      	str	r3, [r7, #12]
 800b030:	e7fe      	b.n	800b030 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	3318      	adds	r3, #24
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe f9df 	bl	80093fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b03c:	4b1d      	ldr	r3, [pc, #116]	; (800b0b4 <xTaskRemoveFromEventList+0xac>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d11c      	bne.n	800b07e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	3304      	adds	r3, #4
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe f9d6 	bl	80093fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b052:	2201      	movs	r2, #1
 800b054:	409a      	lsls	r2, r3
 800b056:	4b18      	ldr	r3, [pc, #96]	; (800b0b8 <xTaskRemoveFromEventList+0xb0>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	4a16      	ldr	r2, [pc, #88]	; (800b0b8 <xTaskRemoveFromEventList+0xb0>)
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4a13      	ldr	r2, [pc, #76]	; (800b0bc <xTaskRemoveFromEventList+0xb4>)
 800b06e:	441a      	add	r2, r3
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	3304      	adds	r3, #4
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f7fe f964 	bl	8009344 <vListInsertEnd>
 800b07c:	e005      	b.n	800b08a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	3318      	adds	r3, #24
 800b082:	4619      	mov	r1, r3
 800b084:	480e      	ldr	r0, [pc, #56]	; (800b0c0 <xTaskRemoveFromEventList+0xb8>)
 800b086:	f7fe f95d 	bl	8009344 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08e:	4b0d      	ldr	r3, [pc, #52]	; (800b0c4 <xTaskRemoveFromEventList+0xbc>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	429a      	cmp	r2, r3
 800b096:	d905      	bls.n	800b0a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b098:	2301      	movs	r3, #1
 800b09a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b09c:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <xTaskRemoveFromEventList+0xc0>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	e001      	b.n	800b0a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b0a8:	697b      	ldr	r3, [r7, #20]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20001aec 	.word	0x20001aec
 800b0b8:	20001acc 	.word	0x20001acc
 800b0bc:	200019c8 	.word	0x200019c8
 800b0c0:	20001a84 	.word	0x20001a84
 800b0c4:	200019c4 	.word	0x200019c4
 800b0c8:	20001ad8 	.word	0x20001ad8

0800b0cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <vTaskInternalSetTimeOutState+0x24>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0dc:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <vTaskInternalSetTimeOutState+0x28>)
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	605a      	str	r2, [r3, #4]
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bc80      	pop	{r7}
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	20001adc 	.word	0x20001adc
 800b0f4:	20001ac8 	.word	0x20001ac8

0800b0f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b088      	sub	sp, #32
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d109      	bne.n	800b11c <xTaskCheckForTimeOut+0x24>
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	613b      	str	r3, [r7, #16]
 800b11a:	e7fe      	b.n	800b11a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d109      	bne.n	800b136 <xTaskCheckForTimeOut+0x3e>
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	60fb      	str	r3, [r7, #12]
 800b134:	e7fe      	b.n	800b134 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b136:	f7fe fa77 	bl	8009628 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b13a:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <xTaskCheckForTimeOut+0xb8>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	69ba      	ldr	r2, [r7, #24]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b152:	d102      	bne.n	800b15a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	e023      	b.n	800b1a2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	4b15      	ldr	r3, [pc, #84]	; (800b1b4 <xTaskCheckForTimeOut+0xbc>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	429a      	cmp	r2, r3
 800b164:	d007      	beq.n	800b176 <xTaskCheckForTimeOut+0x7e>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	685a      	ldr	r2, [r3, #4]
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d802      	bhi.n	800b176 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b170:	2301      	movs	r3, #1
 800b172:	61fb      	str	r3, [r7, #28]
 800b174:	e015      	b.n	800b1a2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d90b      	bls.n	800b198 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	1ad2      	subs	r2, r2, r3
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff ff9d 	bl	800b0cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b192:	2300      	movs	r3, #0
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	e004      	b.n	800b1a2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b1a2:	f7fe fa6f 	bl	8009684 <vPortExitCritical>

	return xReturn;
 800b1a6:	69fb      	ldr	r3, [r7, #28]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3720      	adds	r7, #32
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20001ac8 	.word	0x20001ac8
 800b1b4:	20001adc 	.word	0x20001adc

0800b1b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b1bc:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <vTaskMissedYield+0x14>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
}
 800b1c2:	bf00      	nop
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bc80      	pop	{r7}
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20001ad8 	.word	0x20001ad8

0800b1d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1d8:	f000 f852 	bl	800b280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1dc:	4b06      	ldr	r3, [pc, #24]	; (800b1f8 <prvIdleTask+0x28>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d9f9      	bls.n	800b1d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <prvIdleTask+0x2c>)
 800b1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1f4:	e7f0      	b.n	800b1d8 <prvIdleTask+0x8>
 800b1f6:	bf00      	nop
 800b1f8:	200019c8 	.word	0x200019c8
 800b1fc:	e000ed04 	.word	0xe000ed04

0800b200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b206:	2300      	movs	r3, #0
 800b208:	607b      	str	r3, [r7, #4]
 800b20a:	e00c      	b.n	800b226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4a12      	ldr	r2, [pc, #72]	; (800b260 <prvInitialiseTaskLists+0x60>)
 800b218:	4413      	add	r3, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7fe f867 	bl	80092ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3301      	adds	r3, #1
 800b224:	607b      	str	r3, [r7, #4]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b06      	cmp	r3, #6
 800b22a:	d9ef      	bls.n	800b20c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b22c:	480d      	ldr	r0, [pc, #52]	; (800b264 <prvInitialiseTaskLists+0x64>)
 800b22e:	f7fe f85e 	bl	80092ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b232:	480d      	ldr	r0, [pc, #52]	; (800b268 <prvInitialiseTaskLists+0x68>)
 800b234:	f7fe f85b 	bl	80092ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b238:	480c      	ldr	r0, [pc, #48]	; (800b26c <prvInitialiseTaskLists+0x6c>)
 800b23a:	f7fe f858 	bl	80092ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b23e:	480c      	ldr	r0, [pc, #48]	; (800b270 <prvInitialiseTaskLists+0x70>)
 800b240:	f7fe f855 	bl	80092ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b244:	480b      	ldr	r0, [pc, #44]	; (800b274 <prvInitialiseTaskLists+0x74>)
 800b246:	f7fe f852 	bl	80092ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b24a:	4b0b      	ldr	r3, [pc, #44]	; (800b278 <prvInitialiseTaskLists+0x78>)
 800b24c:	4a05      	ldr	r2, [pc, #20]	; (800b264 <prvInitialiseTaskLists+0x64>)
 800b24e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <prvInitialiseTaskLists+0x7c>)
 800b252:	4a05      	ldr	r2, [pc, #20]	; (800b268 <prvInitialiseTaskLists+0x68>)
 800b254:	601a      	str	r2, [r3, #0]
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	200019c8 	.word	0x200019c8
 800b264:	20001a54 	.word	0x20001a54
 800b268:	20001a68 	.word	0x20001a68
 800b26c:	20001a84 	.word	0x20001a84
 800b270:	20001a98 	.word	0x20001a98
 800b274:	20001ab0 	.word	0x20001ab0
 800b278:	20001a7c 	.word	0x20001a7c
 800b27c:	20001a80 	.word	0x20001a80

0800b280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b286:	e019      	b.n	800b2bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b288:	f7fe f9ce 	bl	8009628 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <prvCheckTasksWaitingTermination+0x4c>)
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3304      	adds	r3, #4
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe f8ae 	bl	80093fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b29e:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <prvCheckTasksWaitingTermination+0x50>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	4a0a      	ldr	r2, [pc, #40]	; (800b2d0 <prvCheckTasksWaitingTermination+0x50>)
 800b2a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2a8:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <prvCheckTasksWaitingTermination+0x54>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	4a09      	ldr	r2, [pc, #36]	; (800b2d4 <prvCheckTasksWaitingTermination+0x54>)
 800b2b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2b2:	f7fe f9e7 	bl	8009684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f80e 	bl	800b2d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <prvCheckTasksWaitingTermination+0x54>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e1      	bne.n	800b288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2c4:	bf00      	nop
 800b2c6:	3708      	adds	r7, #8
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20001a98 	.word	0x20001a98
 800b2d0:	20001ac4 	.word	0x20001ac4
 800b2d4:	20001aac 	.word	0x20001aac

0800b2d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d108      	bne.n	800b2fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fb52 	bl	8009998 <vPortFree>
				vPortFree( pxTCB );
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7fe fb4f 	bl	8009998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2fa:	e017      	b.n	800b32c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b302:	2b01      	cmp	r3, #1
 800b304:	d103      	bne.n	800b30e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7fe fb46 	bl	8009998 <vPortFree>
	}
 800b30c:	e00e      	b.n	800b32c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b314:	2b02      	cmp	r3, #2
 800b316:	d009      	beq.n	800b32c <prvDeleteTCB+0x54>
 800b318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31c:	f383 8811 	msr	BASEPRI, r3
 800b320:	f3bf 8f6f 	isb	sy
 800b324:	f3bf 8f4f 	dsb	sy
 800b328:	60fb      	str	r3, [r7, #12]
 800b32a:	e7fe      	b.n	800b32a <prvDeleteTCB+0x52>
	}
 800b32c:	bf00      	nop
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b334:	b480      	push	{r7}
 800b336:	b083      	sub	sp, #12
 800b338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b33a:	4b0e      	ldr	r3, [pc, #56]	; (800b374 <prvResetNextTaskUnblockTime+0x40>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <prvResetNextTaskUnblockTime+0x14>
 800b344:	2301      	movs	r3, #1
 800b346:	e000      	b.n	800b34a <prvResetNextTaskUnblockTime+0x16>
 800b348:	2300      	movs	r3, #0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b34e:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <prvResetNextTaskUnblockTime+0x44>)
 800b350:	f04f 32ff 	mov.w	r2, #4294967295
 800b354:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b356:	e008      	b.n	800b36a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b358:	4b06      	ldr	r3, [pc, #24]	; (800b374 <prvResetNextTaskUnblockTime+0x40>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	4a04      	ldr	r2, [pc, #16]	; (800b378 <prvResetNextTaskUnblockTime+0x44>)
 800b368:	6013      	str	r3, [r2, #0]
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	bc80      	pop	{r7}
 800b372:	4770      	bx	lr
 800b374:	20001a7c 	.word	0x20001a7c
 800b378:	20001ae4 	.word	0x20001ae4

0800b37c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b382:	4b0b      	ldr	r3, [pc, #44]	; (800b3b0 <xTaskGetSchedulerState+0x34>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b38a:	2301      	movs	r3, #1
 800b38c:	607b      	str	r3, [r7, #4]
 800b38e:	e008      	b.n	800b3a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b390:	4b08      	ldr	r3, [pc, #32]	; (800b3b4 <xTaskGetSchedulerState+0x38>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b398:	2302      	movs	r3, #2
 800b39a:	607b      	str	r3, [r7, #4]
 800b39c:	e001      	b.n	800b3a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3a2:	687b      	ldr	r3, [r7, #4]
	}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bc80      	pop	{r7}
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20001ad0 	.word	0x20001ad0
 800b3b4:	20001aec 	.word	0x20001aec

0800b3b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d06c      	beq.n	800b4a8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3ce:	4b39      	ldr	r3, [pc, #228]	; (800b4b4 <xTaskPriorityDisinherit+0xfc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d009      	beq.n	800b3ec <xTaskPriorityDisinherit+0x34>
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	f383 8811 	msr	BASEPRI, r3
 800b3e0:	f3bf 8f6f 	isb	sy
 800b3e4:	f3bf 8f4f 	dsb	sy
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	e7fe      	b.n	800b3ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d109      	bne.n	800b408 <xTaskPriorityDisinherit+0x50>
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	60bb      	str	r3, [r7, #8]
 800b406:	e7fe      	b.n	800b406 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b40c:	1e5a      	subs	r2, r3, #1
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d044      	beq.n	800b4a8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b422:	2b00      	cmp	r3, #0
 800b424:	d140      	bne.n	800b4a8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	3304      	adds	r3, #4
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fd ffe5 	bl	80093fa <uxListRemove>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d115      	bne.n	800b462 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b43a:	491f      	ldr	r1, [pc, #124]	; (800b4b8 <xTaskPriorityDisinherit+0x100>)
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10a      	bne.n	800b462 <xTaskPriorityDisinherit+0xaa>
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	2201      	movs	r2, #1
 800b452:	fa02 f303 	lsl.w	r3, r2, r3
 800b456:	43da      	mvns	r2, r3
 800b458:	4b18      	ldr	r3, [pc, #96]	; (800b4bc <xTaskPriorityDisinherit+0x104>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4013      	ands	r3, r2
 800b45e:	4a17      	ldr	r2, [pc, #92]	; (800b4bc <xTaskPriorityDisinherit+0x104>)
 800b460:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	f1c3 0207 	rsb	r2, r3, #7
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	2201      	movs	r2, #1
 800b47c:	409a      	lsls	r2, r3
 800b47e:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <xTaskPriorityDisinherit+0x104>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4313      	orrs	r3, r2
 800b484:	4a0d      	ldr	r2, [pc, #52]	; (800b4bc <xTaskPriorityDisinherit+0x104>)
 800b486:	6013      	str	r3, [r2, #0]
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48c:	4613      	mov	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4413      	add	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4a08      	ldr	r2, [pc, #32]	; (800b4b8 <xTaskPriorityDisinherit+0x100>)
 800b496:	441a      	add	r2, r3
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	3304      	adds	r3, #4
 800b49c:	4619      	mov	r1, r3
 800b49e:	4610      	mov	r0, r2
 800b4a0:	f7fd ff50 	bl	8009344 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4a8:	697b      	ldr	r3, [r7, #20]
	}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	200019c4 	.word	0x200019c4
 800b4b8:	200019c8 	.word	0x200019c8
 800b4bc:	20001acc 	.word	0x20001acc

0800b4c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4ca:	4b29      	ldr	r3, [pc, #164]	; (800b570 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4d0:	4b28      	ldr	r3, [pc, #160]	; (800b574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fd ff8f 	bl	80093fa <uxListRemove>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d10b      	bne.n	800b4fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b4e2:	4b24      	ldr	r3, [pc, #144]	; (800b574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ee:	43da      	mvns	r2, r3
 800b4f0:	4b21      	ldr	r3, [pc, #132]	; (800b578 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	4a20      	ldr	r2, [pc, #128]	; (800b578 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b4f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b500:	d10a      	bne.n	800b518 <prvAddCurrentTaskToDelayedList+0x58>
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b508:	4b1a      	ldr	r3, [pc, #104]	; (800b574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4619      	mov	r1, r3
 800b510:	481a      	ldr	r0, [pc, #104]	; (800b57c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b512:	f7fd ff17 	bl	8009344 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b516:	e026      	b.n	800b566 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4413      	add	r3, r2
 800b51e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b520:	4b14      	ldr	r3, [pc, #80]	; (800b574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d209      	bcs.n	800b544 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b530:	4b13      	ldr	r3, [pc, #76]	; (800b580 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	4b0f      	ldr	r3, [pc, #60]	; (800b574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3304      	adds	r3, #4
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f7fd ff24 	bl	800938a <vListInsert>
}
 800b542:	e010      	b.n	800b566 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b544:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	4b0a      	ldr	r3, [pc, #40]	; (800b574 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3304      	adds	r3, #4
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f7fd ff1a 	bl	800938a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b556:	4b0c      	ldr	r3, [pc, #48]	; (800b588 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d202      	bcs.n	800b566 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b560:	4a09      	ldr	r2, [pc, #36]	; (800b588 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6013      	str	r3, [r2, #0]
}
 800b566:	bf00      	nop
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20001ac8 	.word	0x20001ac8
 800b574:	200019c4 	.word	0x200019c4
 800b578:	20001acc 	.word	0x20001acc
 800b57c:	20001ab0 	.word	0x20001ab0
 800b580:	20001a80 	.word	0x20001a80
 800b584:	20001a7c 	.word	0x20001a7c
 800b588:	20001ae4 	.word	0x20001ae4

0800b58c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b08a      	sub	sp, #40	; 0x28
 800b590:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b596:	f000 fb37 	bl	800bc08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b59a:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <xTimerCreateTimerTask+0x80>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d021      	beq.n	800b5e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5aa:	1d3a      	adds	r2, r7, #4
 800b5ac:	f107 0108 	add.w	r1, r7, #8
 800b5b0:	f107 030c 	add.w	r3, r7, #12
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7f4 fe15 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5ba:	6879      	ldr	r1, [r7, #4]
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	9202      	str	r2, [sp, #8]
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	460a      	mov	r2, r1
 800b5cc:	4910      	ldr	r1, [pc, #64]	; (800b610 <xTimerCreateTimerTask+0x84>)
 800b5ce:	4811      	ldr	r0, [pc, #68]	; (800b614 <xTimerCreateTimerTask+0x88>)
 800b5d0:	f7ff f84e 	bl	800a670 <xTaskCreateStatic>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4b10      	ldr	r3, [pc, #64]	; (800b618 <xTimerCreateTimerTask+0x8c>)
 800b5d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b5da:	4b0f      	ldr	r3, [pc, #60]	; (800b618 <xTimerCreateTimerTask+0x8c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d109      	bne.n	800b600 <xTimerCreateTimerTask+0x74>
 800b5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	613b      	str	r3, [r7, #16]
 800b5fe:	e7fe      	b.n	800b5fe <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b600:	697b      	ldr	r3, [r7, #20]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3718      	adds	r7, #24
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	20001b20 	.word	0x20001b20
 800b610:	0800cf40 	.word	0x0800cf40
 800b614:	0800b851 	.word	0x0800b851
 800b618:	20001b24 	.word	0x20001b24

0800b61c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b62a:	202c      	movs	r0, #44	; 0x2c
 800b62c:	f7fe f8f2 	bl	8009814 <pvPortMalloc>
 800b630:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00d      	beq.n	800b654 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	9301      	str	r3, [sp, #4]
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	68b9      	ldr	r1, [r7, #8]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 f844 	bl	800b6d4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800b654:	697b      	ldr	r3, [r7, #20]
	}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b08a      	sub	sp, #40	; 0x28
 800b662:	af02      	add	r7, sp, #8
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	607a      	str	r2, [r7, #4]
 800b66a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b66c:	232c      	movs	r3, #44	; 0x2c
 800b66e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b2c      	cmp	r3, #44	; 0x2c
 800b674:	d009      	beq.n	800b68a <xTimerCreateStatic+0x2c>
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	61bb      	str	r3, [r7, #24]
 800b688:	e7fe      	b.n	800b688 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d109      	bne.n	800b6a4 <xTimerCreateStatic+0x46>
 800b690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	617b      	str	r3, [r7, #20]
 800b6a2:	e7fe      	b.n	800b6a2 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00d      	beq.n	800b6ca <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	68b9      	ldr	r1, [r7, #8]
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f000 f809 	bl	800b6d4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
	}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3720      	adds	r7, #32
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d109      	bne.n	800b6fc <prvInitialiseNewTimer+0x28>
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	e7fe      	b.n	800b6fa <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d015      	beq.n	800b72e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b702:	f000 fa81 	bl	800bc08 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800b712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b720:	6a3a      	ldr	r2, [r7, #32]
 800b722:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fd fdff 	bl	800932c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b72e:	bf00      	nop
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
	...

0800b738 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b746:	2300      	movs	r3, #0
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d109      	bne.n	800b764 <xTimerGenericCommand+0x2c>
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	623b      	str	r3, [r7, #32]
 800b762:	e7fe      	b.n	800b762 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b764:	4b19      	ldr	r3, [pc, #100]	; (800b7cc <xTimerGenericCommand+0x94>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d02a      	beq.n	800b7c2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	2b05      	cmp	r3, #5
 800b77c:	dc18      	bgt.n	800b7b0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b77e:	f7ff fdfd 	bl	800b37c <xTaskGetSchedulerState>
 800b782:	4603      	mov	r3, r0
 800b784:	2b02      	cmp	r3, #2
 800b786:	d109      	bne.n	800b79c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b788:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <xTimerGenericCommand+0x94>)
 800b78a:	6818      	ldr	r0, [r3, #0]
 800b78c:	f107 0114 	add.w	r1, r7, #20
 800b790:	2300      	movs	r3, #0
 800b792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b794:	f7fe fb96 	bl	8009ec4 <xQueueGenericSend>
 800b798:	6278      	str	r0, [r7, #36]	; 0x24
 800b79a:	e012      	b.n	800b7c2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b79c:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <xTimerGenericCommand+0x94>)
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	f107 0114 	add.w	r1, r7, #20
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f7fe fb8c 	bl	8009ec4 <xQueueGenericSend>
 800b7ac:	6278      	str	r0, [r7, #36]	; 0x24
 800b7ae:	e008      	b.n	800b7c2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7b0:	4b06      	ldr	r3, [pc, #24]	; (800b7cc <xTimerGenericCommand+0x94>)
 800b7b2:	6818      	ldr	r0, [r3, #0]
 800b7b4:	f107 0114 	add.w	r1, r7, #20
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	f7fe fc7c 	bl	800a0b8 <xQueueGenericSendFromISR>
 800b7c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3728      	adds	r7, #40	; 0x28
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20001b20 	.word	0x20001b20

0800b7d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7da:	4b1c      	ldr	r3, [pc, #112]	; (800b84c <prvProcessExpiredTimer+0x7c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fd fe06 	bl	80093fa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d121      	bne.n	800b83a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	699a      	ldr	r2, [r3, #24]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	18d1      	adds	r1, r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	6978      	ldr	r0, [r7, #20]
 800b804:	f000 f8c8 	bl	800b998 <prvInsertTimerInActiveList>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d015      	beq.n	800b83a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b80e:	2300      	movs	r3, #0
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	2300      	movs	r3, #0
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	2100      	movs	r1, #0
 800b818:	6978      	ldr	r0, [r7, #20]
 800b81a:	f7ff ff8d 	bl	800b738 <xTimerGenericCommand>
 800b81e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d109      	bne.n	800b83a <prvProcessExpiredTimer+0x6a>
 800b826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82a:	f383 8811 	msr	BASEPRI, r3
 800b82e:	f3bf 8f6f 	isb	sy
 800b832:	f3bf 8f4f 	dsb	sy
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	e7fe      	b.n	800b838 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	6978      	ldr	r0, [r7, #20]
 800b840:	4798      	blx	r3
}
 800b842:	bf00      	nop
 800b844:	3718      	adds	r7, #24
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20001b18 	.word	0x20001b18

0800b850 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b858:	f107 0308 	add.w	r3, r7, #8
 800b85c:	4618      	mov	r0, r3
 800b85e:	f000 f857 	bl	800b910 <prvGetNextExpireTime>
 800b862:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	4619      	mov	r1, r3
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 f803 	bl	800b874 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b86e:	f000 f8d5 	bl	800ba1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b872:	e7f1      	b.n	800b858 <prvTimerTask+0x8>

0800b874 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b87e:	f7ff f9a7 	bl	800abd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b882:	f107 0308 	add.w	r3, r7, #8
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f866 	bl	800b958 <prvSampleTimeNow>
 800b88c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d130      	bne.n	800b8f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10a      	bne.n	800b8b0 <prvProcessTimerOrBlockTask+0x3c>
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d806      	bhi.n	800b8b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b8a2:	f7ff f9a3 	bl	800abec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8a6:	68f9      	ldr	r1, [r7, #12]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff ff91 	bl	800b7d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8ae:	e024      	b.n	800b8fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d008      	beq.n	800b8c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <prvProcessTimerOrBlockTask+0x90>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	bf0c      	ite	eq
 800b8c0:	2301      	moveq	r3, #1
 800b8c2:	2300      	movne	r3, #0
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	; (800b908 <prvProcessTimerOrBlockTask+0x94>)
 800b8ca:	6818      	ldr	r0, [r3, #0]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	683a      	ldr	r2, [r7, #0]
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f7fe fe97 	bl	800a608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b8da:	f7ff f987 	bl	800abec <xTaskResumeAll>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b8e4:	4b09      	ldr	r3, [pc, #36]	; (800b90c <prvProcessTimerOrBlockTask+0x98>)
 800b8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	f3bf 8f6f 	isb	sy
}
 800b8f4:	e001      	b.n	800b8fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8f6:	f7ff f979 	bl	800abec <xTaskResumeAll>
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20001b1c 	.word	0x20001b1c
 800b908:	20001b20 	.word	0x20001b20
 800b90c:	e000ed04 	.word	0xe000ed04

0800b910 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b918:	4b0e      	ldr	r3, [pc, #56]	; (800b954 <prvGetNextExpireTime+0x44>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bf0c      	ite	eq
 800b922:	2301      	moveq	r3, #1
 800b924:	2300      	movne	r3, #0
 800b926:	b2db      	uxtb	r3, r3
 800b928:	461a      	mov	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d105      	bne.n	800b942 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b936:	4b07      	ldr	r3, [pc, #28]	; (800b954 <prvGetNextExpireTime+0x44>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e001      	b.n	800b946 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b946:	68fb      	ldr	r3, [r7, #12]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bc80      	pop	{r7}
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	20001b18 	.word	0x20001b18

0800b958 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b960:	f7ff f9e0 	bl	800ad24 <xTaskGetTickCount>
 800b964:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b966:	4b0b      	ldr	r3, [pc, #44]	; (800b994 <prvSampleTimeNow+0x3c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d205      	bcs.n	800b97c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b970:	f000 f8ea 	bl	800bb48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	e002      	b.n	800b982 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b982:	4a04      	ldr	r2, [pc, #16]	; (800b994 <prvSampleTimeNow+0x3c>)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b988:	68fb      	ldr	r3, [r7, #12]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20001b28 	.word	0x20001b28

0800b998 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d812      	bhi.n	800b9e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	1ad2      	subs	r2, r2, r3
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	699b      	ldr	r3, [r3, #24]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d302      	bcc.n	800b9d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	617b      	str	r3, [r7, #20]
 800b9d0:	e01b      	b.n	800ba0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9d2:	4b10      	ldr	r3, [pc, #64]	; (800ba14 <prvInsertTimerInActiveList+0x7c>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3304      	adds	r3, #4
 800b9da:	4619      	mov	r1, r3
 800b9dc:	4610      	mov	r0, r2
 800b9de:	f7fd fcd4 	bl	800938a <vListInsert>
 800b9e2:	e012      	b.n	800ba0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d206      	bcs.n	800b9fa <prvInsertTimerInActiveList+0x62>
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d302      	bcc.n	800b9fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e007      	b.n	800ba0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9fa:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <prvInsertTimerInActiveList+0x80>)
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	3304      	adds	r3, #4
 800ba02:	4619      	mov	r1, r3
 800ba04:	4610      	mov	r0, r2
 800ba06:	f7fd fcc0 	bl	800938a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba0a:	697b      	ldr	r3, [r7, #20]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20001b1c 	.word	0x20001b1c
 800ba18:	20001b18 	.word	0x20001b18

0800ba1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b08c      	sub	sp, #48	; 0x30
 800ba20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba22:	e07f      	b.n	800bb24 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	db7c      	blt.n	800bb24 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d004      	beq.n	800ba40 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba38:	3304      	adds	r3, #4
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fd fcdd 	bl	80093fa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba40:	1d3b      	adds	r3, r7, #4
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff ff88 	bl	800b958 <prvSampleTimeNow>
 800ba48:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	2b09      	cmp	r3, #9
 800ba4e:	d868      	bhi.n	800bb22 <prvProcessReceivedCommands+0x106>
 800ba50:	a201      	add	r2, pc, #4	; (adr r2, 800ba58 <prvProcessReceivedCommands+0x3c>)
 800ba52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba56:	bf00      	nop
 800ba58:	0800ba81 	.word	0x0800ba81
 800ba5c:	0800ba81 	.word	0x0800ba81
 800ba60:	0800ba81 	.word	0x0800ba81
 800ba64:	0800bb25 	.word	0x0800bb25
 800ba68:	0800badb 	.word	0x0800badb
 800ba6c:	0800bb11 	.word	0x0800bb11
 800ba70:	0800ba81 	.word	0x0800ba81
 800ba74:	0800ba81 	.word	0x0800ba81
 800ba78:	0800bb25 	.word	0x0800bb25
 800ba7c:	0800badb 	.word	0x0800badb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	18d1      	adds	r1, r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6a3a      	ldr	r2, [r7, #32]
 800ba8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba8e:	f7ff ff83 	bl	800b998 <prvInsertTimerInActiveList>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d045      	beq.n	800bb24 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	69db      	ldr	r3, [r3, #28]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d13d      	bne.n	800bb24 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	441a      	add	r2, r3
 800bab0:	2300      	movs	r3, #0
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2300      	movs	r3, #0
 800bab6:	2100      	movs	r1, #0
 800bab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baba:	f7ff fe3d 	bl	800b738 <xTimerGenericCommand>
 800babe:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d12e      	bne.n	800bb24 <prvProcessReceivedCommands+0x108>
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	f383 8811 	msr	BASEPRI, r3
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f3bf 8f4f 	dsb	sy
 800bad6:	61bb      	str	r3, [r7, #24]
 800bad8:	e7fe      	b.n	800bad8 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d109      	bne.n	800bafc <prvProcessReceivedCommands+0xe0>
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	e7fe      	b.n	800bafa <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	699a      	ldr	r2, [r3, #24]
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	18d1      	adds	r1, r2, r3
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	6a3a      	ldr	r2, [r7, #32]
 800bb08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb0a:	f7ff ff45 	bl	800b998 <prvInsertTimerInActiveList>
					break;
 800bb0e:	e009      	b.n	800bb24 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d104      	bne.n	800bb24 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800bb1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb1c:	f7fd ff3c 	bl	8009998 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb20:	e000      	b.n	800bb24 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800bb22:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb24:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <prvProcessReceivedCommands+0x128>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe fb56 	bl	800a1e0 <xQueueReceive>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f47f af74 	bne.w	800ba24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb3c:	bf00      	nop
 800bb3e:	3728      	adds	r7, #40	; 0x28
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20001b20 	.word	0x20001b20

0800bb48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b088      	sub	sp, #32
 800bb4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb4e:	e044      	b.n	800bbda <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb50:	4b2b      	ldr	r3, [pc, #172]	; (800bc00 <prvSwitchTimerLists+0xb8>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb5a:	4b29      	ldr	r3, [pc, #164]	; (800bc00 <prvSwitchTimerLists+0xb8>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	68db      	ldr	r3, [r3, #12]
 800bb62:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	3304      	adds	r3, #4
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fd fc46 	bl	80093fa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb72:	6938      	ldr	r0, [r7, #16]
 800bb74:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	69db      	ldr	r3, [r3, #28]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d12d      	bne.n	800bbda <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	699a      	ldr	r2, [r3, #24]
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	4413      	add	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800bb88:	68fa      	ldr	r2, [r7, #12]
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d90e      	bls.n	800bbae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb9c:	4b18      	ldr	r3, [pc, #96]	; (800bc00 <prvSwitchTimerLists+0xb8>)
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4619      	mov	r1, r3
 800bba6:	4610      	mov	r0, r2
 800bba8:	f7fd fbef 	bl	800938a <vListInsert>
 800bbac:	e015      	b.n	800bbda <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bbae:	2300      	movs	r3, #0
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	6938      	ldr	r0, [r7, #16]
 800bbba:	f7ff fdbd 	bl	800b738 <xTimerGenericCommand>
 800bbbe:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d109      	bne.n	800bbda <prvSwitchTimerLists+0x92>
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	603b      	str	r3, [r7, #0]
 800bbd8:	e7fe      	b.n	800bbd8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <prvSwitchTimerLists+0xb8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1b5      	bne.n	800bb50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbe4:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <prvSwitchTimerLists+0xb8>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbea:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <prvSwitchTimerLists+0xbc>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a04      	ldr	r2, [pc, #16]	; (800bc00 <prvSwitchTimerLists+0xb8>)
 800bbf0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbf2:	4a04      	ldr	r2, [pc, #16]	; (800bc04 <prvSwitchTimerLists+0xbc>)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6013      	str	r3, [r2, #0]
}
 800bbf8:	bf00      	nop
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20001b18 	.word	0x20001b18
 800bc04:	20001b1c 	.word	0x20001b1c

0800bc08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc0e:	f7fd fd0b 	bl	8009628 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d120      	bne.n	800bc5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc1a:	4814      	ldr	r0, [pc, #80]	; (800bc6c <prvCheckForValidListAndQueue+0x64>)
 800bc1c:	f7fd fb67 	bl	80092ee <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc20:	4813      	ldr	r0, [pc, #76]	; (800bc70 <prvCheckForValidListAndQueue+0x68>)
 800bc22:	f7fd fb64 	bl	80092ee <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <prvCheckForValidListAndQueue+0x6c>)
 800bc28:	4a10      	ldr	r2, [pc, #64]	; (800bc6c <prvCheckForValidListAndQueue+0x64>)
 800bc2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc2c:	4b12      	ldr	r3, [pc, #72]	; (800bc78 <prvCheckForValidListAndQueue+0x70>)
 800bc2e:	4a10      	ldr	r2, [pc, #64]	; (800bc70 <prvCheckForValidListAndQueue+0x68>)
 800bc30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc32:	2300      	movs	r3, #0
 800bc34:	9300      	str	r3, [sp, #0]
 800bc36:	4b11      	ldr	r3, [pc, #68]	; (800bc7c <prvCheckForValidListAndQueue+0x74>)
 800bc38:	4a11      	ldr	r2, [pc, #68]	; (800bc80 <prvCheckForValidListAndQueue+0x78>)
 800bc3a:	210c      	movs	r1, #12
 800bc3c:	200a      	movs	r0, #10
 800bc3e:	f7fe f825 	bl	8009c8c <xQueueGenericCreateStatic>
 800bc42:	4602      	mov	r2, r0
 800bc44:	4b08      	ldr	r3, [pc, #32]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc48:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc50:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <prvCheckForValidListAndQueue+0x60>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	490b      	ldr	r1, [pc, #44]	; (800bc84 <prvCheckForValidListAndQueue+0x7c>)
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe fcae 	bl	800a5b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc5c:	f7fd fd12 	bl	8009684 <vPortExitCritical>
}
 800bc60:	bf00      	nop
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20001b20 	.word	0x20001b20
 800bc6c:	20001af0 	.word	0x20001af0
 800bc70:	20001b04 	.word	0x20001b04
 800bc74:	20001b18 	.word	0x20001b18
 800bc78:	20001b1c 	.word	0x20001b1c
 800bc7c:	20001ba4 	.word	0x20001ba4
 800bc80:	20001b2c 	.word	0x20001b2c
 800bc84:	0800cf48 	.word	0x0800cf48

0800bc88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800bc8c:	4b27      	ldr	r3, [pc, #156]	; (800bd2c <MX_USB_DEVICE_Init+0xa4>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d124      	bne.n	800bce0 <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc96:	2200      	movs	r2, #0
 800bc98:	4925      	ldr	r1, [pc, #148]	; (800bd30 <MX_USB_DEVICE_Init+0xa8>)
 800bc9a:	4826      	ldr	r0, [pc, #152]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bc9c:	f7fc f8f8 	bl	8007e90 <USBD_Init>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d001      	beq.n	800bcaa <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800bca6:	f7f4 fec5 	bl	8000a34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800bcaa:	4923      	ldr	r1, [pc, #140]	; (800bd38 <MX_USB_DEVICE_Init+0xb0>)
 800bcac:	4821      	ldr	r0, [pc, #132]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bcae:	f7fc f91a 	bl	8007ee6 <USBD_RegisterClass>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d001      	beq.n	800bcbc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800bcb8:	f7f4 febc 	bl	8000a34 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800bcbc:	491f      	ldr	r1, [pc, #124]	; (800bd3c <MX_USB_DEVICE_Init+0xb4>)
 800bcbe:	481d      	ldr	r0, [pc, #116]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bcc0:	f7fc f8d0 	bl	8007e64 <USBD_CUSTOM_HID_RegisterInterface>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800bcca:	f7f4 feb3 	bl	8000a34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bcce:	4819      	ldr	r0, [pc, #100]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bcd0:	f7fc f922 	bl	8007f18 <USBD_Start>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d01e      	beq.n	800bd18 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800bcda:	f7f4 feab 	bl	8000a34 <Error_Handler>
 800bcde:	e01b      	b.n	800bd18 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800bce0:	2200      	movs	r2, #0
 800bce2:	4913      	ldr	r1, [pc, #76]	; (800bd30 <MX_USB_DEVICE_Init+0xa8>)
 800bce4:	4813      	ldr	r0, [pc, #76]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bce6:	f7fc f8d3 	bl	8007e90 <USBD_Init>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d001      	beq.n	800bcf4 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800bcf0:	f7f4 fea0 	bl	8000a34 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800bcf4:	4912      	ldr	r1, [pc, #72]	; (800bd40 <MX_USB_DEVICE_Init+0xb8>)
 800bcf6:	480f      	ldr	r0, [pc, #60]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bcf8:	f7fc f8f5 	bl	8007ee6 <USBD_RegisterClass>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d001      	beq.n	800bd06 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800bd02:	f7f4 fe97 	bl	8000a34 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800bd06:	490f      	ldr	r1, [pc, #60]	; (800bd44 <MX_USB_DEVICE_Init+0xbc>)
 800bd08:	480a      	ldr	r0, [pc, #40]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bd0a:	f7fa fe69 	bl	80069e0 <USBD_MSC_RegisterStorage>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800bd14:	f7f4 fe8e 	bl	8000a34 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bd18:	4806      	ldr	r0, [pc, #24]	; (800bd34 <MX_USB_DEVICE_Init+0xac>)
 800bd1a:	f7fc f8fd 	bl	8007f18 <USBD_Start>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800bd24:	f7f4 fe86 	bl	8000a34 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bd28:	bf00      	nop
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20000330 	.word	0x20000330
 800bd30:	20000260 	.word	0x20000260
 800bd34:	200031cc 	.word	0x200031cc
 800bd38:	20000118 	.word	0x20000118
 800bd3c:	20000250 	.word	0x20000250
 800bd40:	20000074 	.word	0x20000074
 800bd44:	20000034 	.word	0x20000034

0800bd48 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bd4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr

0800bd56 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800bd56:	b480      	push	{r7}
 800bd58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bd5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bc80      	pop	{r7}
 800bd62:	4770      	bx	lr

0800bd64 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	460a      	mov	r2, r1
 800bd6e:	71fb      	strb	r3, [r7, #7]
 800bd70:	4613      	mov	r3, r2
 800bd72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bd74:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bc80      	pop	{r7}
 800bd7e:	4770      	bx	lr

0800bd80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2212      	movs	r2, #18
 800bd90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bc80      	pop	{r7}
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	2000027c 	.word	0x2000027c

0800bda4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	6039      	str	r1, [r7, #0]
 800bdae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	2204      	movs	r2, #4
 800bdb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdb6:	4b03      	ldr	r3, [pc, #12]	; (800bdc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bc80      	pop	{r7}
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	20000290 	.word	0x20000290

0800bdc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	6039      	str	r1, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdd4:	79fb      	ldrb	r3, [r7, #7]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d105      	bne.n	800bde6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	4907      	ldr	r1, [pc, #28]	; (800bdfc <USBD_FS_ProductStrDescriptor+0x34>)
 800bdde:	4808      	ldr	r0, [pc, #32]	; (800be00 <USBD_FS_ProductStrDescriptor+0x38>)
 800bde0:	f7fd f805 	bl	8008dee <USBD_GetString>
 800bde4:	e004      	b.n	800bdf0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	4904      	ldr	r1, [pc, #16]	; (800bdfc <USBD_FS_ProductStrDescriptor+0x34>)
 800bdea:	4805      	ldr	r0, [pc, #20]	; (800be00 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdec:	f7fc ffff 	bl	8008dee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdf0:	4b02      	ldr	r3, [pc, #8]	; (800bdfc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3708      	adds	r7, #8
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	20003490 	.word	0x20003490
 800be00:	0800cf50 	.word	0x0800cf50

0800be04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	4904      	ldr	r1, [pc, #16]	; (800be24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be14:	4804      	ldr	r0, [pc, #16]	; (800be28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be16:	f7fc ffea 	bl	8008dee <USBD_GetString>
  return USBD_StrDesc;
 800be1a:	4b02      	ldr	r3, [pc, #8]	; (800be24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}
 800be24:	20003490 	.word	0x20003490
 800be28:	0800cf74 	.word	0x0800cf74

0800be2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	221a      	movs	r2, #26
 800be3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be3e:	f000 f843 	bl	800bec8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be42:	4b02      	ldr	r3, [pc, #8]	; (800be4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be44:	4618      	mov	r0, r3
 800be46:	3708      	adds	r7, #8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	20000294 	.word	0x20000294

0800be50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d105      	bne.n	800be6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4907      	ldr	r1, [pc, #28]	; (800be84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be66:	4808      	ldr	r0, [pc, #32]	; (800be88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be68:	f7fc ffc1 	bl	8008dee <USBD_GetString>
 800be6c:	e004      	b.n	800be78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	4904      	ldr	r1, [pc, #16]	; (800be84 <USBD_FS_ConfigStrDescriptor+0x34>)
 800be72:	4805      	ldr	r0, [pc, #20]	; (800be88 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be74:	f7fc ffbb 	bl	8008dee <USBD_GetString>
  }
  return USBD_StrDesc;
 800be78:	4b02      	ldr	r3, [pc, #8]	; (800be84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20003490 	.word	0x20003490
 800be88:	0800cf84 	.word	0x0800cf84

0800be8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	6039      	str	r1, [r7, #0]
 800be96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be98:	79fb      	ldrb	r3, [r7, #7]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d105      	bne.n	800beaa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	4907      	ldr	r1, [pc, #28]	; (800bec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bea2:	4808      	ldr	r0, [pc, #32]	; (800bec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bea4:	f7fc ffa3 	bl	8008dee <USBD_GetString>
 800bea8:	e004      	b.n	800beb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4904      	ldr	r1, [pc, #16]	; (800bec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beae:	4805      	ldr	r0, [pc, #20]	; (800bec4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beb0:	f7fc ff9d 	bl	8008dee <USBD_GetString>
  }
  return USBD_StrDesc;
 800beb4:	4b02      	ldr	r3, [pc, #8]	; (800bec0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20003490 	.word	0x20003490
 800bec4:	0800cf98 	.word	0x0800cf98

0800bec8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bece:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <Get_SerialNum+0x44>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bed4:	4b0e      	ldr	r3, [pc, #56]	; (800bf10 <Get_SerialNum+0x48>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800beda:	4b0e      	ldr	r3, [pc, #56]	; (800bf14 <Get_SerialNum+0x4c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4413      	add	r3, r2
 800bee6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d009      	beq.n	800bf02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800beee:	2208      	movs	r2, #8
 800bef0:	4909      	ldr	r1, [pc, #36]	; (800bf18 <Get_SerialNum+0x50>)
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f000 f814 	bl	800bf20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bef8:	2204      	movs	r2, #4
 800befa:	4908      	ldr	r1, [pc, #32]	; (800bf1c <Get_SerialNum+0x54>)
 800befc:	68b8      	ldr	r0, [r7, #8]
 800befe:	f000 f80f 	bl	800bf20 <IntToUnicode>
  }
}
 800bf02:	bf00      	nop
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	1ffff7e8 	.word	0x1ffff7e8
 800bf10:	1ffff7ec 	.word	0x1ffff7ec
 800bf14:	1ffff7f0 	.word	0x1ffff7f0
 800bf18:	20000296 	.word	0x20000296
 800bf1c:	200002a6 	.word	0x200002a6

0800bf20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf32:	2300      	movs	r3, #0
 800bf34:	75fb      	strb	r3, [r7, #23]
 800bf36:	e027      	b.n	800bf88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	0f1b      	lsrs	r3, r3, #28
 800bf3c:	2b09      	cmp	r3, #9
 800bf3e:	d80b      	bhi.n	800bf58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf40:	7dfb      	ldrb	r3, [r7, #23]
 800bf42:	005b      	lsls	r3, r3, #1
 800bf44:	461a      	mov	r2, r3
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	4413      	add	r3, r2
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	0f12      	lsrs	r2, r2, #28
 800bf4e:	b2d2      	uxtb	r2, r2
 800bf50:	3230      	adds	r2, #48	; 0x30
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
 800bf56:	e00a      	b.n	800bf6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	0f12      	lsrs	r2, r2, #28
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	3237      	adds	r2, #55	; 0x37
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	011b      	lsls	r3, r3, #4
 800bf72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf74:	7dfb      	ldrb	r3, [r7, #23]
 800bf76:	005b      	lsls	r3, r3, #1
 800bf78:	3301      	adds	r3, #1
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	2200      	movs	r2, #0
 800bf80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf82:	7dfb      	ldrb	r3, [r7, #23]
 800bf84:	3301      	adds	r3, #1
 800bf86:	75fb      	strb	r3, [r7, #23]
 800bf88:	7dfa      	ldrb	r2, [r7, #23]
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d3d3      	bcc.n	800bf38 <IntToUnicode+0x18>
  }
}
 800bf90:	bf00      	nop
 800bf92:	371c      	adds	r7, #28
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bc80      	pop	{r7}
 800bf98:	4770      	bx	lr
	...

0800bf9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a0d      	ldr	r2, [pc, #52]	; (800bfe0 <HAL_PCD_MspInit+0x44>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d113      	bne.n	800bfd6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bfae:	4a0d      	ldr	r2, [pc, #52]	; (800bfe4 <HAL_PCD_MspInit+0x48>)
 800bfb0:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <HAL_PCD_MspInit+0x48>)
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfb8:	61d3      	str	r3, [r2, #28]
 800bfba:	4b0a      	ldr	r3, [pc, #40]	; (800bfe4 <HAL_PCD_MspInit+0x48>)
 800bfbc:	69db      	ldr	r3, [r3, #28]
 800bfbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2105      	movs	r1, #5
 800bfca:	2014      	movs	r0, #20
 800bfcc:	f7f5 f863 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bfd0:	2014      	movs	r0, #20
 800bfd2:	f7f5 f87c 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	40005c00 	.word	0x40005c00
 800bfe4:	40021000 	.word	0x40021000

0800bfe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bffc:	4619      	mov	r1, r3
 800bffe:	4610      	mov	r0, r2
 800c000:	f7fb ffd2 	bl	8007fa8 <USBD_LL_SetupStage>
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c01e:	78fa      	ldrb	r2, [r7, #3]
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	4613      	mov	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	00db      	lsls	r3, r3, #3
 800c02a:	440b      	add	r3, r1
 800c02c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	4619      	mov	r1, r3
 800c036:	f7fc f802 	bl	800803e <USBD_LL_DataOutStage>
}
 800c03a:	bf00      	nop
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	440b      	add	r3, r1
 800c062:	333c      	adds	r3, #60	; 0x3c
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	78fb      	ldrb	r3, [r7, #3]
 800c068:	4619      	mov	r1, r3
 800c06a:	f7fc f859 	bl	8008120 <USBD_LL_DataInStage>
}
 800c06e:	bf00      	nop
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c084:	4618      	mov	r0, r3
 800c086:	f7fc f969 	bl	800835c <USBD_LL_SOF>
}
 800c08a:	bf00      	nop
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b084      	sub	sp, #16
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d001      	beq.n	800c0aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c0a6:	f7f4 fcc5 	bl	8000a34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0b0:	7bfa      	ldrb	r2, [r7, #15]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fc f919 	bl	80082ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7fc f8d2 	bl	800826a <USBD_LL_Reset>
}
 800c0c6:	bf00      	nop
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
	...

0800c0d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fc f913 	bl	800830a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	699b      	ldr	r3, [r3, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d005      	beq.n	800c0f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0ec:	4a04      	ldr	r2, [pc, #16]	; (800c100 <HAL_PCD_SuspendCallback+0x30>)
 800c0ee:	4b04      	ldr	r3, [pc, #16]	; (800c100 <HAL_PCD_SuspendCallback+0x30>)
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	f043 0306 	orr.w	r3, r3, #6
 800c0f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	e000ed00 	.word	0xe000ed00

0800c104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800c112:	4618      	mov	r0, r3
 800c114:	f7fc f90d 	bl	8008332 <USBD_LL_Resume>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c128:	4a23      	ldr	r2, [pc, #140]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a21      	ldr	r2, [pc, #132]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c134:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800c138:	4b1f      	ldr	r3, [pc, #124]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c13a:	4a20      	ldr	r2, [pc, #128]	; (800c1bc <USBD_LL_Init+0x9c>)
 800c13c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c13e:	4b1e      	ldr	r3, [pc, #120]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c140:	2208      	movs	r2, #8
 800c142:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c144:	4b1c      	ldr	r3, [pc, #112]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c146:	2202      	movs	r2, #2
 800c148:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c14a:	4b1b      	ldr	r3, [pc, #108]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c14c:	2200      	movs	r2, #0
 800c14e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c150:	4b19      	ldr	r3, [pc, #100]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c152:	2200      	movs	r2, #0
 800c154:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c156:	4b18      	ldr	r3, [pc, #96]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c158:	2200      	movs	r2, #0
 800c15a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c15c:	4816      	ldr	r0, [pc, #88]	; (800c1b8 <USBD_LL_Init+0x98>)
 800c15e:	f7f5 f93b 	bl	80013d8 <HAL_PCD_Init>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d001      	beq.n	800c16c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800c168:	f7f4 fc64 	bl	8000a34 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c172:	2318      	movs	r3, #24
 800c174:	2200      	movs	r2, #0
 800c176:	2100      	movs	r1, #0
 800c178:	f7f6 fdfb 	bl	8002d72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c182:	2358      	movs	r3, #88	; 0x58
 800c184:	2200      	movs	r2, #0
 800c186:	2180      	movs	r1, #128	; 0x80
 800c188:	f7f6 fdf3 	bl	8002d72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c192:	2398      	movs	r3, #152	; 0x98
 800c194:	2200      	movs	r2, #0
 800c196:	2181      	movs	r1, #129	; 0x81
 800c198:	f7f6 fdeb 	bl	8002d72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c1a2:	23d8      	movs	r3, #216	; 0xd8
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2101      	movs	r1, #1
 800c1a8:	f7f6 fde3 	bl	8002d72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800c1ac:	2300      	movs	r3, #0
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20003690 	.word	0x20003690
 800c1bc:	40005c00 	.word	0x40005c00

0800c1c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7f5 fa09 	bl	80015ee <HAL_PCD_Start>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 f96e 	bl	800c4c4 <USBD_Get_USB_Status>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}

0800c1f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b084      	sub	sp, #16
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
 800c1fe:	4608      	mov	r0, r1
 800c200:	4611      	mov	r1, r2
 800c202:	461a      	mov	r2, r3
 800c204:	4603      	mov	r3, r0
 800c206:	70fb      	strb	r3, [r7, #3]
 800c208:	460b      	mov	r3, r1
 800c20a:	70bb      	strb	r3, [r7, #2]
 800c20c:	4613      	mov	r3, r2
 800c20e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c21e:	78bb      	ldrb	r3, [r7, #2]
 800c220:	883a      	ldrh	r2, [r7, #0]
 800c222:	78f9      	ldrb	r1, [r7, #3]
 800c224:	f7f5 fb83 	bl	800192e <HAL_PCD_EP_Open>
 800c228:	4603      	mov	r3, r0
 800c22a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 f948 	bl	800c4c4 <USBD_Get_USB_Status>
 800c234:	4603      	mov	r3, r0
 800c236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c238:	7bbb      	ldrb	r3, [r7, #14]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b084      	sub	sp, #16
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	460b      	mov	r3, r1
 800c24c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c25c:	78fa      	ldrb	r2, [r7, #3]
 800c25e:	4611      	mov	r1, r2
 800c260:	4618      	mov	r0, r3
 800c262:	f7f5 fbca 	bl	80019fa <HAL_PCD_EP_Close>
 800c266:	4603      	mov	r3, r0
 800c268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c26a:	7bfb      	ldrb	r3, [r7, #15]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 f929 	bl	800c4c4 <USBD_Get_USB_Status>
 800c272:	4603      	mov	r3, r0
 800c274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c276:	7bbb      	ldrb	r3, [r7, #14]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	460b      	mov	r3, r1
 800c28a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c29a:	78fa      	ldrb	r2, [r7, #3]
 800c29c:	4611      	mov	r1, r2
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f5 fd3e 	bl	8001d20 <HAL_PCD_EP_Flush>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f90a 	bl	800c4c4 <USBD_Get_USB_Status>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	4611      	mov	r1, r2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7f5 fc6b 	bl	8001bb8 <HAL_PCD_EP_SetStall>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 f8eb 	bl	800c4c4 <USBD_Get_USB_Status>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c316:	78fa      	ldrb	r2, [r7, #3]
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7f5 fcac 	bl	8001c78 <HAL_PCD_EP_ClrStall>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c324:	7bfb      	ldrb	r3, [r7, #15]
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f8cc 	bl	800c4c4 <USBD_Get_USB_Status>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c330:	7bbb      	ldrb	r3, [r7, #14]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c33a:	b480      	push	{r7}
 800c33c:	b085      	sub	sp, #20
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	460b      	mov	r3, r1
 800c344:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c34c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c34e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c352:	2b00      	cmp	r3, #0
 800c354:	da0c      	bge.n	800c370 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c356:	78fb      	ldrb	r3, [r7, #3]
 800c358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35c:	68f9      	ldr	r1, [r7, #12]
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	4613      	mov	r3, r2
 800c362:	009b      	lsls	r3, r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	00db      	lsls	r3, r3, #3
 800c368:	440b      	add	r3, r1
 800c36a:	3302      	adds	r3, #2
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	e00b      	b.n	800c388 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c376:	68f9      	ldr	r1, [r7, #12]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	440b      	add	r3, r1
 800c382:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c386:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3714      	adds	r7, #20
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bc80      	pop	{r7}
 800c390:	4770      	bx	lr

0800c392 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	460b      	mov	r3, r1
 800c39c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3ac:	78fa      	ldrb	r2, [r7, #3]
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f5 fa97 	bl	80018e4 <HAL_PCD_SetAddress>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3ba:	7bfb      	ldrb	r3, [r7, #15]
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f000 f881 	bl	800c4c4 <USBD_Get_USB_Status>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b086      	sub	sp, #24
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	460b      	mov	r3, r1
 800c3de:	72fb      	strb	r3, [r7, #11]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c3f2:	893b      	ldrh	r3, [r7, #8]
 800c3f4:	7af9      	ldrb	r1, [r7, #11]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	f7f5 fb9b 	bl	8001b32 <HAL_PCD_EP_Transmit>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	4618      	mov	r0, r3
 800c404:	f000 f85e 	bl	800c4c4 <USBD_Get_USB_Status>
 800c408:	4603      	mov	r3, r0
 800c40a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c40c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3718      	adds	r7, #24
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b086      	sub	sp, #24
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	461a      	mov	r2, r3
 800c422:	460b      	mov	r3, r1
 800c424:	72fb      	strb	r3, [r7, #11]
 800c426:	4613      	mov	r3, r2
 800c428:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c438:	893b      	ldrh	r3, [r7, #8]
 800c43a:	7af9      	ldrb	r1, [r7, #11]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	f7f5 fb24 	bl	8001a8a <HAL_PCD_EP_Receive>
 800c442:	4603      	mov	r3, r0
 800c444:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f83b 	bl	800c4c4 <USBD_Get_USB_Status>
 800c44e:	4603      	mov	r3, r0
 800c450:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c452:	7dbb      	ldrb	r3, [r7, #22]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3718      	adds	r7, #24
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c46e:	78fa      	ldrb	r2, [r7, #3]
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7f5 fb46 	bl	8001b04 <HAL_PCD_EP_GetRxCount>
 800c478:	4603      	mov	r3, r0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800c48c:	4b02      	ldr	r3, [pc, #8]	; (800c498 <USBD_static_malloc+0x14>)
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	bc80      	pop	{r7}
 800c496:	4770      	bx	lr
 800c498:	20001bec 	.word	0x20001bec

0800c49c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]

}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bc80      	pop	{r7}
 800c4ac:	4770      	bx	lr

0800c4ae <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c4ba:	bf00      	nop
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bc80      	pop	{r7}
 800c4c2:	4770      	bx	lr

0800c4c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	2b03      	cmp	r3, #3
 800c4d6:	d817      	bhi.n	800c508 <USBD_Get_USB_Status+0x44>
 800c4d8:	a201      	add	r2, pc, #4	; (adr r2, 800c4e0 <USBD_Get_USB_Status+0x1c>)
 800c4da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4de:	bf00      	nop
 800c4e0:	0800c4f1 	.word	0x0800c4f1
 800c4e4:	0800c4f7 	.word	0x0800c4f7
 800c4e8:	0800c4fd 	.word	0x0800c4fd
 800c4ec:	0800c503 	.word	0x0800c503
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f4:	e00b      	b.n	800c50e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c4fa:	e008      	b.n	800c50e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c500:	e005      	b.n	800c50e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c502:	2302      	movs	r3, #2
 800c504:	73fb      	strb	r3, [r7, #15]
    break;
 800c506:	e002      	b.n	800c50e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c508:	2302      	movs	r3, #2
 800c50a:	73fb      	strb	r3, [r7, #15]
    break;
 800c50c:	bf00      	nop
  }
  return usb_status;
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3714      	adds	r7, #20
 800c514:	46bd      	mov	sp, r7
 800c516:	bc80      	pop	{r7}
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop

0800c51c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c51c:	480c      	ldr	r0, [pc, #48]	; (800c550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c51e:	490d      	ldr	r1, [pc, #52]	; (800c554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c520:	4a0d      	ldr	r2, [pc, #52]	; (800c558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c524:	e002      	b.n	800c52c <LoopCopyDataInit>

0800c526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c52a:	3304      	adds	r3, #4

0800c52c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c52c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c52e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c530:	d3f9      	bcc.n	800c526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c532:	4a0a      	ldr	r2, [pc, #40]	; (800c55c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c534:	4c0a      	ldr	r4, [pc, #40]	; (800c560 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c536:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c538:	e001      	b.n	800c53e <LoopFillZerobss>

0800c53a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c53a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c53c:	3204      	adds	r2, #4

0800c53e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c53e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c540:	d3fb      	bcc.n	800c53a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c542:	f7f4 fcbd 	bl	8000ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c546:	f000 f815 	bl	800c574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c54a:	f7f4 f9f3 	bl	8000934 <main>
  bx lr
 800c54e:	4770      	bx	lr
  ldr r0, =_sdata
 800c550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c554:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 800c558:	0800d040 	.word	0x0800d040
  ldr r2, =_sbss
 800c55c:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 800c560:	20003980 	.word	0x20003980

0800c564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c564:	e7fe      	b.n	800c564 <ADC1_2_IRQHandler>
	...

0800c568 <__errno>:
 800c568:	4b01      	ldr	r3, [pc, #4]	; (800c570 <__errno+0x8>)
 800c56a:	6818      	ldr	r0, [r3, #0]
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	200002b0 	.word	0x200002b0

0800c574 <__libc_init_array>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	2500      	movs	r5, #0
 800c578:	4e0c      	ldr	r6, [pc, #48]	; (800c5ac <__libc_init_array+0x38>)
 800c57a:	4c0d      	ldr	r4, [pc, #52]	; (800c5b0 <__libc_init_array+0x3c>)
 800c57c:	1ba4      	subs	r4, r4, r6
 800c57e:	10a4      	asrs	r4, r4, #2
 800c580:	42a5      	cmp	r5, r4
 800c582:	d109      	bne.n	800c598 <__libc_init_array+0x24>
 800c584:	f000 fc4e 	bl	800ce24 <_init>
 800c588:	2500      	movs	r5, #0
 800c58a:	4e0a      	ldr	r6, [pc, #40]	; (800c5b4 <__libc_init_array+0x40>)
 800c58c:	4c0a      	ldr	r4, [pc, #40]	; (800c5b8 <__libc_init_array+0x44>)
 800c58e:	1ba4      	subs	r4, r4, r6
 800c590:	10a4      	asrs	r4, r4, #2
 800c592:	42a5      	cmp	r5, r4
 800c594:	d105      	bne.n	800c5a2 <__libc_init_array+0x2e>
 800c596:	bd70      	pop	{r4, r5, r6, pc}
 800c598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c59c:	4798      	blx	r3
 800c59e:	3501      	adds	r5, #1
 800c5a0:	e7ee      	b.n	800c580 <__libc_init_array+0xc>
 800c5a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c5a6:	4798      	blx	r3
 800c5a8:	3501      	adds	r5, #1
 800c5aa:	e7f2      	b.n	800c592 <__libc_init_array+0x1e>
 800c5ac:	0800d038 	.word	0x0800d038
 800c5b0:	0800d038 	.word	0x0800d038
 800c5b4:	0800d038 	.word	0x0800d038
 800c5b8:	0800d03c 	.word	0x0800d03c

0800c5bc <memcpy>:
 800c5bc:	b510      	push	{r4, lr}
 800c5be:	1e43      	subs	r3, r0, #1
 800c5c0:	440a      	add	r2, r1
 800c5c2:	4291      	cmp	r1, r2
 800c5c4:	d100      	bne.n	800c5c8 <memcpy+0xc>
 800c5c6:	bd10      	pop	{r4, pc}
 800c5c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5d0:	e7f7      	b.n	800c5c2 <memcpy+0x6>

0800c5d2 <memset>:
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d100      	bne.n	800c5dc <memset+0xa>
 800c5da:	4770      	bx	lr
 800c5dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e0:	e7f9      	b.n	800c5d6 <memset+0x4>
	...

0800c5e4 <siprintf>:
 800c5e4:	b40e      	push	{r1, r2, r3}
 800c5e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c5ea:	b500      	push	{lr}
 800c5ec:	b09c      	sub	sp, #112	; 0x70
 800c5ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c5f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5f6:	9104      	str	r1, [sp, #16]
 800c5f8:	9107      	str	r1, [sp, #28]
 800c5fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c5fe:	ab1d      	add	r3, sp, #116	; 0x74
 800c600:	9002      	str	r0, [sp, #8]
 800c602:	9006      	str	r0, [sp, #24]
 800c604:	4808      	ldr	r0, [pc, #32]	; (800c628 <siprintf+0x44>)
 800c606:	f853 2b04 	ldr.w	r2, [r3], #4
 800c60a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c60e:	6800      	ldr	r0, [r0, #0]
 800c610:	a902      	add	r1, sp, #8
 800c612:	9301      	str	r3, [sp, #4]
 800c614:	f000 f866 	bl	800c6e4 <_svfiprintf_r>
 800c618:	2200      	movs	r2, #0
 800c61a:	9b02      	ldr	r3, [sp, #8]
 800c61c:	701a      	strb	r2, [r3, #0]
 800c61e:	b01c      	add	sp, #112	; 0x70
 800c620:	f85d eb04 	ldr.w	lr, [sp], #4
 800c624:	b003      	add	sp, #12
 800c626:	4770      	bx	lr
 800c628:	200002b0 	.word	0x200002b0

0800c62c <__ssputs_r>:
 800c62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c630:	688e      	ldr	r6, [r1, #8]
 800c632:	4682      	mov	sl, r0
 800c634:	429e      	cmp	r6, r3
 800c636:	460c      	mov	r4, r1
 800c638:	4691      	mov	r9, r2
 800c63a:	4698      	mov	r8, r3
 800c63c:	d835      	bhi.n	800c6aa <__ssputs_r+0x7e>
 800c63e:	898a      	ldrh	r2, [r1, #12]
 800c640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c644:	d031      	beq.n	800c6aa <__ssputs_r+0x7e>
 800c646:	2302      	movs	r3, #2
 800c648:	6825      	ldr	r5, [r4, #0]
 800c64a:	6909      	ldr	r1, [r1, #16]
 800c64c:	1a6f      	subs	r7, r5, r1
 800c64e:	6965      	ldr	r5, [r4, #20]
 800c650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c654:	fb95 f5f3 	sdiv	r5, r5, r3
 800c658:	f108 0301 	add.w	r3, r8, #1
 800c65c:	443b      	add	r3, r7
 800c65e:	429d      	cmp	r5, r3
 800c660:	bf38      	it	cc
 800c662:	461d      	movcc	r5, r3
 800c664:	0553      	lsls	r3, r2, #21
 800c666:	d531      	bpl.n	800c6cc <__ssputs_r+0xa0>
 800c668:	4629      	mov	r1, r5
 800c66a:	f000 fb3b 	bl	800cce4 <_malloc_r>
 800c66e:	4606      	mov	r6, r0
 800c670:	b950      	cbnz	r0, 800c688 <__ssputs_r+0x5c>
 800c672:	230c      	movs	r3, #12
 800c674:	f8ca 3000 	str.w	r3, [sl]
 800c678:	89a3      	ldrh	r3, [r4, #12]
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c688:	463a      	mov	r2, r7
 800c68a:	6921      	ldr	r1, [r4, #16]
 800c68c:	f7ff ff96 	bl	800c5bc <memcpy>
 800c690:	89a3      	ldrh	r3, [r4, #12]
 800c692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c69a:	81a3      	strh	r3, [r4, #12]
 800c69c:	6126      	str	r6, [r4, #16]
 800c69e:	443e      	add	r6, r7
 800c6a0:	6026      	str	r6, [r4, #0]
 800c6a2:	4646      	mov	r6, r8
 800c6a4:	6165      	str	r5, [r4, #20]
 800c6a6:	1bed      	subs	r5, r5, r7
 800c6a8:	60a5      	str	r5, [r4, #8]
 800c6aa:	4546      	cmp	r6, r8
 800c6ac:	bf28      	it	cs
 800c6ae:	4646      	movcs	r6, r8
 800c6b0:	4649      	mov	r1, r9
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	6820      	ldr	r0, [r4, #0]
 800c6b6:	f000 faaf 	bl	800cc18 <memmove>
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	2000      	movs	r0, #0
 800c6be:	1b9b      	subs	r3, r3, r6
 800c6c0:	60a3      	str	r3, [r4, #8]
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	441e      	add	r6, r3
 800c6c6:	6026      	str	r6, [r4, #0]
 800c6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6cc:	462a      	mov	r2, r5
 800c6ce:	f000 fb67 	bl	800cda0 <_realloc_r>
 800c6d2:	4606      	mov	r6, r0
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	d1e1      	bne.n	800c69c <__ssputs_r+0x70>
 800c6d8:	6921      	ldr	r1, [r4, #16]
 800c6da:	4650      	mov	r0, sl
 800c6dc:	f000 fab6 	bl	800cc4c <_free_r>
 800c6e0:	e7c7      	b.n	800c672 <__ssputs_r+0x46>
	...

0800c6e4 <_svfiprintf_r>:
 800c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	b09d      	sub	sp, #116	; 0x74
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	898b      	ldrh	r3, [r1, #12]
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	061c      	lsls	r4, r3, #24
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	d50f      	bpl.n	800c718 <_svfiprintf_r+0x34>
 800c6f8:	690b      	ldr	r3, [r1, #16]
 800c6fa:	b96b      	cbnz	r3, 800c718 <_svfiprintf_r+0x34>
 800c6fc:	2140      	movs	r1, #64	; 0x40
 800c6fe:	f000 faf1 	bl	800cce4 <_malloc_r>
 800c702:	6028      	str	r0, [r5, #0]
 800c704:	6128      	str	r0, [r5, #16]
 800c706:	b928      	cbnz	r0, 800c714 <_svfiprintf_r+0x30>
 800c708:	230c      	movs	r3, #12
 800c70a:	f8c8 3000 	str.w	r3, [r8]
 800c70e:	f04f 30ff 	mov.w	r0, #4294967295
 800c712:	e0c4      	b.n	800c89e <_svfiprintf_r+0x1ba>
 800c714:	2340      	movs	r3, #64	; 0x40
 800c716:	616b      	str	r3, [r5, #20]
 800c718:	2300      	movs	r3, #0
 800c71a:	9309      	str	r3, [sp, #36]	; 0x24
 800c71c:	2320      	movs	r3, #32
 800c71e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c722:	2330      	movs	r3, #48	; 0x30
 800c724:	f04f 0b01 	mov.w	fp, #1
 800c728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c72c:	4637      	mov	r7, r6
 800c72e:	463c      	mov	r4, r7
 800c730:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d13c      	bne.n	800c7b2 <_svfiprintf_r+0xce>
 800c738:	ebb7 0a06 	subs.w	sl, r7, r6
 800c73c:	d00b      	beq.n	800c756 <_svfiprintf_r+0x72>
 800c73e:	4653      	mov	r3, sl
 800c740:	4632      	mov	r2, r6
 800c742:	4629      	mov	r1, r5
 800c744:	4640      	mov	r0, r8
 800c746:	f7ff ff71 	bl	800c62c <__ssputs_r>
 800c74a:	3001      	adds	r0, #1
 800c74c:	f000 80a2 	beq.w	800c894 <_svfiprintf_r+0x1b0>
 800c750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c752:	4453      	add	r3, sl
 800c754:	9309      	str	r3, [sp, #36]	; 0x24
 800c756:	783b      	ldrb	r3, [r7, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 809b 	beq.w	800c894 <_svfiprintf_r+0x1b0>
 800c75e:	2300      	movs	r3, #0
 800c760:	f04f 32ff 	mov.w	r2, #4294967295
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	9307      	str	r3, [sp, #28]
 800c768:	9205      	str	r2, [sp, #20]
 800c76a:	9306      	str	r3, [sp, #24]
 800c76c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c770:	931a      	str	r3, [sp, #104]	; 0x68
 800c772:	2205      	movs	r2, #5
 800c774:	7821      	ldrb	r1, [r4, #0]
 800c776:	4850      	ldr	r0, [pc, #320]	; (800c8b8 <_svfiprintf_r+0x1d4>)
 800c778:	f000 fa40 	bl	800cbfc <memchr>
 800c77c:	1c67      	adds	r7, r4, #1
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	b9d8      	cbnz	r0, 800c7ba <_svfiprintf_r+0xd6>
 800c782:	06d9      	lsls	r1, r3, #27
 800c784:	bf44      	itt	mi
 800c786:	2220      	movmi	r2, #32
 800c788:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c78c:	071a      	lsls	r2, r3, #28
 800c78e:	bf44      	itt	mi
 800c790:	222b      	movmi	r2, #43	; 0x2b
 800c792:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c796:	7822      	ldrb	r2, [r4, #0]
 800c798:	2a2a      	cmp	r2, #42	; 0x2a
 800c79a:	d016      	beq.n	800c7ca <_svfiprintf_r+0xe6>
 800c79c:	2100      	movs	r1, #0
 800c79e:	200a      	movs	r0, #10
 800c7a0:	9a07      	ldr	r2, [sp, #28]
 800c7a2:	4627      	mov	r7, r4
 800c7a4:	783b      	ldrb	r3, [r7, #0]
 800c7a6:	3401      	adds	r4, #1
 800c7a8:	3b30      	subs	r3, #48	; 0x30
 800c7aa:	2b09      	cmp	r3, #9
 800c7ac:	d950      	bls.n	800c850 <_svfiprintf_r+0x16c>
 800c7ae:	b1c9      	cbz	r1, 800c7e4 <_svfiprintf_r+0x100>
 800c7b0:	e011      	b.n	800c7d6 <_svfiprintf_r+0xf2>
 800c7b2:	2b25      	cmp	r3, #37	; 0x25
 800c7b4:	d0c0      	beq.n	800c738 <_svfiprintf_r+0x54>
 800c7b6:	4627      	mov	r7, r4
 800c7b8:	e7b9      	b.n	800c72e <_svfiprintf_r+0x4a>
 800c7ba:	4a3f      	ldr	r2, [pc, #252]	; (800c8b8 <_svfiprintf_r+0x1d4>)
 800c7bc:	463c      	mov	r4, r7
 800c7be:	1a80      	subs	r0, r0, r2
 800c7c0:	fa0b f000 	lsl.w	r0, fp, r0
 800c7c4:	4318      	orrs	r0, r3
 800c7c6:	9004      	str	r0, [sp, #16]
 800c7c8:	e7d3      	b.n	800c772 <_svfiprintf_r+0x8e>
 800c7ca:	9a03      	ldr	r2, [sp, #12]
 800c7cc:	1d11      	adds	r1, r2, #4
 800c7ce:	6812      	ldr	r2, [r2, #0]
 800c7d0:	9103      	str	r1, [sp, #12]
 800c7d2:	2a00      	cmp	r2, #0
 800c7d4:	db01      	blt.n	800c7da <_svfiprintf_r+0xf6>
 800c7d6:	9207      	str	r2, [sp, #28]
 800c7d8:	e004      	b.n	800c7e4 <_svfiprintf_r+0x100>
 800c7da:	4252      	negs	r2, r2
 800c7dc:	f043 0302 	orr.w	r3, r3, #2
 800c7e0:	9207      	str	r2, [sp, #28]
 800c7e2:	9304      	str	r3, [sp, #16]
 800c7e4:	783b      	ldrb	r3, [r7, #0]
 800c7e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c7e8:	d10d      	bne.n	800c806 <_svfiprintf_r+0x122>
 800c7ea:	787b      	ldrb	r3, [r7, #1]
 800c7ec:	1c79      	adds	r1, r7, #1
 800c7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c7f0:	d132      	bne.n	800c858 <_svfiprintf_r+0x174>
 800c7f2:	9b03      	ldr	r3, [sp, #12]
 800c7f4:	3702      	adds	r7, #2
 800c7f6:	1d1a      	adds	r2, r3, #4
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	9203      	str	r2, [sp, #12]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bfb8      	it	lt
 800c800:	f04f 33ff 	movlt.w	r3, #4294967295
 800c804:	9305      	str	r3, [sp, #20]
 800c806:	4c2d      	ldr	r4, [pc, #180]	; (800c8bc <_svfiprintf_r+0x1d8>)
 800c808:	2203      	movs	r2, #3
 800c80a:	7839      	ldrb	r1, [r7, #0]
 800c80c:	4620      	mov	r0, r4
 800c80e:	f000 f9f5 	bl	800cbfc <memchr>
 800c812:	b138      	cbz	r0, 800c824 <_svfiprintf_r+0x140>
 800c814:	2340      	movs	r3, #64	; 0x40
 800c816:	1b00      	subs	r0, r0, r4
 800c818:	fa03 f000 	lsl.w	r0, r3, r0
 800c81c:	9b04      	ldr	r3, [sp, #16]
 800c81e:	3701      	adds	r7, #1
 800c820:	4303      	orrs	r3, r0
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	7839      	ldrb	r1, [r7, #0]
 800c826:	2206      	movs	r2, #6
 800c828:	4825      	ldr	r0, [pc, #148]	; (800c8c0 <_svfiprintf_r+0x1dc>)
 800c82a:	1c7e      	adds	r6, r7, #1
 800c82c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c830:	f000 f9e4 	bl	800cbfc <memchr>
 800c834:	2800      	cmp	r0, #0
 800c836:	d035      	beq.n	800c8a4 <_svfiprintf_r+0x1c0>
 800c838:	4b22      	ldr	r3, [pc, #136]	; (800c8c4 <_svfiprintf_r+0x1e0>)
 800c83a:	b9fb      	cbnz	r3, 800c87c <_svfiprintf_r+0x198>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	3307      	adds	r3, #7
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	3308      	adds	r3, #8
 800c846:	9303      	str	r3, [sp, #12]
 800c848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84a:	444b      	add	r3, r9
 800c84c:	9309      	str	r3, [sp, #36]	; 0x24
 800c84e:	e76d      	b.n	800c72c <_svfiprintf_r+0x48>
 800c850:	fb00 3202 	mla	r2, r0, r2, r3
 800c854:	2101      	movs	r1, #1
 800c856:	e7a4      	b.n	800c7a2 <_svfiprintf_r+0xbe>
 800c858:	2300      	movs	r3, #0
 800c85a:	240a      	movs	r4, #10
 800c85c:	4618      	mov	r0, r3
 800c85e:	9305      	str	r3, [sp, #20]
 800c860:	460f      	mov	r7, r1
 800c862:	783a      	ldrb	r2, [r7, #0]
 800c864:	3101      	adds	r1, #1
 800c866:	3a30      	subs	r2, #48	; 0x30
 800c868:	2a09      	cmp	r2, #9
 800c86a:	d903      	bls.n	800c874 <_svfiprintf_r+0x190>
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d0ca      	beq.n	800c806 <_svfiprintf_r+0x122>
 800c870:	9005      	str	r0, [sp, #20]
 800c872:	e7c8      	b.n	800c806 <_svfiprintf_r+0x122>
 800c874:	fb04 2000 	mla	r0, r4, r0, r2
 800c878:	2301      	movs	r3, #1
 800c87a:	e7f1      	b.n	800c860 <_svfiprintf_r+0x17c>
 800c87c:	ab03      	add	r3, sp, #12
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	462a      	mov	r2, r5
 800c882:	4b11      	ldr	r3, [pc, #68]	; (800c8c8 <_svfiprintf_r+0x1e4>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	4640      	mov	r0, r8
 800c888:	f3af 8000 	nop.w
 800c88c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c890:	4681      	mov	r9, r0
 800c892:	d1d9      	bne.n	800c848 <_svfiprintf_r+0x164>
 800c894:	89ab      	ldrh	r3, [r5, #12]
 800c896:	065b      	lsls	r3, r3, #25
 800c898:	f53f af39 	bmi.w	800c70e <_svfiprintf_r+0x2a>
 800c89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c89e:	b01d      	add	sp, #116	; 0x74
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	ab03      	add	r3, sp, #12
 800c8a6:	9300      	str	r3, [sp, #0]
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <_svfiprintf_r+0x1e4>)
 800c8ac:	a904      	add	r1, sp, #16
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	f000 f884 	bl	800c9bc <_printf_i>
 800c8b4:	e7ea      	b.n	800c88c <_svfiprintf_r+0x1a8>
 800c8b6:	bf00      	nop
 800c8b8:	0800d004 	.word	0x0800d004
 800c8bc:	0800d00a 	.word	0x0800d00a
 800c8c0:	0800d00e 	.word	0x0800d00e
 800c8c4:	00000000 	.word	0x00000000
 800c8c8:	0800c62d 	.word	0x0800c62d

0800c8cc <_printf_common>:
 800c8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8d0:	4691      	mov	r9, r2
 800c8d2:	461f      	mov	r7, r3
 800c8d4:	688a      	ldr	r2, [r1, #8]
 800c8d6:	690b      	ldr	r3, [r1, #16]
 800c8d8:	4606      	mov	r6, r0
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	bfb8      	it	lt
 800c8de:	4613      	movlt	r3, r2
 800c8e0:	f8c9 3000 	str.w	r3, [r9]
 800c8e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8ee:	b112      	cbz	r2, 800c8f6 <_printf_common+0x2a>
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	f8c9 3000 	str.w	r3, [r9]
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	0699      	lsls	r1, r3, #26
 800c8fa:	bf42      	ittt	mi
 800c8fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c900:	3302      	addmi	r3, #2
 800c902:	f8c9 3000 	strmi.w	r3, [r9]
 800c906:	6825      	ldr	r5, [r4, #0]
 800c908:	f015 0506 	ands.w	r5, r5, #6
 800c90c:	d107      	bne.n	800c91e <_printf_common+0x52>
 800c90e:	f104 0a19 	add.w	sl, r4, #25
 800c912:	68e3      	ldr	r3, [r4, #12]
 800c914:	f8d9 2000 	ldr.w	r2, [r9]
 800c918:	1a9b      	subs	r3, r3, r2
 800c91a:	429d      	cmp	r5, r3
 800c91c:	db2a      	blt.n	800c974 <_printf_common+0xa8>
 800c91e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c922:	6822      	ldr	r2, [r4, #0]
 800c924:	3300      	adds	r3, #0
 800c926:	bf18      	it	ne
 800c928:	2301      	movne	r3, #1
 800c92a:	0692      	lsls	r2, r2, #26
 800c92c:	d42f      	bmi.n	800c98e <_printf_common+0xc2>
 800c92e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c932:	4639      	mov	r1, r7
 800c934:	4630      	mov	r0, r6
 800c936:	47c0      	blx	r8
 800c938:	3001      	adds	r0, #1
 800c93a:	d022      	beq.n	800c982 <_printf_common+0xb6>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	68e5      	ldr	r5, [r4, #12]
 800c940:	f003 0306 	and.w	r3, r3, #6
 800c944:	2b04      	cmp	r3, #4
 800c946:	bf18      	it	ne
 800c948:	2500      	movne	r5, #0
 800c94a:	f8d9 2000 	ldr.w	r2, [r9]
 800c94e:	f04f 0900 	mov.w	r9, #0
 800c952:	bf08      	it	eq
 800c954:	1aad      	subeq	r5, r5, r2
 800c956:	68a3      	ldr	r3, [r4, #8]
 800c958:	6922      	ldr	r2, [r4, #16]
 800c95a:	bf08      	it	eq
 800c95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c960:	4293      	cmp	r3, r2
 800c962:	bfc4      	itt	gt
 800c964:	1a9b      	subgt	r3, r3, r2
 800c966:	18ed      	addgt	r5, r5, r3
 800c968:	341a      	adds	r4, #26
 800c96a:	454d      	cmp	r5, r9
 800c96c:	d11b      	bne.n	800c9a6 <_printf_common+0xda>
 800c96e:	2000      	movs	r0, #0
 800c970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c974:	2301      	movs	r3, #1
 800c976:	4652      	mov	r2, sl
 800c978:	4639      	mov	r1, r7
 800c97a:	4630      	mov	r0, r6
 800c97c:	47c0      	blx	r8
 800c97e:	3001      	adds	r0, #1
 800c980:	d103      	bne.n	800c98a <_printf_common+0xbe>
 800c982:	f04f 30ff 	mov.w	r0, #4294967295
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	3501      	adds	r5, #1
 800c98c:	e7c1      	b.n	800c912 <_printf_common+0x46>
 800c98e:	2030      	movs	r0, #48	; 0x30
 800c990:	18e1      	adds	r1, r4, r3
 800c992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c996:	1c5a      	adds	r2, r3, #1
 800c998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c99c:	4422      	add	r2, r4
 800c99e:	3302      	adds	r3, #2
 800c9a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9a4:	e7c3      	b.n	800c92e <_printf_common+0x62>
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	47c0      	blx	r8
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d0e6      	beq.n	800c982 <_printf_common+0xb6>
 800c9b4:	f109 0901 	add.w	r9, r9, #1
 800c9b8:	e7d7      	b.n	800c96a <_printf_common+0x9e>
	...

0800c9bc <_printf_i>:
 800c9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9c0:	4617      	mov	r7, r2
 800c9c2:	7e0a      	ldrb	r2, [r1, #24]
 800c9c4:	b085      	sub	sp, #20
 800c9c6:	2a6e      	cmp	r2, #110	; 0x6e
 800c9c8:	4698      	mov	r8, r3
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9d0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c9d4:	f000 80bc 	beq.w	800cb50 <_printf_i+0x194>
 800c9d8:	d81a      	bhi.n	800ca10 <_printf_i+0x54>
 800c9da:	2a63      	cmp	r2, #99	; 0x63
 800c9dc:	d02e      	beq.n	800ca3c <_printf_i+0x80>
 800c9de:	d80a      	bhi.n	800c9f6 <_printf_i+0x3a>
 800c9e0:	2a00      	cmp	r2, #0
 800c9e2:	f000 80c8 	beq.w	800cb76 <_printf_i+0x1ba>
 800c9e6:	2a58      	cmp	r2, #88	; 0x58
 800c9e8:	f000 808a 	beq.w	800cb00 <_printf_i+0x144>
 800c9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9f0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c9f4:	e02a      	b.n	800ca4c <_printf_i+0x90>
 800c9f6:	2a64      	cmp	r2, #100	; 0x64
 800c9f8:	d001      	beq.n	800c9fe <_printf_i+0x42>
 800c9fa:	2a69      	cmp	r2, #105	; 0x69
 800c9fc:	d1f6      	bne.n	800c9ec <_printf_i+0x30>
 800c9fe:	6821      	ldr	r1, [r4, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ca06:	d023      	beq.n	800ca50 <_printf_i+0x94>
 800ca08:	1d11      	adds	r1, r2, #4
 800ca0a:	6019      	str	r1, [r3, #0]
 800ca0c:	6813      	ldr	r3, [r2, #0]
 800ca0e:	e027      	b.n	800ca60 <_printf_i+0xa4>
 800ca10:	2a73      	cmp	r2, #115	; 0x73
 800ca12:	f000 80b4 	beq.w	800cb7e <_printf_i+0x1c2>
 800ca16:	d808      	bhi.n	800ca2a <_printf_i+0x6e>
 800ca18:	2a6f      	cmp	r2, #111	; 0x6f
 800ca1a:	d02a      	beq.n	800ca72 <_printf_i+0xb6>
 800ca1c:	2a70      	cmp	r2, #112	; 0x70
 800ca1e:	d1e5      	bne.n	800c9ec <_printf_i+0x30>
 800ca20:	680a      	ldr	r2, [r1, #0]
 800ca22:	f042 0220 	orr.w	r2, r2, #32
 800ca26:	600a      	str	r2, [r1, #0]
 800ca28:	e003      	b.n	800ca32 <_printf_i+0x76>
 800ca2a:	2a75      	cmp	r2, #117	; 0x75
 800ca2c:	d021      	beq.n	800ca72 <_printf_i+0xb6>
 800ca2e:	2a78      	cmp	r2, #120	; 0x78
 800ca30:	d1dc      	bne.n	800c9ec <_printf_i+0x30>
 800ca32:	2278      	movs	r2, #120	; 0x78
 800ca34:	496f      	ldr	r1, [pc, #444]	; (800cbf4 <_printf_i+0x238>)
 800ca36:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ca3a:	e064      	b.n	800cb06 <_printf_i+0x14a>
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800ca42:	1d11      	adds	r1, r2, #4
 800ca44:	6019      	str	r1, [r3, #0]
 800ca46:	6813      	ldr	r3, [r2, #0]
 800ca48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e0a3      	b.n	800cb98 <_printf_i+0x1dc>
 800ca50:	f011 0f40 	tst.w	r1, #64	; 0x40
 800ca54:	f102 0104 	add.w	r1, r2, #4
 800ca58:	6019      	str	r1, [r3, #0]
 800ca5a:	d0d7      	beq.n	800ca0c <_printf_i+0x50>
 800ca5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	da03      	bge.n	800ca6c <_printf_i+0xb0>
 800ca64:	222d      	movs	r2, #45	; 0x2d
 800ca66:	425b      	negs	r3, r3
 800ca68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ca6c:	4962      	ldr	r1, [pc, #392]	; (800cbf8 <_printf_i+0x23c>)
 800ca6e:	220a      	movs	r2, #10
 800ca70:	e017      	b.n	800caa2 <_printf_i+0xe6>
 800ca72:	6820      	ldr	r0, [r4, #0]
 800ca74:	6819      	ldr	r1, [r3, #0]
 800ca76:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ca7a:	d003      	beq.n	800ca84 <_printf_i+0xc8>
 800ca7c:	1d08      	adds	r0, r1, #4
 800ca7e:	6018      	str	r0, [r3, #0]
 800ca80:	680b      	ldr	r3, [r1, #0]
 800ca82:	e006      	b.n	800ca92 <_printf_i+0xd6>
 800ca84:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca88:	f101 0004 	add.w	r0, r1, #4
 800ca8c:	6018      	str	r0, [r3, #0]
 800ca8e:	d0f7      	beq.n	800ca80 <_printf_i+0xc4>
 800ca90:	880b      	ldrh	r3, [r1, #0]
 800ca92:	2a6f      	cmp	r2, #111	; 0x6f
 800ca94:	bf14      	ite	ne
 800ca96:	220a      	movne	r2, #10
 800ca98:	2208      	moveq	r2, #8
 800ca9a:	4957      	ldr	r1, [pc, #348]	; (800cbf8 <_printf_i+0x23c>)
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800caa2:	6865      	ldr	r5, [r4, #4]
 800caa4:	2d00      	cmp	r5, #0
 800caa6:	60a5      	str	r5, [r4, #8]
 800caa8:	f2c0 809c 	blt.w	800cbe4 <_printf_i+0x228>
 800caac:	6820      	ldr	r0, [r4, #0]
 800caae:	f020 0004 	bic.w	r0, r0, #4
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d13f      	bne.n	800cb38 <_printf_i+0x17c>
 800cab8:	2d00      	cmp	r5, #0
 800caba:	f040 8095 	bne.w	800cbe8 <_printf_i+0x22c>
 800cabe:	4675      	mov	r5, lr
 800cac0:	2a08      	cmp	r2, #8
 800cac2:	d10b      	bne.n	800cadc <_printf_i+0x120>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	07da      	lsls	r2, r3, #31
 800cac8:	d508      	bpl.n	800cadc <_printf_i+0x120>
 800caca:	6923      	ldr	r3, [r4, #16]
 800cacc:	6862      	ldr	r2, [r4, #4]
 800cace:	429a      	cmp	r2, r3
 800cad0:	bfde      	ittt	le
 800cad2:	2330      	movle	r3, #48	; 0x30
 800cad4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cad8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cadc:	ebae 0305 	sub.w	r3, lr, r5
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	f8cd 8000 	str.w	r8, [sp]
 800cae6:	463b      	mov	r3, r7
 800cae8:	aa03      	add	r2, sp, #12
 800caea:	4621      	mov	r1, r4
 800caec:	4630      	mov	r0, r6
 800caee:	f7ff feed 	bl	800c8cc <_printf_common>
 800caf2:	3001      	adds	r0, #1
 800caf4:	d155      	bne.n	800cba2 <_printf_i+0x1e6>
 800caf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cafa:	b005      	add	sp, #20
 800cafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800cb04:	493c      	ldr	r1, [pc, #240]	; (800cbf8 <_printf_i+0x23c>)
 800cb06:	6822      	ldr	r2, [r4, #0]
 800cb08:	6818      	ldr	r0, [r3, #0]
 800cb0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800cb0e:	f100 0504 	add.w	r5, r0, #4
 800cb12:	601d      	str	r5, [r3, #0]
 800cb14:	d001      	beq.n	800cb1a <_printf_i+0x15e>
 800cb16:	6803      	ldr	r3, [r0, #0]
 800cb18:	e002      	b.n	800cb20 <_printf_i+0x164>
 800cb1a:	0655      	lsls	r5, r2, #25
 800cb1c:	d5fb      	bpl.n	800cb16 <_printf_i+0x15a>
 800cb1e:	8803      	ldrh	r3, [r0, #0]
 800cb20:	07d0      	lsls	r0, r2, #31
 800cb22:	bf44      	itt	mi
 800cb24:	f042 0220 	orrmi.w	r2, r2, #32
 800cb28:	6022      	strmi	r2, [r4, #0]
 800cb2a:	b91b      	cbnz	r3, 800cb34 <_printf_i+0x178>
 800cb2c:	6822      	ldr	r2, [r4, #0]
 800cb2e:	f022 0220 	bic.w	r2, r2, #32
 800cb32:	6022      	str	r2, [r4, #0]
 800cb34:	2210      	movs	r2, #16
 800cb36:	e7b1      	b.n	800ca9c <_printf_i+0xe0>
 800cb38:	4675      	mov	r5, lr
 800cb3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb3e:	fb02 3310 	mls	r3, r2, r0, r3
 800cb42:	5ccb      	ldrb	r3, [r1, r3]
 800cb44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d1f5      	bne.n	800cb3a <_printf_i+0x17e>
 800cb4e:	e7b7      	b.n	800cac0 <_printf_i+0x104>
 800cb50:	6808      	ldr	r0, [r1, #0]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	f010 0f80 	tst.w	r0, #128	; 0x80
 800cb58:	6949      	ldr	r1, [r1, #20]
 800cb5a:	d004      	beq.n	800cb66 <_printf_i+0x1aa>
 800cb5c:	1d10      	adds	r0, r2, #4
 800cb5e:	6018      	str	r0, [r3, #0]
 800cb60:	6813      	ldr	r3, [r2, #0]
 800cb62:	6019      	str	r1, [r3, #0]
 800cb64:	e007      	b.n	800cb76 <_printf_i+0x1ba>
 800cb66:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb6a:	f102 0004 	add.w	r0, r2, #4
 800cb6e:	6018      	str	r0, [r3, #0]
 800cb70:	6813      	ldr	r3, [r2, #0]
 800cb72:	d0f6      	beq.n	800cb62 <_printf_i+0x1a6>
 800cb74:	8019      	strh	r1, [r3, #0]
 800cb76:	2300      	movs	r3, #0
 800cb78:	4675      	mov	r5, lr
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	e7b1      	b.n	800cae2 <_printf_i+0x126>
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	1d11      	adds	r1, r2, #4
 800cb82:	6019      	str	r1, [r3, #0]
 800cb84:	6815      	ldr	r5, [r2, #0]
 800cb86:	2100      	movs	r1, #0
 800cb88:	6862      	ldr	r2, [r4, #4]
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f000 f836 	bl	800cbfc <memchr>
 800cb90:	b108      	cbz	r0, 800cb96 <_printf_i+0x1da>
 800cb92:	1b40      	subs	r0, r0, r5
 800cb94:	6060      	str	r0, [r4, #4]
 800cb96:	6863      	ldr	r3, [r4, #4]
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cba0:	e79f      	b.n	800cae2 <_printf_i+0x126>
 800cba2:	6923      	ldr	r3, [r4, #16]
 800cba4:	462a      	mov	r2, r5
 800cba6:	4639      	mov	r1, r7
 800cba8:	4630      	mov	r0, r6
 800cbaa:	47c0      	blx	r8
 800cbac:	3001      	adds	r0, #1
 800cbae:	d0a2      	beq.n	800caf6 <_printf_i+0x13a>
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	079b      	lsls	r3, r3, #30
 800cbb4:	d507      	bpl.n	800cbc6 <_printf_i+0x20a>
 800cbb6:	2500      	movs	r5, #0
 800cbb8:	f104 0919 	add.w	r9, r4, #25
 800cbbc:	68e3      	ldr	r3, [r4, #12]
 800cbbe:	9a03      	ldr	r2, [sp, #12]
 800cbc0:	1a9b      	subs	r3, r3, r2
 800cbc2:	429d      	cmp	r5, r3
 800cbc4:	db05      	blt.n	800cbd2 <_printf_i+0x216>
 800cbc6:	68e0      	ldr	r0, [r4, #12]
 800cbc8:	9b03      	ldr	r3, [sp, #12]
 800cbca:	4298      	cmp	r0, r3
 800cbcc:	bfb8      	it	lt
 800cbce:	4618      	movlt	r0, r3
 800cbd0:	e793      	b.n	800cafa <_printf_i+0x13e>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	464a      	mov	r2, r9
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4630      	mov	r0, r6
 800cbda:	47c0      	blx	r8
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d08a      	beq.n	800caf6 <_printf_i+0x13a>
 800cbe0:	3501      	adds	r5, #1
 800cbe2:	e7eb      	b.n	800cbbc <_printf_i+0x200>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1a7      	bne.n	800cb38 <_printf_i+0x17c>
 800cbe8:	780b      	ldrb	r3, [r1, #0]
 800cbea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbf2:	e765      	b.n	800cac0 <_printf_i+0x104>
 800cbf4:	0800d026 	.word	0x0800d026
 800cbf8:	0800d015 	.word	0x0800d015

0800cbfc <memchr>:
 800cbfc:	b510      	push	{r4, lr}
 800cbfe:	b2c9      	uxtb	r1, r1
 800cc00:	4402      	add	r2, r0
 800cc02:	4290      	cmp	r0, r2
 800cc04:	4603      	mov	r3, r0
 800cc06:	d101      	bne.n	800cc0c <memchr+0x10>
 800cc08:	2000      	movs	r0, #0
 800cc0a:	bd10      	pop	{r4, pc}
 800cc0c:	781c      	ldrb	r4, [r3, #0]
 800cc0e:	3001      	adds	r0, #1
 800cc10:	428c      	cmp	r4, r1
 800cc12:	d1f6      	bne.n	800cc02 <memchr+0x6>
 800cc14:	4618      	mov	r0, r3
 800cc16:	bd10      	pop	{r4, pc}

0800cc18 <memmove>:
 800cc18:	4288      	cmp	r0, r1
 800cc1a:	b510      	push	{r4, lr}
 800cc1c:	eb01 0302 	add.w	r3, r1, r2
 800cc20:	d803      	bhi.n	800cc2a <memmove+0x12>
 800cc22:	1e42      	subs	r2, r0, #1
 800cc24:	4299      	cmp	r1, r3
 800cc26:	d10c      	bne.n	800cc42 <memmove+0x2a>
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	4298      	cmp	r0, r3
 800cc2c:	d2f9      	bcs.n	800cc22 <memmove+0xa>
 800cc2e:	1881      	adds	r1, r0, r2
 800cc30:	1ad2      	subs	r2, r2, r3
 800cc32:	42d3      	cmn	r3, r2
 800cc34:	d100      	bne.n	800cc38 <memmove+0x20>
 800cc36:	bd10      	pop	{r4, pc}
 800cc38:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc3c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cc40:	e7f7      	b.n	800cc32 <memmove+0x1a>
 800cc42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc46:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cc4a:	e7eb      	b.n	800cc24 <memmove+0xc>

0800cc4c <_free_r>:
 800cc4c:	b538      	push	{r3, r4, r5, lr}
 800cc4e:	4605      	mov	r5, r0
 800cc50:	2900      	cmp	r1, #0
 800cc52:	d043      	beq.n	800ccdc <_free_r+0x90>
 800cc54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc58:	1f0c      	subs	r4, r1, #4
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	bfb8      	it	lt
 800cc5e:	18e4      	addlt	r4, r4, r3
 800cc60:	f000 f8d4 	bl	800ce0c <__malloc_lock>
 800cc64:	4a1e      	ldr	r2, [pc, #120]	; (800cce0 <_free_r+0x94>)
 800cc66:	6813      	ldr	r3, [r2, #0]
 800cc68:	4610      	mov	r0, r2
 800cc6a:	b933      	cbnz	r3, 800cc7a <_free_r+0x2e>
 800cc6c:	6063      	str	r3, [r4, #4]
 800cc6e:	6014      	str	r4, [r2, #0]
 800cc70:	4628      	mov	r0, r5
 800cc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc76:	f000 b8ca 	b.w	800ce0e <__malloc_unlock>
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	d90b      	bls.n	800cc96 <_free_r+0x4a>
 800cc7e:	6821      	ldr	r1, [r4, #0]
 800cc80:	1862      	adds	r2, r4, r1
 800cc82:	4293      	cmp	r3, r2
 800cc84:	bf01      	itttt	eq
 800cc86:	681a      	ldreq	r2, [r3, #0]
 800cc88:	685b      	ldreq	r3, [r3, #4]
 800cc8a:	1852      	addeq	r2, r2, r1
 800cc8c:	6022      	streq	r2, [r4, #0]
 800cc8e:	6063      	str	r3, [r4, #4]
 800cc90:	6004      	str	r4, [r0, #0]
 800cc92:	e7ed      	b.n	800cc70 <_free_r+0x24>
 800cc94:	4613      	mov	r3, r2
 800cc96:	685a      	ldr	r2, [r3, #4]
 800cc98:	b10a      	cbz	r2, 800cc9e <_free_r+0x52>
 800cc9a:	42a2      	cmp	r2, r4
 800cc9c:	d9fa      	bls.n	800cc94 <_free_r+0x48>
 800cc9e:	6819      	ldr	r1, [r3, #0]
 800cca0:	1858      	adds	r0, r3, r1
 800cca2:	42a0      	cmp	r0, r4
 800cca4:	d10b      	bne.n	800ccbe <_free_r+0x72>
 800cca6:	6820      	ldr	r0, [r4, #0]
 800cca8:	4401      	add	r1, r0
 800ccaa:	1858      	adds	r0, r3, r1
 800ccac:	4282      	cmp	r2, r0
 800ccae:	6019      	str	r1, [r3, #0]
 800ccb0:	d1de      	bne.n	800cc70 <_free_r+0x24>
 800ccb2:	6810      	ldr	r0, [r2, #0]
 800ccb4:	6852      	ldr	r2, [r2, #4]
 800ccb6:	4401      	add	r1, r0
 800ccb8:	6019      	str	r1, [r3, #0]
 800ccba:	605a      	str	r2, [r3, #4]
 800ccbc:	e7d8      	b.n	800cc70 <_free_r+0x24>
 800ccbe:	d902      	bls.n	800ccc6 <_free_r+0x7a>
 800ccc0:	230c      	movs	r3, #12
 800ccc2:	602b      	str	r3, [r5, #0]
 800ccc4:	e7d4      	b.n	800cc70 <_free_r+0x24>
 800ccc6:	6820      	ldr	r0, [r4, #0]
 800ccc8:	1821      	adds	r1, r4, r0
 800ccca:	428a      	cmp	r2, r1
 800cccc:	bf01      	itttt	eq
 800ccce:	6811      	ldreq	r1, [r2, #0]
 800ccd0:	6852      	ldreq	r2, [r2, #4]
 800ccd2:	1809      	addeq	r1, r1, r0
 800ccd4:	6021      	streq	r1, [r4, #0]
 800ccd6:	6062      	str	r2, [r4, #4]
 800ccd8:	605c      	str	r4, [r3, #4]
 800ccda:	e7c9      	b.n	800cc70 <_free_r+0x24>
 800ccdc:	bd38      	pop	{r3, r4, r5, pc}
 800ccde:	bf00      	nop
 800cce0:	20001c08 	.word	0x20001c08

0800cce4 <_malloc_r>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	1ccd      	adds	r5, r1, #3
 800cce8:	f025 0503 	bic.w	r5, r5, #3
 800ccec:	3508      	adds	r5, #8
 800ccee:	2d0c      	cmp	r5, #12
 800ccf0:	bf38      	it	cc
 800ccf2:	250c      	movcc	r5, #12
 800ccf4:	2d00      	cmp	r5, #0
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	db01      	blt.n	800ccfe <_malloc_r+0x1a>
 800ccfa:	42a9      	cmp	r1, r5
 800ccfc:	d903      	bls.n	800cd06 <_malloc_r+0x22>
 800ccfe:	230c      	movs	r3, #12
 800cd00:	6033      	str	r3, [r6, #0]
 800cd02:	2000      	movs	r0, #0
 800cd04:	bd70      	pop	{r4, r5, r6, pc}
 800cd06:	f000 f881 	bl	800ce0c <__malloc_lock>
 800cd0a:	4a23      	ldr	r2, [pc, #140]	; (800cd98 <_malloc_r+0xb4>)
 800cd0c:	6814      	ldr	r4, [r2, #0]
 800cd0e:	4621      	mov	r1, r4
 800cd10:	b991      	cbnz	r1, 800cd38 <_malloc_r+0x54>
 800cd12:	4c22      	ldr	r4, [pc, #136]	; (800cd9c <_malloc_r+0xb8>)
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	b91b      	cbnz	r3, 800cd20 <_malloc_r+0x3c>
 800cd18:	4630      	mov	r0, r6
 800cd1a:	f000 f867 	bl	800cdec <_sbrk_r>
 800cd1e:	6020      	str	r0, [r4, #0]
 800cd20:	4629      	mov	r1, r5
 800cd22:	4630      	mov	r0, r6
 800cd24:	f000 f862 	bl	800cdec <_sbrk_r>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d126      	bne.n	800cd7a <_malloc_r+0x96>
 800cd2c:	230c      	movs	r3, #12
 800cd2e:	4630      	mov	r0, r6
 800cd30:	6033      	str	r3, [r6, #0]
 800cd32:	f000 f86c 	bl	800ce0e <__malloc_unlock>
 800cd36:	e7e4      	b.n	800cd02 <_malloc_r+0x1e>
 800cd38:	680b      	ldr	r3, [r1, #0]
 800cd3a:	1b5b      	subs	r3, r3, r5
 800cd3c:	d41a      	bmi.n	800cd74 <_malloc_r+0x90>
 800cd3e:	2b0b      	cmp	r3, #11
 800cd40:	d90f      	bls.n	800cd62 <_malloc_r+0x7e>
 800cd42:	600b      	str	r3, [r1, #0]
 800cd44:	18cc      	adds	r4, r1, r3
 800cd46:	50cd      	str	r5, [r1, r3]
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f000 f860 	bl	800ce0e <__malloc_unlock>
 800cd4e:	f104 000b 	add.w	r0, r4, #11
 800cd52:	1d23      	adds	r3, r4, #4
 800cd54:	f020 0007 	bic.w	r0, r0, #7
 800cd58:	1ac3      	subs	r3, r0, r3
 800cd5a:	d01b      	beq.n	800cd94 <_malloc_r+0xb0>
 800cd5c:	425a      	negs	r2, r3
 800cd5e:	50e2      	str	r2, [r4, r3]
 800cd60:	bd70      	pop	{r4, r5, r6, pc}
 800cd62:	428c      	cmp	r4, r1
 800cd64:	bf0b      	itete	eq
 800cd66:	6863      	ldreq	r3, [r4, #4]
 800cd68:	684b      	ldrne	r3, [r1, #4]
 800cd6a:	6013      	streq	r3, [r2, #0]
 800cd6c:	6063      	strne	r3, [r4, #4]
 800cd6e:	bf18      	it	ne
 800cd70:	460c      	movne	r4, r1
 800cd72:	e7e9      	b.n	800cd48 <_malloc_r+0x64>
 800cd74:	460c      	mov	r4, r1
 800cd76:	6849      	ldr	r1, [r1, #4]
 800cd78:	e7ca      	b.n	800cd10 <_malloc_r+0x2c>
 800cd7a:	1cc4      	adds	r4, r0, #3
 800cd7c:	f024 0403 	bic.w	r4, r4, #3
 800cd80:	42a0      	cmp	r0, r4
 800cd82:	d005      	beq.n	800cd90 <_malloc_r+0xac>
 800cd84:	1a21      	subs	r1, r4, r0
 800cd86:	4630      	mov	r0, r6
 800cd88:	f000 f830 	bl	800cdec <_sbrk_r>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d0cd      	beq.n	800cd2c <_malloc_r+0x48>
 800cd90:	6025      	str	r5, [r4, #0]
 800cd92:	e7d9      	b.n	800cd48 <_malloc_r+0x64>
 800cd94:	bd70      	pop	{r4, r5, r6, pc}
 800cd96:	bf00      	nop
 800cd98:	20001c08 	.word	0x20001c08
 800cd9c:	20001c0c 	.word	0x20001c0c

0800cda0 <_realloc_r>:
 800cda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda2:	4607      	mov	r7, r0
 800cda4:	4614      	mov	r4, r2
 800cda6:	460e      	mov	r6, r1
 800cda8:	b921      	cbnz	r1, 800cdb4 <_realloc_r+0x14>
 800cdaa:	4611      	mov	r1, r2
 800cdac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cdb0:	f7ff bf98 	b.w	800cce4 <_malloc_r>
 800cdb4:	b922      	cbnz	r2, 800cdc0 <_realloc_r+0x20>
 800cdb6:	f7ff ff49 	bl	800cc4c <_free_r>
 800cdba:	4625      	mov	r5, r4
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc0:	f000 f826 	bl	800ce10 <_malloc_usable_size_r>
 800cdc4:	4284      	cmp	r4, r0
 800cdc6:	d90f      	bls.n	800cde8 <_realloc_r+0x48>
 800cdc8:	4621      	mov	r1, r4
 800cdca:	4638      	mov	r0, r7
 800cdcc:	f7ff ff8a 	bl	800cce4 <_malloc_r>
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d0f2      	beq.n	800cdbc <_realloc_r+0x1c>
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4622      	mov	r2, r4
 800cdda:	f7ff fbef 	bl	800c5bc <memcpy>
 800cdde:	4631      	mov	r1, r6
 800cde0:	4638      	mov	r0, r7
 800cde2:	f7ff ff33 	bl	800cc4c <_free_r>
 800cde6:	e7e9      	b.n	800cdbc <_realloc_r+0x1c>
 800cde8:	4635      	mov	r5, r6
 800cdea:	e7e7      	b.n	800cdbc <_realloc_r+0x1c>

0800cdec <_sbrk_r>:
 800cdec:	b538      	push	{r3, r4, r5, lr}
 800cdee:	2300      	movs	r3, #0
 800cdf0:	4c05      	ldr	r4, [pc, #20]	; (800ce08 <_sbrk_r+0x1c>)
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	4608      	mov	r0, r1
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	f7f3 feda 	bl	8000bb0 <_sbrk>
 800cdfc:	1c43      	adds	r3, r0, #1
 800cdfe:	d102      	bne.n	800ce06 <_sbrk_r+0x1a>
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	b103      	cbz	r3, 800ce06 <_sbrk_r+0x1a>
 800ce04:	602b      	str	r3, [r5, #0]
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	2000397c 	.word	0x2000397c

0800ce0c <__malloc_lock>:
 800ce0c:	4770      	bx	lr

0800ce0e <__malloc_unlock>:
 800ce0e:	4770      	bx	lr

0800ce10 <_malloc_usable_size_r>:
 800ce10:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f1a0 0004 	sub.w	r0, r0, #4
 800ce1a:	bfbc      	itt	lt
 800ce1c:	580b      	ldrlt	r3, [r1, r0]
 800ce1e:	18c0      	addlt	r0, r0, r3
 800ce20:	4770      	bx	lr
	...

0800ce24 <_init>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	bf00      	nop
 800ce28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce2a:	bc08      	pop	{r3}
 800ce2c:	469e      	mov	lr, r3
 800ce2e:	4770      	bx	lr

0800ce30 <_fini>:
 800ce30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce32:	bf00      	nop
 800ce34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce36:	bc08      	pop	{r3}
 800ce38:	469e      	mov	lr, r3
 800ce3a:	4770      	bx	lr
