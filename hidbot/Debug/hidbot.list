
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb9c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800ccac  0800ccac  0001ccac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800ceac  0800ceac  0001ceac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000314  20000000  0800ceb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003664  20000314  0800d1c4  00020314  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003978  0800d1c4  00023978  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029fc9  00000000  00000000  0002033d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005dfa  00000000  00000000  0004a306  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ad8  00000000  00000000  00050100  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017f0  00000000  00000000  00051bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f087  00000000  00000000  000533c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008167  00000000  00000000  0006244f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006a5b6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006e3c  00000000  00000000  0006a634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000314 	.word	0x20000314
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cc94 	.word	0x0800cc94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000318 	.word	0x20000318
 800014c:	0800cc94 	.word	0x0800cc94

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f000 fefd 	bl	8000f5a <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 fb9d 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001c08 	.word	0x20001c08
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	20000334 	.word	0x20000334
 80001e0:	20000388 	.word	0x20000388

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000588 	.word	0x20000588
 8000214:	200005dc 	.word	0x200005dc

08000218 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
const uint32_t test1 = 12345;
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0ba      	sub	sp, #232	; 0xe8
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800022e:	4618      	mov	r0, r3
 8000230:	f008 ff54 	bl	80090dc <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b6e      	ldr	r3, [pc, #440]	; (80003f0 <MX_FREERTOS_Init+0x1d8>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b6e      	ldr	r3, [pc, #440]	; (80003f4 <MX_FREERTOS_Init+0x1dc>)
 800023c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f008 feca 	bl	8008fe8 <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b68      	ldr	r3, [pc, #416]	; (80003f8 <MX_FREERTOS_Init+0x1e0>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b68      	ldr	r3, [pc, #416]	; (80003fc <MX_FREERTOS_Init+0x1e4>)
 800025c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f008 feba 	bl	8008fe8 <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b62      	ldr	r3, [pc, #392]	; (8000400 <MX_FREERTOS_Init+0x1e8>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

	/*buttons off oneshot time def.*/
	osTimerDef(buttons_off_tmr, Buttons_Off_Callback);
 800027a:	4b62      	ldr	r3, [pc, #392]	; (8000404 <MX_FREERTOS_Init+0x1ec>)
 800027c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	Buttons_Off_Tmr_Handle = osTimerCreate(osTimer(buttons_off_tmr), osTimerOnce,
 8000286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800028a:	2200      	movs	r2, #0
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f008 feaa 	bl	8008fe8 <osTimerCreate>
 8000294:	4602      	mov	r2, r0
 8000296:	4b5c      	ldr	r3, [pc, #368]	; (8000408 <MX_FREERTOS_Init+0x1f0>)
 8000298:	601a      	str	r2, [r3, #0]
	NULL);

//NF20211125_MEM_KEY_ENTRY======================================================
   char tmr_name[10];
   for(int i = 0; i < HID_ENTRY_TIMERS_NUM;i++ ){
 800029a:	2300      	movs	r3, #0
 800029c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80002a0:	e021      	b.n	80002e6 <MX_FREERTOS_Init+0xce>
	   sprintf(tmr_name, "t%d",i);
 80002a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80002a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80002aa:	4958      	ldr	r1, [pc, #352]	; (800040c <MX_FREERTOS_Init+0x1f4>)
 80002ac:	4618      	mov	r0, r3
 80002ae:	f00c f8d1 	bl	800c454 <siprintf>
	   const osTimerDef_t tmr_name = { (hid_entry_tmr_callback_array[i]), NULL};
 80002b2:	4a57      	ldr	r2, [pc, #348]	; (8000410 <MX_FREERTOS_Init+0x1f8>)
 80002b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
	   hid_entry_tmr_handle_arr[i] = osTimerCreate(&tmr_name, osTimerOnce,
 80002c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f008 fe8c 	bl	8008fe8 <osTimerCreate>
 80002d0:	4601      	mov	r1, r0
 80002d2:	4a50      	ldr	r2, [pc, #320]	; (8000414 <MX_FREERTOS_Init+0x1fc>)
 80002d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for(int i = 0; i < HID_ENTRY_TIMERS_NUM;i++ ){
 80002dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002e0:	3301      	adds	r3, #1
 80002e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80002e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002ea:	2b09      	cmp	r3, #9
 80002ec:	ddd9      	ble.n	80002a2 <MX_FREERTOS_Init+0x8a>
//NF_20211115_HID_COMMAND==============================================Е========

	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 80002ee:	4b4a      	ldr	r3, [pc, #296]	; (8000418 <MX_FREERTOS_Init+0x200>)
 80002f0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80002f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 80002fa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80002fe:	2100      	movs	r1, #0
 8000300:	4618      	mov	r0, r3
 8000302:	f008 ff03 	bl	800910c <osMessageCreate>
 8000306:	4602      	mov	r2, r0
 8000308:	4b44      	ldr	r3, [pc, #272]	; (800041c <MX_FREERTOS_Init+0x204>)
 800030a:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 800030c:	4b42      	ldr	r3, [pc, #264]	; (8000418 <MX_FREERTOS_Init+0x200>)
 800030e:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 8000318:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f008 fef4 	bl	800910c <osMessageCreate>
 8000324:	4602      	mov	r2, r0
 8000326:	4b3e      	ldr	r3, [pc, #248]	; (8000420 <MX_FREERTOS_Init+0x208>)
 8000328:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800032a:	4b3e      	ldr	r3, [pc, #248]	; (8000424 <MX_FREERTOS_Init+0x20c>)
 800032c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8000330:	461d      	mov	r5, r3
 8000332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800033a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800033e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000342:	2100      	movs	r1, #0
 8000344:	4618      	mov	r0, r3
 8000346:	f008 fdef 	bl	8008f28 <osThreadCreate>
 800034a:	4602      	mov	r2, r0
 800034c:	4b36      	ldr	r3, [pc, #216]	; (8000428 <MX_FREERTOS_Init+0x210>)
 800034e:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 8000350:	4b36      	ldr	r3, [pc, #216]	; (800042c <MX_FREERTOS_Init+0x214>)
 8000352:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000356:	461d      	mov	r5, r3
 8000358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 8000364:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f008 fddc 	bl	8008f28 <osThreadCreate>
 8000370:	4602      	mov	r2, r0
 8000372:	4b2f      	ldr	r3, [pc, #188]	; (8000430 <MX_FREERTOS_Init+0x218>)
 8000374:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000376:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <MX_FREERTOS_Init+0x21c>)
 8000378:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800037c:	461d      	mov	r5, r3
 800037e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 800038a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f008 fdc9 	bl	8008f28 <osThreadCreate>
 8000396:	4602      	mov	r2, r0
 8000398:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_FREERTOS_Init+0x220>)
 800039a:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <MX_FREERTOS_Init+0x224>)
 800039e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80003a2:	461d      	mov	r5, r3
 80003a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 80003b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f008 fdb6 	bl	8008f28 <osThreadCreate>
 80003bc:	4602      	mov	r2, r0
 80003be:	4b20      	ldr	r3, [pc, #128]	; (8000440 <MX_FREERTOS_Init+0x228>)
 80003c0:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_FREERTOS_Init+0x22c>)
 80003c4:	f107 040c 	add.w	r4, r7, #12
 80003c8:	461d      	mov	r5, r3
 80003ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f008 fda3 	bl	8008f28 <osThreadCreate>
 80003e2:	4602      	mov	r2, r0
 80003e4:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_FREERTOS_Init+0x230>)
 80003e6:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

}
 80003e8:	bf00      	nop
 80003ea:	37e8      	adds	r7, #232	; 0xe8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bdb0      	pop	{r4, r5, r7, pc}
 80003f0:	20001c54 	.word	0x20001c54
 80003f4:	08000491 	.word	0x08000491
 80003f8:	20001c48 	.word	0x20001c48
 80003fc:	080004d9 	.word	0x080004d9
 8000400:	20001c14 	.word	0x20001c14
 8000404:	08000549 	.word	0x08000549
 8000408:	20001c4c 	.word	0x20001c4c
 800040c:	0800ccac 	.word	0x0800ccac
 8000410:	20000000 	.word	0x20000000
 8000414:	20001c18 	.word	0x20001c18
 8000418:	0800ccb0 	.word	0x0800ccb0
 800041c:	20001c60 	.word	0x20001c60
 8000420:	20001c40 	.word	0x20001c40
 8000424:	0800cccc 	.word	0x0800cccc
 8000428:	20001c10 	.word	0x20001c10
 800042c:	0800ccf4 	.word	0x0800ccf4
 8000430:	20001c5c 	.word	0x20001c5c
 8000434:	0800cd1c 	.word	0x0800cd1c
 8000438:	20001c58 	.word	0x20001c58
 800043c:	0800cd44 	.word	0x0800cd44
 8000440:	20001c44 	.word	0x20001c44
 8000444:	0800cd70 	.word	0x0800cd70
 8000448:	20001c50 	.word	0x20001c50

0800044c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000454:	f00b fb50 	bl	800baf8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1; //HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <StartDefaultTask+0x30>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 800045e:	f00b fb4b 	bl	800baf8 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 8000462:	2301      	movs	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 8000466:	2301      	movs	r3, #1
 8000468:	73bb      	strb	r3, [r7, #14]

	init_hid();
 800046a:	f000 f947 	bl	80006fc <init_hid>
//				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
//
//			}
//			tst = 0;
//		}
		osDelay(1);
 800046e:	2001      	movs	r0, #1
 8000470:	f008 fda6 	bl	8008fc0 <osDelay>
		vTaskSuspend(NULL);
 8000474:	2000      	movs	r0, #0
 8000476:	f00a f9ed 	bl	800a854 <vTaskSuspend>
		osDelay(1);
 800047a:	e7f8      	b.n	800046e <StartDefaultTask+0x22>
 800047c:	20000330 	.word	0x20000330

08000480 <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000488:	2001      	movs	r0, #1
 800048a:	f008 fd99 	bl	8008fc0 <osDelay>
 800048e:	e7fb      	b.n	8000488 <Start_Ram_MSD_Task+0x8>

08000490 <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <delay_click_event_tmr_Callback+0x3c>)
 800049a:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 800049c:	2300      	movs	r3, #0
 800049e:	81fb      	strh	r3, [r7, #14]
 80004a0:	e007      	b.n	80004b2 <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 80004a2:	89fb      	ldrh	r3, [r7, #14]
 80004a4:	68ba      	ldr	r2, [r7, #8]
 80004a6:	4413      	add	r3, r2
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 80004ac:	89fb      	ldrh	r3, [r7, #14]
 80004ae:	3301      	adds	r3, #1
 80004b0:	81fb      	strh	r3, [r7, #14]
 80004b2:	89fb      	ldrh	r3, [r7, #14]
 80004b4:	2b19      	cmp	r3, #25
 80004b6:	d9f4      	bls.n	80004a2 <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 80004b8:	221c      	movs	r2, #28
 80004ba:	4905      	ldr	r1, [pc, #20]	; (80004d0 <delay_click_event_tmr_Callback+0x40>)
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <delay_click_event_tmr_Callback+0x44>)
 80004be:	f007 fb55 	bl	8007b6c <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 80004c2:	bf00      	nop
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20001c66 	.word	0x20001c66
 80004d0:	20001c64 	.word	0x20001c64
 80004d4:	200031c4 	.word	0x200031c4

080004d8 <periodic_click_event_Callback>:
//test1
#define TEST_STR_LEN 12
char test_str[TEST_STR_LEN] = "osalexandeko";

/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
//		i = 1;
//		hid_state.mouseHID.x=-100;
//	}
///////////////////////////////////////////////////////////////////////////////////////
	static uint16_t i = 0;
	hid_state.curr_hid_type = KEYBOARD_TYPE;
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <periodic_click_event_Callback+0x5c>)
 80004e2:	220f      	movs	r2, #15
 80004e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hid_state.keyboardHID.k_a = test_str[i++] - 0x5D;
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <periodic_click_event_Callback+0x60>)
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	b291      	uxth	r1, r2
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <periodic_click_event_Callback+0x60>)
 80004f2:	8011      	strh	r1, [r2, #0]
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <periodic_click_event_Callback+0x64>)
 80004f8:	5c9b      	ldrb	r3, [r3, r2]
 80004fa:	3b5d      	subs	r3, #93	; 0x5d
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <periodic_click_event_Callback+0x5c>)
 8000500:	709a      	strb	r2, [r3, #2]
	hid_state.keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_SHIFT;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <periodic_click_event_Callback+0x5c>)
 8000504:	2202      	movs	r2, #2
 8000506:	705a      	strb	r2, [r3, #1]
	if (TEST_STR_LEN <= i) {
 8000508:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <periodic_click_event_Callback+0x60>)
 800050a:	881b      	ldrh	r3, [r3, #0]
 800050c:	2b0b      	cmp	r3, #11
 800050e:	d902      	bls.n	8000516 <periodic_click_event_Callback+0x3e>
		i = 0;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <periodic_click_event_Callback+0x60>)
 8000512:	2200      	movs	r2, #0
 8000514:	801a      	strh	r2, [r3, #0]
	}
	//hid_state.keyboardHID.k_b = USB_HID_KEY_B;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000516:	221c      	movs	r2, #28
 8000518:	4906      	ldr	r1, [pc, #24]	; (8000534 <periodic_click_event_Callback+0x5c>)
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <periodic_click_event_Callback+0x68>)
 800051c:	f007 fb26 	bl	8007b6c <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));

	osTimerStart(Buttons_Off_Tmr_Handle, 100);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <periodic_click_event_Callback+0x6c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2164      	movs	r1, #100	; 0x64
 8000526:	4618      	mov	r0, r3
 8000528:	f008 fd92 	bl	8009050 <osTimerStart>

}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20001c64 	.word	0x20001c64
 8000538:	200009dc 	.word	0x200009dc
 800053c:	20000028 	.word	0x20000028
 8000540:	200031c4 	.word	0x200031c4
 8000544:	20001c4c 	.word	0x20001c4c

08000548 <Buttons_Off_Callback>:

/**
 * Callback to switch buttons off.
 * @param argument
 */
void Buttons_Off_Callback(void const * argument) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//hid_state.curr_hid_type = KEYBOARD_TYPE;
	hid_state.keyboardHID.k_a = 0;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <Buttons_Off_Callback+0x20>)
 8000552:	2200      	movs	r2, #0
 8000554:	709a      	strb	r2, [r3, #2]
	//hid_state.keyboardHID.k_b = 0;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000556:	221c      	movs	r2, #28
 8000558:	4903      	ldr	r1, [pc, #12]	; (8000568 <Buttons_Off_Callback+0x20>)
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <Buttons_Off_Callback+0x24>)
 800055c:	f007 fb06 	bl	8007b6c <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20001c64 	.word	0x20001c64
 800056c:	200031c4 	.word	0x200031c4

08000570 <hid_entry_tmr_callback_0>:

//NF20211125_MEM_KEY_ENTRY======================================================
void hid_entry_tmr_callback_0(void const * argument){
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	int a =0;
 8000578:	2300      	movs	r3, #0
 800057a:	60fb      	str	r3, [r7, #12]
	a++;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
	return;
 8000582:	bf00      	nop
}
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <hid_entry_tmr_callback_1>:
void hid_entry_tmr_callback_1(void const * argument){
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	int a =0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	a++;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	3301      	adds	r3, #1
 800059c:	60fb      	str	r3, [r7, #12]
	return;
 800059e:	bf00      	nop
}
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <hid_entry_tmr_callback_2>:

void hid_entry_tmr_callback_2(void const * argument){
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	int a =0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
	a++;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
	return;
 80005ba:	bf00      	nop
}
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <hid_entry_tmr_callback_3>:
void hid_entry_tmr_callback_3(void const * argument){
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	int a =0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
	a++;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
	return;
 80005d6:	bf00      	nop
}
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <hid_entry_tmr_callback_4>:

void hid_entry_tmr_callback_4(void const * argument){
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	int a =0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
	a++;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
	return;
 80005f2:	bf00      	nop
}
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <hid_entry_tmr_callback_5>:
void hid_entry_tmr_callback_5(void const * argument){
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	int a =0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
	a++;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3301      	adds	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
	return;
 800060e:	bf00      	nop
}
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <hid_entry_tmr_callback_6>:

void hid_entry_tmr_callback_6(void const * argument){
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	int a =0;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	a++;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
	return;
 800062a:	bf00      	nop
}
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr

08000634 <hid_entry_tmr_callback_7>:
void hid_entry_tmr_callback_7(void const * argument){
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	int a =0;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
	a++;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
	return;
 8000646:	bf00      	nop
}
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <hid_entry_tmr_callback_8>:

void hid_entry_tmr_callback_8(void const * argument){
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	int a =0;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
	a++;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
	return;
 8000662:	bf00      	nop
}
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <hid_entry_tmr_callback_9>:
void hid_entry_tmr_callback_9(void const * argument){
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	int a =0;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
	a++;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
	return;
 800067e:	bf00      	nop
}
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <Start_Hid_Task>:
}
//==============================================================================


/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	//uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
	//static uint8_t bit_select = 0x01;

	//osTimerStart(Left_Shift_Off_Tmr_Handle, 1000);

	osDelay(100);
 8000690:	2064      	movs	r0, #100	; 0x64
 8000692:	f008 fc95 	bl	8008fc0 <osDelay>

	//test1
	for (int i = 0; i < HID_ENTRY_TIMERS_NUM; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e00f      	b.n	80006bc <Start_Hid_Task+0x34>

		osTimerStart(hid_entry_tmr_handle_arr[i], 100 + 10 * i);
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <Start_Hid_Task+0x44>)
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006a4:	68fa      	ldr	r2, [r7, #12]
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	3364      	adds	r3, #100	; 0x64
 80006b0:	4619      	mov	r1, r3
 80006b2:	f008 fccd 	bl	8009050 <osTimerStart>
	for (int i = 0; i < HID_ENTRY_TIMERS_NUM; i++) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	2b09      	cmp	r3, #9
 80006c0:	ddec      	ble.n	800069c <Start_Hid_Task+0x14>
	}

	/* Infinite loop */
	for (;;) {
//		//test1
		osDelay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f008 fc7c 	bl	8008fc0 <osDelay>
 80006c8:	e7fb      	b.n	80006c2 <Start_Hid_Task+0x3a>
 80006ca:	bf00      	nop
 80006cc:	20001c18 	.word	0x20001c18

080006d0 <Start_Usb_Task>:
 	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f008 fc71 	bl	8008fc0 <osDelay>
		vTaskSuspend(NULL);
 80006de:	2000      	movs	r0, #0
 80006e0:	f00a f8b8 	bl	800a854 <vTaskSuspend>
		osDelay(1);
 80006e4:	e7f8      	b.n	80006d8 <Start_Usb_Task+0x8>

080006e6 <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b082      	sub	sp, #8
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f00a f8b0 	bl	800a854 <vTaskSuspend>
	//osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f008 fc63 	bl	8008fc0 <osDelay>
 80006fa:	e7fb      	b.n	80006f4 <Start_Mouse_Task+0xe>

080006fc <init_hid>:
//	(hid_state.mouseHID.buttons) ?
//			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);
//
//}

uint8_t init_hid(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <init_hid+0x20>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <init_hid+0x20>)
 8000708:	2200      	movs	r2, #0
 800070a:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <init_hid+0x20>)
 800070e:	2202      	movs	r2, #2
 8000710:	771a      	strb	r2, [r3, #28]
	return 0;
 8000712:	2300      	movs	r3, #0
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20001c64 	.word	0x20001c64

08000720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <MX_GPIO_Init+0x7c>)
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0x7c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_GPIO_Init+0x7c>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0320 	and.w	r3, r3, #32
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_GPIO_Init+0x7c>)
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_GPIO_Init+0x7c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_GPIO_Init+0x7c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0308 	and.w	r3, r3, #8
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4a0d      	ldr	r2, [pc, #52]	; (800079c <MX_GPIO_Init+0x7c>)
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_GPIO_Init+0x7c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_GPIO_Init+0x7c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0x80>)
 8000790:	f000 fc00 	bl	8000f94 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010c00 	.word	0x40010c00

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f000 fac8 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f80d 	bl	80007ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b0:	f7ff ffb6 	bl	8000720 <MX_GPIO_Init>
  MX_CRC_Init();
 80007b4:	f7ff fccc 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 80007b8:	f000 f95e 	bl	8000a78 <MX_TIM1_Init>
  MX_FATFS_Init();
 80007bc:	f005 fdda 	bl	8006374 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007c0:	f7ff fd2a 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007c4:	f008 fba9 	bl	8008f1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <main+0x24>

080007ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b094      	sub	sp, #80	; 0x50
 80007ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d4:	2228      	movs	r2, #40	; 0x28
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f00b fe32 	bl	800c442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fa:	2301      	movs	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000816:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000820:	4618      	mov	r0, r3
 8000822:	f002 fa21 	bl	8002c68 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800082c:	f000 f83a 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000840:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2101      	movs	r1, #1
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fc8b 	bl	8003168 <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000858:	f000 f824 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800085c:	2310      	movs	r3, #16
 800085e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000864:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fe35 	bl	80034d8 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000874:	f000 f816 	bl	80008a4 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	; 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d101      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000892:	f000 fa69 	bl	8000d68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40000800 	.word	0x40000800

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008aa:	e7fe      	b.n	80008aa <Error_Handler+0x6>

080008ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008b2:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_MspInit+0x68>)
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <HAL_MspInit+0x68>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6193      	str	r3, [r2, #24]
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_MspInit+0x68>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <HAL_MspInit+0x68>)
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_MspInit+0x68>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	61d3      	str	r3, [r2, #28]
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_MspInit+0x68>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210f      	movs	r1, #15
 80008e6:	f06f 0001 	mvn.w	r0, #1
 80008ea:	f000 fb0c 	bl	8000f06 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <HAL_MspInit+0x6c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_MspInit+0x6c>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40010000 	.word	0x40010000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	201e      	movs	r0, #30
 8000932:	f000 fae8 	bl	8000f06 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000936:	201e      	movs	r0, #30
 8000938:	f000 fb01 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_InitTick+0xa0>)
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_InitTick+0xa0>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	61d3      	str	r3, [r2, #28]
 8000948:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_InitTick+0xa0>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fd6c 	bl	800343c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000964:	f002 fd56 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 8000968:	4603      	mov	r3, r0
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <HAL_InitTick+0xa4>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_InitTick+0xa8>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_InitTick+0xac>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_InitTick+0xa8>)
 8000984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_InitTick+0xa8>)
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_InitTick+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_InitTick+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_InitTick+0xa8>)
 800099e:	f002 fe51 	bl	8003644 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_InitTick+0xa8>)
 80009aa:	f002 fe9b 	bl	80036e4 <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	20001c88 	.word	0x20001c88
 80009c8:	40000800 	.word	0x40000800

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
	...

080009f8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80009fe:	f000 fd54 	bl	80014aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20003688 	.word	0x20003688

08000a0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM4_IRQHandler+0x10>)
 8000a12:	f002 feb9 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20001c88 	.word	0x20001c88

08000a20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x50>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x16>
		heap_end = &end;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <_sbrk+0x50>)
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <_sbrk+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <_sbrk+0x50>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <_sbrk+0x50>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4413      	add	r3, r2
 8000a44:	466a      	mov	r2, sp
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d907      	bls.n	8000a5a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000a4a:	f00b fcc5 	bl	800c3d8 <__errno>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	230c      	movs	r3, #12
 8000a52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	e006      	b.n	8000a68 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <_sbrk+0x50>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <_sbrk+0x50>)
 8000a64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200009e0 	.word	0x200009e0
 8000a74:	20003978 	.word	0x20003978

08000a78 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a94:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000a96:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <MX_TIM1_Init+0x9c>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac0:	4813      	ldr	r0, [pc, #76]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ac2:	f002 fdbf 	bl	8003644 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000acc:	f7ff feea 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000ade:	f002 ff5b 	bl	8003998 <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ae8:	f7ff fedc 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000af4:	463b      	mov	r3, r7
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_TIM1_Init+0x98>)
 8000afa:	f003 f921 	bl	8003d40 <HAL_TIMEx_MasterConfigSynchronization>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b04:	f7ff fece 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20001cd0 	.word	0x20001cd0
 8000b14:	40012c00 	.word	0x40012c00

08000b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <HAL_TIM_Base_MspInit+0x34>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d10b      	bne.n	8000b42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_TIM_Base_MspInit+0x38>)
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_TIM_Base_MspInit+0x38>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_TIM_Base_MspInit+0x38>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40012c00 	.word	0x40012c00
 8000b50:	40021000 	.word	0x40021000

08000b54 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000b5e:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	60b9      	str	r1, [r7, #8]
 8000b74:	607a      	str	r2, [r7, #4]
 8000b76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000b86:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000b9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000bb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4603      	mov	r3, r0
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	025b      	lsls	r3, r3, #9
 8000bd8:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000bde:	89bb      	ldrh	r3, [r7, #12]
 8000be0:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	e00f      	b.n	8000c08 <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000be8:	69fa      	ldr	r2, [r7, #28]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <STORAGE_Read_FS+0x60>)
 8000bf0:	5cd3      	ldrb	r3, [r2, r3]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	7dfa      	ldrb	r2, [r7, #23]
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	3301      	adds	r3, #1
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8e9      	bhi.n	8000be8 <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000c14:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20001d18 	.word	0x20001d18

08000c24 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4603      	mov	r3, r0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	4613      	mov	r3, r2
 8000c36:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	025b      	lsls	r3, r3, #9
 8000c3c:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	e00e      	b.n	8000c66 <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	4413      	add	r3, r2
 8000c58:	7dfa      	ldrb	r2, [r7, #23]
 8000c5a:	b2d1      	uxtb	r1, r2
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <STORAGE_Write_FS+0x64>)
 8000c5e:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	3301      	adds	r3, #1
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	89bb      	ldrh	r3, [r7, #12]
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d8ea      	bhi.n	8000c48 <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f814 	bl	8000ca0 <eof_check>
	st_info.blk_len = blk_len;
 8000c78:	89bb      	ldrh	r3, [r7, #12]
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <STORAGE_Write_FS+0x68>)
 8000c7c:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000c7e:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20001d18 	.word	0x20001d18
 8000c8c:	200009e4 	.word	0x200009e4

08000c90 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000c94:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <eof_check+0x84>)
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	8019      	strh	r1, [r3, #0]
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	0c12      	lsrs	r2, r2, #16
 8000cb8:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e022      	b.n	8000d08 <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	e017      	b.n	8000cf8 <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <eof_check+0x88>)
 8000cd0:	5cd3      	ldrb	r3, [r2, r3]
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	f107 010c 	add.w	r1, r7, #12
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	440b      	add	r3, r1
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d10e      	bne.n	8000d00 <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d803      	bhi.n	8000cf0 <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	3301      	adds	r3, #1
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	e003      	b.n	8000cf8 <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <eof_check+0x8c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e011      	b.n	8000d1c <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d9e4      	bls.n	8000cc8 <eof_check+0x28>
 8000cfe:	e000      	b.n	8000d02 <eof_check+0x62>
				break;
 8000d00:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	01db      	lsls	r3, r3, #7
 8000d10:	1a9b      	subs	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	441a      	add	r2, r3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8d2      	bhi.n	8000cc2 <eof_check+0x22>
			return;
		}	
	}
	
}
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	0800cd8c 	.word	0x0800cd8c
 8000d28:	20001d18 	.word	0x20001d18
 8000d2c:	200009e4 	.word	0x200009e4

08000d30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_Init+0x28>)
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x28>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f8cf 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fde2 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fda8 	bl	80008ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	2000005c 	.word	0x2000005c
 8000d88:	20002d18 	.word	0x20002d18

08000d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	20002d18 	.word	0x20002d18

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	f002 021f 	and.w	r2, r2, #31
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	490d      	ldr	r1, [pc, #52]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	4909      	ldr	r1, [pc, #36]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	1e5a      	subs	r2, r3, #1
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	1e59      	subs	r1, r3, #1
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff51 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff66 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ffb4 	bl	8000e90 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff83 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff59 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e00e      	b.n	8000f8a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	795b      	ldrb	r3, [r3, #5]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff f8fb 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	; 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e127      	b.n	80011f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8116 	bne.w	80011f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d034      	beq.n	8001038 <HAL_GPIO_Init+0xa4>
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d80d      	bhi.n	8000fee <HAL_GPIO_Init+0x5a>
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d02b      	beq.n	800102e <HAL_GPIO_Init+0x9a>
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d804      	bhi.n	8000fe4 <HAL_GPIO_Init+0x50>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d031      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d01c      	beq.n	800101c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fe2:	e048      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d043      	beq.n	8001070 <HAL_GPIO_Init+0xdc>
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d01b      	beq.n	8001024 <HAL_GPIO_Init+0x90>
          break;
 8000fec:	e043      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fee:	4a89      	ldr	r2, [pc, #548]	; (8001214 <HAL_GPIO_Init+0x280>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d026      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8000ff4:	4a87      	ldr	r2, [pc, #540]	; (8001214 <HAL_GPIO_Init+0x280>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d806      	bhi.n	8001008 <HAL_GPIO_Init+0x74>
 8000ffa:	4a87      	ldr	r2, [pc, #540]	; (8001218 <HAL_GPIO_Init+0x284>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d020      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8001000:	4a86      	ldr	r2, [pc, #536]	; (800121c <HAL_GPIO_Init+0x288>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01d      	beq.n	8001042 <HAL_GPIO_Init+0xae>
          break;
 8001006:	e036      	b.n	8001076 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001008:	4a85      	ldr	r2, [pc, #532]	; (8001220 <HAL_GPIO_Init+0x28c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 800100e:	4a85      	ldr	r2, [pc, #532]	; (8001224 <HAL_GPIO_Init+0x290>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d016      	beq.n	8001042 <HAL_GPIO_Init+0xae>
 8001014:	4a84      	ldr	r2, [pc, #528]	; (8001228 <HAL_GPIO_Init+0x294>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d013      	beq.n	8001042 <HAL_GPIO_Init+0xae>
          break;
 800101a:	e02c      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	623b      	str	r3, [r7, #32]
          break;
 8001022:	e028      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	3304      	adds	r3, #4
 800102a:	623b      	str	r3, [r7, #32]
          break;
 800102c:	e023      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	3308      	adds	r3, #8
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e01e      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	330c      	adds	r3, #12
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e019      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104a:	2304      	movs	r3, #4
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e012      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d105      	bne.n	8001064 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	611a      	str	r2, [r3, #16]
          break;
 8001062:	e008      	b.n	8001076 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	615a      	str	r2, [r3, #20]
          break;
 800106e:	e002      	b.n	8001076 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
          break;
 8001074:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2bff      	cmp	r3, #255	; 0xff
 800107a:	d801      	bhi.n	8001080 <HAL_GPIO_Init+0xec>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	e001      	b.n	8001084 <HAL_GPIO_Init+0xf0>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3304      	adds	r3, #4
 8001084:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2bff      	cmp	r3, #255	; 0xff
 800108a:	d802      	bhi.n	8001092 <HAL_GPIO_Init+0xfe>
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x104>
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3b08      	subs	r3, #8
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	210f      	movs	r1, #15
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	6a39      	ldr	r1, [r7, #32]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 8096 	beq.w	80011f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010c6:	4a59      	ldr	r2, [pc, #356]	; (800122c <HAL_GPIO_Init+0x298>)
 80010c8:	4b58      	ldr	r3, [pc, #352]	; (800122c <HAL_GPIO_Init+0x298>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6193      	str	r3, [r2, #24]
 80010d2:	4b56      	ldr	r3, [pc, #344]	; (800122c <HAL_GPIO_Init+0x298>)
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010de:	4a54      	ldr	r2, [pc, #336]	; (8001230 <HAL_GPIO_Init+0x29c>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x2a0>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x19e>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4a      	ldr	r2, [pc, #296]	; (8001238 <HAL_GPIO_Init+0x2a4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x19a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a49      	ldr	r2, [pc, #292]	; (800123c <HAL_GPIO_Init+0x2a8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x196>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <HAL_GPIO_Init+0x2ac>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x192>
 8001122:	2303      	movs	r3, #3
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 8001126:	2304      	movs	r3, #4
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x1a0>
 8001132:	2300      	movs	r3, #0
 8001134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001144:	493a      	ldr	r1, [pc, #232]	; (8001230 <HAL_GPIO_Init+0x29c>)
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800115e:	4939      	ldr	r1, [pc, #228]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800116c:	4935      	ldr	r1, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4013      	ands	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001186:	492f      	ldr	r1, [pc, #188]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001194:	492b      	ldr	r1, [pc, #172]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4013      	ands	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ae:	4925      	ldr	r1, [pc, #148]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011bc:	4921      	ldr	r1, [pc, #132]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4013      	ands	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d6:	491b      	ldr	r1, [pc, #108]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60cb      	str	r3, [r1, #12]
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e4:	4917      	ldr	r1, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x2b0>)
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4013      	ands	r3, r2
 80011f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3301      	adds	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	f47f aed0 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 8001208:	bf00      	nop
 800120a:	372c      	adds	r7, #44	; 0x2c
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	10210000 	.word	0x10210000
 8001218:	10110000 	.word	0x10110000
 800121c:	10120000 	.word	0x10120000
 8001220:	10310000 	.word	0x10310000
 8001224:	10320000 	.word	0x10320000
 8001228:	10220000 	.word	0x10220000
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000
 8001234:	40010800 	.word	0x40010800
 8001238:	40010c00 	.word	0x40010c00
 800123c:	40011000 	.word	0x40011000
 8001240:	40011400 	.word	0x40011400
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	b08b      	sub	sp, #44	; 0x2c
 800124c:	af06      	add	r7, sp, #24
 800124e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e0fd      	b.n	8001456 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f00a fdcc 	bl	800be0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2203      	movs	r2, #3
 8001278:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f002 fdf3 	bl	8003e6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	687e      	ldr	r6, [r7, #4]
 800128e:	466d      	mov	r5, sp
 8001290:	f106 0410 	add.w	r4, r6, #16
 8001294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	1d33      	adds	r3, r6, #4
 800129e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a0:	6838      	ldr	r0, [r7, #0]
 80012a2:	f002 fdbd 	bl	8003e20 <USB_CoreInit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e0ce      	b.n	8001456 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fdee 	bl	8003ea0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e04c      	b.n	8001364 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	440b      	add	r3, r1
 80012da:	3301      	adds	r3, #1
 80012dc:	2201      	movs	r2, #1
 80012de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	440b      	add	r3, r1
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012f4:	7bfa      	ldrb	r2, [r7, #15]
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	b298      	uxth	r0, r3
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3336      	adds	r3, #54	; 0x36
 8001308:	4602      	mov	r2, r0
 800130a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	440b      	add	r3, r1
 800131c:	3303      	adds	r3, #3
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	3338      	adds	r3, #56	; 0x38
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001336:	7bfa      	ldrb	r2, [r7, #15]
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	333c      	adds	r3, #60	; 0x3c
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	3340      	adds	r3, #64	; 0x40
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d3ad      	bcc.n	80012ca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e044      	b.n	80013fe <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800138a:	7bfa      	ldrb	r2, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	440b      	add	r3, r1
 80013c4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	3301      	adds	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3b5      	bcc.n	8001374 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	687e      	ldr	r6, [r7, #4]
 8001410:	466d      	mov	r5, sp
 8001412:	f106 0410 	add.w	r4, r6, #16
 8001416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	602b      	str	r3, [r5, #0]
 800141e:	1d33      	adds	r3, r6, #4
 8001420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f002 fd48 	bl	8003eb8 <USB_DevInit>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e00d      	b.n	8001456 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fed9 	bl	8006206 <USB_DevDisconnect>

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800145e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_PCD_Start+0x16>
 8001470:	2302      	movs	r3, #2
 8001472:	e016      	b.n	80014a2 <HAL_PCD_Start+0x44>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f002 fcdd 	bl	8003e40 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001486:	2101      	movs	r1, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f00a ff48 	bl	800c31e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fead 	bl	80061f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b088      	sub	sp, #32
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f004 feaf 	bl	800621a <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014c6:	d102      	bne.n	80014ce <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fb8e 	bl	8001bea <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fea1 	bl	800621a <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d112      	bne.n	800150a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80014f0:	b292      	uxth	r2, r2
 80014f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014f6:	b292      	uxth	r2, r2
 80014f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f00a fd00 	bl	800bf02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001502:	2100      	movs	r1, #0
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f925 	bl	8001754 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fe83 	bl	800621a <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800151e:	d10b      	bne.n	8001538 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800152c:	b292      	uxth	r2, r2
 800152e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001532:	b292      	uxth	r2, r2
 8001534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f004 fe6c 	bl	800621a <USB_ReadInterrupts>
 8001542:	4603      	mov	r3, r0
 8001544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154c:	d10b      	bne.n	8001566 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800155a:	b292      	uxth	r2, r2
 800155c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001560:	b292      	uxth	r2, r2
 8001562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fe55 	bl	800621a <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157a:	d126      	bne.n	80015ca <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001588:	b292      	uxth	r2, r2
 800158a:	f022 0204 	bic.w	r2, r2, #4
 800158e:	b292      	uxth	r2, r2
 8001590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80015a0:	b292      	uxth	r2, r2
 80015a2:	f022 0208 	bic.w	r2, r2, #8
 80015a6:	b292      	uxth	r2, r2
 80015a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f00a fce1 	bl	800bf74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80015be:	b292      	uxth	r2, r2
 80015c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015c4:	b292      	uxth	r2, r2
 80015c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f004 fe23 	bl	800621a <USB_ReadInterrupts>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015de:	f040 8084 	bne.w	80016ea <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	77fb      	strb	r3, [r7, #31]
 80015e6:	e011      	b.n	800160c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	4611      	mov	r1, r2
 80015f0:	7ffa      	ldrb	r2, [r7, #31]
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	440a      	add	r2, r1
 80015f6:	8812      	ldrh	r2, [r2, #0]
 80015f8:	b292      	uxth	r2, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	f107 0120 	add.w	r1, r7, #32
 8001600:	440b      	add	r3, r1
 8001602:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	3301      	adds	r3, #1
 800160a:	77fb      	strb	r3, [r7, #31]
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	2b07      	cmp	r3, #7
 8001610:	d9ea      	bls.n	80015e8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800161e:	b292      	uxth	r2, r2
 8001620:	f042 0201 	orr.w	r2, r2, #1
 8001624:	b292      	uxth	r2, r2
 8001626:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001636:	b292      	uxth	r2, r2
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	b292      	uxth	r2, r2
 800163e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001642:	bf00      	nop
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164c:	b29b      	uxth	r3, r3
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f6      	beq.n	8001644 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001662:	b292      	uxth	r2, r2
 8001664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001668:	b292      	uxth	r2, r2
 800166a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	77fb      	strb	r3, [r7, #31]
 8001672:	e010      	b.n	8001696 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	7ffb      	ldrb	r3, [r7, #31]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	441a      	add	r2, r3
 8001680:	7ffb      	ldrb	r3, [r7, #31]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	f107 0120 	add.w	r1, r7, #32
 8001688:	440b      	add	r3, r1
 800168a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800168e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001690:	7ffb      	ldrb	r3, [r7, #31]
 8001692:	3301      	adds	r3, #1
 8001694:	77fb      	strb	r3, [r7, #31]
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	2b07      	cmp	r3, #7
 800169a:	d9eb      	bls.n	8001674 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80016a8:	b292      	uxth	r2, r2
 80016aa:	f042 0208 	orr.w	r2, r2, #8
 80016ae:	b292      	uxth	r2, r2
 80016b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80016c0:	b292      	uxth	r2, r2
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c6:	b292      	uxth	r2, r2
 80016c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80016d8:	b292      	uxth	r2, r2
 80016da:	f042 0204 	orr.w	r2, r2, #4
 80016de:	b292      	uxth	r2, r2
 80016e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f00a fc2b 	bl	800bf40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fd93 	bl	800621a <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fe:	d10e      	bne.n	800171e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800170c:	b292      	uxth	r2, r2
 800170e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001712:	b292      	uxth	r2, r2
 8001714:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f00a fbe4 	bl	800bee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f004 fd79 	bl	800621a <USB_ReadInterrupts>
 8001728:	4603      	mov	r3, r0
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001732:	d10b      	bne.n	800174c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001740:	b292      	uxth	r2, r2
 8001742:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001746:	b292      	uxth	r2, r2
 8001748:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_PCD_SetAddress+0x1a>
 800176a:	2302      	movs	r3, #2
 800176c:	e013      	b.n	8001796 <HAL_PCD_SetAddress+0x42>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f004 fd20 	bl	80061cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	4608      	mov	r0, r1
 80017a8:	4611      	mov	r1, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	70fb      	strb	r3, [r7, #3]
 80017b0:	460b      	mov	r3, r1
 80017b2:	803b      	strh	r3, [r7, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da0e      	bge.n	80017e2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	705a      	strb	r2, [r3, #1]
 80017e0:	e00e      	b.n	8001800 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f003 0207 	and.w	r2, r3, #7
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	b2da      	uxtb	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800180c:	883a      	ldrh	r2, [r7, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	78ba      	ldrb	r2, [r7, #2]
 8001816:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800182a:	78bb      	ldrb	r3, [r7, #2]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d102      	bne.n	8001836 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2200      	movs	r2, #0
 8001834:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800183c:	2b01      	cmp	r3, #1
 800183e:	d101      	bne.n	8001844 <HAL_PCD_EP_Open+0xa6>
 8001840:	2302      	movs	r3, #2
 8001842:	e00e      	b.n	8001862 <HAL_PCD_EP_Open+0xc4>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	4618      	mov	r0, r3
 8001854:	f002 fb66 	bl	8003f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001860:	7afb      	ldrb	r3, [r7, #11]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187a:	2b00      	cmp	r3, #0
 800187c:	da0e      	bge.n	800189c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	705a      	strb	r2, [r3, #1]
 800189a:	e00e      	b.n	80018ba <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f003 0207 	and.w	r2, r3, #7
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_PCD_EP_Close+0x6a>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e00e      	b.n	80018f2 <HAL_PCD_EP_Close+0x88>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fe82 	bl	80045ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	460b      	mov	r3, r1
 8001908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	f003 0207 	and.w	r2, r3, #7
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2200      	movs	r2, #0
 8001938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	b2da      	uxtb	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	2b00      	cmp	r3, #0
 800194e:	d106      	bne.n	800195e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6979      	ldr	r1, [r7, #20]
 8001956:	4618      	mov	r0, r3
 8001958:	f003 f834 	bl	80049c4 <USB_EPStartXfer>
 800195c:	e005      	b.n	800196a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f82d 	bl	80049c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 0207 	and.w	r2, r3, #7
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	440b      	add	r3, r1
 8001992:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	460b      	mov	r3, r1
 80019b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b2:	7afb      	ldrb	r3, [r7, #11]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2201      	movs	r2, #1
 80019ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d106      	bne.n	8001a12 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6979      	ldr	r1, [r7, #20]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ffda 	bl	80049c4 <USB_EPStartXfer>
 8001a10:	e005      	b.n	8001a1e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6979      	ldr	r1, [r7, #20]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 ffd3 	bl	80049c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 0207 	and.w	r2, r3, #7
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d901      	bls.n	8001a46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e04c      	b.n	8001ae0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da0e      	bge.n	8001a6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	4613      	mov	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	705a      	strb	r2, [r3, #1]
 8001a6a:	e00c      	b.n	8001a86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_PCD_EP_SetStall+0x7e>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e01c      	b.n	8001ae0 <HAL_PCD_EP_SetStall+0xb8>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fa8c 	bl	8005fd2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d108      	bne.n	8001ad6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f004 fbb1 	bl	8006238 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	f003 020f 	and.w	r2, r3, #15
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d901      	bls.n	8001b06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e040      	b.n	8001b88 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da0e      	bge.n	8001b2c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	705a      	strb	r2, [r3, #1]
 8001b2a:	e00e      	b.n	8001b4a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 0207 	and.w	r2, r3, #7
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_EP_ClrStall+0x82>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e00e      	b.n	8001b88 <HAL_PCD_EP_ClrStall+0xa0>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68f9      	ldr	r1, [r7, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fa7a 	bl	8006072 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_Flush+0x1a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e01b      	b.n	8001be2 <HAL_PCD_EP_Flush+0x52>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	da09      	bge.n	8001bce <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f002 f996 	bl	8003ef8 <USB_FlushTxFifo>
 8001bcc:	e004      	b.n	8001bd8 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 f99b 	bl	8003f0e <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b08e      	sub	sp, #56	; 0x38
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001bf2:	e2ec      	b.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bfc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001bfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f040 8161 	bne.w	8001ed6 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d152      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3328      	adds	r3, #40	; 0x28
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c82:	2100      	movs	r1, #0
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f00a f914 	bl	800beb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 829b 	beq.w	80021ce <PCD_EP_ISR_Handler+0x5e4>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f040 8296 	bne.w	80021ce <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	b292      	uxth	r2, r2
 8001cb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cc2:	e284      	b.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001cd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d034      	beq.n	8001d48 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	f004 fada 	bl	80062d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d2e:	4013      	ands	r3, r2
 8001d30:	843b      	strh	r3, [r7, #32]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	8c3a      	ldrh	r2, [r7, #32]
 8001d38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f00a f889 	bl	800be58 <HAL_PCD_SetupStageCallback>
 8001d46:	e242      	b.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d48:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f280 823e 	bge.w	80021ce <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d5e:	4013      	ands	r3, r2
 8001d60:	83fb      	strh	r3, [r7, #30]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	8bfa      	ldrh	r2, [r7, #30]
 8001d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	3306      	adds	r3, #6
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <PCD_EP_ISR_Handler+0x1ee>
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d015      	beq.n	8001dd8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	6959      	ldr	r1, [r3, #20]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	f004 fa8a 	bl	80062d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	441a      	add	r2, r3
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f00a f852 	bl	800be7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 81f2 	bne.w	80021ce <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	4413      	add	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d112      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x24e>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	801a      	strh	r2, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	801a      	strh	r2, [r3, #0]
 8001e36:	e02f      	b.n	8001e98 <PCD_EP_ISR_Handler+0x2ae>
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8001e3e:	d813      	bhi.n	8001e68 <PCD_EP_ISR_Handler+0x27e>
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <PCD_EP_ISR_Handler+0x270>
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	3301      	adds	r3, #1
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e017      	b.n	8001e98 <PCD_EP_ISR_Handler+0x2ae>
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <PCD_EP_ISR_Handler+0x298>
 8001e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
 8001e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea8:	827b      	strh	r3, [r7, #18]
 8001eaa:	8a7b      	ldrh	r3, [r7, #18]
 8001eac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001eb0:	827b      	strh	r3, [r7, #18]
 8001eb2:	8a7b      	ldrh	r3, [r7, #18]
 8001eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001eb8:	827b      	strh	r3, [r7, #18]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	8a7b      	ldrh	r3, [r7, #18]
 8001ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	8013      	strh	r3, [r2, #0]
 8001ed4:	e17b      	b.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ee8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f280 80ea 	bge.w	80020c6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f08:	4013      	ands	r3, r2
 8001f0a:	823b      	strh	r3, [r7, #16]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	8a3a      	ldrh	r2, [r7, #16]
 8001f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f20:	b292      	uxth	r2, r2
 8001f22:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f24:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	7b1b      	ldrb	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d122      	bne.n	8001f88 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	3306      	adds	r3, #6
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f6a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8087 	beq.w	8002082 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	6959      	ldr	r1, [r3, #20]
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	88da      	ldrh	r2, [r3, #6]
 8001f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f82:	f004 f9a8 	bl	80062d6 <USB_ReadPMA>
 8001f86:	e07c      	b.n	8002082 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	78db      	ldrb	r3, [r3, #3]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d108      	bne.n	8001fa2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f92:	461a      	mov	r2, r3
 8001f94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f927 	bl	80021ea <HAL_PCD_EP_DB_Receive>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fa0:	e06f      	b.n	8002082 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbc:	81fb      	strh	r3, [r7, #14]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	89fb      	ldrh	r3, [r7, #14]
 8001fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d021      	beq.n	8002040 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	3302      	adds	r3, #2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002024:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002028:	2b00      	cmp	r3, #0
 800202a:	d02a      	beq.n	8002082 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	6959      	ldr	r1, [r3, #20]
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	891a      	ldrh	r2, [r3, #8]
 8002038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800203a:	f004 f94c 	bl	80062d6 <USB_ReadPMA>
 800203e:	e020      	b.n	8002082 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	3306      	adds	r3, #6
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002068:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800206a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	6959      	ldr	r1, [r3, #20]
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	895a      	ldrh	r2, [r3, #10]
 800207c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800207e:	f004 f92a 	bl	80062d6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002088:	441a      	add	r2, r3
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002094:	441a      	add	r2, r3
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d004      	beq.n	80020ac <PCD_EP_ISR_Handler+0x4c2>
 80020a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d206      	bcs.n	80020ba <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f009 fee2 	bl	800be7c <HAL_PCD_DataOutStageCallback>
 80020b8:	e005      	b.n	80020c6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f002 fc7f 	bl	80049c4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d07e      	beq.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80020d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	81bb      	strh	r3, [r7, #12]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	441a      	add	r2, r3
 800210e:	89bb      	ldrh	r3, [r7, #12]
 8002110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002118:	b29b      	uxth	r3, r3
 800211a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	78db      	ldrb	r3, [r3, #3]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d00c      	beq.n	800213e <PCD_EP_ISR_Handler+0x554>
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	78db      	ldrb	r3, [r3, #3]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002130:	2b02      	cmp	r3, #2
 8002132:	d146      	bne.n	80021c2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d141      	bne.n	80021c2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002146:	b29b      	uxth	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	3302      	adds	r3, #2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	4413      	add	r3, r2
 800215c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002160:	881b      	ldrh	r3, [r3, #0]
 8002162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002166:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	897b      	ldrh	r3, [r7, #10]
 800216e:	429a      	cmp	r2, r3
 8002170:	d906      	bls.n	8002180 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	1ad2      	subs	r2, r2, r3
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	619a      	str	r2, [r3, #24]
 800217e:	e002      	b.n	8002186 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d106      	bne.n	800219c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f009 fe8c 	bl	800beb2 <HAL_PCD_DataInStageCallback>
 800219a:	e018      	b.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	897b      	ldrh	r3, [r7, #10]
 80021a2:	441a      	add	r2, r3
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	897b      	ldrh	r3, [r7, #10]
 80021ae:	441a      	add	r2, r3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fc02 	bl	80049c4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021c0:	e005      	b.n	80021ce <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021c4:	461a      	mov	r2, r3
 80021c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f91b 	bl	8002404 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	b21b      	sxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f6ff ad0a 	blt.w	8001bf4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3738      	adds	r7, #56	; 0x38
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b088      	sub	sp, #32
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d07e      	beq.n	8002300 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	3302      	adds	r3, #2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	8bfb      	ldrh	r3, [r7, #30]
 8002232:	429a      	cmp	r2, r3
 8002234:	d306      	bcc.n	8002244 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	8bfb      	ldrh	r3, [r7, #30]
 800223c:	1ad2      	subs	r2, r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	619a      	str	r2, [r3, #24]
 8002242:	e002      	b.n	800224a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d123      	bne.n	800229a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	83bb      	strh	r3, [r7, #28]
 800226e:	8bbb      	ldrh	r3, [r7, #28]
 8002270:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002274:	83bb      	strh	r3, [r7, #28]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	8bbb      	ldrh	r3, [r7, #28]
 8002286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800228a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	b29b      	uxth	r3, r3
 8002298:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01f      	beq.n	80022e4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	837b      	strh	r3, [r7, #26]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	8b7b      	ldrh	r3, [r7, #26]
 80022d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022e4:	8bfb      	ldrh	r3, [r7, #30]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8087 	beq.w	80023fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6959      	ldr	r1, [r3, #20]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	891a      	ldrh	r2, [r3, #8]
 80022f8:	8bfb      	ldrh	r3, [r7, #30]
 80022fa:	f003 ffec 	bl	80062d6 <USB_ReadPMA>
 80022fe:	e07c      	b.n	80023fa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	3306      	adds	r3, #6
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002328:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	8bfb      	ldrh	r3, [r7, #30]
 8002330:	429a      	cmp	r2, r3
 8002332:	d306      	bcc.n	8002342 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	8bfb      	ldrh	r3, [r7, #30]
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	e002      	b.n	8002348 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d123      	bne.n	8002398 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236a:	833b      	strh	r3, [r7, #24]
 800236c:	8b3b      	ldrh	r3, [r7, #24]
 800236e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002372:	833b      	strh	r3, [r7, #24]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	441a      	add	r2, r3
 8002382:	8b3b      	ldrh	r3, [r7, #24]
 8002384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002394:	b29b      	uxth	r3, r3
 8002396:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d11f      	bne.n	80023e2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023bc:	82fb      	strh	r3, [r7, #22]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	441a      	add	r2, r3
 80023cc:	8afb      	ldrh	r3, [r7, #22]
 80023ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023de:	b29b      	uxth	r3, r3
 80023e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023e2:	8bfb      	ldrh	r3, [r7, #30]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6959      	ldr	r1, [r3, #20]
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	895a      	ldrh	r2, [r3, #10]
 80023f4:	8bfb      	ldrh	r3, [r7, #30]
 80023f6:	f003 ff6e 	bl	80062d6 <USB_ReadPMA>
    }
  }

  return count;
 80023fa:	8bfb      	ldrh	r3, [r7, #30]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3720      	adds	r7, #32
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0a4      	sub	sp, #144	; 0x90
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 81dd 	beq.w	80027d8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	3302      	adds	r3, #2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002446:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	699a      	ldr	r2, [r3, #24]
 800244e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002452:	429a      	cmp	r2, r3
 8002454:	d907      	bls.n	8002466 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800245e:	1ad2      	subs	r2, r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	619a      	str	r2, [r3, #24]
 8002464:	e002      	b.n	800246c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 80bb 	bne.w	80025ec <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d126      	bne.n	80024cc <HAL_PCD_EP_DB_Transmit+0xc8>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002492:	4413      	add	r3, r2
 8002494:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	011a      	lsls	r2, r3, #4
 800249c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800249e:	4413      	add	r3, r2
 80024a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80024a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	e01a      	b.n	8002502 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	785b      	ldrb	r3, [r3, #1]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d116      	bne.n	8002502 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	677b      	str	r3, [r7, #116]	; 0x74
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e8:	4413      	add	r3, r2
 80024ea:	677b      	str	r3, [r7, #116]	; 0x74
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	011a      	lsls	r2, r3, #4
 80024f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024f4:	4413      	add	r3, r2
 80024f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024fa:	673b      	str	r3, [r7, #112]	; 0x70
 80024fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fe:	2200      	movs	r2, #0
 8002500:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d126      	bne.n	800255e <HAL_PCD_EP_DB_Transmit+0x15a>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	66bb      	str	r3, [r7, #104]	; 0x68
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800251e:	b29b      	uxth	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002524:	4413      	add	r3, r2
 8002526:	66bb      	str	r3, [r7, #104]	; 0x68
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	011a      	lsls	r2, r3, #4
 800252e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002530:	4413      	add	r3, r2
 8002532:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
 8002538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002542:	b29a      	uxth	r2, r3
 8002544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002556:	b29a      	uxth	r2, r3
 8002558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	e017      	b.n	800258e <HAL_PCD_EP_DB_Transmit+0x18a>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d113      	bne.n	800258e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002574:	4413      	add	r3, r2
 8002576:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	011a      	lsls	r2, r3, #4
 800257e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002580:	4413      	add	r3, r2
 8002582:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002586:	663b      	str	r3, [r7, #96]	; 0x60
 8002588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800258a:	2200      	movs	r2, #0
 800258c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f009 fc8c 	bl	800beb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 82f1 	beq.w	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80025d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	8013      	strh	r3, [r2, #0]
 80025ea:	e2cd      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d021      	beq.n	800263a <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800260c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002610:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002636:	b29b      	uxth	r3, r3
 8002638:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002640:	2b01      	cmp	r3, #1
 8002642:	f040 82a1 	bne.w	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800264e:	441a      	add	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800265c:	441a      	add	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	429a      	cmp	r2, r3
 800266c:	d30b      	bcc.n	8002686 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6a1a      	ldr	r2, [r3, #32]
 800267a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800267e:	1ad2      	subs	r2, r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	621a      	str	r2, [r3, #32]
 8002684:	e017      	b.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 800268e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800269e:	e00a      	b.n	80026b6 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d163      	bne.n	8002786 <HAL_PCD_EP_DB_Transmit+0x382>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d2:	4413      	add	r3, r2
 80026d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	011a      	lsls	r2, r3, #4
 80026dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026de:	4413      	add	r3, r2
 80026e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026e4:	657b      	str	r3, [r7, #84]	; 0x54
 80026e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d112      	bne.n	8002714 <HAL_PCD_EP_DB_Transmit+0x310>
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026fc:	801a      	strh	r2, [r3, #0]
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	b29b      	uxth	r3, r3
 8002704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270c:	b29a      	uxth	r2, r3
 800270e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002710:	801a      	strh	r2, [r3, #0]
 8002712:	e055      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002718:	2b3e      	cmp	r3, #62	; 0x3e
 800271a:	d817      	bhi.n	800274c <HAL_PCD_EP_DB_Transmit+0x348>
 800271c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002720:	085b      	lsrs	r3, r3, #1
 8002722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <HAL_PCD_EP_DB_Transmit+0x338>
 8002732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002736:	3301      	adds	r3, #1
 8002738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800273c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002740:	b29b      	uxth	r3, r3
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	b29a      	uxth	r2, r3
 8002746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	e039      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800274c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_PCD_EP_DB_Transmit+0x368>
 8002762:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002766:	3b01      	subs	r3, #1
 8002768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800276c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002770:	b29b      	uxth	r3, r3
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	b29b      	uxth	r3, r3
 8002776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277e:	b29a      	uxth	r2, r3
 8002780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002782:	801a      	strh	r2, [r3, #0]
 8002784:	e01c      	b.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d118      	bne.n	80027c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	653b      	str	r3, [r7, #80]	; 0x50
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279c:	b29b      	uxth	r3, r3
 800279e:	461a      	mov	r2, r3
 80027a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a2:	4413      	add	r3, r2
 80027a4:	653b      	str	r3, [r7, #80]	; 0x50
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	011a      	lsls	r2, r3, #4
 80027ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ae:	4413      	add	r3, r2
 80027b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6959      	ldr	r1, [r3, #20]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	891a      	ldrh	r2, [r3, #8]
 80027cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f003 fd3c 	bl	800624e <USB_WritePMA>
 80027d6:	e1d7      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	461a      	mov	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	3306      	adds	r3, #6
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002800:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800280c:	429a      	cmp	r2, r3
 800280e:	d307      	bcc.n	8002820 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	699a      	ldr	r2, [r3, #24]
 8002814:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002818:	1ad2      	subs	r2, r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	619a      	str	r2, [r3, #24]
 800281e:	e002      	b.n	8002826 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 80b9 	bne.w	80029a2 <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	785b      	ldrb	r3, [r3, #1]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d126      	bne.n	8002886 <HAL_PCD_EP_DB_Transmit+0x482>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	64bb      	str	r3, [r7, #72]	; 0x48
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284c:	4413      	add	r3, r2
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	011a      	lsls	r2, r3, #4
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	4413      	add	r3, r2
 800285a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
 8002860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b29b      	uxth	r3, r3
 8002866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800286a:	b29a      	uxth	r2, r3
 800286c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286e:	801a      	strh	r2, [r3, #0]
 8002870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800287a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287e:	b29a      	uxth	r2, r3
 8002880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e01a      	b.n	80028bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	785b      	ldrb	r3, [r3, #1]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d116      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	643b      	str	r3, [r7, #64]	; 0x40
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289c:	b29b      	uxth	r3, r3
 800289e:	461a      	mov	r2, r3
 80028a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a2:	4413      	add	r3, r2
 80028a4:	643b      	str	r3, [r7, #64]	; 0x40
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	011a      	lsls	r2, r3, #4
 80028ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b8:	2200      	movs	r2, #0
 80028ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	785b      	ldrb	r3, [r3, #1]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d126      	bne.n	8002918 <HAL_PCD_EP_DB_Transmit+0x514>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028d8:	b29b      	uxth	r3, r3
 80028da:	461a      	mov	r2, r3
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	4413      	add	r3, r2
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	011a      	lsls	r2, r3, #4
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	4413      	add	r3, r2
 80028ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	801a      	strh	r2, [r3, #0]
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800290c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002910:	b29a      	uxth	r2, r3
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	801a      	strh	r2, [r3, #0]
 8002916:	e017      	b.n	8002948 <HAL_PCD_EP_DB_Transmit+0x544>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d113      	bne.n	8002948 <HAL_PCD_EP_DB_Transmit+0x544>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002928:	b29b      	uxth	r3, r3
 800292a:	461a      	mov	r2, r3
 800292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292e:	4413      	add	r3, r2
 8002930:	63bb      	str	r3, [r7, #56]	; 0x38
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	011a      	lsls	r2, r3, #4
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	4413      	add	r3, r2
 800293c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	2200      	movs	r2, #0
 8002946:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f009 faaf 	bl	800beb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f040 8114 	bne.w	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	441a      	add	r2, r3
 800298a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800298c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002994:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	b29b      	uxth	r3, r3
 800299e:	8013      	strh	r3, [r2, #0]
 80029a0:	e0f2      	b.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11f      	bne.n	80029ec <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 80c8 	bne.w	8002b88 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a00:	441a      	add	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a0e:	441a      	add	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	6a1a      	ldr	r2, [r3, #32]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d30b      	bcc.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	621a      	str	r2, [r3, #32]
 8002a36:	e017      	b.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d108      	bne.n	8002a52 <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 8002a40:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a50:	e00a      	b.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	785b      	ldrb	r3, [r3, #1]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d163      	bne.n	8002b3e <HAL_PCD_EP_DB_Transmit+0x73a>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	011a      	lsls	r2, r3, #4
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	4413      	add	r3, r2
 8002a98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d112      	bne.n	8002acc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	801a      	strh	r2, [r3, #0]
 8002aca:	e052      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8002ad2:	d817      	bhi.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x700>
 8002ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_PCD_EP_DB_Transmit+0x6f0>
 8002aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002af4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	029b      	lsls	r3, r3, #10
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	e036      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_PCD_EP_DB_Transmit+0x720>
 8002b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	029b      	lsls	r3, r3, #10
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e019      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	785b      	ldrb	r3, [r3, #1]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d115      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x76e>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	4413      	add	r3, r2
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	011a      	lsls	r2, r3, #4
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	4413      	add	r3, r2
 8002b62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6959      	ldr	r1, [r3, #20]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	895a      	ldrh	r2, [r3, #10]
 8002b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f003 fb63 	bl	800624e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba2:	82fb      	strh	r3, [r7, #22]
 8002ba4:	8afb      	ldrh	r3, [r7, #22]
 8002ba6:	f083 0310 	eor.w	r3, r3, #16
 8002baa:	82fb      	strh	r3, [r7, #22]
 8002bac:	8afb      	ldrh	r3, [r7, #22]
 8002bae:	f083 0320 	eor.w	r3, r3, #32
 8002bb2:	82fb      	strh	r3, [r7, #22]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	441a      	add	r2, r3
 8002bc2:	8afb      	ldrh	r3, [r7, #22]
 8002bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3790      	adds	r7, #144	; 0x90
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b087      	sub	sp, #28
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c00:	897b      	ldrh	r3, [r7, #10]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e009      	b.n	8002c2c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c18:	897a      	ldrh	r2, [r7, #10]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c2c:	893b      	ldrh	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2200      	movs	r2, #0
 8002c36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	80da      	strh	r2, [r3, #6]
 8002c40:	e00b      	b.n	8002c5a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2201      	movs	r2, #1
 8002c46:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e26c      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 8087 	beq.w	8002d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c88:	4b92      	ldr	r3, [pc, #584]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 030c 	and.w	r3, r3, #12
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d00c      	beq.n	8002cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c94:	4b8f      	ldr	r3, [pc, #572]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d112      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x5e>
 8002ca0:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cae:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d06c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x12c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d168      	bne.n	8002d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e246      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x76>
 8002cd0:	4a80      	ldr	r2, [pc, #512]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	4b80      	ldr	r3, [pc, #512]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	e02e      	b.n	8002d3c <HAL_RCC_OscConfig+0xd4>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x98>
 8002ce6:	4a7b      	ldr	r2, [pc, #492]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4a78      	ldr	r2, [pc, #480]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xd4>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0xbc>
 8002d0a:	4a72      	ldr	r2, [pc, #456]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	4b71      	ldr	r3, [pc, #452]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4a6f      	ldr	r2, [pc, #444]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d18:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xd4>
 8002d24:	4a6b      	ldr	r2, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f822 	bl	8000d8c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe f81e 	bl	8000d8c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1fa      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xe4>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f80e 	bl	8000d8c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe f80a 	bl	8000d8c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	; 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1e6      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x10c>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da2:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dae:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x18c>
 8002dba:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x176>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1ba      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	493d      	ldr	r1, [pc, #244]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7fd ffc3 	bl	8000d8c <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fd ffbf 	bl	8000d8c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e19b      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	492a      	ldr	r1, [pc, #168]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <HAL_RCC_OscConfig+0x270>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fd ffa2 	bl	8000d8c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fd ff9e 	bl	8000d8c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e17a      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d03a      	beq.n	8002eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d019      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCC_OscConfig+0x274>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fd ff82 	bl	8000d8c <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fd ff7e 	bl	8000d8c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e15a      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCC_OscConfig+0x26c>)
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f000 faf6 	bl	800349c <RCC_Delay>
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <HAL_RCC_OscConfig+0x274>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb8:	f7fd ff68 	bl	8000d8c <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebe:	e00f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fd ff64 	bl	8000d8c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d908      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e140      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	42420000 	.word	0x42420000
 8002edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee0:	4b9e      	ldr	r3, [pc, #632]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e9      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a6 	beq.w	8003046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efe:	4b97      	ldr	r3, [pc, #604]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10d      	bne.n	8002f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	4a94      	ldr	r2, [pc, #592]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	4b93      	ldr	r3, [pc, #588]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]
 8002f16:	4b91      	ldr	r3, [pc, #580]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f22:	2301      	movs	r3, #1
 8002f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f26:	4b8e      	ldr	r3, [pc, #568]	; (8003160 <HAL_RCC_OscConfig+0x4f8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d118      	bne.n	8002f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f32:	4a8b      	ldr	r2, [pc, #556]	; (8003160 <HAL_RCC_OscConfig+0x4f8>)
 8002f34:	4b8a      	ldr	r3, [pc, #552]	; (8003160 <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3e:	f7fd ff25 	bl	8000d8c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f46:	f7fd ff21 	bl	8000d8c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b64      	cmp	r3, #100	; 0x64
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e0fd      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x4f8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x312>
 8002f6c:	4a7b      	ldr	r2, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	6213      	str	r3, [r2, #32]
 8002f78:	e02d      	b.n	8002fd6 <HAL_RCC_OscConfig+0x36e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x334>
 8002f82:	4a76      	ldr	r2, [pc, #472]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	4b75      	ldr	r3, [pc, #468]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	6213      	str	r3, [r2, #32]
 8002f8e:	4a73      	ldr	r2, [pc, #460]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4b72      	ldr	r3, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f023 0304 	bic.w	r3, r3, #4
 8002f98:	6213      	str	r3, [r2, #32]
 8002f9a:	e01c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x36e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d10c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x356>
 8002fa4:	4a6d      	ldr	r2, [pc, #436]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	4a6a      	ldr	r2, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6213      	str	r3, [r2, #32]
 8002fbc:	e00b      	b.n	8002fd6 <HAL_RCC_OscConfig+0x36e>
 8002fbe:	4a67      	ldr	r2, [pc, #412]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fc0:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6213      	str	r3, [r2, #32]
 8002fca:	4a64      	ldr	r2, [pc, #400]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fcc:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d015      	beq.n	800300a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7fd fed5 	bl	8000d8c <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe4:	e00a      	b.n	8002ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe6:	f7fd fed1 	bl	8000d8c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0ab      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffc:	4b57      	ldr	r3, [pc, #348]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ee      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x37e>
 8003008:	e014      	b.n	8003034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800300a:	f7fd febf 	bl	8000d8c <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003010:	e00a      	b.n	8003028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003012:	f7fd febb 	bl	8000d8c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e095      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ee      	bne.n	8003012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003034:	7dfb      	ldrb	r3, [r7, #23]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 8081 	beq.w	8003152 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d061      	beq.n	8003120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d146      	bne.n	80030f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b3f      	ldr	r3, [pc, #252]	; (8003164 <HAL_RCC_OscConfig+0x4fc>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7fd fe8f 	bl	8000d8c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003072:	f7fd fe8b 	bl	8000d8c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e067      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003084:	4b35      	ldr	r3, [pc, #212]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d108      	bne.n	80030ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800309a:	4930      	ldr	r1, [pc, #192]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 800309c:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ac:	482b      	ldr	r0, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	4b2b      	ldr	r3, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a19      	ldr	r1, [r3, #32]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	430b      	orrs	r3, r1
 80030c0:	4313      	orrs	r3, r2
 80030c2:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <HAL_RCC_OscConfig+0x4fc>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ca:	f7fd fe5f 	bl	8000d8c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fd fe5b 	bl	8000d8c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e037      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x46a>
 80030f0:	e02f      	b.n	8003152 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f2:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <HAL_RCC_OscConfig+0x4fc>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fd fe48 	bl	8000d8c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fd fe44 	bl	8000d8c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e020      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003112:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x498>
 800311e:	e018      	b.n	8003152 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e013      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_OscConfig+0x4f4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	429a      	cmp	r2, r3
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	40007000 	.word	0x40007000
 8003164:	42420060 	.word	0x42420060

08003168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0d0      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0207 	and.w	r2, r3, #7
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d210      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4967      	ldr	r1, [pc, #412]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 800318c:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 0207 	bic.w	r2, r3, #7
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b63      	ldr	r3, [pc, #396]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0b8      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031c4:	4a59      	ldr	r2, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031dc:	4a53      	ldr	r2, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	4b53      	ldr	r3, [pc, #332]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4950      	ldr	r1, [pc, #320]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	4b50      	ldr	r3, [pc, #320]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d040      	beq.n	8003288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d115      	bne.n	8003246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07f      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d107      	bne.n	8003236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e073      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003236:	4b3d      	ldr	r3, [pc, #244]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06b      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003246:	4939      	ldr	r1, [pc, #228]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 0203 	bic.w	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003258:	f7fd fd98 	bl	8000d8c <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	e00a      	b.n	8003276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003260:	f7fd fd94 	bl	8000d8c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	f241 3288 	movw	r2, #5000	; 0x1388
 800326e:	4293      	cmp	r3, r2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e053      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003276:	4b2d      	ldr	r3, [pc, #180]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 020c 	and.w	r2, r3, #12
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	429a      	cmp	r2, r3
 8003286:	d1eb      	bne.n	8003260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003288:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0207 	and.w	r2, r3, #7
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d910      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4924      	ldr	r1, [pc, #144]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 0207 	bic.w	r2, r3, #7
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0207 	and.w	r2, r3, #7
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e032      	b.n	800331e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4919      	ldr	r1, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032e2:	4912      	ldr	r1, [pc, #72]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	4b11      	ldr	r3, [pc, #68]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032f6:	f000 f821 	bl	800333c <HAL_RCC_GetSysClockFreq>
 80032fa:	4601      	mov	r1, r0
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_RCC_ClockConfig+0x1c8>)
 8003308:	5cd3      	ldrb	r3, [r2, r3]
 800330a:	fa21 f303 	lsr.w	r3, r1, r3
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <HAL_RCC_ClockConfig+0x1cc>)
 8003310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_ClockConfig+0x1d0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fb00 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40022000 	.word	0x40022000
 800332c:	40021000 	.word	0x40021000
 8003330:	0800ce44 	.word	0x0800ce44
 8003334:	20000054 	.word	0x20000054
 8003338:	20000058 	.word	0x20000058

0800333c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	b490      	push	{r4, r7}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003342:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003344:	1d3c      	adds	r4, r7, #4
 8003346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x40>
 8003376:	2b08      	cmp	r3, #8
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x46>
 800337a:	e02d      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800337c:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800337e:	623b      	str	r3, [r7, #32]
      break;
 8003380:	e02d      	b.n	80033de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	0c9b      	lsrs	r3, r3, #18
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800338e:	4413      	add	r3, r2
 8003390:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003394:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c5b      	lsrs	r3, r3, #17
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033ae:	4413      	add	r3, r2
 80033b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033ba:	fb02 f203 	mul.w	r2, r2, r3
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	e004      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80033cc:	fb02 f303 	mul.w	r3, r2, r3
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	623b      	str	r3, [r7, #32]
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b07      	ldr	r3, [pc, #28]	; (80033f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033da:	623b      	str	r3, [r7, #32]
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	6a3b      	ldr	r3, [r7, #32]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	; 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc90      	pop	{r4, r7}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	0800cd90 	.word	0x0800cd90
 80033f0:	0800cda0 	.word	0x0800cda0
 80033f4:	40021000 	.word	0x40021000
 80033f8:	007a1200 	.word	0x007a1200
 80033fc:	003d0900 	.word	0x003d0900

08003400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003404:	4b02      	ldr	r3, [pc, #8]	; (8003410 <HAL_RCC_GetHCLKFreq+0x10>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000054 	.word	0x20000054

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff2 	bl	8003400 <HAL_RCC_GetHCLKFreq>
 800341c:	4601      	mov	r1, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0a1b      	lsrs	r3, r3, #8
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4a03      	ldr	r2, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40021000 	.word	0x40021000
 8003438:	0800ce54 	.word	0x0800ce54

0800343c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	220f      	movs	r2, #15
 800344a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0203 	and.w	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_RCC_GetClockConfig+0x58>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800347e:	4b06      	ldr	r3, [pc, #24]	; (8003498 <HAL_RCC_GetClockConfig+0x5c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0207 	and.w	r2, r3, #7
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40021000 	.word	0x40021000
 8003498:	40022000 	.word	0x40022000

0800349c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <RCC_Delay+0x34>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <RCC_Delay+0x38>)
 80034aa:	fba2 2303 	umull	r2, r3, r2, r3
 80034ae:	0a5b      	lsrs	r3, r3, #9
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034b8:	bf00      	nop
  }
  while (Delay --);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e5a      	subs	r2, r3, #1
 80034be:	60fa      	str	r2, [r7, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f9      	bne.n	80034b8 <RCC_Delay+0x1c>
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000054 	.word	0x20000054
 80034d4:	10624dd3 	.word	0x10624dd3

080034d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d07d      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f8:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	69db      	ldr	r3, [r3, #28]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003504:	4a4c      	ldr	r2, [pc, #304]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800350e:	61d3      	str	r3, [r2, #28]
 8003510:	4b49      	ldr	r3, [pc, #292]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b46      	ldr	r3, [pc, #280]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d118      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352c:	4a43      	ldr	r2, [pc, #268]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003538:	f7fd fc28 	bl	8000d8c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353e:	e008      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7fd fc24 	bl	8000d8c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e06d      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003566:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	429a      	cmp	r2, r3
 800357a:	d027      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800357c:	4b2e      	ldr	r3, [pc, #184]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003584:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003586:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800358c:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d014      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fd fbf3 	bl	8000d8c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fd fbef 	bl	8000d8c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e036      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0ee      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035cc:	491a      	ldr	r1, [pc, #104]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4313      	orrs	r3, r2
 80035dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4a14      	ldr	r2, [pc, #80]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0310 	and.w	r3, r3, #16
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361a:	4907      	ldr	r1, [pc, #28]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
 8003640:	42420440 	.word	0x42420440

08003644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e041      	b.n	80036da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fd fa54 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f000 fa64 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d001      	beq.n	80036fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e03a      	b.n	8003772 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6812      	ldr	r2, [r2, #0]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_TIM_Base_Start_IT+0x98>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x58>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d009      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x58>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <HAL_TIM_Base_Start_IT+0x9c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_Base_Start_IT+0x58>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a13      	ldr	r2, [pc, #76]	; (8003784 <HAL_TIM_Base_Start_IT+0xa0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d111      	bne.n	8003760 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b06      	cmp	r3, #6
 800374c:	d010      	beq.n	8003770 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375e:	e007      	b.n	8003770 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	40012c00 	.word	0x40012c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800

08003788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b02      	cmp	r3, #2
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0202 	mvn.w	r2, #2
 80037b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9a4 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f997 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f9a6 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0204 	mvn.w	r2, #4
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f97a 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f96d 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f97c 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b08      	cmp	r3, #8
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b08      	cmp	r3, #8
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0208 	mvn.w	r2, #8
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2204      	movs	r2, #4
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f950 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f943 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f952 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b10      	cmp	r3, #16
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0210 	mvn.w	r2, #16
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2208      	movs	r2, #8
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f926 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f919 	bl	8003b06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 f928 	bl	8003b2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10e      	bne.n	800390c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0201 	mvn.w	r2, #1
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fc ffba 	bl	8000880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b80      	cmp	r3, #128	; 0x80
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d107      	bne.n	8003938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fa6b 	bl	8003e0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d10e      	bne.n	8003964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d107      	bne.n	8003964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8ec 	bl	8003b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0220 	mvn.w	r2, #32
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa36 	bl	8003dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIM_ConfigClockSource+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e0a6      	b.n	8003afe <HAL_TIM_ConfigClockSource+0x166>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b40      	cmp	r3, #64	; 0x40
 80039e6:	d067      	beq.n	8003ab8 <HAL_TIM_ConfigClockSource+0x120>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d80b      	bhi.n	8003a04 <HAL_TIM_ConfigClockSource+0x6c>
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d073      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0x140>
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d802      	bhi.n	80039fa <HAL_TIM_ConfigClockSource+0x62>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d06f      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039f8:	e078      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d06c      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0x140>
 80039fe:	2b30      	cmp	r3, #48	; 0x30
 8003a00:	d06a      	beq.n	8003ad8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003a02:	e073      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a04:	2b70      	cmp	r3, #112	; 0x70
 8003a06:	d00d      	beq.n	8003a24 <HAL_TIM_ConfigClockSource+0x8c>
 8003a08:	2b70      	cmp	r3, #112	; 0x70
 8003a0a:	d804      	bhi.n	8003a16 <HAL_TIM_ConfigClockSource+0x7e>
 8003a0c:	2b50      	cmp	r3, #80	; 0x50
 8003a0e:	d033      	beq.n	8003a78 <HAL_TIM_ConfigClockSource+0xe0>
 8003a10:	2b60      	cmp	r3, #96	; 0x60
 8003a12:	d041      	beq.n	8003a98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a14:	e06a      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d066      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x152>
 8003a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a20:	d017      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a22:	e063      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6899      	ldr	r1, [r3, #8]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f000 f965 	bl	8003d02 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
      break;
 8003a50:	e04c      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6899      	ldr	r1, [r3, #8]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f000 f94e 	bl	8003d02 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	6892      	ldr	r2, [r2, #8]
 8003a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a74:	609a      	str	r2, [r3, #8]
      break;
 8003a76:	e039      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6859      	ldr	r1, [r3, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	461a      	mov	r2, r3
 8003a86:	f000 f8c5 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2150      	movs	r1, #80	; 0x50
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f91c 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003a96:	e029      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f000 f8e3 	bl	8003c70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2160      	movs	r1, #96	; 0x60
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f90c 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003ab6:	e019      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f000 f8a5 	bl	8003c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 f8fc 	bl	8003cce <TIM_ITRx_SetConfig>
      break;
 8003ad6:	e009      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f000 f8f3 	bl	8003cce <TIM_ITRx_SetConfig>
        break;
 8003ae8:	e000      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
	...

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <TIM_Base_SetConfig+0xb8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0x30>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a26      	ldr	r2, [pc, #152]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x30>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a25      	ldr	r2, [pc, #148]	; (8003c10 <TIM_Base_SetConfig+0xc0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <TIM_Base_SetConfig+0xb8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00b      	beq.n	8003bb2 <TIM_Base_SetConfig+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba0:	d007      	beq.n	8003bb2 <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <TIM_Base_SetConfig+0xbc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d003      	beq.n	8003bb2 <TIM_Base_SetConfig+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <TIM_Base_SetConfig+0xc0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a07      	ldr	r2, [pc, #28]	; (8003c08 <TIM_Base_SetConfig+0xb8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d103      	bne.n	8003bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	615a      	str	r2, [r3, #20]
}
 8003bfe:	bf00      	nop
 8003c00:	3714      	adds	r7, #20
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bc80      	pop	{r7}
 8003c06:	4770      	bx	lr
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800

08003c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 030a 	bic.w	r3, r3, #10
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 0210 	bic.w	r2, r3, #16
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	031b      	lsls	r3, r3, #12
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f043 0307 	orr.w	r3, r3, #7
 8003cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b087      	sub	sp, #28
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	021a      	lsls	r2, r3, #8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	609a      	str	r2, [r3, #8]
}
 8003d36:	bf00      	nop
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e046      	b.n	8003de6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d009      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a10      	ldr	r2, [pc, #64]	; (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d10c      	bne.n	8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800

08003dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bc80      	pop	{r7}
 8003e0c:	4770      	bx	lr

08003e0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e20:	b084      	sub	sp, #16
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	f107 0014 	add.w	r0, r7, #20
 8003e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bc80      	pop	{r7}
 8003e3c:	b004      	add	sp, #16
 8003e3e:	4770      	bx	lr

08003e40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e50:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e54:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003e74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003e78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003eb8:	b084      	sub	sp, #16
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	f107 0014 	add.w	r0, r7, #20
 8003ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	b004      	add	sp, #16
 8003ef6:	4770      	bx	lr

08003ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr

08003f0e <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bc80      	pop	{r7}
 8003f20:	4770      	bx	lr
	...

08003f24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b09b      	sub	sp, #108	; 0x6c
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	78db      	ldrb	r3, [r3, #3]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d81f      	bhi.n	8003f96 <USB_ActivateEndpoint+0x72>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <USB_ActivateEndpoint+0x38>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f9f 	.word	0x08003f9f
 8003f68:	08003f7b 	.word	0x08003f7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003f6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f78:	e012      	b.n	8003fa0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003f7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003f82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f86:	e00b      	b.n	8003fa0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003f88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003f94:	e004      	b.n	8003fa0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003f9c:	e000      	b.n	8003fa0 <USB_ActivateEndpoint+0x7c>
      break;
 8003f9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004004:	b29b      	uxth	r3, r3
 8004006:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	7b1b      	ldrb	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8153 	bne.w	80042b8 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	785b      	ldrb	r3, [r3, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 808e 	beq.w	8004138 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800402c:	4413      	add	r3, r2
 800402e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	011a      	lsls	r2, r3, #4
 8004036:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004038:	4413      	add	r3, r2
 800403a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800403e:	657b      	str	r3, [r7, #84]	; 0x54
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	88db      	ldrh	r3, [r3, #6]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	b29b      	uxth	r3, r3
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800404e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004060:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01d      	beq.n	80040a8 <USB_ActivateEndpoint+0x184>
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004082:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	441a      	add	r2, r3
 8004090:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800409c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	78db      	ldrb	r3, [r3, #3]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d024      	beq.n	80040fa <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80040ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040ce:	f083 0320 	eor.w	r3, r3, #32
 80040d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	441a      	add	r2, r3
 80040e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	8013      	strh	r3, [r2, #0]
 80040f8:	e271      	b.n	80045de <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004110:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]
 8004136:	e252      	b.n	80045de <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	64bb      	str	r3, [r7, #72]	; 0x48
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004148:	4413      	add	r3, r2
 800414a:	64bb      	str	r3, [r7, #72]	; 0x48
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	011a      	lsls	r2, r3, #4
 8004152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004154:	4413      	add	r3, r2
 8004156:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800415a:	647b      	str	r3, [r7, #68]	; 0x44
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	88db      	ldrh	r3, [r3, #6]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	b29b      	uxth	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	643b      	str	r3, [r7, #64]	; 0x40
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004176:	b29b      	uxth	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417c:	4413      	add	r3, r2
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	011a      	lsls	r2, r3, #4
 8004186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004188:	4413      	add	r3, r2
 800418a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d112      	bne.n	80041be <USB_ActivateEndpoint+0x29a>
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a6:	801a      	strh	r2, [r3, #0]
 80041a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ba:	801a      	strh	r2, [r3, #0]
 80041bc:	e02f      	b.n	800421e <USB_ActivateEndpoint+0x2fa>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b3e      	cmp	r3, #62	; 0x3e
 80041c4:	d813      	bhi.n	80041ee <USB_ActivateEndpoint+0x2ca>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	663b      	str	r3, [r7, #96]	; 0x60
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <USB_ActivateEndpoint+0x2bc>
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	3301      	adds	r3, #1
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
 80041e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	029b      	lsls	r3, r3, #10
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ea:	801a      	strh	r2, [r3, #0]
 80041ec:	e017      	b.n	800421e <USB_ActivateEndpoint+0x2fa>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	663b      	str	r3, [r7, #96]	; 0x60
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 031f 	and.w	r3, r3, #31
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d102      	bne.n	8004208 <USB_ActivateEndpoint+0x2e4>
 8004202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004204:	3b01      	subs	r3, #1
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420a:	b29b      	uxth	r3, r3
 800420c:	029b      	lsls	r3, r3, #10
 800420e:	b29b      	uxth	r3, r3
 8004210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004218:	b29a      	uxth	r2, r3
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800422c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800422e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d01b      	beq.n	800426e <USB_ActivateEndpoint+0x34a>
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424c:	873b      	strh	r3, [r7, #56]	; 0x38
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	441a      	add	r2, r3
 8004258:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800425a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004262:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800426a:	b29b      	uxth	r3, r3
 800426c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004286:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800428c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800428e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004294:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	441a      	add	r2, r3
 80042a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80042a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	8013      	strh	r3, [r2, #0]
 80042b6:	e192      	b.n	80045de <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	86bb      	strh	r3, [r7, #52]	; 0x34
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	441a      	add	r2, r3
 80042da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80042dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	633b      	str	r3, [r7, #48]	; 0x30
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	4413      	add	r3, r2
 8004302:	633b      	str	r3, [r7, #48]	; 0x30
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	4413      	add	r3, r2
 800430e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	891b      	ldrh	r3, [r3, #8]
 8004318:	085b      	lsrs	r3, r3, #1
 800431a:	b29b      	uxth	r3, r3
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	4413      	add	r3, r2
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	4413      	add	r3, r2
 8004342:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	895b      	ldrh	r3, [r3, #10]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b00      	cmp	r3, #0
 800435e:	f040 8091 	bne.w	8004484 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01b      	beq.n	80043b2 <USB_ActivateEndpoint+0x48e>
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4413      	add	r3, r2
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004390:	843b      	strh	r3, [r7, #32]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	441a      	add	r2, r3
 800439c:	8c3b      	ldrh	r3, [r7, #32]
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	83fb      	strh	r3, [r7, #30]
 80043c0:	8bfb      	ldrh	r3, [r7, #30]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d01b      	beq.n	8004402 <USB_ActivateEndpoint+0x4de>
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e0:	83bb      	strh	r3, [r7, #28]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	8bbb      	ldrh	r3, [r7, #28]
 80043ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043fe:	b29b      	uxth	r3, r3
 8004400:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004418:	837b      	strh	r3, [r7, #26]
 800441a:	8b7b      	ldrh	r3, [r7, #26]
 800441c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004420:	837b      	strh	r3, [r7, #26]
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004428:	837b      	strh	r3, [r7, #26]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	8b7b      	ldrh	r3, [r7, #26]
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004460:	833b      	strh	r3, [r7, #24]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8b3b      	ldrh	r3, [r7, #24]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
 8004482:	e0ac      	b.n	80045de <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	82fb      	strh	r3, [r7, #22]
 8004492:	8afb      	ldrh	r3, [r7, #22]
 8004494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <USB_ActivateEndpoint+0x5b0>
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	82bb      	strh	r3, [r7, #20]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	8abb      	ldrh	r3, [r7, #20]
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	827b      	strh	r3, [r7, #18]
 80044e2:	8a7b      	ldrh	r3, [r7, #18]
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <USB_ActivateEndpoint+0x600>
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	823b      	strh	r3, [r7, #16]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	8a3b      	ldrh	r3, [r7, #16]
 8004510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004520:	b29b      	uxth	r3, r3
 8004522:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	78db      	ldrb	r3, [r3, #3]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d020      	beq.n	800456e <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004542:	81fb      	strh	r3, [r7, #14]
 8004544:	89fb      	ldrh	r3, [r7, #14]
 8004546:	f083 0320 	eor.w	r3, r3, #32
 800454a:	81fb      	strh	r3, [r7, #14]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	441a      	add	r2, r3
 8004556:	89fb      	ldrh	r3, [r7, #14]
 8004558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800455c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004568:	b29b      	uxth	r3, r3
 800456a:	8013      	strh	r3, [r2, #0]
 800456c:	e01b      	b.n	80045a6 <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004584:	81bb      	strh	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	441a      	add	r2, r3
 8004590:	89bb      	ldrh	r3, [r7, #12]
 8004592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045bc:	817b      	strh	r3, [r7, #10]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	897b      	ldrh	r3, [r7, #10]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80045de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	376c      	adds	r7, #108	; 0x6c
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b08d      	sub	sp, #52	; 0x34
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	7b1b      	ldrb	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 808e 	bne.w	800471c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d044      	beq.n	8004692 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01b      	beq.n	8004658 <USB_DeactivateEndpoint+0x6c>
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004654:	b29b      	uxth	r3, r3
 8004656:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800467c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	b29b      	uxth	r3, r3
 800468e:	8013      	strh	r3, [r2, #0]
 8004690:	e192      	b.n	80049b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	853b      	strh	r3, [r7, #40]	; 0x28
 80046a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <USB_DeactivateEndpoint+0xf6>
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]
 800471a:	e14d      	b.n	80049b8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f040 80a5 	bne.w	8004870 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	847b      	strh	r3, [r7, #34]	; 0x22
 8004734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01b      	beq.n	8004776 <USB_DeactivateEndpoint+0x18a>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	843b      	strh	r3, [r7, #32]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	8c3b      	ldrh	r3, [r7, #32]
 8004762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800476e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004772:	b29b      	uxth	r3, r3
 8004774:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	83fb      	strh	r3, [r7, #30]
 8004784:	8bfb      	ldrh	r3, [r7, #30]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d01b      	beq.n	80047c6 <USB_DeactivateEndpoint+0x1da>
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	83bb      	strh	r3, [r7, #28]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	441a      	add	r2, r3
 80047b0:	8bbb      	ldrh	r3, [r7, #28]
 80047b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	837b      	strh	r3, [r7, #26]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	441a      	add	r2, r3
 80047e8:	8b7b      	ldrh	r3, [r7, #26]
 80047ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	b29b      	uxth	r3, r3
 800480c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	833b      	strh	r3, [r7, #24]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8b3b      	ldrh	r3, [r7, #24]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484c:	82fb      	strh	r3, [r7, #22]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8afb      	ldrh	r3, [r7, #22]
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e0a3      	b.n	80049b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	82bb      	strh	r3, [r7, #20]
 800487e:	8abb      	ldrh	r3, [r7, #20]
 8004880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <USB_DeactivateEndpoint+0x2d4>
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	827b      	strh	r3, [r7, #18]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	441a      	add	r2, r3
 80048aa:	8a7b      	ldrh	r3, [r7, #18]
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	823b      	strh	r3, [r7, #16]
 80048ce:	8a3b      	ldrh	r3, [r7, #16]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <USB_DeactivateEndpoint+0x324>
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	81fb      	strh	r3, [r7, #14]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	441a      	add	r2, r3
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	81bb      	strh	r3, [r7, #12]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	89bb      	ldrh	r3, [r7, #12]
 8004934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004944:	b29b      	uxth	r3, r3
 8004946:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495e:	817b      	strh	r3, [r7, #10]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29b      	uxth	r3, r3
 800498e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	813b      	strh	r3, [r7, #8]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	893b      	ldrh	r3, [r7, #8]
 80049a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3734      	adds	r7, #52	; 0x34
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b0ce      	sub	sp, #312	; 0x138
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	6018      	str	r0, [r3, #0]
 80049ce:	463b      	mov	r3, r7
 80049d0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049d2:	463b      	mov	r3, r7
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	785b      	ldrb	r3, [r3, #1]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	f040 873e 	bne.w	800585a <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049de:	463b      	mov	r3, r7
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	463b      	mov	r3, r7
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d905      	bls.n	80049fa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80049ee:	463b      	mov	r3, r7
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80049f8:	e004      	b.n	8004a04 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80049fa:	463b      	mov	r3, r7
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004a04:	463b      	mov	r3, r7
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	7b1b      	ldrb	r3, [r3, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d12e      	bne.n	8004a6c <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004a0e:	463b      	mov	r3, r7
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6959      	ldr	r1, [r3, #20]
 8004a14:	463b      	mov	r3, r7
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	88da      	ldrh	r2, [r3, #6]
 8004a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	1d38      	adds	r0, r7, #4
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	f001 fc13 	bl	800624e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a28:	1d3b      	adds	r3, r7, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a30:	1d3b      	adds	r3, r7, #4
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a40:	4413      	add	r3, r2
 8004a42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a46:	463b      	mov	r3, r7
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	011a      	lsls	r2, r3, #4
 8004a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a52:	4413      	add	r3, r2
 8004a54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	f000 bec2 	b.w	80057f0 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	78db      	ldrb	r3, [r3, #3]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	f040 836a 	bne.w	800514c <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a78:	463b      	mov	r3, r7
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	463b      	mov	r3, r7
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	f240 830e 	bls.w	80050a6 <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004a8a:	1d3b      	adds	r3, r7, #4
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	463b      	mov	r3, r7
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	441a      	add	r2, r3
 8004ab6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004aba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004abe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ad8:	1ad2      	subs	r2, r2, r3
 8004ada:	463b      	mov	r3, r7
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ae0:	1d3b      	adds	r3, r7, #4
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 817c 	beq.w	8004df4 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b04:	463b      	mov	r3, r7
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	785b      	ldrb	r3, [r3, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d16f      	bne.n	8004bee <USB_EPStartXfer+0x22a>
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b16:	1d3b      	adds	r3, r7, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b26:	4413      	add	r3, r2
 8004b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	011a      	lsls	r2, r3, #4
 8004b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b38:	4413      	add	r3, r2
 8004b3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <USB_EPStartXfer+0x1b4>
 8004b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e05b      	b.n	8004c30 <USB_EPStartXfer+0x26c>
 8004b78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b7c:	2b3e      	cmp	r3, #62	; 0x3e
 8004b7e:	d818      	bhi.n	8004bb2 <USB_EPStartXfer+0x1ee>
 8004b80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d004      	beq.n	8004ba0 <USB_EPStartXfer+0x1dc>
 8004b96:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004ba0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	029b      	lsls	r3, r3, #10
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e03e      	b.n	8004c30 <USB_EPStartXfer+0x26c>
 8004bb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004bbc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bc0:	f003 031f 	and.w	r3, r3, #31
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d104      	bne.n	8004bd2 <USB_EPStartXfer+0x20e>
 8004bc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004bd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	029b      	lsls	r3, r3, #10
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e020      	b.n	8004c30 <USB_EPStartXfer+0x26c>
 8004bee:	463b      	mov	r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d11b      	bne.n	8004c30 <USB_EPStartXfer+0x26c>
 8004bf8:	1d3b      	adds	r3, r7, #4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c08:	4413      	add	r3, r2
 8004c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c0e:	463b      	mov	r3, r7
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	011a      	lsls	r2, r3, #4
 8004c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c30:	463b      	mov	r3, r7
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	895b      	ldrh	r3, [r3, #10]
 8004c36:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c3a:	463b      	mov	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6959      	ldr	r1, [r3, #20]
 8004c40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004c4a:	1d38      	adds	r0, r7, #4
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f001 fafe 	bl	800624e <USB_WritePMA>
            ep->xfer_buff += len;
 8004c52:	463b      	mov	r3, r7
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c5c:	441a      	add	r2, r3
 8004c5e:	463b      	mov	r3, r7
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	463b      	mov	r3, r7
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d909      	bls.n	8004c88 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 8004c74:	463b      	mov	r3, r7
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6a1a      	ldr	r2, [r3, #32]
 8004c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c7e:	1ad2      	subs	r2, r2, r3
 8004c80:	463b      	mov	r3, r7
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	621a      	str	r2, [r3, #32]
 8004c86:	e008      	b.n	8004c9a <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8004c92:	463b      	mov	r3, r7
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2200      	movs	r2, #0
 8004c98:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d16f      	bne.n	8004d84 <USB_EPStartXfer+0x3c0>
 8004ca4:	1d3b      	adds	r3, r7, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004cc2:	463b      	mov	r3, r7
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	011a      	lsls	r2, r3, #4
 8004cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cce:	4413      	add	r3, r2
 8004cd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d116      	bne.n	8004d0e <USB_EPStartXfer+0x34a>
 8004ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf8:	881b      	ldrh	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	e05f      	b.n	8004dce <USB_EPStartXfer+0x40a>
 8004d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d12:	2b3e      	cmp	r3, #62	; 0x3e
 8004d14:	d818      	bhi.n	8004d48 <USB_EPStartXfer+0x384>
 8004d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <USB_EPStartXfer+0x372>
 8004d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d30:	3301      	adds	r3, #1
 8004d32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	029b      	lsls	r3, r3, #10
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d44:	801a      	strh	r2, [r3, #0]
 8004d46:	e042      	b.n	8004dce <USB_EPStartXfer+0x40a>
 8004d48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d104      	bne.n	8004d68 <USB_EPStartXfer+0x3a4>
 8004d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d62:	3b01      	subs	r3, #1
 8004d64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004d68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	e024      	b.n	8004dce <USB_EPStartXfer+0x40a>
 8004d84:	463b      	mov	r3, r7
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	785b      	ldrb	r3, [r3, #1]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d11f      	bne.n	8004dce <USB_EPStartXfer+0x40a>
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d96:	1d3b      	adds	r3, r7, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	461a      	mov	r2, r3
 8004da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da6:	4413      	add	r3, r2
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dac:	463b      	mov	r3, r7
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	011a      	lsls	r2, r3, #4
 8004db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db8:	4413      	add	r3, r2
 8004dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dce:	463b      	mov	r3, r7
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	891b      	ldrh	r3, [r3, #8]
 8004dd4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6959      	ldr	r1, [r3, #20]
 8004dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004de8:	1d38      	adds	r0, r7, #4
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	f001 fa2f 	bl	800624e <USB_WritePMA>
 8004df0:	f000 bcfe 	b.w	80057f0 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004df4:	463b      	mov	r3, r7
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d164      	bne.n	8004ec8 <USB_EPStartXfer+0x504>
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e12:	4413      	add	r3, r2
 8004e14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	011a      	lsls	r2, r3, #4
 8004e1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e20:	4413      	add	r3, r2
 8004e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e26:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d112      	bne.n	8004e56 <USB_EPStartXfer+0x492>
 8004e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e057      	b.n	8004f06 <USB_EPStartXfer+0x542>
 8004e56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e5c:	d817      	bhi.n	8004e8e <USB_EPStartXfer+0x4ca>
 8004e5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <USB_EPStartXfer+0x4ba>
 8004e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	e03b      	b.n	8004f06 <USB_EPStartXfer+0x542>
 8004e8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004e98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <USB_EPStartXfer+0x4ea>
 8004ea4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	029b      	lsls	r3, r3, #10
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e01e      	b.n	8004f06 <USB_EPStartXfer+0x542>
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d119      	bne.n	8004f06 <USB_EPStartXfer+0x542>
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	677b      	str	r3, [r7, #116]	; 0x74
 8004ed8:	1d3b      	adds	r3, r7, #4
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee6:	4413      	add	r3, r2
 8004ee8:	677b      	str	r3, [r7, #116]	; 0x74
 8004eea:	463b      	mov	r3, r7
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	011a      	lsls	r2, r3, #4
 8004ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004efa:	673b      	str	r3, [r7, #112]	; 0x70
 8004efc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f06:	463b      	mov	r3, r7
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	891b      	ldrh	r3, [r3, #8]
 8004f0c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f10:	463b      	mov	r3, r7
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6959      	ldr	r1, [r3, #20]
 8004f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004f20:	1d38      	adds	r0, r7, #4
 8004f22:	6800      	ldr	r0, [r0, #0]
 8004f24:	f001 f993 	bl	800624e <USB_WritePMA>
            ep->xfer_buff += len;
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f32:	441a      	add	r2, r3
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6a1a      	ldr	r2, [r3, #32]
 8004f40:	463b      	mov	r3, r7
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d909      	bls.n	8004f5e <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f54:	1ad2      	subs	r2, r2, r3
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	621a      	str	r2, [r3, #32]
 8004f5c:	e008      	b.n	8004f70 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 8004f5e:	463b      	mov	r3, r7
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8004f68:	463b      	mov	r3, r7
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f70:	1d3b      	adds	r3, r7, #4
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f76:	463b      	mov	r3, r7
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d164      	bne.n	800504a <USB_EPStartXfer+0x686>
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f86:	1d3b      	adds	r3, r7, #4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f94:	4413      	add	r3, r2
 8004f96:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f98:	463b      	mov	r3, r7
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	011a      	lsls	r2, r3, #4
 8004fa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fa8:	667b      	str	r3, [r7, #100]	; 0x64
 8004faa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d112      	bne.n	8004fd8 <USB_EPStartXfer+0x614>
 8004fb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	e054      	b.n	8005082 <USB_EPStartXfer+0x6be>
 8004fd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fdc:	2b3e      	cmp	r3, #62	; 0x3e
 8004fde:	d817      	bhi.n	8005010 <USB_EPStartXfer+0x64c>
 8004fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fe4:	085b      	lsrs	r3, r3, #1
 8004fe6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004fea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <USB_EPStartXfer+0x63c>
 8004ff6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005000:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005004:	b29b      	uxth	r3, r3
 8005006:	029b      	lsls	r3, r3, #10
 8005008:	b29a      	uxth	r2, r3
 800500a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500c:	801a      	strh	r2, [r3, #0]
 800500e:	e038      	b.n	8005082 <USB_EPStartXfer+0x6be>
 8005010:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800501a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <USB_EPStartXfer+0x66c>
 8005026:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800502a:	3b01      	subs	r3, #1
 800502c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005030:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005034:	b29b      	uxth	r3, r3
 8005036:	029b      	lsls	r3, r3, #10
 8005038:	b29b      	uxth	r3, r3
 800503a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005042:	b29a      	uxth	r2, r3
 8005044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	e01b      	b.n	8005082 <USB_EPStartXfer+0x6be>
 800504a:	463b      	mov	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d116      	bne.n	8005082 <USB_EPStartXfer+0x6be>
 8005054:	1d3b      	adds	r3, r7, #4
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800505c:	b29b      	uxth	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005062:	4413      	add	r3, r2
 8005064:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	011a      	lsls	r2, r3, #4
 800506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005070:	4413      	add	r3, r2
 8005072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005076:	663b      	str	r3, [r7, #96]	; 0x60
 8005078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800507c:	b29a      	uxth	r2, r3
 800507e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005080:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	895b      	ldrh	r3, [r3, #10]
 8005088:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800508c:	463b      	mov	r3, r7
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6959      	ldr	r1, [r3, #20]
 8005092:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005096:	b29b      	uxth	r3, r3
 8005098:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800509c:	1d38      	adds	r0, r7, #4
 800509e:	6800      	ldr	r0, [r0, #0]
 80050a0:	f001 f8d5 	bl	800624e <USB_WritePMA>
 80050a4:	e3a4      	b.n	80057f0 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80050b0:	1d3b      	adds	r3, r7, #4
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	463b      	mov	r3, r7
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80050ce:	1d3b      	adds	r3, r7, #4
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	463b      	mov	r3, r7
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80050e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005102:	b29b      	uxth	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005108:	4413      	add	r3, r2
 800510a:	65bb      	str	r3, [r7, #88]	; 0x58
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	011a      	lsls	r2, r3, #4
 8005114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005116:	4413      	add	r3, r2
 8005118:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511c:	657b      	str	r3, [r7, #84]	; 0x54
 800511e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005122:	b29a      	uxth	r2, r3
 8005124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005126:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	891b      	ldrh	r3, [r3, #8]
 800512e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6959      	ldr	r1, [r3, #20]
 8005138:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800513c:	b29b      	uxth	r3, r3
 800513e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005142:	1d38      	adds	r0, r7, #4
 8005144:	6800      	ldr	r0, [r0, #0]
 8005146:	f001 f882 	bl	800624e <USB_WritePMA>
 800514a:	e351      	b.n	80057f0 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005166:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800516a:	1d3b      	adds	r3, r7, #4
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800517c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005184:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518c:	b29b      	uxth	r3, r3
 800518e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005190:	463b      	mov	r3, r7
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	463b      	mov	r3, r7
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 8178 	beq.w	80054ae <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051be:	1d3b      	adds	r3, r7, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	785b      	ldrb	r3, [r3, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d164      	bne.n	8005298 <USB_EPStartXfer+0x8d4>
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d4:	1d3b      	adds	r3, r7, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051dc:	b29b      	uxth	r3, r3
 80051de:	461a      	mov	r2, r3
 80051e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e2:	4413      	add	r3, r2
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e6:	463b      	mov	r3, r7
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	011a      	lsls	r2, r3, #4
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f0:	4413      	add	r3, r2
 80051f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051f6:	647b      	str	r3, [r7, #68]	; 0x44
 80051f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d112      	bne.n	8005226 <USB_EPStartXfer+0x862>
 8005200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800520a:	b29a      	uxth	r2, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	b29b      	uxth	r3, r3
 8005216:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521e:	b29a      	uxth	r2, r3
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e054      	b.n	80052d0 <USB_EPStartXfer+0x90c>
 8005226:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800522a:	2b3e      	cmp	r3, #62	; 0x3e
 800522c:	d817      	bhi.n	800525e <USB_EPStartXfer+0x89a>
 800522e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005238:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	d004      	beq.n	800524e <USB_EPStartXfer+0x88a>
 8005244:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005248:	3301      	adds	r3, #1
 800524a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800524e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29a      	uxth	r2, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	e038      	b.n	80052d0 <USB_EPStartXfer+0x90c>
 800525e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005268:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	2b00      	cmp	r3, #0
 8005272:	d104      	bne.n	800527e <USB_EPStartXfer+0x8ba>
 8005274:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005278:	3b01      	subs	r3, #1
 800527a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800527e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005282:	b29b      	uxth	r3, r3
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	b29b      	uxth	r3, r3
 8005288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005290:	b29a      	uxth	r2, r3
 8005292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005294:	801a      	strh	r2, [r3, #0]
 8005296:	e01b      	b.n	80052d0 <USB_EPStartXfer+0x90c>
 8005298:	463b      	mov	r3, r7
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	785b      	ldrb	r3, [r3, #1]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d116      	bne.n	80052d0 <USB_EPStartXfer+0x90c>
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	4413      	add	r3, r2
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	011a      	lsls	r2, r3, #4
 80052bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052be:	4413      	add	r3, r2
 80052c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052c4:	643b      	str	r3, [r7, #64]	; 0x40
 80052c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	895b      	ldrh	r3, [r3, #10]
 80052d6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052da:	463b      	mov	r3, r7
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6959      	ldr	r1, [r3, #20]
 80052e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80052ea:	1d38      	adds	r0, r7, #4
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	f000 ffae 	bl	800624e <USB_WritePMA>
          ep->xfer_buff += len;
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052fc:	441a      	add	r2, r3
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	429a      	cmp	r2, r3
 8005312:	d909      	bls.n	8005328 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800531e:	1ad2      	subs	r2, r2, r3
 8005320:	463b      	mov	r3, r7
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	621a      	str	r2, [r3, #32]
 8005326:	e008      	b.n	800533a <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 8005328:	463b      	mov	r3, r7
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005332:	463b      	mov	r3, r7
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2200      	movs	r2, #0
 8005338:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800533a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 8256 	beq.w	80057f0 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d172      	bne.n	8005434 <USB_EPStartXfer+0xa70>
 800534e:	1d3b      	adds	r3, r7, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	1d3b      	adds	r3, r7, #4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535c:	b29b      	uxth	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005362:	4413      	add	r3, r2
 8005364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005366:	463b      	mov	r3, r7
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	4413      	add	r3, r2
 8005372:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005376:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11a      	bne.n	80053ba <USB_EPStartXfer+0x9f6>
 8005384:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005392:	b29a      	uxth	r2, r3
 8005394:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e067      	b.n	800548a <USB_EPStartXfer+0xac6>
 80053ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053be:	2b3e      	cmp	r3, #62	; 0x3e
 80053c0:	d819      	bhi.n	80053f6 <USB_EPStartXfer+0xa32>
 80053c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <USB_EPStartXfer+0xa1e>
 80053d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80053e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e049      	b.n	800548a <USB_EPStartXfer+0xac6>
 80053f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005400:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	2b00      	cmp	r3, #0
 800540a:	d104      	bne.n	8005416 <USB_EPStartXfer+0xa52>
 800540c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005410:	3b01      	subs	r3, #1
 8005412:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800541a:	b29b      	uxth	r3, r3
 800541c:	029b      	lsls	r3, r3, #10
 800541e:	b29b      	uxth	r3, r3
 8005420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005428:	b29a      	uxth	r2, r3
 800542a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	801a      	strh	r2, [r3, #0]
 8005432:	e02a      	b.n	800548a <USB_EPStartXfer+0xac6>
 8005434:	463b      	mov	r3, r7
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d125      	bne.n	800548a <USB_EPStartXfer+0xac6>
 800543e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005442:	1d3a      	adds	r2, r7, #4
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	1d3b      	adds	r3, r7, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005450:	b29b      	uxth	r3, r3
 8005452:	4619      	mov	r1, r3
 8005454:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005458:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	440a      	add	r2, r1
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	463b      	mov	r3, r7
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	011a      	lsls	r2, r3, #4
 800546a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4413      	add	r3, r2
 8005472:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005480:	b29a      	uxth	r2, r3
 8005482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800548a:	463b      	mov	r3, r7
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	891b      	ldrh	r3, [r3, #8]
 8005490:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005494:	463b      	mov	r3, r7
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80054a4:	1d38      	adds	r0, r7, #4
 80054a6:	6800      	ldr	r0, [r0, #0]
 80054a8:	f000 fed1 	bl	800624e <USB_WritePMA>
 80054ac:	e1a0      	b.n	80057f0 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d17a      	bne.n	80055ae <USB_EPStartXfer+0xbea>
 80054b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054bc:	1d3a      	adds	r2, r7, #4
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	1d3b      	adds	r3, r7, #4
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	4619      	mov	r1, r3
 80054ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	440a      	add	r2, r1
 80054da:	601a      	str	r2, [r3, #0]
 80054dc:	463b      	mov	r3, r7
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	011a      	lsls	r2, r3, #4
 80054e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4413      	add	r3, r2
 80054ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11a      	bne.n	8005534 <USB_EPStartXfer+0xb70>
 80054fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800550c:	b29a      	uxth	r2, r3
 800550e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005528:	b29a      	uxth	r2, r3
 800552a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e067      	b.n	8005604 <USB_EPStartXfer+0xc40>
 8005534:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005538:	2b3e      	cmp	r3, #62	; 0x3e
 800553a:	d819      	bhi.n	8005570 <USB_EPStartXfer+0xbac>
 800553c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <USB_EPStartXfer+0xb98>
 8005552:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005556:	3301      	adds	r3, #1
 8005558:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800555c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005560:	b29b      	uxth	r3, r3
 8005562:	029b      	lsls	r3, r3, #10
 8005564:	b29a      	uxth	r2, r3
 8005566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	e049      	b.n	8005604 <USB_EPStartXfer+0xc40>
 8005570:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005574:	095b      	lsrs	r3, r3, #5
 8005576:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800557a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2b00      	cmp	r3, #0
 8005584:	d104      	bne.n	8005590 <USB_EPStartXfer+0xbcc>
 8005586:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800558a:	3b01      	subs	r3, #1
 800558c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005590:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005594:	b29b      	uxth	r3, r3
 8005596:	029b      	lsls	r3, r3, #10
 8005598:	b29b      	uxth	r3, r3
 800559a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800559e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e02a      	b.n	8005604 <USB_EPStartXfer+0xc40>
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	785b      	ldrb	r3, [r3, #1]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d125      	bne.n	8005604 <USB_EPStartXfer+0xc40>
 80055b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055bc:	1d3a      	adds	r2, r7, #4
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	1d3b      	adds	r3, r7, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4619      	mov	r1, r3
 80055ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055d6:	6812      	ldr	r2, [r2, #0]
 80055d8:	440a      	add	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	463b      	mov	r3, r7
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	011a      	lsls	r2, r3, #4
 80055e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4413      	add	r3, r2
 80055ec:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80055f0:	f107 0320 	add.w	r3, r7, #32
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	f107 0320 	add.w	r3, r7, #32
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	891b      	ldrh	r3, [r3, #8]
 800560a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800560e:	463b      	mov	r3, r7
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6959      	ldr	r1, [r3, #20]
 8005614:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005618:	b29b      	uxth	r3, r3
 800561a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800561e:	1d38      	adds	r0, r7, #4
 8005620:	6800      	ldr	r0, [r0, #0]
 8005622:	f000 fe14 	bl	800624e <USB_WritePMA>
          ep->xfer_buff += len;
 8005626:	463b      	mov	r3, r7
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005630:	441a      	add	r2, r3
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005638:	463b      	mov	r3, r7
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d909      	bls.n	800565c <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8005648:	463b      	mov	r3, r7
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005652:	1ad2      	subs	r2, r2, r3
 8005654:	463b      	mov	r3, r7
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	621a      	str	r2, [r3, #32]
 800565a:	e008      	b.n	800566e <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005666:	463b      	mov	r3, r7
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800566e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80bc 	beq.w	80057f0 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005678:	f107 031c 	add.w	r3, r7, #28
 800567c:	1d3a      	adds	r2, r7, #4
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d17a      	bne.n	8005782 <USB_EPStartXfer+0xdbe>
 800568c:	f107 0318 	add.w	r3, r7, #24
 8005690:	1d3a      	adds	r2, r7, #4
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	1d3b      	adds	r3, r7, #4
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800569e:	b29b      	uxth	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	f107 0318 	add.w	r3, r7, #24
 80056a6:	f107 0218 	add.w	r2, r7, #24
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	440a      	add	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	011a      	lsls	r2, r3, #4
 80056b8:	f107 0318 	add.w	r3, r7, #24
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4413      	add	r3, r2
 80056c0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80056c4:	f107 0314 	add.w	r3, r7, #20
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d11a      	bne.n	8005708 <USB_EPStartXfer+0xd44>
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	f107 0314 	add.w	r3, r7, #20
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	f107 0314 	add.w	r3, r7, #20
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	801a      	strh	r2, [r3, #0]
 8005706:	e062      	b.n	80057ce <USB_EPStartXfer+0xe0a>
 8005708:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800570c:	2b3e      	cmp	r3, #62	; 0x3e
 800570e:	d819      	bhi.n	8005744 <USB_EPStartXfer+0xd80>
 8005710:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005714:	085b      	lsrs	r3, r3, #1
 8005716:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800571a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <USB_EPStartXfer+0xd6c>
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572a:	3301      	adds	r3, #1
 800572c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	b29b      	uxth	r3, r3
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	b29a      	uxth	r2, r3
 800573a:	f107 0314 	add.w	r3, r7, #20
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	801a      	strh	r2, [r3, #0]
 8005742:	e044      	b.n	80057ce <USB_EPStartXfer+0xe0a>
 8005744:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800574e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <USB_EPStartXfer+0xda0>
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575e:	3b01      	subs	r3, #1
 8005760:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	b29b      	uxth	r3, r3
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005776:	b29a      	uxth	r2, r3
 8005778:	f107 0314 	add.w	r3, r7, #20
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e025      	b.n	80057ce <USB_EPStartXfer+0xe0a>
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d120      	bne.n	80057ce <USB_EPStartXfer+0xe0a>
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005794:	b29b      	uxth	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	f107 031c 	add.w	r3, r7, #28
 800579c:	f107 021c 	add.w	r2, r7, #28
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	440a      	add	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	463b      	mov	r3, r7
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	011a      	lsls	r2, r3, #4
 80057ae:	f107 031c 	add.w	r3, r7, #28
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4413      	add	r3, r2
 80057b6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80057ba:	f107 0310 	add.w	r3, r7, #16
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f107 0310 	add.w	r3, r7, #16
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057ce:	463b      	mov	r3, r7
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	895b      	ldrh	r3, [r3, #10]
 80057d4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057d8:	463b      	mov	r3, r7
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6959      	ldr	r1, [r3, #20]
 80057de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80057e8:	1d38      	adds	r0, r7, #4
 80057ea:	6800      	ldr	r0, [r0, #0]
 80057ec:	f000 fd2f 	bl	800624e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80057f0:	1d3b      	adds	r3, r7, #4
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f107 020e 	add.w	r2, r7, #14
 8005806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580e:	8013      	strh	r3, [r2, #0]
 8005810:	f107 030e 	add.w	r3, r7, #14
 8005814:	f107 020e 	add.w	r2, r7, #14
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	f082 0210 	eor.w	r2, r2, #16
 800581e:	801a      	strh	r2, [r3, #0]
 8005820:	f107 030e 	add.w	r3, r7, #14
 8005824:	f107 020e 	add.w	r2, r7, #14
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	f082 0220 	eor.w	r2, r2, #32
 800582e:	801a      	strh	r2, [r3, #0]
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	f107 030e 	add.w	r3, r7, #14
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005854:	b29b      	uxth	r3, r3
 8005856:	8013      	strh	r3, [r2, #0]
 8005858:	e3b5      	b.n	8005fc6 <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	7b1b      	ldrb	r3, [r3, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f040 8090 	bne.w	8005986 <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	429a      	cmp	r2, r3
 8005874:	d90e      	bls.n	8005894 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800588a:	1ad2      	subs	r2, r2, r3
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	619a      	str	r2, [r3, #24]
 8005892:	e008      	b.n	80058a6 <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 800589e:	463b      	mov	r3, r7
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058a6:	1d3b      	adds	r3, r7, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	461a      	mov	r2, r3
 80058ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058be:	4413      	add	r3, r2
 80058c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058c4:	463b      	mov	r3, r7
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	011a      	lsls	r2, r3, #4
 80058cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058d0:	4413      	add	r3, r2
 80058d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d116      	bne.n	8005910 <USB_EPStartXfer+0xf4c>
 80058e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005906:	b29a      	uxth	r2, r3
 8005908:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800590c:	801a      	strh	r2, [r3, #0]
 800590e:	e32c      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
 8005910:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005914:	2b3e      	cmp	r3, #62	; 0x3e
 8005916:	d818      	bhi.n	800594a <USB_EPStartXfer+0xf86>
 8005918:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <USB_EPStartXfer+0xf74>
 800592e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005932:	3301      	adds	r3, #1
 8005934:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005938:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800593c:	b29b      	uxth	r3, r3
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e30f      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
 800594a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800594e:	095b      	lsrs	r3, r3, #5
 8005950:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005954:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <USB_EPStartXfer+0xfa6>
 8005960:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005964:	3b01      	subs	r3, #1
 8005966:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800596a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800596e:	b29b      	uxth	r3, r3
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597c:	b29a      	uxth	r2, r3
 800597e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e2f1      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	78db      	ldrb	r3, [r3, #3]
 800598c:	2b02      	cmp	r3, #2
 800598e:	f040 818f 	bne.w	8005cb0 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d175      	bne.n	8005a88 <USB_EPStartXfer+0x10c4>
 800599c:	1d3b      	adds	r3, r7, #4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059a4:	1d3b      	adds	r3, r7, #4
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059b4:	4413      	add	r3, r2
 80059b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059ba:	463b      	mov	r3, r7
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	011a      	lsls	r2, r3, #4
 80059c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c6:	4413      	add	r3, r2
 80059c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d116      	bne.n	8005a08 <USB_EPStartXfer+0x1044>
 80059da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	e065      	b.n	8005ad4 <USB_EPStartXfer+0x1110>
 8005a08:	463b      	mov	r3, r7
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a10:	d81a      	bhi.n	8005a48 <USB_EPStartXfer+0x1084>
 8005a12:	463b      	mov	r3, r7
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a1e:	463b      	mov	r3, r7
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <USB_EPStartXfer+0x1072>
 8005a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a30:	3301      	adds	r3, #1
 8005a32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	029b      	lsls	r3, r3, #10
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a44:	801a      	strh	r2, [r3, #0]
 8005a46:	e045      	b.n	8005ad4 <USB_EPStartXfer+0x1110>
 8005a48:	463b      	mov	r3, r7
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f003 031f 	and.w	r3, r3, #31
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <USB_EPStartXfer+0x10a8>
 8005a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	029b      	lsls	r3, r3, #10
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e025      	b.n	8005ad4 <USB_EPStartXfer+0x1110>
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d120      	bne.n	8005ad4 <USB_EPStartXfer+0x1110>
 8005a92:	1d3b      	adds	r3, r7, #4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aaa:	4413      	add	r3, r2
 8005aac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	011a      	lsls	r2, r3, #4
 8005ab8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005abc:	4413      	add	r3, r2
 8005abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ac2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005adc:	463b      	mov	r3, r7
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	785b      	ldrb	r3, [r3, #1]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d175      	bne.n	8005bd2 <USB_EPStartXfer+0x120e>
 8005ae6:	1d3b      	adds	r3, r7, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005afe:	4413      	add	r3, r2
 8005b00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	011a      	lsls	r2, r3, #4
 8005b0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d116      	bne.n	8005b52 <USB_EPStartXfer+0x118e>
 8005b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e061      	b.n	8005c16 <USB_EPStartXfer+0x1252>
 8005b52:	463b      	mov	r3, r7
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b3e      	cmp	r3, #62	; 0x3e
 8005b5a:	d81a      	bhi.n	8005b92 <USB_EPStartXfer+0x11ce>
 8005b5c:	463b      	mov	r3, r7
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	085b      	lsrs	r3, r3, #1
 8005b64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b68:	463b      	mov	r3, r7
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <USB_EPStartXfer+0x11bc>
 8005b76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	029b      	lsls	r3, r3, #10
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e041      	b.n	8005c16 <USB_EPStartXfer+0x1252>
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <USB_EPStartXfer+0x11f2>
 8005bac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005bb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e021      	b.n	8005c16 <USB_EPStartXfer+0x1252>
 8005bd2:	463b      	mov	r3, r7
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d11c      	bne.n	8005c16 <USB_EPStartXfer+0x1252>
 8005bdc:	1d3b      	adds	r3, r7, #4
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bec:	4413      	add	r3, r2
 8005bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	011a      	lsls	r2, r3, #4
 8005bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c08:	463b      	mov	r3, r7
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c14:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c16:	463b      	mov	r3, r7
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 81a4 	beq.w	8005f6a <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	463b      	mov	r3, r7
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <USB_EPStartXfer+0x128a>
 8005c42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10d      	bne.n	8005c6a <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 8187 	bne.w	8005f6a <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8180 	bne.w	8005f6a <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8005c88:	1d3b      	adds	r3, r7, #4
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]
 8005cae:	e15c      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	78db      	ldrb	r3, [r3, #3]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	f040 8155 	bne.w	8005f66 <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699a      	ldr	r2, [r3, #24]
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d90e      	bls.n	8005cea <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	619a      	str	r2, [r3, #24]
 8005ce8:	e008      	b.n	8005cfc <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d16f      	bne.n	8005de6 <USB_EPStartXfer+0x1422>
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d0e:	1d3b      	adds	r3, r7, #4
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	461a      	mov	r2, r3
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d1e:	4413      	add	r3, r2
 8005d20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	011a      	lsls	r2, r3, #4
 8005d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d116      	bne.n	8005d70 <USB_EPStartXfer+0x13ac>
 8005d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e05f      	b.n	8005e30 <USB_EPStartXfer+0x146c>
 8005d70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d74:	2b3e      	cmp	r3, #62	; 0x3e
 8005d76:	d818      	bhi.n	8005daa <USB_EPStartXfer+0x13e6>
 8005d78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d7c:	085b      	lsrs	r3, r3, #1
 8005d7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d004      	beq.n	8005d98 <USB_EPStartXfer+0x13d4>
 8005d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d92:	3301      	adds	r3, #1
 8005d94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	e042      	b.n	8005e30 <USB_EPStartXfer+0x146c>
 8005daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005db4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <USB_EPStartXfer+0x1406>
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	029b      	lsls	r3, r3, #10
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e024      	b.n	8005e30 <USB_EPStartXfer+0x146c>
 8005de6:	463b      	mov	r3, r7
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d11f      	bne.n	8005e30 <USB_EPStartXfer+0x146c>
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005df8:	1d3b      	adds	r3, r7, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	4413      	add	r3, r2
 8005e0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	011a      	lsls	r2, r3, #4
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e20:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e38:	463b      	mov	r3, r7
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d16f      	bne.n	8005f22 <USB_EPStartXfer+0x155e>
 8005e42:	1d3b      	adds	r3, r7, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e4a:	1d3b      	adds	r3, r7, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	461a      	mov	r2, r3
 8005e56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	011a      	lsls	r2, r3, #4
 8005e68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e76:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d116      	bne.n	8005eac <USB_EPStartXfer+0x14e8>
 8005e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e05e      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
 8005eac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb0:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb2:	d818      	bhi.n	8005ee6 <USB_EPStartXfer+0x1522>
 8005eb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb8:	085b      	lsrs	r3, r3, #1
 8005eba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d004      	beq.n	8005ed4 <USB_EPStartXfer+0x1510>
 8005eca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ece:	3301      	adds	r3, #1
 8005ed0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	029b      	lsls	r3, r3, #10
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e041      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
 8005ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <USB_EPStartXfer+0x1542>
 8005efc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f00:	3b01      	subs	r3, #1
 8005f02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e023      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
 8005f22:	463b      	mov	r3, r7
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	785b      	ldrb	r3, [r3, #1]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d11e      	bne.n	8005f6a <USB_EPStartXfer+0x15a6>
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005f42:	463b      	mov	r3, r7
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	011a      	lsls	r2, r3, #4
 8005f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	e001      	b.n	8005f6a <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e02e      	b.n	8005fc8 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	463b      	mov	r3, r7
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f84:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005f88:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005f8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f90:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005f94:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005f98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f9c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005fa0:	1d3b      	adds	r3, r7, #4
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	441a      	add	r2, r3
 8005fae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	785b      	ldrb	r3, [r3, #1]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d020      	beq.n	8006026 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ffa:	81fb      	strh	r3, [r7, #14]
 8005ffc:	89fb      	ldrh	r3, [r7, #14]
 8005ffe:	f083 0310 	eor.w	r3, r3, #16
 8006002:	81fb      	strh	r3, [r7, #14]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	441a      	add	r2, r3
 800600e:	89fb      	ldrh	r3, [r7, #14]
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]
 8006024:	e01f      	b.n	8006066 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603c:	81bb      	strh	r3, [r7, #12]
 800603e:	89bb      	ldrh	r3, [r7, #12]
 8006040:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006044:	81bb      	strh	r3, [r7, #12]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	89bb      	ldrh	r3, [r7, #12]
 8006052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800605e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006062:	b29b      	uxth	r3, r3
 8006064:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr

08006072 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006072:	b480      	push	{r7}
 8006074:	b087      	sub	sp, #28
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	7b1b      	ldrb	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 809d 	bne.w	80061c0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d04c      	beq.n	8006128 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	82fb      	strh	r3, [r7, #22]
 800609c:	8afb      	ldrh	r3, [r7, #22]
 800609e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01b      	beq.n	80060de <USB_EPClearStall+0x6c>
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	82bb      	strh	r3, [r7, #20]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	441a      	add	r2, r3
 80060c8:	8abb      	ldrh	r3, [r7, #20]
 80060ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060da:	b29b      	uxth	r3, r3
 80060dc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	78db      	ldrb	r3, [r3, #3]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d06c      	beq.n	80061c0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060fc:	827b      	strh	r3, [r7, #18]
 80060fe:	8a7b      	ldrh	r3, [r7, #18]
 8006100:	f083 0320 	eor.w	r3, r3, #32
 8006104:	827b      	strh	r3, [r7, #18]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8a7b      	ldrh	r3, [r7, #18]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]
 8006126:	e04b      	b.n	80061c0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	823b      	strh	r3, [r7, #16]
 8006136:	8a3b      	ldrh	r3, [r7, #16]
 8006138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01b      	beq.n	8006178 <USB_EPClearStall+0x106>
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	b29b      	uxth	r3, r3
 800614e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006156:	81fb      	strh	r3, [r7, #14]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	441a      	add	r2, r3
 8006162:	89fb      	ldrh	r3, [r7, #14]
 8006164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	b29b      	uxth	r3, r3
 8006176:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	81bb      	strh	r3, [r7, #12]
 8006190:	89bb      	ldrh	r3, [r7, #12]
 8006192:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006196:	81bb      	strh	r3, [r7, #12]
 8006198:	89bb      	ldrh	r3, [r7, #12]
 800619a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800619e:	81bb      	strh	r3, [r7, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	441a      	add	r2, r3
 80061aa:	89bb      	ldrh	r3, [r7, #12]
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bc80      	pop	{r7}
 80061ca:	4770      	bx	lr

080061cc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d103      	bne.n	80061e6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2280      	movs	r2, #128	; 0x80
 80061e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	bc80      	pop	{r7}
 8006218:	4770      	bx	lr

0800621a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006228:	b29b      	uxth	r3, r3
 800622a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr

08006238 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr

0800624e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800624e:	b480      	push	{r7}
 8006250:	b08d      	sub	sp, #52	; 0x34
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	4611      	mov	r1, r2
 800625a:	461a      	mov	r2, r3
 800625c:	460b      	mov	r3, r1
 800625e:	80fb      	strh	r3, [r7, #6]
 8006260:	4613      	mov	r3, r2
 8006262:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006264:	88bb      	ldrh	r3, [r7, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	085b      	lsrs	r3, r3, #1
 800626a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	005a      	lsls	r2, r3, #1
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	e01e      	b.n	80062c6 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	3301      	adds	r3, #1
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	3302      	adds	r3, #2
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	3302      	adds	r3, #2
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	3301      	adds	r3, #1
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c2:	3b01      	subs	r3, #1
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1dd      	bne.n	8006288 <USB_WritePMA+0x3a>
  }
}
 80062cc:	bf00      	nop
 80062ce:	3734      	adds	r7, #52	; 0x34
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr

080062d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b08b      	sub	sp, #44	; 0x2c
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	4611      	mov	r1, r2
 80062e2:	461a      	mov	r2, r3
 80062e4:	460b      	mov	r3, r1
 80062e6:	80fb      	strh	r3, [r7, #6]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062ec:	88bb      	ldrh	r3, [r7, #4]
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	005a      	lsls	r2, r3, #1
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006308:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
 800630e:	e01b      	b.n	8006348 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	3302      	adds	r3, #2
 800631c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3301      	adds	r3, #1
 800632a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	b2da      	uxtb	r2, r3
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	3301      	adds	r3, #1
 800633a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	3302      	adds	r3, #2
 8006340:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	3b01      	subs	r3, #1
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e0      	bne.n	8006310 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800634e:	88bb      	ldrh	r3, [r7, #4]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	b29b      	uxth	r3, r3
 8006360:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	701a      	strb	r2, [r3, #0]
  }
}
 800636a:	bf00      	nop
 800636c:	372c      	adds	r7, #44	; 0x2c
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006378:	4904      	ldr	r1, [pc, #16]	; (800638c <MX_FATFS_Init+0x18>)
 800637a:	4805      	ldr	r0, [pc, #20]	; (8006390 <MX_FATFS_Init+0x1c>)
 800637c:	f002 fd96 	bl	8008eac <FATFS_LinkDriver>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <MX_FATFS_Init+0x20>)
 8006386:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006388:	bf00      	nop
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20002d1c 	.word	0x20002d1c
 8006390:	20000060 	.word	0x20000060
 8006394:	20002d20 	.word	0x20002d20

08006398 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <USER_initialize+0x20>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80063a8:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <USER_initialize+0x20>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr
 80063b8:	2000005d 	.word	0x2000005d

080063bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <USER_status+0x20>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
    return Stat;
 80063cc:	4b03      	ldr	r3, [pc, #12]	; (80063dc <USER_status+0x20>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	2000005d 	.word	0x2000005d

080063e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80063f0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800640c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr

08006418 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	603a      	str	r2, [r7, #0]
 8006422:	71fb      	strb	r3, [r7, #7]
 8006424:	460b      	mov	r3, r1
 8006426:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
    return res;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7c1b      	ldrb	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d115      	bne.n	8006478 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800644c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006450:	2202      	movs	r2, #2
 8006452:	2101      	movs	r1, #1
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f005 fe06 	bl	800c066 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006466:	2202      	movs	r2, #2
 8006468:	2181      	movs	r1, #129	; 0x81
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f005 fdfb 	bl	800c066 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c
 8006476:	e012      	b.n	800649e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006478:	2340      	movs	r3, #64	; 0x40
 800647a:	2202      	movs	r2, #2
 800647c:	2101      	movs	r1, #1
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f005 fdf1 	bl	800c066 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	2202      	movs	r2, #2
 8006490:	2181      	movs	r1, #129	; 0x81
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f005 fde7 	bl	800c066 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800649e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80064a2:	f005 ff27 	bl	800c2f4 <USBD_static_malloc>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 80064b8:	2302      	movs	r3, #2
 80064ba:	e003      	b.n	80064c4 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f9d9 	bl	8006874 <MSC_BOT_Init>

  return USBD_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80064d8:	2101      	movs	r1, #1
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f005 fde9 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80064e8:	2181      	movs	r1, #129	; 0x81
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f005 fde1 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa06 	bl	8006908 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650c:	4618      	mov	r0, r3
 800650e:	f005 fefd 	bl	800c30c <USBD_static_free>
    pdev->pClassData  = NULL;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006546:	2b00      	cmp	r3, #0
 8006548:	d04d      	beq.n	80065e6 <USBD_MSC_Setup+0xc2>
 800654a:	2b20      	cmp	r3, #32
 800654c:	f040 8113 	bne.w	8006776 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	785b      	ldrb	r3, [r3, #1]
 8006554:	2bfe      	cmp	r3, #254	; 0xfe
 8006556:	d002      	beq.n	800655e <USBD_MSC_Setup+0x3a>
 8006558:	2bff      	cmp	r3, #255	; 0xff
 800655a:	d024      	beq.n	80065a6 <USBD_MSC_Setup+0x82>
 800655c:	e03b      	b.n	80065d6 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	885b      	ldrh	r3, [r3, #2]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d118      	bne.n	8006598 <USBD_MSC_Setup+0x74>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	88db      	ldrh	r3, [r3, #6]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d114      	bne.n	8006598 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006574:	2b00      	cmp	r3, #0
 8006576:	da0f      	bge.n	8006598 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	4798      	blx	r3
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	2201      	movs	r2, #1
 800658e:	4619      	mov	r1, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f002 fbbd 	bl	8008d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006596:	e025      	b.n	80065e4 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f002 fb4e 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 80065a0:	2302      	movs	r3, #2
 80065a2:	75fb      	strb	r3, [r7, #23]
          break;
 80065a4:	e01e      	b.n	80065e4 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	885b      	ldrh	r3, [r3, #2]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10c      	bne.n	80065c8 <USBD_MSC_Setup+0xa4>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	88db      	ldrh	r3, [r3, #6]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d108      	bne.n	80065c8 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80065bc:	2b00      	cmp	r3, #0
 80065be:	db03      	blt.n	80065c8 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f987 	bl	80068d4 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065c6:	e00d      	b.n	80065e4 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f002 fb36 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 80065d0:	2302      	movs	r3, #2
 80065d2:	75fb      	strb	r3, [r7, #23]
          break;
 80065d4:	e006      	b.n	80065e4 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f002 fb2f 	bl	8008c3c <USBD_CtlError>
          ret = USBD_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	75fb      	strb	r3, [r7, #23]
          break;
 80065e2:	bf00      	nop
      }
      break;
 80065e4:	e0ce      	b.n	8006784 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	2b0b      	cmp	r3, #11
 80065ec:	f200 80bb 	bhi.w	8006766 <USBD_MSC_Setup+0x242>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <USBD_MSC_Setup+0xd4>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	08006629 	.word	0x08006629
 80065fc:	0800669f 	.word	0x0800669f
 8006600:	08006767 	.word	0x08006767
 8006604:	08006767 	.word	0x08006767
 8006608:	08006767 	.word	0x08006767
 800660c:	08006767 	.word	0x08006767
 8006610:	08006767 	.word	0x08006767
 8006614:	08006767 	.word	0x08006767
 8006618:	08006767 	.word	0x08006767
 800661c:	08006767 	.word	0x08006767
 8006620:	08006651 	.word	0x08006651
 8006624:	08006679 	.word	0x08006679
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662e:	2b03      	cmp	r3, #3
 8006630:	d107      	bne.n	8006642 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006632:	f107 030e 	add.w	r3, r7, #14
 8006636:	2202      	movs	r2, #2
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f002 fb68 	bl	8008d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006640:	e098      	b.n	8006774 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f002 faf9 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e091      	b.n	8006774 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006656:	2b03      	cmp	r3, #3
 8006658:	d107      	bne.n	800666a <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3304      	adds	r3, #4
 800665e:	2201      	movs	r2, #1
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f002 fb54 	bl	8008d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006668:	e084      	b.n	8006774 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f002 fae5 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8006672:	2302      	movs	r3, #2
 8006674:	75fb      	strb	r3, [r7, #23]
          break;
 8006676:	e07d      	b.n	8006774 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800667e:	2b03      	cmp	r3, #3
 8006680:	d106      	bne.n	8006690 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	885b      	ldrh	r3, [r3, #2]
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800668e:	e071      	b.n	8006774 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f002 fad2 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8006698:	2302      	movs	r3, #2
 800669a:	75fb      	strb	r3, [r7, #23]
          break;
 800669c:	e06a      	b.n	8006774 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	889b      	ldrh	r3, [r3, #4]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f005 fd22 	bl	800c0f0 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	889b      	ldrh	r3, [r3, #4]
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f005 fcfc 	bl	800c0b2 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	889b      	ldrh	r3, [r3, #4]
 80066be:	b25b      	sxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da23      	bge.n	800670c <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	889b      	ldrh	r3, [r3, #4]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 020f 	and.w	r2, r3, #15
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	3318      	adds	r3, #24
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7c1b      	ldrb	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80066e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ec:	2202      	movs	r2, #2
 80066ee:	2181      	movs	r1, #129	; 0x81
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f005 fcb8 	bl	800c066 <USBD_LL_OpenEP>
 80066f6:	e005      	b.n	8006704 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80066f8:	2340      	movs	r3, #64	; 0x40
 80066fa:	2202      	movs	r2, #2
 80066fc:	2181      	movs	r1, #129	; 0x81
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f005 fcb1 	bl	800c066 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	62da      	str	r2, [r3, #44]	; 0x2c
 800670a:	e024      	b.n	8006756 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	889b      	ldrh	r3, [r3, #4]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 020f 	and.w	r2, r3, #15
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c1b      	ldrb	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d107      	bne.n	8006742 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006736:	2202      	movs	r2, #2
 8006738:	2101      	movs	r1, #1
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f005 fc93 	bl	800c066 <USBD_LL_OpenEP>
 8006740:	e005      	b.n	800674e <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006742:	2340      	movs	r3, #64	; 0x40
 8006744:	2202      	movs	r2, #2
 8006746:	2101      	movs	r1, #1
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f005 fc8c 	bl	800c066 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	889b      	ldrh	r3, [r3, #4]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa50 	bl	8006c04 <MSC_BOT_CplClrFeature>
          break;
 8006764:	e006      	b.n	8006774 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f002 fa67 	bl	8008c3c <USBD_CtlError>
          ret = USBD_FAIL;
 800676e:	2302      	movs	r3, #2
 8006770:	75fb      	strb	r3, [r7, #23]
          break;
 8006772:	bf00      	nop
      }
      break;
 8006774:	e006      	b.n	8006784 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 fa5f 	bl	8008c3c <USBD_CtlError>
      ret = USBD_FAIL;
 800677e:	2302      	movs	r3, #2
 8006780:	75fb      	strb	r3, [r7, #23]
      break;
 8006782:	bf00      	nop
  }

  return ret;
 8006784:	7dfb      	ldrb	r3, [r7, #23]
}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop

08006790 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f8c1 	bl	8006928 <MSC_BOT_DataIn>

  return USBD_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f8e2 	bl	800698a <MSC_BOT_DataOut>

  return USBD_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80067de:	4b03      	ldr	r3, [pc, #12]	; (80067ec <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bc80      	pop	{r7}
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	200000ac 	.word	0x200000ac

080067f0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80067fe:	4b03      	ldr	r3, [pc, #12]	; (800680c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bc80      	pop	{r7}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	200000cc 	.word	0x200000cc

08006810 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800681e:	4b03      	ldr	r3, [pc, #12]	; (800682c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	bc80      	pop	{r7}
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	200000ec 	.word	0x200000ec

08006830 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	220a      	movs	r2, #10
 800683c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800683e:	4b03      	ldr	r3, [pc, #12]	; (800684c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	bc80      	pop	{r7}
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	2000010c 	.word	0x2000010c

08006850 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2000      	movs	r0, #0
 80068aa:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80068ac:	2101      	movs	r1, #1
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f005 fc1e 	bl	800c0f0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80068b4:	2181      	movs	r1, #129	; 0x81
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f005 fc1a 	bl	800c0f0 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80068c2:	231f      	movs	r3, #31
 80068c4:	2101      	movs	r1, #1
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f005 fcdd 	bl	800c286 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80068f6:	231f      	movs	r3, #31
 80068f8:	2101      	movs	r1, #1
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f005 fcc3 	bl	800c286 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006900:	bf00      	nop
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006916:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	721a      	strb	r2, [r3, #8]
}
 800691e:	bf00      	nop
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	7a1b      	ldrb	r3, [r3, #8]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d004      	beq.n	800694e <MSC_BOT_DataIn+0x26>
 8006944:	2b02      	cmp	r3, #2
 8006946:	db19      	blt.n	800697c <MSC_BOT_DataIn+0x54>
 8006948:	2b04      	cmp	r3, #4
 800694a:	dc17      	bgt.n	800697c <MSC_BOT_DataIn+0x54>
 800694c:	e011      	b.n	8006972 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800695a:	461a      	mov	r2, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f979 	bl	8006c54 <SCSI_ProcessCmd>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	da0b      	bge.n	8006980 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006968:	2101      	movs	r1, #1
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f8f0 	bl	8006b50 <MSC_BOT_SendCSW>
      }
      break;
 8006970:	e006      	b.n	8006980 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006972:	2100      	movs	r1, #0
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f8eb 	bl	8006b50 <MSC_BOT_SendCSW>
      break;
 800697a:	e002      	b.n	8006982 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <MSC_BOT_DataIn+0x5a>
      break;
 8006980:	bf00      	nop
  }
}
 8006982:	bf00      	nop
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	7a1b      	ldrb	r3, [r3, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <MSC_BOT_DataOut+0x22>
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d004      	beq.n	80069b4 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80069aa:	e015      	b.n	80069d8 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f817 	bl	80069e0 <MSC_BOT_CBW_Decode>
      break;
 80069b2:	e011      	b.n	80069d8 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80069c0:	461a      	mov	r2, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f946 	bl	8006c54 <SCSI_ProcessCmd>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da03      	bge.n	80069d6 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80069ce:	2101      	movs	r1, #1
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f8bd 	bl	8006b50 <MSC_BOT_SendCSW>
      break;
 80069d6:	bf00      	nop
  }
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006a08:	2101      	movs	r1, #1
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f005 fc5e 	bl	800c2cc <USBD_LL_GetRxDataSize>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b1f      	cmp	r3, #31
 8006a14:	d114      	bne.n	8006a40 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006a1c:	4a32      	ldr	r2, [pc, #200]	; (8006ae8 <MSC_BOT_CBW_Decode+0x108>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10e      	bne.n	8006a40 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d809      	bhi.n	8006a40 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d004      	beq.n	8006a40 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d90e      	bls.n	8006a5e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006a46:	2320      	movs	r3, #32
 8006a48:	2205      	movs	r2, #5
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fc48 	bl	80072e0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2202      	movs	r2, #2
 8006a54:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f8a6 	bl	8006ba8 <MSC_BOT_Abort>
 8006a5c:	e041      	b.n	8006ae2 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f8f1 	bl	8006c54 <SCSI_ProcessCmd>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da0c      	bge.n	8006a92 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	7a1b      	ldrb	r3, [r3, #8]
 8006a7c:	2b05      	cmp	r3, #5
 8006a7e:	d104      	bne.n	8006a8a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006a80:	2101      	movs	r1, #1
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f864 	bl	8006b50 <MSC_BOT_SendCSW>
 8006a88:	e02b      	b.n	8006ae2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f88c 	bl	8006ba8 <MSC_BOT_Abort>
 8006a90:	e027      	b.n	8006ae2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	7a1b      	ldrb	r3, [r3, #8]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d022      	beq.n	8006ae0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d01e      	beq.n	8006ae0 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d01a      	beq.n	8006ae0 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	895b      	ldrh	r3, [r3, #10]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f103 010c 	add.w	r1, r3, #12
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	895b      	ldrh	r3, [r3, #10]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f814 	bl	8006aec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006ac4:	e00d      	b.n	8006ae2 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	895b      	ldrh	r3, [r3, #10]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006ace:	2100      	movs	r1, #0
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f83d 	bl	8006b50 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006ad6:	e004      	b.n	8006ae2 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f865 	bl	8006ba8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8006ade:	e000      	b.n	8006ae2 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006ae0:	bf00      	nop
    }
  }
}
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	43425355 	.word	0x43425355

08006aec <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	4613      	mov	r3, r2
 8006af8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b00:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006b08:	88fb      	ldrh	r3, [r7, #6]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d204      	bcs.n	8006b18 <MSC_BOT_SendData+0x2c>
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	e000      	b.n	8006b1a <MSC_BOT_SendData+0x2e>
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	2204      	movs	r2, #4
 8006b38:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8006b3a:	8a7b      	ldrh	r3, [r7, #18]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	2181      	movs	r1, #129	; 0x81
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f005 fb7d 	bl	800c240 <USBD_LL_Transmit>
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	460b      	mov	r3, r1
 8006b5a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b62:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <MSC_BOT_SendCSW+0x54>)
 8006b68:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	78fa      	ldrb	r2, [r7, #3]
 8006b70:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006b80:	230d      	movs	r3, #13
 8006b82:	2181      	movs	r1, #129	; 0x81
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f005 fb5b 	bl	800c240 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006b90:	231f      	movs	r3, #31
 8006b92:	2101      	movs	r1, #1
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f005 fb76 	bl	800c286 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	53425355 	.word	0x53425355

08006ba8 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb6:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10c      	bne.n	8006bdc <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d103      	bne.n	8006bdc <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f005 faa9 	bl	800c12e <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006bdc:	2181      	movs	r1, #129	; 0x81
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f005 faa5 	bl	800c12e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	7a5b      	ldrb	r3, [r3, #9]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d107      	bne.n	8006bfc <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006bf2:	231f      	movs	r3, #31
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f005 fb45 	bl	800c286 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c16:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	7a5b      	ldrb	r3, [r3, #9]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d107      	bne.n	8006c30 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006c20:	2181      	movs	r1, #129	; 0x81
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f005 fa83 	bl	800c12e <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	725a      	strb	r2, [r3, #9]
 8006c2e:	e00d      	b.n	8006c4c <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da08      	bge.n	8006c4a <MSC_BOT_CplClrFeature+0x46>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	7a5b      	ldrb	r3, [r3, #9]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d004      	beq.n	8006c4a <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006c40:	2101      	movs	r1, #1
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff ff84 	bl	8006b50 <MSC_BOT_SendCSW>
 8006c48:	e000      	b.n	8006c4c <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006c4a:	bf00      	nop
  }
}
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b5a      	cmp	r3, #90	; 0x5a
 8006c68:	f200 810e 	bhi.w	8006e88 <SCSI_ProcessCmd+0x234>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <SCSI_ProcessCmd+0x20>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006de1 	.word	0x08006de1
 8006c78:	08006e89 	.word	0x08006e89
 8006c7c:	08006e89 	.word	0x08006e89
 8006c80:	08006def 	.word	0x08006def
 8006c84:	08006e89 	.word	0x08006e89
 8006c88:	08006e89 	.word	0x08006e89
 8006c8c:	08006e89 	.word	0x08006e89
 8006c90:	08006e89 	.word	0x08006e89
 8006c94:	08006e89 	.word	0x08006e89
 8006c98:	08006e89 	.word	0x08006e89
 8006c9c:	08006e89 	.word	0x08006e89
 8006ca0:	08006e89 	.word	0x08006e89
 8006ca4:	08006e89 	.word	0x08006e89
 8006ca8:	08006e89 	.word	0x08006e89
 8006cac:	08006e89 	.word	0x08006e89
 8006cb0:	08006e89 	.word	0x08006e89
 8006cb4:	08006e89 	.word	0x08006e89
 8006cb8:	08006e89 	.word	0x08006e89
 8006cbc:	08006dfd 	.word	0x08006dfd
 8006cc0:	08006e89 	.word	0x08006e89
 8006cc4:	08006e89 	.word	0x08006e89
 8006cc8:	08006e89 	.word	0x08006e89
 8006ccc:	08006e89 	.word	0x08006e89
 8006cd0:	08006e89 	.word	0x08006e89
 8006cd4:	08006e89 	.word	0x08006e89
 8006cd8:	08006e89 	.word	0x08006e89
 8006cdc:	08006e27 	.word	0x08006e27
 8006ce0:	08006e0b 	.word	0x08006e0b
 8006ce4:	08006e89 	.word	0x08006e89
 8006ce8:	08006e89 	.word	0x08006e89
 8006cec:	08006e19 	.word	0x08006e19
 8006cf0:	08006e89 	.word	0x08006e89
 8006cf4:	08006e89 	.word	0x08006e89
 8006cf8:	08006e89 	.word	0x08006e89
 8006cfc:	08006e89 	.word	0x08006e89
 8006d00:	08006e43 	.word	0x08006e43
 8006d04:	08006e89 	.word	0x08006e89
 8006d08:	08006e51 	.word	0x08006e51
 8006d0c:	08006e89 	.word	0x08006e89
 8006d10:	08006e89 	.word	0x08006e89
 8006d14:	08006e5f 	.word	0x08006e5f
 8006d18:	08006e89 	.word	0x08006e89
 8006d1c:	08006e6d 	.word	0x08006e6d
 8006d20:	08006e89 	.word	0x08006e89
 8006d24:	08006e89 	.word	0x08006e89
 8006d28:	08006e89 	.word	0x08006e89
 8006d2c:	08006e89 	.word	0x08006e89
 8006d30:	08006e7b 	.word	0x08006e7b
 8006d34:	08006e89 	.word	0x08006e89
 8006d38:	08006e89 	.word	0x08006e89
 8006d3c:	08006e89 	.word	0x08006e89
 8006d40:	08006e89 	.word	0x08006e89
 8006d44:	08006e89 	.word	0x08006e89
 8006d48:	08006e89 	.word	0x08006e89
 8006d4c:	08006e89 	.word	0x08006e89
 8006d50:	08006e89 	.word	0x08006e89
 8006d54:	08006e89 	.word	0x08006e89
 8006d58:	08006e89 	.word	0x08006e89
 8006d5c:	08006e89 	.word	0x08006e89
 8006d60:	08006e89 	.word	0x08006e89
 8006d64:	08006e89 	.word	0x08006e89
 8006d68:	08006e89 	.word	0x08006e89
 8006d6c:	08006e89 	.word	0x08006e89
 8006d70:	08006e89 	.word	0x08006e89
 8006d74:	08006e89 	.word	0x08006e89
 8006d78:	08006e89 	.word	0x08006e89
 8006d7c:	08006e89 	.word	0x08006e89
 8006d80:	08006e89 	.word	0x08006e89
 8006d84:	08006e89 	.word	0x08006e89
 8006d88:	08006e89 	.word	0x08006e89
 8006d8c:	08006e89 	.word	0x08006e89
 8006d90:	08006e89 	.word	0x08006e89
 8006d94:	08006e89 	.word	0x08006e89
 8006d98:	08006e89 	.word	0x08006e89
 8006d9c:	08006e89 	.word	0x08006e89
 8006da0:	08006e89 	.word	0x08006e89
 8006da4:	08006e89 	.word	0x08006e89
 8006da8:	08006e89 	.word	0x08006e89
 8006dac:	08006e89 	.word	0x08006e89
 8006db0:	08006e89 	.word	0x08006e89
 8006db4:	08006e89 	.word	0x08006e89
 8006db8:	08006e89 	.word	0x08006e89
 8006dbc:	08006e89 	.word	0x08006e89
 8006dc0:	08006e89 	.word	0x08006e89
 8006dc4:	08006e89 	.word	0x08006e89
 8006dc8:	08006e89 	.word	0x08006e89
 8006dcc:	08006e89 	.word	0x08006e89
 8006dd0:	08006e89 	.word	0x08006e89
 8006dd4:	08006e89 	.word	0x08006e89
 8006dd8:	08006e89 	.word	0x08006e89
 8006ddc:	08006e35 	.word	0x08006e35
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4619      	mov	r1, r3
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f85c 	bl	8006ea4 <SCSI_TestUnitReady>
      break;
 8006dec:	e055      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8006dee:	7afb      	ldrb	r3, [r7, #11]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4619      	mov	r1, r3
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 fa09 	bl	800720c <SCSI_RequestSense>
      break;
 8006dfa:	e04e      	b.n	8006e9a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	4619      	mov	r1, r3
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 f888 	bl	8006f18 <SCSI_Inquiry>
      break;
 8006e08:	e047      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fa9e 	bl	8007352 <SCSI_StartStopUnit>
      break;
 8006e16:	e040      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006e18:	7afb      	ldrb	r3, [r7, #11]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 fa97 	bl	8007352 <SCSI_StartStopUnit>
      break;
 8006e24:	e039      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f99d 	bl	800716c <SCSI_ModeSense6>
      break;
 8006e32:	e032      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f9be 	bl	80071bc <SCSI_ModeSense10>
      break;
 8006e40:	e02b      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006e42:	7afb      	ldrb	r3, [r7, #11]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4619      	mov	r1, r3
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f92a 	bl	80070a2 <SCSI_ReadFormatCapacity>
      break;
 8006e4e:	e024      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006e50:	7afb      	ldrb	r3, [r7, #11]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4619      	mov	r1, r3
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f8bc 	bl	8006fd4 <SCSI_ReadCapacity10>
      break;
 8006e5c:	e01d      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4619      	mov	r1, r3
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f000 fa88 	bl	800737a <SCSI_Read10>
      break;
 8006e6a:	e016      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	4619      	mov	r1, r3
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fb0d 	bl	8007492 <SCSI_Write10>
      break;
 8006e78:	e00f      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006e7a:	7afb      	ldrb	r3, [r7, #11]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	4619      	mov	r1, r3
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fbb6 	bl	80075f2 <SCSI_Verify10>
      break;
 8006e86:	e008      	b.n	8006e9a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006e88:	7af9      	ldrb	r1, [r7, #11]
 8006e8a:	2320      	movs	r3, #32
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fa26 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 8006e94:	f04f 33ff 	mov.w	r3, #4294967295
 8006e98:	e000      	b.n	8006e9c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	460b      	mov	r3, r1
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb8:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006eca:	2320      	movs	r3, #32
 8006ecc:	2205      	movs	r2, #5
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fa06 	bl	80072e0 <SCSI_SenseCode>

    return -1;
 8006ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed8:	e019      	b.n	8006f0e <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	7afa      	ldrb	r2, [r7, #11]
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006eee:	7af9      	ldrb	r1, [r7, #11]
 8006ef0:	233a      	movs	r3, #58	; 0x3a
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f9f3 	bl	80072e0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2205      	movs	r2, #5
 8006efe:	721a      	strb	r2, [r3, #8]

    return -1;
 8006f00:	f04f 33ff 	mov.w	r3, #4294967295
 8006f04:	e003      	b.n	8006f0e <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	815a      	strh	r2, [r3, #10]

  return 0;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f18 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b089      	sub	sp, #36	; 0x24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	460b      	mov	r3, r1
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2c:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3301      	adds	r3, #1
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 0301 	and.w	r3, r3, #1
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d014      	beq.n	8006f66 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8006f3c:	2307      	movs	r3, #7
 8006f3e:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	8bfa      	ldrh	r2, [r7, #30]
 8006f44:	815a      	strh	r2, [r3, #10]

    while (len)
 8006f46:	e00a      	b.n	8006f5e <SCSI_Inquiry+0x46>
    {
      len--;
 8006f48:	8bfb      	ldrh	r3, [r7, #30]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006f4e:	8bfb      	ldrh	r3, [r7, #30]
 8006f50:	8bfa      	ldrh	r2, [r7, #30]
 8006f52:	491f      	ldr	r1, [pc, #124]	; (8006fd0 <SCSI_Inquiry+0xb8>)
 8006f54:	5c89      	ldrb	r1, [r1, r2]
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4413      	add	r3, r2
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	731a      	strb	r2, [r3, #12]
    while (len)
 8006f5e:	8bfb      	ldrh	r3, [r7, #30]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1f1      	bne.n	8006f48 <SCSI_Inquiry+0x30>
 8006f64:	e02e      	b.n	8006fc4 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f6c:	69d9      	ldr	r1, [r3, #28]
 8006f6e:	7afa      	ldrb	r2, [r7, #11]
 8006f70:	4613      	mov	r3, r2
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3305      	adds	r3, #5
 8006f86:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	8bfa      	ldrh	r2, [r7, #30]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d303      	bcc.n	8006f9e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	8bfa      	ldrh	r2, [r7, #30]
 8006fa2:	815a      	strh	r2, [r3, #10]

    while (len)
 8006fa4:	e00b      	b.n	8006fbe <SCSI_Inquiry+0xa6>
    {
      len--;
 8006fa6:	8bfb      	ldrh	r3, [r7, #30]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8006fac:	8bfb      	ldrh	r3, [r7, #30]
 8006fae:	8bfa      	ldrh	r2, [r7, #30]
 8006fb0:	6979      	ldr	r1, [r7, #20]
 8006fb2:	440a      	add	r2, r1
 8006fb4:	7811      	ldrb	r1, [r2, #0]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	4413      	add	r3, r2
 8006fba:	460a      	mov	r2, r1
 8006fbc:	731a      	strb	r2, [r3, #12]
    while (len)
 8006fbe:	8bfb      	ldrh	r3, [r7, #30]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1f0      	bne.n	8006fa6 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3724      	adds	r7, #36	; 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bc80      	pop	{r7}
 8006fce:	4770      	bx	lr
 8006fd0:	0800ce5c 	.word	0x0800ce5c

08006fd4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe8:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8006ffe:	7af8      	ldrb	r0, [r7, #11]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007008:	7af9      	ldrb	r1, [r7, #11]
 800700a:	233a      	movs	r3, #58	; 0x3a
 800700c:	2202      	movs	r2, #2
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f966 	bl	80072e0 <SCSI_SenseCode>
    return -1;
 8007014:	f04f 33ff 	mov.w	r3, #4294967295
 8007018:	e03f      	b.n	800709a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007020:	3b01      	subs	r3, #1
 8007022:	0e1b      	lsrs	r3, r3, #24
 8007024:	b2da      	uxtb	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007030:	3b01      	subs	r3, #1
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	b2da      	uxtb	r2, r3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007040:	3b01      	subs	r3, #1
 8007042:	0a1b      	lsrs	r3, r3, #8
 8007044:	b2da      	uxtb	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007050:	b2db      	uxtb	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b2da      	uxtb	r2, r3
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007060:	161b      	asrs	r3, r3, #24
 8007062:	b2da      	uxtb	r2, r3
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800706e:	141b      	asrs	r3, r3, #16
 8007070:	b2da      	uxtb	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	b29b      	uxth	r3, r3
 8007080:	b2da      	uxtb	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800708c:	b2da      	uxtb	r2, r3
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2208      	movs	r2, #8
 8007096:	815a      	strh	r2, [r3, #10]
    return 0;
 8007098:	2300      	movs	r3, #0
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	3718      	adds	r7, #24
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b088      	sub	sp, #32
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	60f8      	str	r0, [r7, #12]
 80070aa:	460b      	mov	r3, r1
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b6:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	83fb      	strh	r3, [r7, #30]
 80070bc:	e007      	b.n	80070ce <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80070be:	8bfb      	ldrh	r3, [r7, #30]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	4413      	add	r3, r2
 80070c4:	2200      	movs	r2, #0
 80070c6:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80070c8:	8bfb      	ldrh	r3, [r7, #30]
 80070ca:	3301      	adds	r3, #1
 80070cc:	83fb      	strh	r3, [r7, #30]
 80070ce:	8bfb      	ldrh	r3, [r7, #30]
 80070d0:	2b0b      	cmp	r3, #11
 80070d2:	d9f4      	bls.n	80070be <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f107 0216 	add.w	r2, r7, #22
 80070e0:	f107 0110 	add.w	r1, r7, #16
 80070e4:	7af8      	ldrb	r0, [r7, #11]
 80070e6:	4798      	blx	r3
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d008      	beq.n	8007100 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80070ee:	7af9      	ldrb	r1, [r7, #11]
 80070f0:	233a      	movs	r3, #58	; 0x3a
 80070f2:	2202      	movs	r2, #2
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f8f3 	bl	80072e0 <SCSI_SenseCode>
    return -1;
 80070fa:	f04f 33ff 	mov.w	r3, #4294967295
 80070fe:	e030      	b.n	8007162 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2208      	movs	r2, #8
 8007104:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3b01      	subs	r3, #1
 800710a:	0e1b      	lsrs	r3, r3, #24
 800710c:	b2da      	uxtb	r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	3b01      	subs	r3, #1
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	b2da      	uxtb	r2, r3
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	3b01      	subs	r3, #1
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	b2da      	uxtb	r2, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b2da      	uxtb	r2, r3
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2202      	movs	r2, #2
 800713a:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800713c:	8afb      	ldrh	r3, [r7, #22]
 800713e:	141b      	asrs	r3, r3, #16
 8007140:	b2da      	uxtb	r2, r3
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007146:	8afb      	ldrh	r3, [r7, #22]
 8007148:	0a1b      	lsrs	r3, r3, #8
 800714a:	b29b      	uxth	r3, r3
 800714c:	b2da      	uxtb	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	220c      	movs	r2, #12
 800715e:	815a      	strh	r2, [r3, #10]
    return 0;
 8007160:	2300      	movs	r3, #0
  }
}
 8007162:	4618      	mov	r0, r3
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	460b      	mov	r3, r1
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007182:	2308      	movs	r3, #8
 8007184:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	8afa      	ldrh	r2, [r7, #22]
 800718a:	815a      	strh	r2, [r3, #10]

  while (len)
 800718c:	e00a      	b.n	80071a4 <SCSI_ModeSense6+0x38>
  {
    len--;
 800718e:	8afb      	ldrh	r3, [r7, #22]
 8007190:	3b01      	subs	r3, #1
 8007192:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007194:	8afb      	ldrh	r3, [r7, #22]
 8007196:	8afa      	ldrh	r2, [r7, #22]
 8007198:	4907      	ldr	r1, [pc, #28]	; (80071b8 <SCSI_ModeSense6+0x4c>)
 800719a:	5c89      	ldrb	r1, [r1, r2]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	460a      	mov	r2, r1
 80071a2:	731a      	strb	r2, [r3, #12]
  while (len)
 80071a4:	8afb      	ldrh	r3, [r7, #22]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f1      	bne.n	800718e <SCSI_ModeSense6+0x22>
  }
  return 0;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	0800ce64 	.word	0x0800ce64

080071bc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	460b      	mov	r3, r1
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 80071ca:	2308      	movs	r3, #8
 80071cc:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071d4:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	8afa      	ldrh	r2, [r7, #22]
 80071da:	815a      	strh	r2, [r3, #10]

  while (len)
 80071dc:	e00a      	b.n	80071f4 <SCSI_ModeSense10+0x38>
  {
    len--;
 80071de:	8afb      	ldrh	r3, [r7, #22]
 80071e0:	3b01      	subs	r3, #1
 80071e2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 80071e4:	8afb      	ldrh	r3, [r7, #22]
 80071e6:	8afa      	ldrh	r2, [r7, #22]
 80071e8:	4907      	ldr	r1, [pc, #28]	; (8007208 <SCSI_ModeSense10+0x4c>)
 80071ea:	5c89      	ldrb	r1, [r1, r2]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4413      	add	r3, r2
 80071f0:	460a      	mov	r2, r1
 80071f2:	731a      	strb	r2, [r3, #12]
  while (len)
 80071f4:	8afb      	ldrh	r3, [r7, #22]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1f1      	bne.n	80071de <SCSI_ModeSense10+0x22>
  }

  return 0;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	0800ce6c 	.word	0x0800ce6c

0800720c <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	460b      	mov	r3, r1
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007220:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
 8007226:	e007      	b.n	8007238 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	4413      	add	r3, r2
 800722e:	2200      	movs	r2, #0
 8007230:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	3301      	adds	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
 8007238:	7dfb      	ldrb	r3, [r7, #23]
 800723a:	2b11      	cmp	r3, #17
 800723c:	d9f4      	bls.n	8007228 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2270      	movs	r2, #112	; 0x70
 8007242:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	220c      	movs	r2, #12
 8007248:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007256:	429a      	cmp	r2, r3
 8007258:	d02e      	beq.n	80072b8 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	3347      	adds	r3, #71	; 0x47
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	4413      	add	r3, r2
 8007268:	791a      	ldrb	r2, [r3, #4]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	3347      	adds	r3, #71	; 0x47
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	4413      	add	r3, r2
 800727c:	7a5a      	ldrb	r2, [r3, #9]
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	3347      	adds	r3, #71	; 0x47
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4413      	add	r3, r2
 8007290:	7a1a      	ldrb	r2, [r3, #8]
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800729c:	3301      	adds	r3, #1
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d103      	bne.n	80072b8 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	2212      	movs	r2, #18
 80072bc:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3304      	adds	r3, #4
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b12      	cmp	r3, #18
 80072c6:	d805      	bhi.n	80072d4 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3304      	adds	r3, #4
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bc80      	pop	{r7}
 80072de:	4770      	bx	lr

080072e0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	4608      	mov	r0, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	461a      	mov	r2, r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	70fb      	strb	r3, [r7, #3]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70bb      	strb	r3, [r7, #2]
 80072f6:	4613      	mov	r3, r2
 80072f8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007300:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	3347      	adds	r3, #71	; 0x47
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4413      	add	r3, r2
 8007310:	78ba      	ldrb	r2, [r7, #2]
 8007312:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	3347      	adds	r3, #71	; 0x47
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	2200      	movs	r2, #0
 8007324:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800732c:	3301      	adds	r3, #1
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800733c:	2b04      	cmp	r3, #4
 800733e:	d103      	bne.n	8007348 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007352:	b480      	push	{r7}
 8007354:	b087      	sub	sp, #28
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	460b      	mov	r3, r1
 800735c:	607a      	str	r2, [r7, #4]
 800735e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	815a      	strh	r2, [r3, #10]
  return 0;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b086      	sub	sp, #24
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	460b      	mov	r3, r1
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800738e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	7a1b      	ldrb	r3, [r3, #8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d16e      	bne.n	8007476 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db0a      	blt.n	80073ba <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80073aa:	2320      	movs	r3, #32
 80073ac:	2205      	movs	r2, #5
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff ff96 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 80073b4:	f04f 33ff 	mov.w	r3, #4294967295
 80073b8:	e067      	b.n	800748a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	7afa      	ldrb	r2, [r7, #11]
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073ce:	7af9      	ldrb	r1, [r7, #11]
 80073d0:	233a      	movs	r3, #58	; 0x3a
 80073d2:	2202      	movs	r2, #2
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f7ff ff83 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 80073da:	f04f 33ff 	mov.w	r3, #4294967295
 80073de:	e054      	b.n	800748a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3302      	adds	r3, #2
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3303      	adds	r3, #3
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073f0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3304      	adds	r3, #4
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80073fa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	3205      	adds	r2, #5
 8007400:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007402:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3307      	adds	r3, #7
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	3208      	adds	r2, #8
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	431a      	orrs	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800742c:	7af9      	ldrb	r1, [r7, #11]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 f912 	bl	8007658 <SCSI_CheckAddressRange>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	da02      	bge.n	8007440 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800743a:	f04f 33ff 	mov.w	r3, #4294967295
 800743e:	e024      	b.n	800748a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2202      	movs	r2, #2
 8007444:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007452:	6979      	ldr	r1, [r7, #20]
 8007454:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007458:	fb01 f303 	mul.w	r3, r1, r3
 800745c:	429a      	cmp	r2, r3
 800745e:	d00a      	beq.n	8007476 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007466:	2320      	movs	r3, #32
 8007468:	2205      	movs	r2, #5
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff ff38 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 8007470:	f04f 33ff 	mov.w	r3, #4294967295
 8007474:	e009      	b.n	800748a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800747c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800747e:	7afb      	ldrb	r3, [r7, #11]
 8007480:	4619      	mov	r1, r3
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f90a 	bl	800769c <SCSI_ProcessRead>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b086      	sub	sp, #24
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	460b      	mov	r3, r1
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a6:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	7a1b      	ldrb	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f040 8096 	bne.w	80075de <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da0a      	bge.n	80074d4 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80074c4:	2320      	movs	r3, #32
 80074c6:	2205      	movs	r2, #5
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f7ff ff09 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 80074ce:	f04f 33ff 	mov.w	r3, #4294967295
 80074d2:	e08a      	b.n	80075ea <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	7afa      	ldrb	r2, [r7, #11]
 80074de:	4610      	mov	r0, r2
 80074e0:	4798      	blx	r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80074e8:	7af9      	ldrb	r1, [r7, #11]
 80074ea:	233a      	movs	r3, #58	; 0x3a
 80074ec:	2202      	movs	r2, #2
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7ff fef6 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 80074f4:	f04f 33ff 	mov.w	r3, #4294967295
 80074f8:	e077      	b.n	80075ea <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	7afa      	ldrb	r2, [r7, #11]
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800750e:	7af9      	ldrb	r1, [r7, #11]
 8007510:	2327      	movs	r3, #39	; 0x27
 8007512:	2202      	movs	r2, #2
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f7ff fee3 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 800751a:	f04f 33ff 	mov.w	r3, #4294967295
 800751e:	e064      	b.n	80075ea <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3302      	adds	r3, #2
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3303      	adds	r3, #3
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007530:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800753a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	3205      	adds	r2, #5
 8007540:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007542:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3307      	adds	r3, #7
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	3208      	adds	r2, #8
 8007556:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007558:	431a      	orrs	r2, r3
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800756c:	7af9      	ldrb	r1, [r7, #11]
 800756e:	68f8      	ldr	r0, [r7, #12]
 8007570:	f000 f872 	bl	8007658 <SCSI_CheckAddressRange>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	da02      	bge.n	8007580 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800757a:	f04f 33ff 	mov.w	r3, #4294967295
 800757e:	e034      	b.n	80075ea <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	429a      	cmp	r2, r3
 800759c:	d00a      	beq.n	80075b4 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80075a4:	2320      	movs	r3, #32
 80075a6:	2205      	movs	r2, #5
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f7ff fe99 	bl	80072e0 <SCSI_SenseCode>
      return -1;
 80075ae:	f04f 33ff 	mov.w	r3, #4294967295
 80075b2:	e01a      	b.n	80075ea <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ba:	bf28      	it	cs
 80075bc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80075c0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2201      	movs	r2, #1
 80075c6:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f103 020c 	add.w	r2, r3, #12
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2101      	movs	r1, #1
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f004 fe56 	bl	800c286 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	e005      	b.n	80075ea <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	4619      	mov	r1, r3
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 f8ce 	bl	8007784 <SCSI_ProcessWrite>
 80075e8:	4603      	mov	r3, r0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	460b      	mov	r3, r1
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007606:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007616:	7af9      	ldrb	r1, [r7, #11]
 8007618:	2324      	movs	r3, #36	; 0x24
 800761a:	2205      	movs	r2, #5
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff fe5f 	bl	80072e0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007622:	f04f 33ff 	mov.w	r3, #4294967295
 8007626:	e013      	b.n	8007650 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007634:	7af9      	ldrb	r1, [r7, #11]
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f80e 	bl	8007658 <SCSI_CheckAddressRange>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	da02      	bge.n	8007648 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007642:	f04f 33ff 	mov.w	r3, #4294967295
 8007646:	e003      	b.n	8007650 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	815a      	strh	r2, [r3, #10]
  return 0;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	607a      	str	r2, [r7, #4]
 8007662:	603b      	str	r3, [r7, #0]
 8007664:	460b      	mov	r3, r1
 8007666:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800766e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	441a      	add	r2, r3
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800767c:	429a      	cmp	r2, r3
 800767e:	d908      	bls.n	8007692 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007680:	7af9      	ldrb	r1, [r7, #11]
 8007682:	2321      	movs	r3, #33	; 0x21
 8007684:	2205      	movs	r2, #5
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fe2a 	bl	80072e0 <SCSI_SenseCode>
    return -1;
 800768c:	f04f 33ff 	mov.w	r3, #4294967295
 8007690:	e000      	b.n	8007694 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800769c:	b590      	push	{r4, r7, lr}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ae:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c8:	bf28      	it	cs
 80076ca:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80076ce:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d6:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076ea:	4618      	mov	r0, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	78f8      	ldrb	r0, [r7, #3]
 80076f6:	47a0      	blx	r4
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da08      	bge.n	8007710 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80076fe:	78f9      	ldrb	r1, [r7, #3]
 8007700:	2311      	movs	r3, #17
 8007702:	2204      	movs	r2, #4
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff fdeb 	bl	80072e0 <SCSI_SenseCode>
    return -1;
 800770a:	f04f 33ff 	mov.w	r3, #4294967295
 800770e:	e035      	b.n	800777c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f103 020c 	add.w	r2, r3, #12
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	b29b      	uxth	r3, r3
 800771a:	2181      	movs	r1, #129	; 0x81
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f004 fd8f 	bl	800c240 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800772e:	4619      	mov	r1, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	fbb3 f3f1 	udiv	r3, r3, r1
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800774a:	4619      	mov	r1, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	1ad2      	subs	r2, r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2203      	movs	r2, #3
 8007778:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	bd90      	pop	{r4, r7, pc}

08007784 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007784:	b590      	push	{r4, r7, lr}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 80077a4:	fb02 f303 	mul.w	r3, r2, r3
 80077a8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b0:	bf28      	it	cs
 80077b2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80077b6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077be:	695c      	ldr	r4, [r3, #20]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f103 010c 	add.w	r1, r3, #12
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80077d2:	4618      	mov	r0, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80077da:	b29b      	uxth	r3, r3
 80077dc:	78f8      	ldrb	r0, [r7, #3]
 80077de:	47a0      	blx	r4
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da08      	bge.n	80077f8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80077e6:	78f9      	ldrb	r1, [r7, #3]
 80077e8:	2303      	movs	r3, #3
 80077ea:	2204      	movs	r2, #4
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fd77 	bl	80072e0 <SCSI_SenseCode>

    return -1;
 80077f2:	f04f 33ff 	mov.w	r3, #4294967295
 80077f6:	e045      	b.n	8007884 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007804:	4619      	mov	r1, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	fbb3 f3f1 	udiv	r3, r3, r1
 800780c:	441a      	add	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007820:	4619      	mov	r1, r3
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	fbb3 f3f1 	udiv	r3, r3, r1
 8007828:	1ad2      	subs	r2, r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007846:	2b00      	cmp	r3, #0
 8007848:	d104      	bne.n	8007854 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800784a:	2100      	movs	r1, #0
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff f97f 	bl	8006b50 <MSC_BOT_SendCSW>
 8007852:	e016      	b.n	8007882 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007860:	fb02 f303 	mul.w	r3, r2, r3
 8007864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007868:	bf28      	it	cs
 800786a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800786e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f103 020c 	add.w	r2, r3, #12
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	b29b      	uxth	r3, r3
 800787a:	2101      	movs	r1, #1
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f004 fd02 	bl	800c286 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	bd90      	pop	{r4, r7, pc}

0800788c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800789c:	2302      	movs	r3, #2
 800789e:	2203      	movs	r2, #3
 80078a0:	2181      	movs	r1, #129	; 0x81
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f004 fbdf 	bl	800c066 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80078ae:	2302      	movs	r3, #2
 80078b0:	2203      	movs	r2, #3
 80078b2:	2101      	movs	r1, #1
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f004 fbd6 	bl	800c066 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80078c2:	2018      	movs	r0, #24
 80078c4:	f004 fd16 	bl	800c2f4 <USBD_static_malloc>
 80078c8:	4602      	mov	r2, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80078da:	2301      	movs	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
 80078de:	e011      	b.n	8007904 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078e6:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2200      	movs	r2, #0
 80078ec:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	2302      	movs	r3, #2
 80078fc:	2101      	movs	r1, #1
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f004 fcc1 	bl	800c286 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b082      	sub	sp, #8
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800791a:	2181      	movs	r1, #129	; 0x81
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f004 fbc8 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007928:	2101      	movs	r1, #1
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f004 fbc1 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00e      	beq.n	8007960 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007952:	4618      	mov	r0, r3
 8007954:	f004 fcda 	bl	800c30c <USBD_static_free>
    pdev->pClassData = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007996:	2b00      	cmp	r3, #0
 8007998:	d051      	beq.n	8007a3e <USBD_CUSTOM_HID_Setup+0xd2>
 800799a:	2b20      	cmp	r3, #32
 800799c:	f040 80d8 	bne.w	8007b50 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	3b02      	subs	r3, #2
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	d841      	bhi.n	8007a2e <USBD_CUSTOM_HID_Setup+0xc2>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <USBD_CUSTOM_HID_Setup+0x44>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	080079e7 	.word	0x080079e7
 80079b8:	08007a2f 	.word	0x08007a2f
 80079bc:	08007a2f 	.word	0x08007a2f
 80079c0:	08007a2f 	.word	0x08007a2f
 80079c4:	08007a2f 	.word	0x08007a2f
 80079c8:	08007a2f 	.word	0x08007a2f
 80079cc:	08007a19 	.word	0x08007a19
 80079d0:	080079f7 	.word	0x080079f7
 80079d4:	080079d9 	.word	0x080079d9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	461a      	mov	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]
          break;
 80079e4:	e02a      	b.n	8007a3c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3304      	adds	r3, #4
 80079ea:	2201      	movs	r2, #1
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 f98e 	bl	8008d10 <USBD_CtlSendData>
          break;
 80079f4:	e022      	b.n	8007a3c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	885b      	ldrh	r3, [r3, #2]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	609a      	str	r2, [r3, #8]
          break;
 8007a06:	e019      	b.n	8007a3c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f97d 	bl	8008d10 <USBD_CtlSendData>
          break;
 8007a16:	e011      	b.n	8007a3c <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007a1e:	6939      	ldr	r1, [r7, #16]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	88db      	ldrh	r3, [r3, #6]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 f9a0 	bl	8008d6c <USBD_CtlPrepareRx>
          break;
 8007a2c:	e006      	b.n	8007a3c <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 f903 	bl	8008c3c <USBD_CtlError>
          ret = USBD_FAIL;
 8007a36:	2302      	movs	r3, #2
 8007a38:	75fb      	strb	r3, [r7, #23]
          break;
 8007a3a:	bf00      	nop
      }
      break;
 8007a3c:	e08f      	b.n	8007b5e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b0b      	cmp	r3, #11
 8007a44:	d87c      	bhi.n	8007b40 <USBD_CUSTOM_HID_Setup+0x1d4>
 8007a46:	a201      	add	r2, pc, #4	; (adr r2, 8007a4c <USBD_CUSTOM_HID_Setup+0xe0>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a7d 	.word	0x08007a7d
 8007a50:	08007b41 	.word	0x08007b41
 8007a54:	08007b41 	.word	0x08007b41
 8007a58:	08007b41 	.word	0x08007b41
 8007a5c:	08007b41 	.word	0x08007b41
 8007a60:	08007b41 	.word	0x08007b41
 8007a64:	08007aa5 	.word	0x08007aa5
 8007a68:	08007b41 	.word	0x08007b41
 8007a6c:	08007b41 	.word	0x08007b41
 8007a70:	08007b41 	.word	0x08007b41
 8007a74:	08007af3 	.word	0x08007af3
 8007a78:	08007b1b 	.word	0x08007b1b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d107      	bne.n	8007a96 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a86:	f107 030e 	add.w	r3, r7, #14
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 f93e 	bl	8008d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a94:	e05b      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f001 f8cf 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8007aa2:	e054      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	885b      	ldrh	r3, [r3, #2]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b22      	cmp	r3, #34	; 0x22
 8007aae:	d10b      	bne.n	8007ac8 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	88db      	ldrh	r3, [r3, #6]
 8007ab4:	2b5f      	cmp	r3, #95	; 0x5f
 8007ab6:	bf28      	it	cs
 8007ab8:	235f      	movcs	r3, #95	; 0x5f
 8007aba:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	e00d      	b.n	8007ae4 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	885b      	ldrh	r3, [r3, #2]
 8007acc:	0a1b      	lsrs	r3, r3, #8
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b21      	cmp	r3, #33	; 0x21
 8007ad2:	d107      	bne.n	8007ae4 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007ad4:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8007ad6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	88db      	ldrh	r3, [r3, #6]
 8007adc:	2b09      	cmp	r3, #9
 8007ade:	bf28      	it	cs
 8007ae0:	2309      	movcs	r3, #9
 8007ae2:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007ae4:	8bfb      	ldrh	r3, [r7, #30]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	69b9      	ldr	r1, [r7, #24]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f910 	bl	8008d10 <USBD_CtlSendData>
          break;
 8007af0:	e02d      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d107      	bne.n	8007b0c <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	330c      	adds	r3, #12
 8007b00:	2201      	movs	r2, #1
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f903 	bl	8008d10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b0a:	e020      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f001 f894 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b14:	2302      	movs	r3, #2
 8007b16:	75fb      	strb	r3, [r7, #23]
          break;
 8007b18:	e019      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	2b03      	cmp	r3, #3
 8007b22:	d106      	bne.n	8007b32 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b30:	e00d      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f881 	bl	8008c3c <USBD_CtlError>
            ret = USBD_FAIL;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b3e:	e006      	b.n	8007b4e <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 f87a 	bl	8008c3c <USBD_CtlError>
          ret = USBD_FAIL;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8007b4c:	bf00      	nop
      }
      break;
 8007b4e:	e006      	b.n	8007b5e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f872 	bl	8008c3c <USBD_CtlError>
      ret = USBD_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5c:	bf00      	nop
  }
  return ret;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3720      	adds	r7, #32
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	200001d4 	.word	0x200001d4

08007b6c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b80:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d10f      	bne.n	8007bac <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	7d1b      	ldrb	r3, [r3, #20]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2201      	movs	r2, #1
 8007b98:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007b9a:	88fb      	ldrh	r3, [r7, #6]
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	2181      	movs	r1, #129	; 0x81
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f004 fb4d 	bl	800c240 <USBD_LL_Transmit>
 8007ba6:	e001      	b.n	8007bac <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2229      	movs	r2, #41	; 0x29
 8007bc4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007bc6:	4b03      	ldr	r3, [pc, #12]	; (8007bd4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bc80      	pop	{r7}
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	20000150 	.word	0x20000150

08007bd8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2229      	movs	r2, #41	; 0x29
 8007be4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007be6:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bc80      	pop	{r7}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	2000017c 	.word	0x2000017c

08007bf8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2229      	movs	r2, #41	; 0x29
 8007c04:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007c06:	4b03      	ldr	r3, [pc, #12]	; (8007c14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	200001a8 	.word	0x200001a8

08007c18 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	460b      	mov	r3, r1
 8007c22:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr

08007c3a <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	460b      	mov	r3, r1
 8007c44:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c4c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	7810      	ldrb	r0, [r2, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	7852      	ldrb	r2, [r2, #1]
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	2302      	movs	r3, #2
 8007c66:	2101      	movs	r1, #1
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f004 fb0c 	bl	800c286 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c86:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d10c      	bne.n	8007caa <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	7810      	ldrb	r0, [r2, #0]
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	7852      	ldrb	r2, [r2, #1]
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007cc2:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	200001e0 	.word	0x200001e0

08007cd4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bc80      	pop	{r7}
 8007cfe:	4770      	bx	lr

08007d00 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d14:	2302      	movs	r3, #2
 8007d16:	e01a      	b.n	8007d4e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	79fa      	ldrb	r2, [r7, #7]
 8007d44:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f004 f922 	bl	800bf90 <USBD_LL_Init>

  return USBD_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d006      	beq.n	8007d78 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	e001      	b.n	8007d7c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f004 f94d 	bl	800c030 <USBD_LL_Start>

  return USBD_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00c      	beq.n	8007de8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	4611      	mov	r1, r2
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b082      	sub	sp, #8
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 feca 	bl	8008bc4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007e3e:	461a      	mov	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e4c:	f003 031f 	and.w	r3, r3, #31
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d00c      	beq.n	8007e6e <USBD_LL_SetupStage+0x56>
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d302      	bcc.n	8007e5e <USBD_LL_SetupStage+0x46>
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d010      	beq.n	8007e7e <USBD_LL_SetupStage+0x66>
 8007e5c:	e017      	b.n	8007e8e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f9ca 	bl	8008200 <USBD_StdDevReq>
      break;
 8007e6c:	e01a      	b.n	8007ea4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fa2c 	bl	80082d4 <USBD_StdItfReq>
      break;
 8007e7c:	e012      	b.n	8007ea4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa6a 	bl	8008360 <USBD_StdEPReq>
      break;
 8007e8c:	e00a      	b.n	8007ea4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f004 f946 	bl	800c12e <USBD_LL_StallEP>
      break;
 8007ea2:	bf00      	nop
  }

  return USBD_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b086      	sub	sp, #24
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	60f8      	str	r0, [r7, #12]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d14b      	bne.n	8007f5a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ec8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d134      	bne.n	8007f3e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d919      	bls.n	8007f14 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	68da      	ldr	r2, [r3, #12]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	1ad2      	subs	r2, r2, r3
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d203      	bcs.n	8007f02 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	e002      	b.n	8007f08 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 ff4b 	bl	8008da8 <USBD_CtlContinueRx>
 8007f12:	e038      	b.n	8007f86 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00a      	beq.n	8007f36 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d105      	bne.n	8007f36 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 ff48 	bl	8008dcc <USBD_CtlSendStatus>
 8007f3c:	e023      	b.n	8007f86 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f44:	2b05      	cmp	r3, #5
 8007f46:	d11e      	bne.n	8007f86 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007f50:	2100      	movs	r1, #0
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f004 f8eb 	bl	800c12e <USBD_LL_StallEP>
 8007f58:	e015      	b.n	8007f86 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00d      	beq.n	8007f82 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d108      	bne.n	8007f82 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	7afa      	ldrb	r2, [r7, #11]
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	4798      	blx	r3
 8007f80:	e001      	b.n	8007f86 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f82:	2302      	movs	r3, #2
 8007f84:	e000      	b.n	8007f88 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d17f      	bne.n	80080a4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3314      	adds	r3, #20
 8007fa8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d15c      	bne.n	800806e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d915      	bls.n	8007fec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	1ad2      	subs	r2, r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 feb5 	bl	8008d48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f004 f94e 	bl	800c286 <USBD_LL_PrepareReceive>
 8007fea:	e04e      	b.n	800808a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	6912      	ldr	r2, [r2, #16]
 8007ff4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ff8:	fb02 f201 	mul.w	r2, r2, r1
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d11c      	bne.n	800803c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	689a      	ldr	r2, [r3, #8]
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800800a:	429a      	cmp	r2, r3
 800800c:	d316      	bcc.n	800803c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008018:	429a      	cmp	r2, r3
 800801a:	d20f      	bcs.n	800803c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fe91 	bl	8008d48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800802e:	2300      	movs	r3, #0
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f004 f926 	bl	800c286 <USBD_LL_PrepareReceive>
 800803a:	e026      	b.n	800808a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00a      	beq.n	800805e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800804e:	2b03      	cmp	r3, #3
 8008050:	d105      	bne.n	800805e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800805e:	2180      	movs	r1, #128	; 0x80
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f004 f864 	bl	800c12e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fec3 	bl	8008df2 <USBD_CtlReceiveStatus>
 800806c:	e00d      	b.n	800808a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008074:	2b04      	cmp	r3, #4
 8008076:	d004      	beq.n	8008082 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800807e:	2b00      	cmp	r3, #0
 8008080:	d103      	bne.n	800808a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008082:	2180      	movs	r1, #128	; 0x80
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f004 f852 	bl	800c12e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008090:	2b01      	cmp	r3, #1
 8008092:	d11d      	bne.n	80080d0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff fe83 	bl	8007da0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80080a2:	e015      	b.n	80080d0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00d      	beq.n	80080cc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d108      	bne.n	80080cc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	7afa      	ldrb	r2, [r7, #11]
 80080c4:	4611      	mov	r1, r2
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	4798      	blx	r3
 80080ca:	e001      	b.n	80080d0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080cc:	2302      	movs	r3, #2
 80080ce:	e000      	b.n	80080d2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	2200      	movs	r2, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f003 ffbc 	bl	800c066 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2240      	movs	r2, #64	; 0x40
 80080fa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080fe:	2340      	movs	r3, #64	; 0x40
 8008100:	2200      	movs	r2, #0
 8008102:	2180      	movs	r1, #128	; 0x80
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f003 ffae 	bl	800c066 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2240      	movs	r2, #64	; 0x40
 8008114:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d009      	beq.n	8008152 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6852      	ldr	r2, [r2, #4]
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	4611      	mov	r1, r2
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
  }

  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bc80      	pop	{r7}
 8008178:	4770      	bx	lr

0800817a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2204      	movs	r2, #4
 8008192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr

080081a2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b083      	sub	sp, #12
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d105      	bne.n	80081c0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr

080081cc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d10b      	bne.n	80081f6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008216:	2b20      	cmp	r3, #32
 8008218:	d004      	beq.n	8008224 <USBD_StdDevReq+0x24>
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d002      	beq.n	8008224 <USBD_StdDevReq+0x24>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d008      	beq.n	8008234 <USBD_StdDevReq+0x34>
 8008222:	e04c      	b.n	80082be <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
      break;
 8008232:	e049      	b.n	80082c8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b09      	cmp	r3, #9
 800823a:	d83a      	bhi.n	80082b2 <USBD_StdDevReq+0xb2>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <USBD_StdDevReq+0x44>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008295 	.word	0x08008295
 8008248:	080082a9 	.word	0x080082a9
 800824c:	080082b3 	.word	0x080082b3
 8008250:	0800829f 	.word	0x0800829f
 8008254:	080082b3 	.word	0x080082b3
 8008258:	08008277 	.word	0x08008277
 800825c:	0800826d 	.word	0x0800826d
 8008260:	080082b3 	.word	0x080082b3
 8008264:	0800828b 	.word	0x0800828b
 8008268:	08008281 	.word	0x08008281
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9d4 	bl	800861c <USBD_GetDescriptor>
          break;
 8008274:	e022      	b.n	80082bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fb37 	bl	80088ec <USBD_SetAddress>
          break;
 800827e:	e01d      	b.n	80082bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fb74 	bl	8008970 <USBD_SetConfig>
          break;
 8008288:	e018      	b.n	80082bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fbfd 	bl	8008a8c <USBD_GetConfig>
          break;
 8008292:	e013      	b.n	80082bc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008294:	6839      	ldr	r1, [r7, #0]
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fc2c 	bl	8008af4 <USBD_GetStatus>
          break;
 800829c:	e00e      	b.n	80082bc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fc5a 	bl	8008b5a <USBD_SetFeature>
          break;
 80082a6:	e009      	b.n	80082bc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fc69 	bl	8008b82 <USBD_ClrFeature>
          break;
 80082b0:	e004      	b.n	80082bc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fcc1 	bl	8008c3c <USBD_CtlError>
          break;
 80082ba:	bf00      	nop
      }
      break;
 80082bc:	e004      	b.n	80082c8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fcbb 	bl	8008c3c <USBD_CtlError>
      break;
 80082c6:	bf00      	nop
  }

  return ret;
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop

080082d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d003      	beq.n	80082f6 <USBD_StdItfReq+0x22>
 80082ee:	2b40      	cmp	r3, #64	; 0x40
 80082f0:	d001      	beq.n	80082f6 <USBD_StdItfReq+0x22>
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d12a      	bne.n	800834c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082fc:	3b01      	subs	r3, #1
 80082fe:	2b02      	cmp	r3, #2
 8008300:	d81d      	bhi.n	800833e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	889b      	ldrh	r3, [r3, #4]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b01      	cmp	r3, #1
 800830a:	d813      	bhi.n	8008334 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	4798      	blx	r3
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d110      	bne.n	8008348 <USBD_StdItfReq+0x74>
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10d      	bne.n	8008348 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fd4d 	bl	8008dcc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008332:	e009      	b.n	8008348 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc80 	bl	8008c3c <USBD_CtlError>
          break;
 800833c:	e004      	b.n	8008348 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fc7b 	bl	8008c3c <USBD_CtlError>
          break;
 8008346:	e000      	b.n	800834a <USBD_StdItfReq+0x76>
          break;
 8008348:	bf00      	nop
      }
      break;
 800834a:	e004      	b.n	8008356 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800834c:	6839      	ldr	r1, [r7, #0]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fc74 	bl	8008c3c <USBD_CtlError>
      break;
 8008354:	bf00      	nop
  }

  return USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	889b      	ldrh	r3, [r3, #4]
 8008372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837c:	2b20      	cmp	r3, #32
 800837e:	d004      	beq.n	800838a <USBD_StdEPReq+0x2a>
 8008380:	2b40      	cmp	r3, #64	; 0x40
 8008382:	d002      	beq.n	800838a <USBD_StdEPReq+0x2a>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d008      	beq.n	800839a <USBD_StdEPReq+0x3a>
 8008388:	e13d      	b.n	8008606 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
      break;
 8008398:	e13a      	b.n	8008610 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083a2:	2b20      	cmp	r3, #32
 80083a4:	d10a      	bne.n	80083bc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	4798      	blx	r3
 80083b4:	4603      	mov	r3, r0
 80083b6:	73fb      	strb	r3, [r7, #15]

        return ret;
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	e12a      	b.n	8008612 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	785b      	ldrb	r3, [r3, #1]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d03e      	beq.n	8008442 <USBD_StdEPReq+0xe2>
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d002      	beq.n	80083ce <USBD_StdEPReq+0x6e>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d070      	beq.n	80084ae <USBD_StdEPReq+0x14e>
 80083cc:	e115      	b.n	80085fa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d002      	beq.n	80083de <USBD_StdEPReq+0x7e>
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d015      	beq.n	8008408 <USBD_StdEPReq+0xa8>
 80083dc:	e02b      	b.n	8008436 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083de:	7bbb      	ldrb	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00c      	beq.n	80083fe <USBD_StdEPReq+0x9e>
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	2b80      	cmp	r3, #128	; 0x80
 80083e8:	d009      	beq.n	80083fe <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f003 fe9d 	bl	800c12e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083f4:	2180      	movs	r1, #128	; 0x80
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f003 fe99 	bl	800c12e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083fc:	e020      	b.n	8008440 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fc1b 	bl	8008c3c <USBD_CtlError>
              break;
 8008406:	e01b      	b.n	8008440 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	885b      	ldrh	r3, [r3, #2]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d10e      	bne.n	800842e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00b      	beq.n	800842e <USBD_StdEPReq+0xce>
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b80      	cmp	r3, #128	; 0x80
 800841a:	d008      	beq.n	800842e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	88db      	ldrh	r3, [r3, #6]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d104      	bne.n	800842e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f003 fe80 	bl	800c12e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fccc 	bl	8008dcc <USBD_CtlSendStatus>

              break;
 8008434:	e004      	b.n	8008440 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fbff 	bl	8008c3c <USBD_CtlError>
              break;
 800843e:	bf00      	nop
          }
          break;
 8008440:	e0e0      	b.n	8008604 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008448:	2b02      	cmp	r3, #2
 800844a:	d002      	beq.n	8008452 <USBD_StdEPReq+0xf2>
 800844c:	2b03      	cmp	r3, #3
 800844e:	d015      	beq.n	800847c <USBD_StdEPReq+0x11c>
 8008450:	e026      	b.n	80084a0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008452:	7bbb      	ldrb	r3, [r7, #14]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00c      	beq.n	8008472 <USBD_StdEPReq+0x112>
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b80      	cmp	r3, #128	; 0x80
 800845c:	d009      	beq.n	8008472 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f003 fe63 	bl	800c12e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008468:	2180      	movs	r1, #128	; 0x80
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f003 fe5f 	bl	800c12e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008470:	e01c      	b.n	80084ac <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fbe1 	bl	8008c3c <USBD_CtlError>
              break;
 800847a:	e017      	b.n	80084ac <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	885b      	ldrh	r3, [r3, #2]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d112      	bne.n	80084aa <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800848a:	2b00      	cmp	r3, #0
 800848c:	d004      	beq.n	8008498 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	4619      	mov	r1, r3
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f003 fe6a 	bl	800c16c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc97 	bl	8008dcc <USBD_CtlSendStatus>
              }
              break;
 800849e:	e004      	b.n	80084aa <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fbca 	bl	8008c3c <USBD_CtlError>
              break;
 80084a8:	e000      	b.n	80084ac <USBD_StdEPReq+0x14c>
              break;
 80084aa:	bf00      	nop
          }
          break;
 80084ac:	e0aa      	b.n	8008604 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d002      	beq.n	80084be <USBD_StdEPReq+0x15e>
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d032      	beq.n	8008522 <USBD_StdEPReq+0x1c2>
 80084bc:	e097      	b.n	80085ee <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <USBD_StdEPReq+0x174>
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b80      	cmp	r3, #128	; 0x80
 80084c8:	d004      	beq.n	80084d4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 fbb5 	bl	8008c3c <USBD_CtlError>
                break;
 80084d2:	e091      	b.n	80085f8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	da0b      	bge.n	80084f4 <USBD_StdEPReq+0x194>
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084e2:	4613      	mov	r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	3310      	adds	r3, #16
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	4413      	add	r3, r2
 80084f0:	3304      	adds	r3, #4
 80084f2:	e00b      	b.n	800850c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	3304      	adds	r3, #4
 800850c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2202      	movs	r2, #2
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fbf8 	bl	8008d10 <USBD_CtlSendData>
              break;
 8008520:	e06a      	b.n	80085f8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008526:	2b00      	cmp	r3, #0
 8008528:	da11      	bge.n	800854e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	f003 020f 	and.w	r2, r3, #15
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	3318      	adds	r3, #24
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d117      	bne.n	8008574 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fb78 	bl	8008c3c <USBD_CtlError>
                  break;
 800854c:	e054      	b.n	80085f8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800854e:	7bbb      	ldrb	r3, [r7, #14]
 8008550:	f003 020f 	and.w	r2, r3, #15
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d104      	bne.n	8008574 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fb65 	bl	8008c3c <USBD_CtlError>
                  break;
 8008572:	e041      	b.n	80085f8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	da0b      	bge.n	8008594 <USBD_StdEPReq+0x234>
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008582:	4613      	mov	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	3310      	adds	r3, #16
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	4413      	add	r3, r2
 8008590:	3304      	adds	r3, #4
 8008592:	e00b      	b.n	80085ac <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	4413      	add	r3, r2
 80085aa:	3304      	adds	r3, #4
 80085ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <USBD_StdEPReq+0x25a>
 80085b4:	7bbb      	ldrb	r3, [r7, #14]
 80085b6:	2b80      	cmp	r3, #128	; 0x80
 80085b8:	d103      	bne.n	80085c2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	e00e      	b.n	80085e0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f003 fdef 	bl	800c1aa <USBD_LL_IsStallEP>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2201      	movs	r2, #1
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	e002      	b.n	80085e0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2200      	movs	r2, #0
 80085de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2202      	movs	r2, #2
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fb92 	bl	8008d10 <USBD_CtlSendData>
              break;
 80085ec:	e004      	b.n	80085f8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fb23 	bl	8008c3c <USBD_CtlError>
              break;
 80085f6:	bf00      	nop
          }
          break;
 80085f8:	e004      	b.n	8008604 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fb1d 	bl	8008c3c <USBD_CtlError>
          break;
 8008602:	bf00      	nop
      }
      break;
 8008604:	e004      	b.n	8008610 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fb17 	bl	8008c3c <USBD_CtlError>
      break;
 800860e:	bf00      	nop
  }

  return ret;
 8008610:	7bfb      	ldrb	r3, [r7, #15]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	0a1b      	lsrs	r3, r3, #8
 8008638:	b29b      	uxth	r3, r3
 800863a:	3b01      	subs	r3, #1
 800863c:	2b06      	cmp	r3, #6
 800863e:	f200 8128 	bhi.w	8008892 <USBD_GetDescriptor+0x276>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <USBD_GetDescriptor+0x2c>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008665 	.word	0x08008665
 800864c:	0800867d 	.word	0x0800867d
 8008650:	080086bd 	.word	0x080086bd
 8008654:	08008893 	.word	0x08008893
 8008658:	08008893 	.word	0x08008893
 800865c:	08008833 	.word	0x08008833
 8008660:	0800885f 	.word	0x0800885f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
      break;
 800867a:	e112      	b.n	80088a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	7c1b      	ldrb	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10d      	bne.n	80086a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	f107 0208 	add.w	r2, r7, #8
 8008690:	4610      	mov	r0, r2
 8008692:	4798      	blx	r3
 8008694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	2202      	movs	r2, #2
 800869c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800869e:	e100      	b.n	80088a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	f107 0208 	add.w	r2, r7, #8
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
 80086b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3301      	adds	r3, #1
 80086b6:	2202      	movs	r2, #2
 80086b8:	701a      	strb	r2, [r3, #0]
      break;
 80086ba:	e0f2      	b.n	80088a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	885b      	ldrh	r3, [r3, #2]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	f200 80ac 	bhi.w	8008820 <USBD_GetDescriptor+0x204>
 80086c8:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <USBD_GetDescriptor+0xb4>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	0800871d 	.word	0x0800871d
 80086d8:	08008751 	.word	0x08008751
 80086dc:	08008785 	.word	0x08008785
 80086e0:	080087b9 	.word	0x080087b9
 80086e4:	080087ed 	.word	0x080087ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	f107 0108 	add.w	r1, r7, #8
 8008704:	4610      	mov	r0, r2
 8008706:	4798      	blx	r3
 8008708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870a:	e091      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa94 	bl	8008c3c <USBD_CtlError>
            err++;
 8008714:	7afb      	ldrb	r3, [r7, #11]
 8008716:	3301      	adds	r3, #1
 8008718:	72fb      	strb	r3, [r7, #11]
          break;
 800871a:	e089      	b.n	8008830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	7c12      	ldrb	r2, [r2, #16]
 8008734:	f107 0108 	add.w	r1, r7, #8
 8008738:	4610      	mov	r0, r2
 800873a:	4798      	blx	r3
 800873c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873e:	e077      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa7a 	bl	8008c3c <USBD_CtlError>
            err++;
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	3301      	adds	r3, #1
 800874c:	72fb      	strb	r3, [r7, #11]
          break;
 800874e:	e06f      	b.n	8008830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00b      	beq.n	8008774 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	7c12      	ldrb	r2, [r2, #16]
 8008768:	f107 0108 	add.w	r1, r7, #8
 800876c:	4610      	mov	r0, r2
 800876e:	4798      	blx	r3
 8008770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008772:	e05d      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 fa60 	bl	8008c3c <USBD_CtlError>
            err++;
 800877c:	7afb      	ldrb	r3, [r7, #11]
 800877e:	3301      	adds	r3, #1
 8008780:	72fb      	strb	r3, [r7, #11]
          break;
 8008782:	e055      	b.n	8008830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e043      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa46 	bl	8008c3c <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e03b      	b.n	8008830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e029      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa2c 	bl	8008c3c <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e021      	b.n	8008830 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e00f      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa12 	bl	8008c3c <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e007      	b.n	8008830 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa0a 	bl	8008c3c <USBD_CtlError>
          err++;
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	3301      	adds	r3, #1
 800882c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800882e:	e038      	b.n	80088a2 <USBD_GetDescriptor+0x286>
 8008830:	e037      	b.n	80088a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	7c1b      	ldrb	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008842:	f107 0208 	add.w	r2, r7, #8
 8008846:	4610      	mov	r0, r2
 8008848:	4798      	blx	r3
 800884a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800884c:	e029      	b.n	80088a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f9f3 	bl	8008c3c <USBD_CtlError>
        err++;
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	3301      	adds	r3, #1
 800885a:	72fb      	strb	r3, [r7, #11]
      break;
 800885c:	e021      	b.n	80088a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	7c1b      	ldrb	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10d      	bne.n	8008882 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	f107 0208 	add.w	r2, r7, #8
 8008872:	4610      	mov	r0, r2
 8008874:	4798      	blx	r3
 8008876:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3301      	adds	r3, #1
 800887c:	2207      	movs	r2, #7
 800887e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008880:	e00f      	b.n	80088a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f9d9 	bl	8008c3c <USBD_CtlError>
        err++;
 800888a:	7afb      	ldrb	r3, [r7, #11]
 800888c:	3301      	adds	r3, #1
 800888e:	72fb      	strb	r3, [r7, #11]
      break;
 8008890:	e007      	b.n	80088a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008892:	6839      	ldr	r1, [r7, #0]
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f9d1 	bl	8008c3c <USBD_CtlError>
      err++;
 800889a:	7afb      	ldrb	r3, [r7, #11]
 800889c:	3301      	adds	r3, #1
 800889e:	72fb      	strb	r3, [r7, #11]
      break;
 80088a0:	bf00      	nop
  }

  if (err != 0U)
 80088a2:	7afb      	ldrb	r3, [r7, #11]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d11c      	bne.n	80088e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80088a8:	893b      	ldrh	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d011      	beq.n	80088d2 <USBD_GetDescriptor+0x2b6>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	88db      	ldrh	r3, [r3, #6]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00d      	beq.n	80088d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88da      	ldrh	r2, [r3, #6]
 80088ba:	893b      	ldrh	r3, [r7, #8]
 80088bc:	4293      	cmp	r3, r2
 80088be:	bf28      	it	cs
 80088c0:	4613      	movcs	r3, r2
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088c6:	893b      	ldrh	r3, [r7, #8]
 80088c8:	461a      	mov	r2, r3
 80088ca:	68f9      	ldr	r1, [r7, #12]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa1f 	bl	8008d10 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	88db      	ldrh	r3, [r3, #6]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d104      	bne.n	80088e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 fa76 	bl	8008dcc <USBD_CtlSendStatus>
 80088e0:	e000      	b.n	80088e4 <USBD_GetDescriptor+0x2c8>
    return;
 80088e2:	bf00      	nop
    }
  }
}
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	889b      	ldrh	r3, [r3, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d130      	bne.n	8008960 <USBD_SetAddress+0x74>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	88db      	ldrh	r3, [r3, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d12c      	bne.n	8008960 <USBD_SetAddress+0x74>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	2b7f      	cmp	r3, #127	; 0x7f
 800890c:	d828      	bhi.n	8008960 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	2b03      	cmp	r3, #3
 8008922:	d104      	bne.n	800892e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f988 	bl	8008c3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892c:	e01c      	b.n	8008968 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7bfa      	ldrb	r2, [r7, #15]
 8008932:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f003 fc61 	bl	800c202 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fa43 	bl	8008dcc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d004      	beq.n	8008956 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008954:	e008      	b.n	8008968 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	e003      	b.n	8008968 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f96a 	bl	8008c3c <USBD_CtlError>
  }
}
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	885b      	ldrh	r3, [r3, #2]
 800897e:	b2da      	uxtb	r2, r3
 8008980:	4b41      	ldr	r3, [pc, #260]	; (8008a88 <USBD_SetConfig+0x118>)
 8008982:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008984:	4b40      	ldr	r3, [pc, #256]	; (8008a88 <USBD_SetConfig+0x118>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d904      	bls.n	8008996 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f954 	bl	8008c3c <USBD_CtlError>
 8008994:	e075      	b.n	8008a82 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	2b02      	cmp	r3, #2
 800899e:	d002      	beq.n	80089a6 <USBD_SetConfig+0x36>
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d023      	beq.n	80089ec <USBD_SetConfig+0x7c>
 80089a4:	e062      	b.n	8008a6c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80089a6:	4b38      	ldr	r3, [pc, #224]	; (8008a88 <USBD_SetConfig+0x118>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d01a      	beq.n	80089e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80089ae:	4b36      	ldr	r3, [pc, #216]	; (8008a88 <USBD_SetConfig+0x118>)
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	461a      	mov	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2203      	movs	r2, #3
 80089bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80089c0:	4b31      	ldr	r3, [pc, #196]	; (8008a88 <USBD_SetConfig+0x118>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff f9f4 	bl	8007db4 <USBD_SetClassConfig>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d104      	bne.n	80089dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f931 	bl	8008c3c <USBD_CtlError>
            return;
 80089da:	e052      	b.n	8008a82 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f9f5 	bl	8008dcc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80089e2:	e04e      	b.n	8008a82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f9f1 	bl	8008dcc <USBD_CtlSendStatus>
        break;
 80089ea:	e04a      	b.n	8008a82 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80089ec:	4b26      	ldr	r3, [pc, #152]	; (8008a88 <USBD_SetConfig+0x118>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d112      	bne.n	8008a1a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2202      	movs	r2, #2
 80089f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80089fc:	4b22      	ldr	r3, [pc, #136]	; (8008a88 <USBD_SetConfig+0x118>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008a06:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <USBD_SetConfig+0x118>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff f9f0 	bl	8007df2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f9da 	bl	8008dcc <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a18:	e033      	b.n	8008a82 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008a1a:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <USBD_SetConfig+0x118>)
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d01d      	beq.n	8008a64 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff f9de 	bl	8007df2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <USBD_SetConfig+0x118>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a40:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <USBD_SetConfig+0x118>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7ff f9b4 	bl	8007db4 <USBD_SetClassConfig>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d104      	bne.n	8008a5c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f8f1 	bl	8008c3c <USBD_CtlError>
            return;
 8008a5a:	e012      	b.n	8008a82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f9b5 	bl	8008dcc <USBD_CtlSendStatus>
        break;
 8008a62:	e00e      	b.n	8008a82 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9b1 	bl	8008dcc <USBD_CtlSendStatus>
        break;
 8008a6a:	e00a      	b.n	8008a82 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f8e4 	bl	8008c3c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <USBD_SetConfig+0x118>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	4619      	mov	r1, r3
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7ff f9b9 	bl	8007df2 <USBD_ClrClassConfig>
        break;
 8008a80:	bf00      	nop
    }
  }
}
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	200009ec 	.word	0x200009ec

08008a8c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	88db      	ldrh	r3, [r3, #6]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d004      	beq.n	8008aa8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f8cb 	bl	8008c3c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008aa6:	e021      	b.n	8008aec <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	db17      	blt.n	8008ae2 <USBD_GetConfig+0x56>
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	dd02      	ble.n	8008abc <USBD_GetConfig+0x30>
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d00b      	beq.n	8008ad2 <USBD_GetConfig+0x46>
 8008aba:	e012      	b.n	8008ae2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4619      	mov	r1, r3
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f920 	bl	8008d10 <USBD_CtlSendData>
        break;
 8008ad0:	e00c      	b.n	8008aec <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f918 	bl	8008d10 <USBD_CtlSendData>
        break;
 8008ae0:	e004      	b.n	8008aec <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f8a9 	bl	8008c3c <USBD_CtlError>
        break;
 8008aea:	bf00      	nop
}
 8008aec:	bf00      	nop
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b04:	3b01      	subs	r3, #1
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d81e      	bhi.n	8008b48 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	88db      	ldrh	r3, [r3, #6]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d004      	beq.n	8008b1c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f891 	bl	8008c3c <USBD_CtlError>
        break;
 8008b1a:	e01a      	b.n	8008b52 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d005      	beq.n	8008b38 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	f043 0202 	orr.w	r2, r3, #2
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f8e5 	bl	8008d10 <USBD_CtlSendData>
      break;
 8008b46:	e004      	b.n	8008b52 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f876 	bl	8008c3c <USBD_CtlError>
      break;
 8008b50:	bf00      	nop
  }
}
 8008b52:	bf00      	nop
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
 8008b62:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	885b      	ldrh	r3, [r3, #2]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d106      	bne.n	8008b7a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f929 	bl	8008dcc <USBD_CtlSendStatus>
  }
}
 8008b7a:	bf00      	nop
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b92:	3b01      	subs	r3, #1
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d80b      	bhi.n	8008bb0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	885b      	ldrh	r3, [r3, #2]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d10c      	bne.n	8008bba <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f90f 	bl	8008dcc <USBD_CtlSendStatus>
      }
      break;
 8008bae:	e004      	b.n	8008bba <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f842 	bl	8008c3c <USBD_CtlError>
      break;
 8008bb8:	e000      	b.n	8008bbc <USBD_ClrFeature+0x3a>
      break;
 8008bba:	bf00      	nop
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	3708      	adds	r7, #8
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	785a      	ldrb	r2, [r3, #1]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	3302      	adds	r3, #2
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	3303      	adds	r3, #3
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	021b      	lsls	r3, r3, #8
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	4413      	add	r3, r2
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	3305      	adds	r3, #5
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	021b      	lsls	r3, r3, #8
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4413      	add	r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	3306      	adds	r3, #6
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	3307      	adds	r3, #7
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4413      	add	r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	80da      	strh	r2, [r3, #6]

}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr

08008c3c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008c46:	2180      	movs	r1, #128	; 0x80
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f003 fa70 	bl	800c12e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008c4e:	2100      	movs	r1, #0
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f003 fa6c 	bl	800c12e <USBD_LL_StallEP>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d032      	beq.n	8008cda <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f834 	bl	8008ce2 <USBD_GetLen>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	005b      	lsls	r3, r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	75fa      	strb	r2, [r7, #23]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4413      	add	r3, r2
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	75fa      	strb	r2, [r7, #23]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	2203      	movs	r2, #3
 8008ca8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008caa:	e012      	b.n	8008cd2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	1c5a      	adds	r2, r3, #1
 8008cb0:	75fa      	strb	r2, [r7, #23]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	441a      	add	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	1c59      	adds	r1, r3, #1
 8008cbc:	60f9      	str	r1, [r7, #12]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	75fa      	strb	r2, [r7, #23]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	2200      	movs	r2, #0
 8008cd0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e8      	bne.n	8008cac <USBD_GetString+0x4e>
    }
  }
}
 8008cda:	bf00      	nop
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b085      	sub	sp, #20
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008cee:	e005      	b.n	8008cfc <USBD_GetLen+0x1a>
  {
    len++;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1f5      	bne.n	8008cf0 <USBD_GetLen+0xe>
  }

  return len;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3714      	adds	r7, #20
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr

08008d10 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2202      	movs	r2, #2
 8008d22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d26:	88fa      	ldrh	r2, [r7, #6]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d2c:	88fa      	ldrh	r2, [r7, #6]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	2100      	movs	r1, #0
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f003 fa81 	bl	800c240 <USBD_LL_Transmit>

  return USBD_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f003 fa6f 	bl	800c240 <USBD_LL_Transmit>

  return USBD_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	4613      	mov	r3, r2
 8008d78:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d82:	88fa      	ldrh	r2, [r7, #6]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008d8a:	88fa      	ldrh	r2, [r7, #6]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d92:	88fb      	ldrh	r3, [r7, #6]
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	2100      	movs	r1, #0
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f003 fa74 	bl	800c286 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	4613      	mov	r3, r2
 8008db4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008db6:	88fb      	ldrh	r3, [r7, #6]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	2100      	movs	r1, #0
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f003 fa62 	bl	800c286 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2200      	movs	r2, #0
 8008de0:	2100      	movs	r1, #0
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f003 fa2c 	bl	800c240 <USBD_LL_Transmit>

  return USBD_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2205      	movs	r2, #5
 8008dfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e02:	2300      	movs	r3, #0
 8008e04:	2200      	movs	r2, #0
 8008e06:	2100      	movs	r1, #0
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f003 fa3c 	bl	800c286 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e26:	2301      	movs	r3, #1
 8008e28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008e2e:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e30:	7a5b      	ldrb	r3, [r3, #9]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d831      	bhi.n	8008e9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e38:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e3a:	7a5b      	ldrb	r3, [r3, #9]
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e42:	2100      	movs	r1, #0
 8008e44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008e46:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e48:	7a5b      	ldrb	r3, [r3, #9]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	4a16      	ldr	r2, [pc, #88]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	4413      	add	r3, r2
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e58:	7a5b      	ldrb	r3, [r3, #9]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e60:	4413      	add	r3, r2
 8008e62:	79fa      	ldrb	r2, [r7, #7]
 8008e64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e68:	7a5b      	ldrb	r3, [r3, #9]
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	b2d1      	uxtb	r1, r2
 8008e70:	4a0d      	ldr	r2, [pc, #52]	; (8008ea8 <FATFS_LinkDriverEx+0x90>)
 8008e72:	7251      	strb	r1, [r2, #9]
 8008e74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e76:	7dbb      	ldrb	r3, [r7, #22]
 8008e78:	3330      	adds	r3, #48	; 0x30
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	3301      	adds	r3, #1
 8008e84:	223a      	movs	r2, #58	; 0x3a
 8008e86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	3302      	adds	r3, #2
 8008e8c:	222f      	movs	r2, #47	; 0x2f
 8008e8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	3303      	adds	r3, #3
 8008e94:	2200      	movs	r2, #0
 8008e96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bc80      	pop	{r7}
 8008ea6:	4770      	bx	lr
 8008ea8:	200009f0 	.word	0x200009f0

08008eac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff ffac 	bl	8008e18 <FATFS_LinkDriverEx>
 8008ec0:	4603      	mov	r3, r0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008edc:	2b84      	cmp	r3, #132	; 0x84
 8008ede:	d005      	beq.n	8008eec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008ee0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	3303      	adds	r3, #3
 8008eea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008eec:	68fb      	ldr	r3, [r7, #12]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bc80      	pop	{r7}
 8008ef6:	4770      	bx	lr

08008ef8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008efe:	f3ef 8305 	mrs	r3, IPSR
 8008f02:	607b      	str	r3, [r7, #4]
  return(result);
 8008f04:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	bf14      	ite	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	2300      	moveq	r3, #0
 8008f0e:	b2db      	uxtb	r3, r3
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr

08008f1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008f1e:	f001 fd2b 	bl	800a978 <vTaskStartScheduler>
  
  return osOK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f2a:	b089      	sub	sp, #36	; 0x24
 8008f2c:	af04      	add	r7, sp, #16
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	695b      	ldr	r3, [r3, #20]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d020      	beq.n	8008f7c <osThreadCreate+0x54>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d01c      	beq.n	8008f7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685c      	ldr	r4, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681d      	ldr	r5, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691e      	ldr	r6, [r3, #16]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff ffb8 	bl	8008eca <makeFreeRtosPriority>
 8008f5a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	695b      	ldr	r3, [r3, #20]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f64:	9202      	str	r2, [sp, #8]
 8008f66:	9301      	str	r3, [sp, #4]
 8008f68:	9100      	str	r1, [sp, #0]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4620      	mov	r0, r4
 8008f72:	f001 fab5 	bl	800a4e0 <xTaskCreateStatic>
 8008f76:	4603      	mov	r3, r0
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e01c      	b.n	8008fb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685c      	ldr	r4, [r3, #4]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f88:	b29e      	uxth	r6, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7ff ff9a 	bl	8008eca <makeFreeRtosPriority>
 8008f96:	4602      	mov	r2, r0
 8008f98:	f107 030c 	add.w	r3, r7, #12
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	9200      	str	r2, [sp, #0]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	4632      	mov	r2, r6
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f001 faf3 	bl	800a592 <xTaskCreate>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d001      	beq.n	8008fb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e000      	b.n	8008fb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <osDelay+0x16>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	e000      	b.n	8008fd8 <osDelay+0x18>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 fc07 	bl	800a7ec <vTaskDelay>
  
  return osOK;
 8008fde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	607a      	str	r2, [r7, #4]
 8008ff4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d013      	beq.n	8009026 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <osTimerCreate+0x20>
 8009004:	2101      	movs	r1, #1
 8009006:	e000      	b.n	800900a <osTimerCreate+0x22>
 8009008:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8009012:	9201      	str	r2, [sp, #4]
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	460a      	mov	r2, r1
 800901a:	2101      	movs	r1, #1
 800901c:	480b      	ldr	r0, [pc, #44]	; (800904c <osTimerCreate+0x64>)
 800901e:	f002 fa56 	bl	800b4ce <xTimerCreateStatic>
 8009022:	4603      	mov	r3, r0
 8009024:	e00e      	b.n	8009044 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8009026:	7afb      	ldrb	r3, [r7, #11]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <osTimerCreate+0x48>
 800902c:	2201      	movs	r2, #1
 800902e:	e000      	b.n	8009032 <osTimerCreate+0x4a>
 8009030:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2101      	movs	r1, #1
 800903c:	4803      	ldr	r0, [pc, #12]	; (800904c <osTimerCreate+0x64>)
 800903e:	f002 fa25 	bl	800b48c <xTimerCreate>
 8009042:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	0800cda4 	.word	0x0800cda4

08009050 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af02      	add	r7, sp, #8
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <osTimerStart+0x20>
    ticks = 1;
 800906c:	2301      	movs	r3, #1
 800906e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8009070:	f7ff ff42 	bl	8008ef8 <inHandlerMode>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d01b      	beq.n	80090b2 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800907a:	f107 020c 	add.w	r2, r7, #12
 800907e:	2300      	movs	r3, #0
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	4613      	mov	r3, r2
 8009084:	693a      	ldr	r2, [r7, #16]
 8009086:	2109      	movs	r1, #9
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f002 fa8d 	bl	800b5a8 <xTimerGenericCommand>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d002      	beq.n	800909a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8009094:	23ff      	movs	r3, #255	; 0xff
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e018      	b.n	80090cc <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d015      	beq.n	80090cc <osTimerStart+0x7c>
 80090a0:	4b0d      	ldr	r3, [pc, #52]	; (80090d8 <osTimerStart+0x88>)
 80090a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	e00c      	b.n	80090cc <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80090b2:	2300      	movs	r3, #0
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2300      	movs	r3, #0
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	2104      	movs	r1, #4
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f002 fa73 	bl	800b5a8 <xTimerGenericCommand>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d001      	beq.n	80090cc <osTimerStart+0x7c>
      result = osErrorOS;
 80090c8:	23ff      	movs	r3, #255	; 0xff
 80090ca:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80090cc:	697b      	ldr	r3, [r7, #20]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4619      	mov	r1, r3
 80090f2:	2001      	movs	r0, #1
 80090f4:	f000 fe02 	bl	8009cfc <xQueueCreateMutexStatic>
 80090f8:	4603      	mov	r3, r0
 80090fa:	e003      	b.n	8009104 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80090fc:	2001      	movs	r0, #1
 80090fe:	f000 fde5 	bl	8009ccc <xQueueCreateMutex>
 8009102:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b085      	sub	sp, #20
 8009110:	af02      	add	r7, sp, #8
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d012      	beq.n	8009144 <osMessageCreate+0x38>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00e      	beq.n	8009144 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6859      	ldr	r1, [r3, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68dc      	ldr	r4, [r3, #12]
 8009136:	2300      	movs	r3, #0
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4623      	mov	r3, r4
 800913c:	f000 fcde 	bl	8009afc <xQueueGenericCreateStatic>
 8009140:	4603      	mov	r3, r0
 8009142:	e008      	b.n	8009156 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	4619      	mov	r1, r3
 8009150:	f000 fd46 	bl	8009be0 <xQueueGenericCreate>
 8009154:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009156:	4618      	mov	r0, r3
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bd90      	pop	{r4, r7, pc}

0800915e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f103 0208 	add.w	r2, r3, #8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f103 0208 	add.w	r2, r3, #8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f103 0208 	add.w	r2, r3, #8
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009192:	bf00      	nop
 8009194:	370c      	adds	r7, #12
 8009196:	46bd      	mov	sp, r7
 8009198:	bc80      	pop	{r7}
 800919a:	4770      	bx	lr

0800919c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr

080091fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091fa:	b480      	push	{r7}
 80091fc:	b085      	sub	sp, #20
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009210:	d103      	bne.n	800921a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e00c      	b.n	8009234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3308      	adds	r3, #8
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	e002      	b.n	8009228 <vListInsert+0x2e>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	60fb      	str	r3, [r7, #12]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	429a      	cmp	r2, r3
 8009232:	d9f6      	bls.n	8009222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	683a      	ldr	r2, [r7, #0]
 8009242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	601a      	str	r2, [r3, #0]
}
 8009260:	bf00      	nop
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr

0800926a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800926a:	b480      	push	{r7}
 800926c:	b085      	sub	sp, #20
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6892      	ldr	r2, [r2, #8]
 8009280:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6852      	ldr	r2, [r2, #4]
 800928a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	429a      	cmp	r2, r3
 8009294:	d103      	bne.n	800929e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	1e5a      	subs	r2, r3, #1
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr

080092bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	3b04      	subs	r3, #4
 80092cc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3b04      	subs	r3, #4
 80092da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f023 0201 	bic.w	r2, r3, #1
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3b04      	subs	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092ec:	4a08      	ldr	r2, [pc, #32]	; (8009310 <pxPortInitialiseStack+0x54>)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3b14      	subs	r3, #20
 80092f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3b20      	subs	r3, #32
 8009302:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009304:	68fb      	ldr	r3, [r7, #12]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	bc80      	pop	{r7}
 800930e:	4770      	bx	lr
 8009310:	08009315 	.word	0x08009315

08009314 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800931a:	2300      	movs	r3, #0
 800931c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800931e:	4b10      	ldr	r3, [pc, #64]	; (8009360 <prvTaskExitError+0x4c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009326:	d009      	beq.n	800933c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
 800933a:	e7fe      	b.n	800933a <prvTaskExitError+0x26>
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800934e:	bf00      	nop
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0fc      	beq.n	8009350 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009356:	bf00      	nop
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	bc80      	pop	{r7}
 800935e:	4770      	bx	lr
 8009360:	200001ec 	.word	0x200001ec
	...

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	f04e 0e0d 	orr.w	lr, lr, #13
 800938e:	4770      	bx	lr

08009390 <pxCurrentTCBConst2>:
 8009390:	200019bc 	.word	0x200019bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009398:	4806      	ldr	r0, [pc, #24]	; (80093b4 <prvPortStartFirstTask+0x1c>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	b662      	cpsie	i
 80093a4:	b661      	cpsie	f
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	df00      	svc	0
 80093b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093b2:	bf00      	nop
 80093b4:	e000ed08 	.word	0xe000ed08

080093b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093be:	4b31      	ldr	r3, [pc, #196]	; (8009484 <xPortStartScheduler+0xcc>)
 80093c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	22ff      	movs	r2, #255	; 0xff
 80093ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	4b29      	ldr	r3, [pc, #164]	; (8009488 <xPortStartScheduler+0xd0>)
 80093e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093e6:	4b29      	ldr	r3, [pc, #164]	; (800948c <xPortStartScheduler+0xd4>)
 80093e8:	2207      	movs	r2, #7
 80093ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093ec:	e009      	b.n	8009402 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093ee:	4b27      	ldr	r3, [pc, #156]	; (800948c <xPortStartScheduler+0xd4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	4a25      	ldr	r2, [pc, #148]	; (800948c <xPortStartScheduler+0xd4>)
 80093f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	b2db      	uxtb	r3, r3
 8009406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940a:	2b80      	cmp	r3, #128	; 0x80
 800940c:	d0ef      	beq.n	80093ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800940e:	4b1f      	ldr	r3, [pc, #124]	; (800948c <xPortStartScheduler+0xd4>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f1c3 0307 	rsb	r3, r3, #7
 8009416:	2b04      	cmp	r3, #4
 8009418:	d009      	beq.n	800942e <xPortStartScheduler+0x76>
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	60bb      	str	r3, [r7, #8]
 800942c:	e7fe      	b.n	800942c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800942e:	4b17      	ldr	r3, [pc, #92]	; (800948c <xPortStartScheduler+0xd4>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	4a15      	ldr	r2, [pc, #84]	; (800948c <xPortStartScheduler+0xd4>)
 8009436:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009438:	4b14      	ldr	r3, [pc, #80]	; (800948c <xPortStartScheduler+0xd4>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009440:	4a12      	ldr	r2, [pc, #72]	; (800948c <xPortStartScheduler+0xd4>)
 8009442:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	b2da      	uxtb	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800944c:	4a10      	ldr	r2, [pc, #64]	; (8009490 <xPortStartScheduler+0xd8>)
 800944e:	4b10      	ldr	r3, [pc, #64]	; (8009490 <xPortStartScheduler+0xd8>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009456:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009458:	4a0d      	ldr	r2, [pc, #52]	; (8009490 <xPortStartScheduler+0xd8>)
 800945a:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <xPortStartScheduler+0xd8>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009462:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009464:	f000 f8b0 	bl	80095c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009468:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <xPortStartScheduler+0xdc>)
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800946e:	f7ff ff93 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009472:	f001 fc59 	bl	800ad28 <vTaskSwitchContext>
	prvTaskExitError();
 8009476:	f7ff ff4d 	bl	8009314 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3710      	adds	r7, #16
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	e000e400 	.word	0xe000e400
 8009488:	200009fc 	.word	0x200009fc
 800948c:	20000a00 	.word	0x20000a00
 8009490:	e000ed20 	.word	0xe000ed20
 8009494:	200001ec 	.word	0x200001ec

08009498 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094b0:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <vPortEnterCritical+0x54>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3301      	adds	r3, #1
 80094b6:	4a0d      	ldr	r2, [pc, #52]	; (80094ec <vPortEnterCritical+0x54>)
 80094b8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <vPortEnterCritical+0x54>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d10e      	bne.n	80094e0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094c2:	4b0b      	ldr	r3, [pc, #44]	; (80094f0 <vPortEnterCritical+0x58>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d009      	beq.n	80094e0 <vPortEnterCritical+0x48>
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	f383 8811 	msr	BASEPRI, r3
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	f3bf 8f4f 	dsb	sy
 80094dc:	603b      	str	r3, [r7, #0]
 80094de:	e7fe      	b.n	80094de <vPortEnterCritical+0x46>
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	200001ec 	.word	0x200001ec
 80094f0:	e000ed04 	.word	0xe000ed04

080094f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <vPortExitCritical+0x48>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <vPortExitCritical+0x22>
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	607b      	str	r3, [r7, #4]
 8009514:	e7fe      	b.n	8009514 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <vPortExitCritical+0x48>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3b01      	subs	r3, #1
 800951c:	4a07      	ldr	r2, [pc, #28]	; (800953c <vPortExitCritical+0x48>)
 800951e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009520:	4b06      	ldr	r3, [pc, #24]	; (800953c <vPortExitCritical+0x48>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <vPortExitCritical+0x3e>
 8009528:	2300      	movs	r3, #0
 800952a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr
 800953c:	200001ec 	.word	0x200001ec

08009540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009540:	f3ef 8009 	mrs	r0, PSP
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	4b0d      	ldr	r3, [pc, #52]	; (8009580 <pxCurrentTCBConst>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009550:	6010      	str	r0, [r2, #0]
 8009552:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009556:	f04f 0050 	mov.w	r0, #80	; 0x50
 800955a:	f380 8811 	msr	BASEPRI, r0
 800955e:	f001 fbe3 	bl	800ad28 <vTaskSwitchContext>
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8811 	msr	BASEPRI, r0
 800956a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800956e:	6819      	ldr	r1, [r3, #0]
 8009570:	6808      	ldr	r0, [r1, #0]
 8009572:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009576:	f380 8809 	msr	PSP, r0
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	4770      	bx	lr

08009580 <pxCurrentTCBConst>:
 8009580:	200019bc 	.word	0x200019bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop

08009588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095a0:	f001 fb06 	bl	800abb0 <xTaskIncrementTick>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095aa:	4b06      	ldr	r3, [pc, #24]	; (80095c4 <SysTick_Handler+0x3c>)
 80095ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095c8:	b480      	push	{r7}
 80095ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095cc:	4b0a      	ldr	r3, [pc, #40]	; (80095f8 <vPortSetupTimerInterrupt+0x30>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095d2:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <vPortSetupTimerInterrupt+0x34>)
 80095d4:	2200      	movs	r2, #0
 80095d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095d8:	4a09      	ldr	r2, [pc, #36]	; (8009600 <vPortSetupTimerInterrupt+0x38>)
 80095da:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <vPortSetupTimerInterrupt+0x3c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	490a      	ldr	r1, [pc, #40]	; (8009608 <vPortSetupTimerInterrupt+0x40>)
 80095e0:	fba1 1303 	umull	r1, r3, r1, r3
 80095e4:	099b      	lsrs	r3, r3, #6
 80095e6:	3b01      	subs	r3, #1
 80095e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095ea:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <vPortSetupTimerInterrupt+0x30>)
 80095ec:	2207      	movs	r2, #7
 80095ee:	601a      	str	r2, [r3, #0]
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr
 80095f8:	e000e010 	.word	0xe000e010
 80095fc:	e000e018 	.word	0xe000e018
 8009600:	e000e014 	.word	0xe000e014
 8009604:	20000054 	.word	0x20000054
 8009608:	10624dd3 	.word	0x10624dd3

0800960c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009612:	f3ef 8305 	mrs	r3, IPSR
 8009616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b0f      	cmp	r3, #15
 800961c:	d913      	bls.n	8009646 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800961e:	4a15      	ldr	r2, [pc, #84]	; (8009674 <vPortValidateInterruptPriority+0x68>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009628:	4b13      	ldr	r3, [pc, #76]	; (8009678 <vPortValidateInterruptPriority+0x6c>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	7afa      	ldrb	r2, [r7, #11]
 800962e:	429a      	cmp	r2, r3
 8009630:	d209      	bcs.n	8009646 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	607b      	str	r3, [r7, #4]
 8009644:	e7fe      	b.n	8009644 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009646:	4b0d      	ldr	r3, [pc, #52]	; (800967c <vPortValidateInterruptPriority+0x70>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800964e:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <vPortValidateInterruptPriority+0x74>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	429a      	cmp	r2, r3
 8009654:	d909      	bls.n	800966a <vPortValidateInterruptPriority+0x5e>
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	e7fe      	b.n	8009668 <vPortValidateInterruptPriority+0x5c>
	}
 800966a:	bf00      	nop
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr
 8009674:	e000e3f0 	.word	0xe000e3f0
 8009678:	200009fc 	.word	0x200009fc
 800967c:	e000ed0c 	.word	0xe000ed0c
 8009680:	20000a00 	.word	0x20000a00

08009684 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800968c:	2300      	movs	r3, #0
 800968e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009690:	f001 f9d6 	bl	800aa40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009694:	4b57      	ldr	r3, [pc, #348]	; (80097f4 <pvPortMalloc+0x170>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d101      	bne.n	80096a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800969c:	f000 f90c 	bl	80098b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096a0:	4b55      	ldr	r3, [pc, #340]	; (80097f8 <pvPortMalloc+0x174>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4013      	ands	r3, r2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f040 808c 	bne.w	80097c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01c      	beq.n	80096ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80096b4:	2208      	movs	r2, #8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4413      	add	r3, r2
 80096ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f003 0307 	and.w	r3, r3, #7
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d013      	beq.n	80096ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f023 0307 	bic.w	r3, r3, #7
 80096cc:	3308      	adds	r3, #8
 80096ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f003 0307 	and.w	r3, r3, #7
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <pvPortMalloc+0x6a>
 80096da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	e7fe      	b.n	80096ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d068      	beq.n	80097c6 <pvPortMalloc+0x142>
 80096f4:	4b41      	ldr	r3, [pc, #260]	; (80097fc <pvPortMalloc+0x178>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d863      	bhi.n	80097c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096fe:	4b40      	ldr	r3, [pc, #256]	; (8009800 <pvPortMalloc+0x17c>)
 8009700:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009702:	4b3f      	ldr	r3, [pc, #252]	; (8009800 <pvPortMalloc+0x17c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009708:	e004      	b.n	8009714 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	d203      	bcs.n	8009726 <pvPortMalloc+0xa2>
 800971e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1f1      	bne.n	800970a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009726:	4b33      	ldr	r3, [pc, #204]	; (80097f4 <pvPortMalloc+0x170>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800972c:	429a      	cmp	r2, r3
 800972e:	d04a      	beq.n	80097c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2208      	movs	r2, #8
 8009736:	4413      	add	r3, r2
 8009738:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800973a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	1ad2      	subs	r2, r2, r3
 800974a:	2308      	movs	r3, #8
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	429a      	cmp	r2, r3
 8009750:	d91e      	bls.n	8009790 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4413      	add	r3, r2
 8009758:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <pvPortMalloc+0xf4>
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	e7fe      	b.n	8009776 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800978a:	69b8      	ldr	r0, [r7, #24]
 800978c:	f000 f8f6 	bl	800997c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009790:	4b1a      	ldr	r3, [pc, #104]	; (80097fc <pvPortMalloc+0x178>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	4a18      	ldr	r2, [pc, #96]	; (80097fc <pvPortMalloc+0x178>)
 800979c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800979e:	4b17      	ldr	r3, [pc, #92]	; (80097fc <pvPortMalloc+0x178>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b18      	ldr	r3, [pc, #96]	; (8009804 <pvPortMalloc+0x180>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d203      	bcs.n	80097b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097aa:	4b14      	ldr	r3, [pc, #80]	; (80097fc <pvPortMalloc+0x178>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a15      	ldr	r2, [pc, #84]	; (8009804 <pvPortMalloc+0x180>)
 80097b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <pvPortMalloc+0x174>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097c6:	f001 f949 	bl	800aa5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d009      	beq.n	80097e8 <pvPortMalloc+0x164>
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	e7fe      	b.n	80097e6 <pvPortMalloc+0x162>
	return pvReturn;
 80097e8:	69fb      	ldr	r3, [r7, #28]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3728      	adds	r7, #40	; 0x28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200019ac 	.word	0x200019ac
 80097f8:	200019b8 	.word	0x200019b8
 80097fc:	200019b0 	.word	0x200019b0
 8009800:	200019a4 	.word	0x200019a4
 8009804:	200019b4 	.word	0x200019b4

08009808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d046      	beq.n	80098a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800981a:	2308      	movs	r3, #8
 800981c:	425b      	negs	r3, r3
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4413      	add	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	4b20      	ldr	r3, [pc, #128]	; (80098b0 <vPortFree+0xa8>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4013      	ands	r3, r2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d109      	bne.n	800984a <vPortFree+0x42>
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	e7fe      	b.n	8009848 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d009      	beq.n	8009866 <vPortFree+0x5e>
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	60bb      	str	r3, [r7, #8]
 8009864:	e7fe      	b.n	8009864 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <vPortFree+0xa8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4013      	ands	r3, r2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d019      	beq.n	80098a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d115      	bne.n	80098a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <vPortFree+0xa8>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	43db      	mvns	r3, r3
 8009886:	401a      	ands	r2, r3
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800988c:	f001 f8d8 	bl	800aa40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <vPortFree+0xac>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4413      	add	r3, r2
 800989a:	4a06      	ldr	r2, [pc, #24]	; (80098b4 <vPortFree+0xac>)
 800989c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800989e:	6938      	ldr	r0, [r7, #16]
 80098a0:	f000 f86c 	bl	800997c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80098a4:	f001 f8da 	bl	800aa5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098a8:	bf00      	nop
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	200019b8 	.word	0x200019b8
 80098b4:	200019b0 	.word	0x200019b0

080098b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098be:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80098c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098c4:	4b27      	ldr	r3, [pc, #156]	; (8009964 <prvHeapInit+0xac>)
 80098c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00c      	beq.n	80098ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3307      	adds	r3, #7
 80098d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f023 0307 	bic.w	r3, r3, #7
 80098de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	4a1f      	ldr	r2, [pc, #124]	; (8009964 <prvHeapInit+0xac>)
 80098e8:	4413      	add	r3, r2
 80098ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098f0:	4a1d      	ldr	r2, [pc, #116]	; (8009968 <prvHeapInit+0xb0>)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098f6:	4b1c      	ldr	r3, [pc, #112]	; (8009968 <prvHeapInit+0xb0>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	4413      	add	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009904:	2208      	movs	r2, #8
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f023 0307 	bic.w	r3, r3, #7
 8009912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4a15      	ldr	r2, [pc, #84]	; (800996c <prvHeapInit+0xb4>)
 8009918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800991a:	4b14      	ldr	r3, [pc, #80]	; (800996c <prvHeapInit+0xb4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009922:	4b12      	ldr	r3, [pc, #72]	; (800996c <prvHeapInit+0xb4>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2200      	movs	r2, #0
 8009928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	1ad2      	subs	r2, r2, r3
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009938:	4b0c      	ldr	r3, [pc, #48]	; (800996c <prvHeapInit+0xb4>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	4a0a      	ldr	r2, [pc, #40]	; (8009970 <prvHeapInit+0xb8>)
 8009946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	4a09      	ldr	r2, [pc, #36]	; (8009974 <prvHeapInit+0xbc>)
 800994e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <prvHeapInit+0xc0>)
 8009952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009956:	601a      	str	r2, [r3, #0]
}
 8009958:	bf00      	nop
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	20000a04 	.word	0x20000a04
 8009968:	200019a4 	.word	0x200019a4
 800996c:	200019ac 	.word	0x200019ac
 8009970:	200019b4 	.word	0x200019b4
 8009974:	200019b0 	.word	0x200019b0
 8009978:	200019b8 	.word	0x200019b8

0800997c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009984:	4b27      	ldr	r3, [pc, #156]	; (8009a24 <prvInsertBlockIntoFreeList+0xa8>)
 8009986:	60fb      	str	r3, [r7, #12]
 8009988:	e002      	b.n	8009990 <prvInsertBlockIntoFreeList+0x14>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	429a      	cmp	r2, r3
 8009998:	d3f7      	bcc.n	800998a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	441a      	add	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d108      	bne.n	80099be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	441a      	add	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	441a      	add	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d118      	bne.n	8009a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681a      	ldr	r2, [r3, #0]
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <prvInsertBlockIntoFreeList+0xac>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d00d      	beq.n	80099fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	441a      	add	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e008      	b.n	8009a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099fa:	4b0b      	ldr	r3, [pc, #44]	; (8009a28 <prvInsertBlockIntoFreeList+0xac>)
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	e003      	b.n	8009a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d002      	beq.n	8009a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bc80      	pop	{r7}
 8009a22:	4770      	bx	lr
 8009a24:	200019a4 	.word	0x200019a4
 8009a28:	200019ac 	.word	0x200019ac

08009a2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d109      	bne.n	8009a54 <xQueueGenericReset+0x28>
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60bb      	str	r3, [r7, #8]
 8009a52:	e7fe      	b.n	8009a52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009a54:	f7ff fd20 	bl	8009498 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a60:	68f9      	ldr	r1, [r7, #12]
 8009a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a64:	fb01 f303 	mul.w	r3, r1, r3
 8009a68:	441a      	add	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a84:	3b01      	subs	r3, #1
 8009a86:	68f9      	ldr	r1, [r7, #12]
 8009a88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a8a:	fb01 f303 	mul.w	r3, r1, r3
 8009a8e:	441a      	add	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	22ff      	movs	r2, #255	; 0xff
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d114      	bne.n	8009ad4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d01a      	beq.n	8009ae8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3310      	adds	r3, #16
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 f9de 	bl	800ae78 <xTaskRemoveFromEventList>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d012      	beq.n	8009ae8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <xQueueGenericReset+0xcc>)
 8009ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac8:	601a      	str	r2, [r3, #0]
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	e009      	b.n	8009ae8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	3310      	adds	r3, #16
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff fb40 	bl	800915e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	3324      	adds	r3, #36	; 0x24
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7ff fb3b 	bl	800915e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ae8:	f7ff fd04 	bl	80094f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009aec:	2301      	movs	r3, #1
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08e      	sub	sp, #56	; 0x38
 8009b00:	af02      	add	r7, sp, #8
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d109      	bne.n	8009b24 <xQueueGenericCreateStatic+0x28>
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b22:	e7fe      	b.n	8009b22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <xQueueGenericCreateStatic+0x42>
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b3c:	e7fe      	b.n	8009b3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d002      	beq.n	8009b4a <xQueueGenericCreateStatic+0x4e>
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <xQueueGenericCreateStatic+0x52>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e000      	b.n	8009b50 <xQueueGenericCreateStatic+0x54>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d109      	bne.n	8009b68 <xQueueGenericCreateStatic+0x6c>
 8009b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b58:	f383 8811 	msr	BASEPRI, r3
 8009b5c:	f3bf 8f6f 	isb	sy
 8009b60:	f3bf 8f4f 	dsb	sy
 8009b64:	623b      	str	r3, [r7, #32]
 8009b66:	e7fe      	b.n	8009b66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d102      	bne.n	8009b74 <xQueueGenericCreateStatic+0x78>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <xQueueGenericCreateStatic+0x7c>
 8009b74:	2301      	movs	r3, #1
 8009b76:	e000      	b.n	8009b7a <xQueueGenericCreateStatic+0x7e>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d109      	bne.n	8009b92 <xQueueGenericCreateStatic+0x96>
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	e7fe      	b.n	8009b90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b92:	2348      	movs	r3, #72	; 0x48
 8009b94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	2b48      	cmp	r3, #72	; 0x48
 8009b9a:	d009      	beq.n	8009bb0 <xQueueGenericCreateStatic+0xb4>
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	61bb      	str	r3, [r7, #24]
 8009bae:	e7fe      	b.n	8009bae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00d      	beq.n	8009bd6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bc2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f842 	bl	8009c5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3730      	adds	r7, #48	; 0x30
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b08a      	sub	sp, #40	; 0x28
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	4613      	mov	r3, r2
 8009bec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d109      	bne.n	8009c08 <xQueueGenericCreate+0x28>
 8009bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	613b      	str	r3, [r7, #16]
 8009c06:	e7fe      	b.n	8009c06 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	e004      	b.n	8009c1e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	fb02 f303 	mul.w	r3, r2, r3
 8009c1c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	3348      	adds	r3, #72	; 0x48
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fd2e 	bl	8009684 <pvPortMalloc>
 8009c28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00f      	beq.n	8009c50 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	3348      	adds	r3, #72	; 0x48
 8009c34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c3e:	79fa      	ldrb	r2, [r7, #7]
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	4613      	mov	r3, r2
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f805 	bl	8009c5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009c50:	69bb      	ldr	r3, [r7, #24]
	}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3720      	adds	r7, #32
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d103      	bne.n	8009c76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	e002      	b.n	8009c7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	68fa      	ldr	r2, [r7, #12]
 8009c80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c88:	2101      	movs	r1, #1
 8009c8a:	69b8      	ldr	r0, [r7, #24]
 8009c8c:	f7ff fece 	bl	8009a2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c90:	bf00      	nop
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00e      	beq.n	8009cc4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2200      	movs	r2, #0
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f838 	bl	8009d34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009cc4:	bf00      	nop
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	617b      	str	r3, [r7, #20]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6939      	ldr	r1, [r7, #16]
 8009ce4:	6978      	ldr	r0, [r7, #20]
 8009ce6:	f7ff ff7b 	bl	8009be0 <xQueueGenericCreate>
 8009cea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff ffd3 	bl	8009c98 <prvInitialiseMutex>

		return pxNewQueue;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
	}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af02      	add	r7, sp, #8
 8009d02:	4603      	mov	r3, r0
 8009d04:	6039      	str	r1, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2200      	movs	r2, #0
 8009d18:	6939      	ldr	r1, [r7, #16]
 8009d1a:	6978      	ldr	r0, [r7, #20]
 8009d1c:	f7ff feee 	bl	8009afc <xQueueGenericCreateStatic>
 8009d20:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff ffb8 	bl	8009c98 <prvInitialiseMutex>

		return pxNewQueue;
 8009d28:	68fb      	ldr	r3, [r7, #12]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08e      	sub	sp, #56	; 0x38
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d42:	2300      	movs	r3, #0
 8009d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <xQueueGenericSend+0x30>
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d62:	e7fe      	b.n	8009d62 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d103      	bne.n	8009d72 <xQueueGenericSend+0x3e>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <xQueueGenericSend+0x42>
 8009d72:	2301      	movs	r3, #1
 8009d74:	e000      	b.n	8009d78 <xQueueGenericSend+0x44>
 8009d76:	2300      	movs	r3, #0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d109      	bne.n	8009d90 <xQueueGenericSend+0x5c>
 8009d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d80:	f383 8811 	msr	BASEPRI, r3
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8e:	e7fe      	b.n	8009d8e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d103      	bne.n	8009d9e <xQueueGenericSend+0x6a>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <xQueueGenericSend+0x6e>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <xQueueGenericSend+0x70>
 8009da2:	2300      	movs	r3, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d109      	bne.n	8009dbc <xQueueGenericSend+0x88>
 8009da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	623b      	str	r3, [r7, #32]
 8009dba:	e7fe      	b.n	8009dba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dbc:	f001 fa16 	bl	800b1ec <xTaskGetSchedulerState>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <xQueueGenericSend+0x98>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <xQueueGenericSend+0x9c>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e000      	b.n	8009dd2 <xQueueGenericSend+0x9e>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <xQueueGenericSend+0xb6>
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	61fb      	str	r3, [r7, #28]
 8009de8:	e7fe      	b.n	8009de8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dea:	f7ff fb55 	bl	8009498 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d302      	bcc.n	8009e00 <xQueueGenericSend+0xcc>
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d129      	bne.n	8009e54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e06:	f000 f9ff 	bl	800a208 <prvCopyDataToQueue>
 8009e0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d010      	beq.n	8009e36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	3324      	adds	r3, #36	; 0x24
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 f82d 	bl	800ae78 <xTaskRemoveFromEventList>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d013      	beq.n	8009e4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e24:	4b3f      	ldr	r3, [pc, #252]	; (8009f24 <xQueueGenericSend+0x1f0>)
 8009e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2a:	601a      	str	r2, [r3, #0]
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	e00a      	b.n	8009e4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d007      	beq.n	8009e4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e3c:	4b39      	ldr	r3, [pc, #228]	; (8009f24 <xQueueGenericSend+0x1f0>)
 8009e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e4c:	f7ff fb52 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e063      	b.n	8009f1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d103      	bne.n	8009e62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e5a:	f7ff fb4b 	bl	80094f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	e05c      	b.n	8009f1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d106      	bne.n	8009e76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e68:	f107 0314 	add.w	r3, r7, #20
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f001 f865 	bl	800af3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e72:	2301      	movs	r3, #1
 8009e74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e76:	f7ff fb3d 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e7a:	f000 fde1 	bl	800aa40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e7e:	f7ff fb0b 	bl	8009498 <vPortEnterCritical>
 8009e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e88:	b25b      	sxtb	r3, r3
 8009e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8e:	d103      	bne.n	8009e98 <xQueueGenericSend+0x164>
 8009e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e9e:	b25b      	sxtb	r3, r3
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea4:	d103      	bne.n	8009eae <xQueueGenericSend+0x17a>
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009eae:	f7ff fb21 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eb2:	1d3a      	adds	r2, r7, #4
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	4611      	mov	r1, r2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 f854 	bl	800af68 <xTaskCheckForTimeOut>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d124      	bne.n	8009f10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec8:	f000 fa96 	bl	800a3f8 <prvIsQueueFull>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d018      	beq.n	8009f04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	3310      	adds	r3, #16
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 ff7e 	bl	800addc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ee2:	f000 fa21 	bl	800a328 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ee6:	f000 fdb9 	bl	800aa5c <xTaskResumeAll>
 8009eea:	4603      	mov	r3, r0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f47f af7c 	bne.w	8009dea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009ef2:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <xQueueGenericSend+0x1f0>)
 8009ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	e772      	b.n	8009dea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f06:	f000 fa0f 	bl	800a328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f0a:	f000 fda7 	bl	800aa5c <xTaskResumeAll>
 8009f0e:	e76c      	b.n	8009dea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f12:	f000 fa09 	bl	800a328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f16:	f000 fda1 	bl	800aa5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f1a:	2300      	movs	r3, #0
		}
	}
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3738      	adds	r7, #56	; 0x38
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08e      	sub	sp, #56	; 0x38
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d109      	bne.n	8009f54 <xQueueGenericSendFromISR+0x2c>
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	627b      	str	r3, [r7, #36]	; 0x24
 8009f52:	e7fe      	b.n	8009f52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d103      	bne.n	8009f62 <xQueueGenericSendFromISR+0x3a>
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <xQueueGenericSendFromISR+0x3e>
 8009f62:	2301      	movs	r3, #1
 8009f64:	e000      	b.n	8009f68 <xQueueGenericSendFromISR+0x40>
 8009f66:	2300      	movs	r3, #0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d109      	bne.n	8009f80 <xQueueGenericSendFromISR+0x58>
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	623b      	str	r3, [r7, #32]
 8009f7e:	e7fe      	b.n	8009f7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d103      	bne.n	8009f8e <xQueueGenericSendFromISR+0x66>
 8009f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <xQueueGenericSendFromISR+0x6a>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e000      	b.n	8009f94 <xQueueGenericSendFromISR+0x6c>
 8009f92:	2300      	movs	r3, #0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d109      	bne.n	8009fac <xQueueGenericSendFromISR+0x84>
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	61fb      	str	r3, [r7, #28]
 8009faa:	e7fe      	b.n	8009faa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fac:	f7ff fb2e 	bl	800960c <vPortValidateInterruptPriority>
	__asm volatile
 8009fb0:	f3ef 8211 	mrs	r2, BASEPRI
 8009fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	61ba      	str	r2, [r7, #24]
 8009fc6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009fc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d302      	bcc.n	8009fde <xQueueGenericSendFromISR+0xb6>
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d12c      	bne.n	800a038 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fee:	f000 f90b 	bl	800a208 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ff2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffa:	d112      	bne.n	800a022 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a000:	2b00      	cmp	r3, #0
 800a002:	d016      	beq.n	800a032 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	3324      	adds	r3, #36	; 0x24
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 ff35 	bl	800ae78 <xTaskRemoveFromEventList>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00e      	beq.n	800a032 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00b      	beq.n	800a032 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	e007      	b.n	800a032 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a026:	3301      	adds	r3, #1
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	b25a      	sxtb	r2, r3
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a032:	2301      	movs	r3, #1
 800a034:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a036:	e001      	b.n	800a03c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	637b      	str	r3, [r7, #52]	; 0x34
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3738      	adds	r7, #56	; 0x38
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08c      	sub	sp, #48	; 0x30
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <xQueueReceive+0x2e>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	623b      	str	r3, [r7, #32]
 800a07c:	e7fe      	b.n	800a07c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d103      	bne.n	800a08c <xQueueReceive+0x3c>
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <xQueueReceive+0x40>
 800a08c:	2301      	movs	r3, #1
 800a08e:	e000      	b.n	800a092 <xQueueReceive+0x42>
 800a090:	2300      	movs	r3, #0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d109      	bne.n	800a0aa <xQueueReceive+0x5a>
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	e7fe      	b.n	800a0a8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0aa:	f001 f89f 	bl	800b1ec <xTaskGetSchedulerState>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <xQueueReceive+0x6a>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d101      	bne.n	800a0be <xQueueReceive+0x6e>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	e000      	b.n	800a0c0 <xQueueReceive+0x70>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <xQueueReceive+0x88>
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	e7fe      	b.n	800a0d6 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0d8:	f7ff f9de 	bl	8009498 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01f      	beq.n	800a128 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ec:	f000 f8f6 	bl	800a2dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	1e5a      	subs	r2, r3, #1
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00f      	beq.n	800a120 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a102:	3310      	adds	r3, #16
 800a104:	4618      	mov	r0, r3
 800a106:	f000 feb7 	bl	800ae78 <xTaskRemoveFromEventList>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a110:	4b3c      	ldr	r3, [pc, #240]	; (800a204 <xQueueReceive+0x1b4>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a120:	f7ff f9e8 	bl	80094f4 <vPortExitCritical>
				return pdPASS;
 800a124:	2301      	movs	r3, #1
 800a126:	e069      	b.n	800a1fc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a12e:	f7ff f9e1 	bl	80094f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a132:	2300      	movs	r3, #0
 800a134:	e062      	b.n	800a1fc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a13c:	f107 0310 	add.w	r3, r7, #16
 800a140:	4618      	mov	r0, r3
 800a142:	f000 fefb 	bl	800af3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a146:	2301      	movs	r3, #1
 800a148:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a14a:	f7ff f9d3 	bl	80094f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a14e:	f000 fc77 	bl	800aa40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a152:	f7ff f9a1 	bl	8009498 <vPortEnterCritical>
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a15c:	b25b      	sxtb	r3, r3
 800a15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a162:	d103      	bne.n	800a16c <xQueueReceive+0x11c>
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	2200      	movs	r2, #0
 800a168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a172:	b25b      	sxtb	r3, r3
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a178:	d103      	bne.n	800a182 <xQueueReceive+0x132>
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a182:	f7ff f9b7 	bl	80094f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a186:	1d3a      	adds	r2, r7, #4
 800a188:	f107 0310 	add.w	r3, r7, #16
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f000 feea 	bl	800af68 <xTaskCheckForTimeOut>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d123      	bne.n	800a1e2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a19a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a19c:	f000 f916 	bl	800a3cc <prvIsQueueEmpty>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d017      	beq.n	800a1d6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a8:	3324      	adds	r3, #36	; 0x24
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fe14 	bl	800addc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b6:	f000 f8b7 	bl	800a328 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1ba:	f000 fc4f 	bl	800aa5c <xTaskResumeAll>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d189      	bne.n	800a0d8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a1c4:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <xQueueReceive+0x1b4>)
 800a1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	f3bf 8f6f 	isb	sy
 800a1d4:	e780      	b.n	800a0d8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1d8:	f000 f8a6 	bl	800a328 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1dc:	f000 fc3e 	bl	800aa5c <xTaskResumeAll>
 800a1e0:	e77a      	b.n	800a0d8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e4:	f000 f8a0 	bl	800a328 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1e8:	f000 fc38 	bl	800aa5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1ee:	f000 f8ed 	bl	800a3cc <prvIsQueueEmpty>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f43f af6f 	beq.w	800a0d8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3730      	adds	r7, #48	; 0x30
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	e000ed04 	.word	0xe000ed04

0800a208 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10d      	bne.n	800a242 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d14d      	bne.n	800a2ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fff8 	bl	800b228 <xTaskPriorityDisinherit>
 800a238:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	605a      	str	r2, [r3, #4]
 800a240:	e043      	b.n	800a2ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d119      	bne.n	800a27c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6898      	ldr	r0, [r3, #8]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	461a      	mov	r2, r3
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	f002 f8ea 	bl	800c42c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a260:	441a      	add	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d32b      	bcc.n	800a2ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	609a      	str	r2, [r3, #8]
 800a27a:	e026      	b.n	800a2ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	68d8      	ldr	r0, [r3, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	461a      	mov	r2, r3
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	f002 f8d0 	bl	800c42c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a294:	425b      	negs	r3, r3
 800a296:	441a      	add	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68da      	ldr	r2, [r3, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d207      	bcs.n	800a2b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b0:	425b      	negs	r3, r3
 800a2b2:	441a      	add	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d105      	bne.n	800a2ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a2d2:	697b      	ldr	r3, [r7, #20]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3718      	adds	r7, #24
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d018      	beq.n	800a320 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68da      	ldr	r2, [r3, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	441a      	add	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68da      	ldr	r2, [r3, #12]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d303      	bcc.n	800a310 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68d9      	ldr	r1, [r3, #12]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	461a      	mov	r2, r3
 800a31a:	6838      	ldr	r0, [r7, #0]
 800a31c:	f002 f886 	bl	800c42c <memcpy>
	}
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a330:	f7ff f8b2 	bl	8009498 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a33a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a33c:	e011      	b.n	800a362 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	2b00      	cmp	r3, #0
 800a344:	d012      	beq.n	800a36c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	3324      	adds	r3, #36	; 0x24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fd94 	bl	800ae78 <xTaskRemoveFromEventList>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d001      	beq.n	800a35a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a356:	f000 fe67 	bl	800b028 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a35a:	7bfb      	ldrb	r3, [r7, #15]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a366:	2b00      	cmp	r3, #0
 800a368:	dce9      	bgt.n	800a33e <prvUnlockQueue+0x16>
 800a36a:	e000      	b.n	800a36e <prvUnlockQueue+0x46>
					break;
 800a36c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	22ff      	movs	r2, #255	; 0xff
 800a372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a376:	f7ff f8bd 	bl	80094f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a37a:	f7ff f88d 	bl	8009498 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a384:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a386:	e011      	b.n	800a3ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d012      	beq.n	800a3b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3310      	adds	r3, #16
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fd6f 	bl	800ae78 <xTaskRemoveFromEventList>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3a0:	f000 fe42 	bl	800b028 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dce9      	bgt.n	800a388 <prvUnlockQueue+0x60>
 800a3b4:	e000      	b.n	800a3b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	22ff      	movs	r2, #255	; 0xff
 800a3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a3c0:	f7ff f898 	bl	80094f4 <vPortExitCritical>
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3d4:	f7ff f860 	bl	8009498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e001      	b.n	800a3ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3ea:	f7ff f883 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3710      	adds	r7, #16
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a400:	f7ff f84a 	bl	8009498 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d102      	bne.n	800a416 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a410:	2301      	movs	r3, #1
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	e001      	b.n	800a41a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a416:	2300      	movs	r3, #0
 800a418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a41a:	f7ff f86b 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 800a41e:	68fb      	ldr	r3, [r7, #12]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	e014      	b.n	800a462 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a438:	4a0e      	ldr	r2, [pc, #56]	; (800a474 <vQueueAddToRegistry+0x4c>)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10b      	bne.n	800a45c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a444:	490b      	ldr	r1, [pc, #44]	; (800a474 <vQueueAddToRegistry+0x4c>)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a44e:	4a09      	ldr	r2, [pc, #36]	; (800a474 <vQueueAddToRegistry+0x4c>)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	4413      	add	r3, r2
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a45a:	e005      	b.n	800a468 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b07      	cmp	r3, #7
 800a466:	d9e7      	bls.n	800a438 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a468:	bf00      	nop
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bc80      	pop	{r7}
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20003184 	.word	0x20003184

0800a478 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a488:	f7ff f806 	bl	8009498 <vPortEnterCritical>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a492:	b25b      	sxtb	r3, r3
 800a494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a498:	d103      	bne.n	800a4a2 <vQueueWaitForMessageRestricted+0x2a>
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4a8:	b25b      	sxtb	r3, r3
 800a4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ae:	d103      	bne.n	800a4b8 <vQueueWaitForMessageRestricted+0x40>
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4b8:	f7ff f81c 	bl	80094f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	3324      	adds	r3, #36	; 0x24
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	68b9      	ldr	r1, [r7, #8]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fca9 	bl	800ae24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f7ff ff28 	bl	800a328 <prvUnlockQueue>
	}
 800a4d8:	bf00      	nop
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b08e      	sub	sp, #56	; 0x38
 800a4e4:	af04      	add	r7, sp, #16
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d109      	bne.n	800a508 <xTaskCreateStatic+0x28>
 800a4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	623b      	str	r3, [r7, #32]
 800a506:	e7fe      	b.n	800a506 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <xTaskCreateStatic+0x42>
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	e7fe      	b.n	800a520 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a522:	2354      	movs	r3, #84	; 0x54
 800a524:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	2b54      	cmp	r3, #84	; 0x54
 800a52a:	d009      	beq.n	800a540 <xTaskCreateStatic+0x60>
 800a52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a530:	f383 8811 	msr	BASEPRI, r3
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	e7fe      	b.n	800a53e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	2b00      	cmp	r3, #0
 800a544:	d01e      	beq.n	800a584 <xTaskCreateStatic+0xa4>
 800a546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01b      	beq.n	800a584 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a554:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	2202      	movs	r2, #2
 800a55a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a55e:	2300      	movs	r3, #0
 800a560:	9303      	str	r3, [sp, #12]
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	9302      	str	r3, [sp, #8]
 800a566:	f107 0314 	add.w	r3, r7, #20
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f850 	bl	800a61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a57e:	f000 f8cb 	bl	800a718 <prvAddNewTaskToReadyList>
 800a582:	e001      	b.n	800a588 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a584:	2300      	movs	r3, #0
 800a586:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a588:	697b      	ldr	r3, [r7, #20]
	}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3728      	adds	r7, #40	; 0x28
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a592:	b580      	push	{r7, lr}
 800a594:	b08c      	sub	sp, #48	; 0x30
 800a596:	af04      	add	r7, sp, #16
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	603b      	str	r3, [r7, #0]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7ff f86c 	bl	8009684 <pvPortMalloc>
 800a5ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00e      	beq.n	800a5d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a5b4:	2054      	movs	r0, #84	; 0x54
 800a5b6:	f7ff f865 	bl	8009684 <pvPortMalloc>
 800a5ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d003      	beq.n	800a5ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a5c8:	e005      	b.n	800a5d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5ca:	6978      	ldr	r0, [r7, #20]
 800a5cc:	f7ff f91c 	bl	8009808 <vPortFree>
 800a5d0:	e001      	b.n	800a5d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d017      	beq.n	800a60c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5e4:	88fa      	ldrh	r2, [r7, #6]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9303      	str	r3, [sp, #12]
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	9301      	str	r3, [sp, #4]
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f000 f80e 	bl	800a61c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a600:	69f8      	ldr	r0, [r7, #28]
 800a602:	f000 f889 	bl	800a718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a606:	2301      	movs	r3, #1
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	e002      	b.n	800a612 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a612:	69bb      	ldr	r3, [r7, #24]
	}
 800a614:	4618      	mov	r0, r3
 800a616:	3720      	adds	r7, #32
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a634:	3b01      	subs	r3, #1
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f023 0307 	bic.w	r3, r3, #7
 800a642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <prvInitialiseNewTask+0x46>
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	e7fe      	b.n	800a660 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a662:	2300      	movs	r3, #0
 800a664:	61fb      	str	r3, [r7, #28]
 800a666:	e012      	b.n	800a68e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a668:	68ba      	ldr	r2, [r7, #8]
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	4413      	add	r3, r2
 800a66e:	7819      	ldrb	r1, [r3, #0]
 800a670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	4413      	add	r3, r2
 800a676:	3334      	adds	r3, #52	; 0x34
 800a678:	460a      	mov	r2, r1
 800a67a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	4413      	add	r3, r2
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d006      	beq.n	800a696 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	3301      	adds	r3, #1
 800a68c:	61fb      	str	r3, [r7, #28]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	2b0f      	cmp	r3, #15
 800a692:	d9e9      	bls.n	800a668 <prvInitialiseNewTask+0x4c>
 800a694:	e000      	b.n	800a698 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a696:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a2:	2b06      	cmp	r3, #6
 800a6a4:	d901      	bls.n	800a6aa <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6a6:	2306      	movs	r3, #6
 800a6a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	3304      	adds	r3, #4
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe fd6b 	bl	800919c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	3318      	adds	r3, #24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fd66 	bl	800919c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	f1c3 0207 	rsb	r2, r3, #7
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	68f9      	ldr	r1, [r7, #12]
 800a6f8:	69b8      	ldr	r0, [r7, #24]
 800a6fa:	f7fe fddf 	bl	80092bc <pxPortInitialiseStack>
 800a6fe:	4602      	mov	r2, r0
 800a700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a702:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a70e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a710:	bf00      	nop
 800a712:	3720      	adds	r7, #32
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a720:	f7fe feba 	bl	8009498 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a724:	4b2a      	ldr	r3, [pc, #168]	; (800a7d0 <prvAddNewTaskToReadyList+0xb8>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	3301      	adds	r3, #1
 800a72a:	4a29      	ldr	r2, [pc, #164]	; (800a7d0 <prvAddNewTaskToReadyList+0xb8>)
 800a72c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a72e:	4b29      	ldr	r3, [pc, #164]	; (800a7d4 <prvAddNewTaskToReadyList+0xbc>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a736:	4a27      	ldr	r2, [pc, #156]	; (800a7d4 <prvAddNewTaskToReadyList+0xbc>)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a73c:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <prvAddNewTaskToReadyList+0xb8>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d110      	bne.n	800a766 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a744:	f000 fc94 	bl	800b070 <prvInitialiseTaskLists>
 800a748:	e00d      	b.n	800a766 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a74a:	4b23      	ldr	r3, [pc, #140]	; (800a7d8 <prvAddNewTaskToReadyList+0xc0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d109      	bne.n	800a766 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a752:	4b20      	ldr	r3, [pc, #128]	; (800a7d4 <prvAddNewTaskToReadyList+0xbc>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d802      	bhi.n	800a766 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a760:	4a1c      	ldr	r2, [pc, #112]	; (800a7d4 <prvAddNewTaskToReadyList+0xbc>)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a766:	4b1d      	ldr	r3, [pc, #116]	; (800a7dc <prvAddNewTaskToReadyList+0xc4>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	3301      	adds	r3, #1
 800a76c:	4a1b      	ldr	r2, [pc, #108]	; (800a7dc <prvAddNewTaskToReadyList+0xc4>)
 800a76e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	2201      	movs	r2, #1
 800a776:	409a      	lsls	r2, r3
 800a778:	4b19      	ldr	r3, [pc, #100]	; (800a7e0 <prvAddNewTaskToReadyList+0xc8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	4a18      	ldr	r2, [pc, #96]	; (800a7e0 <prvAddNewTaskToReadyList+0xc8>)
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4a15      	ldr	r2, [pc, #84]	; (800a7e4 <prvAddNewTaskToReadyList+0xcc>)
 800a790:	441a      	add	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f7fe fd0b 	bl	80091b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a79e:	f7fe fea9 	bl	80094f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7a2:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <prvAddNewTaskToReadyList+0xc0>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00e      	beq.n	800a7c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7aa:	4b0a      	ldr	r3, [pc, #40]	; (800a7d4 <prvAddNewTaskToReadyList+0xbc>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d207      	bcs.n	800a7c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7b8:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <prvAddNewTaskToReadyList+0xd0>)
 800a7ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7be:	601a      	str	r2, [r3, #0]
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20001abc 	.word	0x20001abc
 800a7d4:	200019bc 	.word	0x200019bc
 800a7d8:	20001ac8 	.word	0x20001ac8
 800a7dc:	20001ad8 	.word	0x20001ad8
 800a7e0:	20001ac4 	.word	0x20001ac4
 800a7e4:	200019c0 	.word	0x200019c0
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d016      	beq.n	800a82c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <vTaskDelay+0x60>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d009      	beq.n	800a81a <vTaskDelay+0x2e>
 800a806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80a:	f383 8811 	msr	BASEPRI, r3
 800a80e:	f3bf 8f6f 	isb	sy
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	60bb      	str	r3, [r7, #8]
 800a818:	e7fe      	b.n	800a818 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a81a:	f000 f911 	bl	800aa40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a81e:	2100      	movs	r1, #0
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fd85 	bl	800b330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a826:	f000 f919 	bl	800aa5c <xTaskResumeAll>
 800a82a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d107      	bne.n	800a842 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a832:	4b07      	ldr	r3, [pc, #28]	; (800a850 <vTaskDelay+0x64>)
 800a834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	f3bf 8f4f 	dsb	sy
 800a83e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a842:	bf00      	nop
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20001ae4 	.word	0x20001ae4
 800a850:	e000ed04 	.word	0xe000ed04

0800a854 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a85c:	f7fe fe1c 	bl	8009498 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <vTaskSuspend+0x18>
 800a866:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <vTaskSuspend+0x104>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	e000      	b.n	800a86e <vTaskSuspend+0x1a>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3304      	adds	r3, #4
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe fcf8 	bl	800926a <uxListRemove>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d115      	bne.n	800a8ac <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a884:	4935      	ldr	r1, [pc, #212]	; (800a95c <vTaskSuspend+0x108>)
 800a886:	4613      	mov	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	440b      	add	r3, r1
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <vTaskSuspend+0x58>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	2201      	movs	r2, #1
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	43da      	mvns	r2, r3
 800a8a2:	4b2f      	ldr	r3, [pc, #188]	; (800a960 <vTaskSuspend+0x10c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	4a2d      	ldr	r2, [pc, #180]	; (800a960 <vTaskSuspend+0x10c>)
 800a8aa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d004      	beq.n	800a8be <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3318      	adds	r3, #24
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7fe fcd6 	bl	800926a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4827      	ldr	r0, [pc, #156]	; (800a964 <vTaskSuspend+0x110>)
 800a8c6:	f7fe fc75 	bl	80091b4 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d103      	bne.n	800a8de <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a8de:	f7fe fe09 	bl	80094f4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a8e2:	4b21      	ldr	r3, [pc, #132]	; (800a968 <vTaskSuspend+0x114>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d005      	beq.n	800a8f6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a8ea:	f7fe fdd5 	bl	8009498 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a8ee:	f000 fc59 	bl	800b1a4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a8f2:	f7fe fdff 	bl	80094f4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a8f6:	4b18      	ldr	r3, [pc, #96]	; (800a958 <vTaskSuspend+0x104>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d126      	bne.n	800a94e <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800a900:	4b19      	ldr	r3, [pc, #100]	; (800a968 <vTaskSuspend+0x114>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d016      	beq.n	800a936 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a908:	4b18      	ldr	r3, [pc, #96]	; (800a96c <vTaskSuspend+0x118>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d009      	beq.n	800a924 <vTaskSuspend+0xd0>
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	60bb      	str	r3, [r7, #8]
 800a922:	e7fe      	b.n	800a922 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800a924:	4b12      	ldr	r3, [pc, #72]	; (800a970 <vTaskSuspend+0x11c>)
 800a926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a92a:	601a      	str	r2, [r3, #0]
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a934:	e00b      	b.n	800a94e <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a936:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <vTaskSuspend+0x110>)
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	4b0e      	ldr	r3, [pc, #56]	; (800a974 <vTaskSuspend+0x120>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d103      	bne.n	800a94a <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <vTaskSuspend+0x104>)
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
	}
 800a948:	e001      	b.n	800a94e <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800a94a:	f000 f9ed 	bl	800ad28 <vTaskSwitchContext>
	}
 800a94e:	bf00      	nop
 800a950:	3710      	adds	r7, #16
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	200019bc 	.word	0x200019bc
 800a95c:	200019c0 	.word	0x200019c0
 800a960:	20001ac4 	.word	0x20001ac4
 800a964:	20001aa8 	.word	0x20001aa8
 800a968:	20001ac8 	.word	0x20001ac8
 800a96c:	20001ae4 	.word	0x20001ae4
 800a970:	e000ed04 	.word	0xe000ed04
 800a974:	20001abc 	.word	0x20001abc

0800a978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a982:	2300      	movs	r3, #0
 800a984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a986:	463a      	mov	r2, r7
 800a988:	1d39      	adds	r1, r7, #4
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4618      	mov	r0, r3
 800a990:	f7f5 fc10 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	9202      	str	r2, [sp, #8]
 800a99c:	9301      	str	r3, [sp, #4]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	460a      	mov	r2, r1
 800a9a6:	4920      	ldr	r1, [pc, #128]	; (800aa28 <vTaskStartScheduler+0xb0>)
 800a9a8:	4820      	ldr	r0, [pc, #128]	; (800aa2c <vTaskStartScheduler+0xb4>)
 800a9aa:	f7ff fd99 	bl	800a4e0 <xTaskCreateStatic>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b1f      	ldr	r3, [pc, #124]	; (800aa30 <vTaskStartScheduler+0xb8>)
 800a9b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a9b4:	4b1e      	ldr	r3, [pc, #120]	; (800aa30 <vTaskStartScheduler+0xb8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	e001      	b.n	800a9c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d102      	bne.n	800a9d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a9cc:	f000 fd16 	bl	800b3fc <xTimerCreateTimerTask>
 800a9d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d115      	bne.n	800aa04 <vTaskStartScheduler+0x8c>
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9ea:	4b12      	ldr	r3, [pc, #72]	; (800aa34 <vTaskStartScheduler+0xbc>)
 800a9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a9f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9f2:	4b11      	ldr	r3, [pc, #68]	; (800aa38 <vTaskStartScheduler+0xc0>)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a9f8:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <vTaskStartScheduler+0xc4>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9fe:	f7fe fcdb 	bl	80093b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa02:	e00d      	b.n	800aa20 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0a:	d109      	bne.n	800aa20 <vTaskStartScheduler+0xa8>
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	e7fe      	b.n	800aa1e <vTaskStartScheduler+0xa6>
}
 800aa20:	bf00      	nop
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	0800cda8 	.word	0x0800cda8
 800aa2c:	0800b041 	.word	0x0800b041
 800aa30:	20001ae0 	.word	0x20001ae0
 800aa34:	20001adc 	.word	0x20001adc
 800aa38:	20001ac8 	.word	0x20001ac8
 800aa3c:	20001ac0 	.word	0x20001ac0

0800aa40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa40:	b480      	push	{r7}
 800aa42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aa44:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <vTaskSuspendAll+0x18>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	4a03      	ldr	r2, [pc, #12]	; (800aa58 <vTaskSuspendAll+0x18>)
 800aa4c:	6013      	str	r3, [r2, #0]
}
 800aa4e:	bf00      	nop
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bc80      	pop	{r7}
 800aa54:	4770      	bx	lr
 800aa56:	bf00      	nop
 800aa58:	20001ae4 	.word	0x20001ae4

0800aa5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa6a:	4b41      	ldr	r3, [pc, #260]	; (800ab70 <xTaskResumeAll+0x114>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d109      	bne.n	800aa86 <xTaskResumeAll+0x2a>
 800aa72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	e7fe      	b.n	800aa84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa86:	f7fe fd07 	bl	8009498 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa8a:	4b39      	ldr	r3, [pc, #228]	; (800ab70 <xTaskResumeAll+0x114>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	4a37      	ldr	r2, [pc, #220]	; (800ab70 <xTaskResumeAll+0x114>)
 800aa92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa94:	4b36      	ldr	r3, [pc, #216]	; (800ab70 <xTaskResumeAll+0x114>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d161      	bne.n	800ab60 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa9c:	4b35      	ldr	r3, [pc, #212]	; (800ab74 <xTaskResumeAll+0x118>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d05d      	beq.n	800ab60 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aaa4:	e02e      	b.n	800ab04 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aaa6:	4b34      	ldr	r3, [pc, #208]	; (800ab78 <xTaskResumeAll+0x11c>)
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3318      	adds	r3, #24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fe fbd9 	bl	800926a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	3304      	adds	r3, #4
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fbd4 	bl	800926a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	2201      	movs	r2, #1
 800aac8:	409a      	lsls	r2, r3
 800aaca:	4b2c      	ldr	r3, [pc, #176]	; (800ab7c <xTaskResumeAll+0x120>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4313      	orrs	r3, r2
 800aad0:	4a2a      	ldr	r2, [pc, #168]	; (800ab7c <xTaskResumeAll+0x120>)
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad8:	4613      	mov	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4413      	add	r3, r2
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	4a27      	ldr	r2, [pc, #156]	; (800ab80 <xTaskResumeAll+0x124>)
 800aae2:	441a      	add	r2, r3
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3304      	adds	r3, #4
 800aae8:	4619      	mov	r1, r3
 800aaea:	4610      	mov	r0, r2
 800aaec:	f7fe fb62 	bl	80091b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaf4:	4b23      	ldr	r3, [pc, #140]	; (800ab84 <xTaskResumeAll+0x128>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d302      	bcc.n	800ab04 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800aafe:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <xTaskResumeAll+0x12c>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab04:	4b1c      	ldr	r3, [pc, #112]	; (800ab78 <xTaskResumeAll+0x11c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d1cc      	bne.n	800aaa6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab12:	f000 fb47 	bl	800b1a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab16:	4b1d      	ldr	r3, [pc, #116]	; (800ab8c <xTaskResumeAll+0x130>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d010      	beq.n	800ab44 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab22:	f000 f845 	bl	800abb0 <xTaskIncrementTick>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800ab2c:	4b16      	ldr	r3, [pc, #88]	; (800ab88 <xTaskResumeAll+0x12c>)
 800ab2e:	2201      	movs	r2, #1
 800ab30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1f1      	bne.n	800ab22 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800ab3e:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <xTaskResumeAll+0x130>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab44:	4b10      	ldr	r3, [pc, #64]	; (800ab88 <xTaskResumeAll+0x12c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d009      	beq.n	800ab60 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <xTaskResumeAll+0x134>)
 800ab52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab60:	f7fe fcc8 	bl	80094f4 <vPortExitCritical>

	return xAlreadyYielded;
 800ab64:	68bb      	ldr	r3, [r7, #8]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20001ae4 	.word	0x20001ae4
 800ab74:	20001abc 	.word	0x20001abc
 800ab78:	20001a7c 	.word	0x20001a7c
 800ab7c:	20001ac4 	.word	0x20001ac4
 800ab80:	200019c0 	.word	0x200019c0
 800ab84:	200019bc 	.word	0x200019bc
 800ab88:	20001ad0 	.word	0x20001ad0
 800ab8c:	20001acc 	.word	0x20001acc
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab9a:	4b04      	ldr	r3, [pc, #16]	; (800abac <xTaskGetTickCount+0x18>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aba0:	687b      	ldr	r3, [r7, #4]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr
 800abac:	20001ac0 	.word	0x20001ac0

0800abb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abba:	4b50      	ldr	r3, [pc, #320]	; (800acfc <xTaskIncrementTick+0x14c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f040 808c 	bne.w	800acdc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800abc4:	4b4e      	ldr	r3, [pc, #312]	; (800ad00 <xTaskIncrementTick+0x150>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3301      	adds	r3, #1
 800abca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800abcc:	4a4c      	ldr	r2, [pc, #304]	; (800ad00 <xTaskIncrementTick+0x150>)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d11f      	bne.n	800ac18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800abd8:	4b4a      	ldr	r3, [pc, #296]	; (800ad04 <xTaskIncrementTick+0x154>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d009      	beq.n	800abf6 <xTaskIncrementTick+0x46>
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	603b      	str	r3, [r7, #0]
 800abf4:	e7fe      	b.n	800abf4 <xTaskIncrementTick+0x44>
 800abf6:	4b43      	ldr	r3, [pc, #268]	; (800ad04 <xTaskIncrementTick+0x154>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	4b42      	ldr	r3, [pc, #264]	; (800ad08 <xTaskIncrementTick+0x158>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a40      	ldr	r2, [pc, #256]	; (800ad04 <xTaskIncrementTick+0x154>)
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	4a40      	ldr	r2, [pc, #256]	; (800ad08 <xTaskIncrementTick+0x158>)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6013      	str	r3, [r2, #0]
 800ac0a:	4b40      	ldr	r3, [pc, #256]	; (800ad0c <xTaskIncrementTick+0x15c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	4a3e      	ldr	r2, [pc, #248]	; (800ad0c <xTaskIncrementTick+0x15c>)
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	f000 fac6 	bl	800b1a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac18:	4b3d      	ldr	r3, [pc, #244]	; (800ad10 <xTaskIncrementTick+0x160>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d34d      	bcc.n	800acbe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac22:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <xTaskIncrementTick+0x154>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <xTaskIncrementTick+0x80>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e000      	b.n	800ac32 <xTaskIncrementTick+0x82>
 800ac30:	2300      	movs	r3, #0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d004      	beq.n	800ac40 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac36:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <xTaskIncrementTick+0x160>)
 800ac38:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3c:	601a      	str	r2, [r3, #0]
					break;
 800ac3e:	e03e      	b.n	800acbe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ac40:	4b30      	ldr	r3, [pc, #192]	; (800ad04 <xTaskIncrementTick+0x154>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	68db      	ldr	r3, [r3, #12]
 800ac48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d203      	bcs.n	800ac60 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac58:	4a2d      	ldr	r2, [pc, #180]	; (800ad10 <xTaskIncrementTick+0x160>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6013      	str	r3, [r2, #0]
						break;
 800ac5e:	e02e      	b.n	800acbe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe fb00 	bl	800926a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d004      	beq.n	800ac7c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	3318      	adds	r3, #24
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fe faf7 	bl	800926a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	2201      	movs	r2, #1
 800ac82:	409a      	lsls	r2, r3
 800ac84:	4b23      	ldr	r3, [pc, #140]	; (800ad14 <xTaskIncrementTick+0x164>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	4a22      	ldr	r2, [pc, #136]	; (800ad14 <xTaskIncrementTick+0x164>)
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <xTaskIncrementTick+0x168>)
 800ac9c:	441a      	add	r2, r3
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	3304      	adds	r3, #4
 800aca2:	4619      	mov	r1, r3
 800aca4:	4610      	mov	r0, r2
 800aca6:	f7fe fa85 	bl	80091b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acae:	4b1b      	ldr	r3, [pc, #108]	; (800ad1c <xTaskIncrementTick+0x16c>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d3b4      	bcc.n	800ac22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acbc:	e7b1      	b.n	800ac22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acbe:	4b17      	ldr	r3, [pc, #92]	; (800ad1c <xTaskIncrementTick+0x16c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc4:	4914      	ldr	r1, [pc, #80]	; (800ad18 <xTaskIncrementTick+0x168>)
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d907      	bls.n	800ace6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800acd6:	2301      	movs	r3, #1
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	e004      	b.n	800ace6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <xTaskIncrementTick+0x170>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3301      	adds	r3, #1
 800ace2:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <xTaskIncrementTick+0x170>)
 800ace4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ace6:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <xTaskIncrementTick+0x174>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d001      	beq.n	800acf2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800acee:	2301      	movs	r3, #1
 800acf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800acf2:	697b      	ldr	r3, [r7, #20]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20001ae4 	.word	0x20001ae4
 800ad00:	20001ac0 	.word	0x20001ac0
 800ad04:	20001a74 	.word	0x20001a74
 800ad08:	20001a78 	.word	0x20001a78
 800ad0c:	20001ad4 	.word	0x20001ad4
 800ad10:	20001adc 	.word	0x20001adc
 800ad14:	20001ac4 	.word	0x20001ac4
 800ad18:	200019c0 	.word	0x200019c0
 800ad1c:	200019bc 	.word	0x200019bc
 800ad20:	20001acc 	.word	0x20001acc
 800ad24:	20001ad0 	.word	0x20001ad0

0800ad28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad2e:	4b26      	ldr	r3, [pc, #152]	; (800adc8 <vTaskSwitchContext+0xa0>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad36:	4b25      	ldr	r3, [pc, #148]	; (800adcc <vTaskSwitchContext+0xa4>)
 800ad38:	2201      	movs	r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad3c:	e03e      	b.n	800adbc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ad3e:	4b23      	ldr	r3, [pc, #140]	; (800adcc <vTaskSwitchContext+0xa4>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ad44:	4b22      	ldr	r3, [pc, #136]	; (800add0 <vTaskSwitchContext+0xa8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	fab3 f383 	clz	r3, r3
 800ad50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ad52:	7afb      	ldrb	r3, [r7, #11]
 800ad54:	f1c3 031f 	rsb	r3, r3, #31
 800ad58:	617b      	str	r3, [r7, #20]
 800ad5a:	491e      	ldr	r1, [pc, #120]	; (800add4 <vTaskSwitchContext+0xac>)
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d109      	bne.n	800ad82 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	607b      	str	r3, [r7, #4]
 800ad80:	e7fe      	b.n	800ad80 <vTaskSwitchContext+0x58>
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4a11      	ldr	r2, [pc, #68]	; (800add4 <vTaskSwitchContext+0xac>)
 800ad8e:	4413      	add	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	605a      	str	r2, [r3, #4]
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	3308      	adds	r3, #8
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d104      	bne.n	800adb2 <vTaskSwitchContext+0x8a>
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	4a07      	ldr	r2, [pc, #28]	; (800add8 <vTaskSwitchContext+0xb0>)
 800adba:	6013      	str	r3, [r2, #0]
}
 800adbc:	bf00      	nop
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bc80      	pop	{r7}
 800adc4:	4770      	bx	lr
 800adc6:	bf00      	nop
 800adc8:	20001ae4 	.word	0x20001ae4
 800adcc:	20001ad0 	.word	0x20001ad0
 800add0:	20001ac4 	.word	0x20001ac4
 800add4:	200019c0 	.word	0x200019c0
 800add8:	200019bc 	.word	0x200019bc

0800addc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d109      	bne.n	800ae00 <vTaskPlaceOnEventList+0x24>
 800adec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf0:	f383 8811 	msr	BASEPRI, r3
 800adf4:	f3bf 8f6f 	isb	sy
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	60fb      	str	r3, [r7, #12]
 800adfe:	e7fe      	b.n	800adfe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <vTaskPlaceOnEventList+0x44>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	3318      	adds	r3, #24
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7fe f9f6 	bl	80091fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae0e:	2101      	movs	r1, #1
 800ae10:	6838      	ldr	r0, [r7, #0]
 800ae12:	f000 fa8d 	bl	800b330 <prvAddCurrentTaskToDelayedList>
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	200019bc 	.word	0x200019bc

0800ae24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d109      	bne.n	800ae4a <vTaskPlaceOnEventListRestricted+0x26>
 800ae36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	e7fe      	b.n	800ae48 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <vTaskPlaceOnEventListRestricted+0x50>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	3318      	adds	r3, #24
 800ae50:	4619      	mov	r1, r3
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f7fe f9ae 	bl	80091b4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d002      	beq.n	800ae64 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ae5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae64:	6879      	ldr	r1, [r7, #4]
 800ae66:	68b8      	ldr	r0, [r7, #8]
 800ae68:	f000 fa62 	bl	800b330 <prvAddCurrentTaskToDelayedList>
	}
 800ae6c:	bf00      	nop
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	200019bc 	.word	0x200019bc

0800ae78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d109      	bne.n	800aea2 <xTaskRemoveFromEventList+0x2a>
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	60fb      	str	r3, [r7, #12]
 800aea0:	e7fe      	b.n	800aea0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	3318      	adds	r3, #24
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe f9df 	bl	800926a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeac:	4b1d      	ldr	r3, [pc, #116]	; (800af24 <xTaskRemoveFromEventList+0xac>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11c      	bne.n	800aeee <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe f9d6 	bl	800926a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	2201      	movs	r2, #1
 800aec4:	409a      	lsls	r2, r3
 800aec6:	4b18      	ldr	r3, [pc, #96]	; (800af28 <xTaskRemoveFromEventList+0xb0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	4a16      	ldr	r2, [pc, #88]	; (800af28 <xTaskRemoveFromEventList+0xb0>)
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4a13      	ldr	r2, [pc, #76]	; (800af2c <xTaskRemoveFromEventList+0xb4>)
 800aede:	441a      	add	r2, r3
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fe f964 	bl	80091b4 <vListInsertEnd>
 800aeec:	e005      	b.n	800aefa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	3318      	adds	r3, #24
 800aef2:	4619      	mov	r1, r3
 800aef4:	480e      	ldr	r0, [pc, #56]	; (800af30 <xTaskRemoveFromEventList+0xb8>)
 800aef6:	f7fe f95d 	bl	80091b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aefe:	4b0d      	ldr	r3, [pc, #52]	; (800af34 <xTaskRemoveFromEventList+0xbc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	429a      	cmp	r2, r3
 800af06:	d905      	bls.n	800af14 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af08:	2301      	movs	r3, #1
 800af0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <xTaskRemoveFromEventList+0xc0>)
 800af0e:	2201      	movs	r2, #1
 800af10:	601a      	str	r2, [r3, #0]
 800af12:	e001      	b.n	800af18 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800af14:	2300      	movs	r3, #0
 800af16:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800af18:	697b      	ldr	r3, [r7, #20]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3718      	adds	r7, #24
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	20001ae4 	.word	0x20001ae4
 800af28:	20001ac4 	.word	0x20001ac4
 800af2c:	200019c0 	.word	0x200019c0
 800af30:	20001a7c 	.word	0x20001a7c
 800af34:	200019bc 	.word	0x200019bc
 800af38:	20001ad0 	.word	0x20001ad0

0800af3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af44:	4b06      	ldr	r3, [pc, #24]	; (800af60 <vTaskInternalSetTimeOutState+0x24>)
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af4c:	4b05      	ldr	r3, [pc, #20]	; (800af64 <vTaskInternalSetTimeOutState+0x28>)
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	605a      	str	r2, [r3, #4]
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	bc80      	pop	{r7}
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20001ad4 	.word	0x20001ad4
 800af64:	20001ac0 	.word	0x20001ac0

0800af68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d109      	bne.n	800af8c <xTaskCheckForTimeOut+0x24>
 800af78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	e7fe      	b.n	800af8a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d109      	bne.n	800afa6 <xTaskCheckForTimeOut+0x3e>
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	e7fe      	b.n	800afa4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800afa6:	f7fe fa77 	bl	8009498 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800afaa:	4b1d      	ldr	r3, [pc, #116]	; (800b020 <xTaskCheckForTimeOut+0xb8>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	69ba      	ldr	r2, [r7, #24]
 800afb6:	1ad3      	subs	r3, r2, r3
 800afb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d102      	bne.n	800afca <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	61fb      	str	r3, [r7, #28]
 800afc8:	e023      	b.n	800b012 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	4b15      	ldr	r3, [pc, #84]	; (800b024 <xTaskCheckForTimeOut+0xbc>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d007      	beq.n	800afe6 <xTaskCheckForTimeOut+0x7e>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d802      	bhi.n	800afe6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	61fb      	str	r3, [r7, #28]
 800afe4:	e015      	b.n	800b012 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	429a      	cmp	r2, r3
 800afee:	d90b      	bls.n	800b008 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	1ad2      	subs	r2, r2, r3
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ff9d 	bl	800af3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b002:	2300      	movs	r3, #0
 800b004:	61fb      	str	r3, [r7, #28]
 800b006:	e004      	b.n	800b012 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b00e:	2301      	movs	r3, #1
 800b010:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b012:	f7fe fa6f 	bl	80094f4 <vPortExitCritical>

	return xReturn;
 800b016:	69fb      	ldr	r3, [r7, #28]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3720      	adds	r7, #32
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20001ac0 	.word	0x20001ac0
 800b024:	20001ad4 	.word	0x20001ad4

0800b028 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b02c:	4b03      	ldr	r3, [pc, #12]	; (800b03c <vTaskMissedYield+0x14>)
 800b02e:	2201      	movs	r2, #1
 800b030:	601a      	str	r2, [r3, #0]
}
 800b032:	bf00      	nop
 800b034:	46bd      	mov	sp, r7
 800b036:	bc80      	pop	{r7}
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	20001ad0 	.word	0x20001ad0

0800b040 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b048:	f000 f852 	bl	800b0f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b04c:	4b06      	ldr	r3, [pc, #24]	; (800b068 <prvIdleTask+0x28>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b01      	cmp	r3, #1
 800b052:	d9f9      	bls.n	800b048 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b054:	4b05      	ldr	r3, [pc, #20]	; (800b06c <prvIdleTask+0x2c>)
 800b056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b064:	e7f0      	b.n	800b048 <prvIdleTask+0x8>
 800b066:	bf00      	nop
 800b068:	200019c0 	.word	0x200019c0
 800b06c:	e000ed04 	.word	0xe000ed04

0800b070 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b082      	sub	sp, #8
 800b074:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b076:	2300      	movs	r3, #0
 800b078:	607b      	str	r3, [r7, #4]
 800b07a:	e00c      	b.n	800b096 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4a12      	ldr	r2, [pc, #72]	; (800b0d0 <prvInitialiseTaskLists+0x60>)
 800b088:	4413      	add	r3, r2
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fe f867 	bl	800915e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3301      	adds	r3, #1
 800b094:	607b      	str	r3, [r7, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b06      	cmp	r3, #6
 800b09a:	d9ef      	bls.n	800b07c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b09c:	480d      	ldr	r0, [pc, #52]	; (800b0d4 <prvInitialiseTaskLists+0x64>)
 800b09e:	f7fe f85e 	bl	800915e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b0a2:	480d      	ldr	r0, [pc, #52]	; (800b0d8 <prvInitialiseTaskLists+0x68>)
 800b0a4:	f7fe f85b 	bl	800915e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b0a8:	480c      	ldr	r0, [pc, #48]	; (800b0dc <prvInitialiseTaskLists+0x6c>)
 800b0aa:	f7fe f858 	bl	800915e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b0ae:	480c      	ldr	r0, [pc, #48]	; (800b0e0 <prvInitialiseTaskLists+0x70>)
 800b0b0:	f7fe f855 	bl	800915e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b0b4:	480b      	ldr	r0, [pc, #44]	; (800b0e4 <prvInitialiseTaskLists+0x74>)
 800b0b6:	f7fe f852 	bl	800915e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	; (800b0e8 <prvInitialiseTaskLists+0x78>)
 800b0bc:	4a05      	ldr	r2, [pc, #20]	; (800b0d4 <prvInitialiseTaskLists+0x64>)
 800b0be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b0c0:	4b0a      	ldr	r3, [pc, #40]	; (800b0ec <prvInitialiseTaskLists+0x7c>)
 800b0c2:	4a05      	ldr	r2, [pc, #20]	; (800b0d8 <prvInitialiseTaskLists+0x68>)
 800b0c4:	601a      	str	r2, [r3, #0]
}
 800b0c6:	bf00      	nop
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	200019c0 	.word	0x200019c0
 800b0d4:	20001a4c 	.word	0x20001a4c
 800b0d8:	20001a60 	.word	0x20001a60
 800b0dc:	20001a7c 	.word	0x20001a7c
 800b0e0:	20001a90 	.word	0x20001a90
 800b0e4:	20001aa8 	.word	0x20001aa8
 800b0e8:	20001a74 	.word	0x20001a74
 800b0ec:	20001a78 	.word	0x20001a78

0800b0f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0f6:	e019      	b.n	800b12c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b0f8:	f7fe f9ce 	bl	8009498 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b0fc:	4b0f      	ldr	r3, [pc, #60]	; (800b13c <prvCheckTasksWaitingTermination+0x4c>)
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3304      	adds	r3, #4
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fe f8ae 	bl	800926a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b10e:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <prvCheckTasksWaitingTermination+0x50>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3b01      	subs	r3, #1
 800b114:	4a0a      	ldr	r2, [pc, #40]	; (800b140 <prvCheckTasksWaitingTermination+0x50>)
 800b116:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b118:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <prvCheckTasksWaitingTermination+0x54>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4a09      	ldr	r2, [pc, #36]	; (800b144 <prvCheckTasksWaitingTermination+0x54>)
 800b120:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b122:	f7fe f9e7 	bl	80094f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f80e 	bl	800b148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <prvCheckTasksWaitingTermination+0x54>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1e1      	bne.n	800b0f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b134:	bf00      	nop
 800b136:	3708      	adds	r7, #8
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	20001a90 	.word	0x20001a90
 800b140:	20001abc 	.word	0x20001abc
 800b144:	20001aa4 	.word	0x20001aa4

0800b148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b156:	2b00      	cmp	r3, #0
 800b158:	d108      	bne.n	800b16c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b15e:	4618      	mov	r0, r3
 800b160:	f7fe fb52 	bl	8009808 <vPortFree>
				vPortFree( pxTCB );
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7fe fb4f 	bl	8009808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b16a:	e017      	b.n	800b19c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b172:	2b01      	cmp	r3, #1
 800b174:	d103      	bne.n	800b17e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7fe fb46 	bl	8009808 <vPortFree>
	}
 800b17c:	e00e      	b.n	800b19c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b184:	2b02      	cmp	r3, #2
 800b186:	d009      	beq.n	800b19c <prvDeleteTCB+0x54>
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	60fb      	str	r3, [r7, #12]
 800b19a:	e7fe      	b.n	800b19a <prvDeleteTCB+0x52>
	}
 800b19c:	bf00      	nop
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1aa:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <prvResetNextTaskUnblockTime+0x40>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <prvResetNextTaskUnblockTime+0x14>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e000      	b.n	800b1ba <prvResetNextTaskUnblockTime+0x16>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d004      	beq.n	800b1c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b1be:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <prvResetNextTaskUnblockTime+0x44>)
 800b1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b1c6:	e008      	b.n	800b1da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1c8:	4b06      	ldr	r3, [pc, #24]	; (800b1e4 <prvResetNextTaskUnblockTime+0x40>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4a04      	ldr	r2, [pc, #16]	; (800b1e8 <prvResetNextTaskUnblockTime+0x44>)
 800b1d8:	6013      	str	r3, [r2, #0]
}
 800b1da:	bf00      	nop
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr
 800b1e4:	20001a74 	.word	0x20001a74
 800b1e8:	20001adc 	.word	0x20001adc

0800b1ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b1f2:	4b0b      	ldr	r3, [pc, #44]	; (800b220 <xTaskGetSchedulerState+0x34>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	607b      	str	r3, [r7, #4]
 800b1fe:	e008      	b.n	800b212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b200:	4b08      	ldr	r3, [pc, #32]	; (800b224 <xTaskGetSchedulerState+0x38>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d102      	bne.n	800b20e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b208:	2302      	movs	r3, #2
 800b20a:	607b      	str	r3, [r7, #4]
 800b20c:	e001      	b.n	800b212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b20e:	2300      	movs	r3, #0
 800b210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b212:	687b      	ldr	r3, [r7, #4]
	}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	bc80      	pop	{r7}
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	20001ac8 	.word	0x20001ac8
 800b224:	20001ae4 	.word	0x20001ae4

0800b228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b234:	2300      	movs	r3, #0
 800b236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d06c      	beq.n	800b318 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b23e:	4b39      	ldr	r3, [pc, #228]	; (800b324 <xTaskPriorityDisinherit+0xfc>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	429a      	cmp	r2, r3
 800b246:	d009      	beq.n	800b25c <xTaskPriorityDisinherit+0x34>
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	e7fe      	b.n	800b25a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b260:	2b00      	cmp	r3, #0
 800b262:	d109      	bne.n	800b278 <xTaskPriorityDisinherit+0x50>
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60bb      	str	r3, [r7, #8]
 800b276:	e7fe      	b.n	800b276 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27c:	1e5a      	subs	r2, r3, #1
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d044      	beq.n	800b318 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b292:	2b00      	cmp	r3, #0
 800b294:	d140      	bne.n	800b318 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3304      	adds	r3, #4
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fd ffe5 	bl	800926a <uxListRemove>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d115      	bne.n	800b2d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2aa:	491f      	ldr	r1, [pc, #124]	; (800b328 <xTaskPriorityDisinherit+0x100>)
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xTaskPriorityDisinherit+0xaa>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c6:	43da      	mvns	r2, r3
 800b2c8:	4b18      	ldr	r3, [pc, #96]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	4a17      	ldr	r2, [pc, #92]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	f1c3 0207 	rsb	r2, r3, #7
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	409a      	lsls	r2, r3
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <xTaskPriorityDisinherit+0x100>)
 800b306:	441a      	add	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fd ff50 	bl	80091b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	200019bc 	.word	0x200019bc
 800b328:	200019c0 	.word	0x200019c0
 800b32c:	20001ac4 	.word	0x20001ac4

0800b330 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b33a:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b340:	4b28      	ldr	r3, [pc, #160]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3304      	adds	r3, #4
 800b346:	4618      	mov	r0, r3
 800b348:	f7fd ff8f 	bl	800926a <uxListRemove>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10b      	bne.n	800b36a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b352:	4b24      	ldr	r3, [pc, #144]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b358:	2201      	movs	r2, #1
 800b35a:	fa02 f303 	lsl.w	r3, r2, r3
 800b35e:	43da      	mvns	r2, r3
 800b360:	4b21      	ldr	r3, [pc, #132]	; (800b3e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4013      	ands	r3, r2
 800b366:	4a20      	ldr	r2, [pc, #128]	; (800b3e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b368:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d10a      	bne.n	800b388 <prvAddCurrentTaskToDelayedList+0x58>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d007      	beq.n	800b388 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3304      	adds	r3, #4
 800b37e:	4619      	mov	r1, r3
 800b380:	481a      	ldr	r0, [pc, #104]	; (800b3ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800b382:	f7fd ff17 	bl	80091b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b386:	e026      	b.n	800b3d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4413      	add	r3, r2
 800b38e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b390:	4b14      	ldr	r3, [pc, #80]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d209      	bcs.n	800b3b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3a0:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	4b0f      	ldr	r3, [pc, #60]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	f7fd ff24 	bl	80091fa <vListInsert>
}
 800b3b2:	e010      	b.n	800b3d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3b4:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3304      	adds	r3, #4
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7fd ff1a 	bl	80091fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3c6:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d202      	bcs.n	800b3d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b3d0:	4a09      	ldr	r2, [pc, #36]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	6013      	str	r3, [r2, #0]
}
 800b3d6:	bf00      	nop
 800b3d8:	3710      	adds	r7, #16
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	20001ac0 	.word	0x20001ac0
 800b3e4:	200019bc 	.word	0x200019bc
 800b3e8:	20001ac4 	.word	0x20001ac4
 800b3ec:	20001aa8 	.word	0x20001aa8
 800b3f0:	20001a78 	.word	0x20001a78
 800b3f4:	20001a74 	.word	0x20001a74
 800b3f8:	20001adc 	.word	0x20001adc

0800b3fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08a      	sub	sp, #40	; 0x28
 800b400:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b406:	f000 fb37 	bl	800ba78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b40a:	4b1c      	ldr	r3, [pc, #112]	; (800b47c <xTimerCreateTimerTask+0x80>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d021      	beq.n	800b456 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b412:	2300      	movs	r3, #0
 800b414:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b41a:	1d3a      	adds	r2, r7, #4
 800b41c:	f107 0108 	add.w	r1, r7, #8
 800b420:	f107 030c 	add.w	r3, r7, #12
 800b424:	4618      	mov	r0, r3
 800b426:	f7f4 fedd 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b42a:	6879      	ldr	r1, [r7, #4]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	9202      	str	r2, [sp, #8]
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	2302      	movs	r3, #2
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	2300      	movs	r3, #0
 800b43a:	460a      	mov	r2, r1
 800b43c:	4910      	ldr	r1, [pc, #64]	; (800b480 <xTimerCreateTimerTask+0x84>)
 800b43e:	4811      	ldr	r0, [pc, #68]	; (800b484 <xTimerCreateTimerTask+0x88>)
 800b440:	f7ff f84e 	bl	800a4e0 <xTaskCreateStatic>
 800b444:	4602      	mov	r2, r0
 800b446:	4b10      	ldr	r3, [pc, #64]	; (800b488 <xTimerCreateTimerTask+0x8c>)
 800b448:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b44a:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <xTimerCreateTimerTask+0x8c>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b452:	2301      	movs	r3, #1
 800b454:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d109      	bne.n	800b470 <xTimerCreateTimerTask+0x74>
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	613b      	str	r3, [r7, #16]
 800b46e:	e7fe      	b.n	800b46e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b470:	697b      	ldr	r3, [r7, #20]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3718      	adds	r7, #24
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	20001b18 	.word	0x20001b18
 800b480:	0800cdb0 	.word	0x0800cdb0
 800b484:	0800b6c1 	.word	0x0800b6c1
 800b488:	20001b1c 	.word	0x20001b1c

0800b48c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b088      	sub	sp, #32
 800b490:	af02      	add	r7, sp, #8
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	60b9      	str	r1, [r7, #8]
 800b496:	607a      	str	r2, [r7, #4]
 800b498:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b49a:	202c      	movs	r0, #44	; 0x2c
 800b49c:	f7fe f8f2 	bl	8009684 <pvPortMalloc>
 800b4a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00d      	beq.n	800b4c4 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	9301      	str	r3, [sp, #4]
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	68b9      	ldr	r1, [r7, #8]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f000 f844 	bl	800b544 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800b4c4:	697b      	ldr	r3, [r7, #20]
	}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b08a      	sub	sp, #40	; 0x28
 800b4d2:	af02      	add	r7, sp, #8
 800b4d4:	60f8      	str	r0, [r7, #12]
 800b4d6:	60b9      	str	r1, [r7, #8]
 800b4d8:	607a      	str	r2, [r7, #4]
 800b4da:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b4dc:	232c      	movs	r3, #44	; 0x2c
 800b4de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b2c      	cmp	r3, #44	; 0x2c
 800b4e4:	d009      	beq.n	800b4fa <xTimerCreateStatic+0x2c>
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	e7fe      	b.n	800b4f8 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d109      	bne.n	800b514 <xTimerCreateStatic+0x46>
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	e7fe      	b.n	800b512 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00d      	beq.n	800b53a <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	68b9      	ldr	r1, [r7, #8]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 f809 	bl	800b544 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800b53a:	69fb      	ldr	r3, [r7, #28]
	}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3720      	adds	r7, #32
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	607a      	str	r2, [r7, #4]
 800b550:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d109      	bne.n	800b56c <prvInitialiseNewTimer+0x28>
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	f383 8811 	msr	BASEPRI, r3
 800b560:	f3bf 8f6f 	isb	sy
 800b564:	f3bf 8f4f 	dsb	sy
 800b568:	617b      	str	r3, [r7, #20]
 800b56a:	e7fe      	b.n	800b56a <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d015      	beq.n	800b59e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b572:	f000 fa81 	bl	800ba78 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	683a      	ldr	r2, [r7, #0]
 800b58c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b590:	6a3a      	ldr	r2, [r7, #32]
 800b592:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	3304      	adds	r3, #4
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fd fdff 	bl	800919c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b59e:	bf00      	nop
 800b5a0:	3718      	adds	r7, #24
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
 800b5b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d109      	bne.n	800b5d4 <xTimerGenericCommand+0x2c>
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	e7fe      	b.n	800b5d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5d4:	4b19      	ldr	r3, [pc, #100]	; (800b63c <xTimerGenericCommand+0x94>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d02a      	beq.n	800b632 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	dc18      	bgt.n	800b620 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5ee:	f7ff fdfd 	bl	800b1ec <xTaskGetSchedulerState>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d109      	bne.n	800b60c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5f8:	4b10      	ldr	r3, [pc, #64]	; (800b63c <xTimerGenericCommand+0x94>)
 800b5fa:	6818      	ldr	r0, [r3, #0]
 800b5fc:	f107 0114 	add.w	r1, r7, #20
 800b600:	2300      	movs	r3, #0
 800b602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b604:	f7fe fb96 	bl	8009d34 <xQueueGenericSend>
 800b608:	6278      	str	r0, [r7, #36]	; 0x24
 800b60a:	e012      	b.n	800b632 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b60c:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <xTimerGenericCommand+0x94>)
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	f107 0114 	add.w	r1, r7, #20
 800b614:	2300      	movs	r3, #0
 800b616:	2200      	movs	r2, #0
 800b618:	f7fe fb8c 	bl	8009d34 <xQueueGenericSend>
 800b61c:	6278      	str	r0, [r7, #36]	; 0x24
 800b61e:	e008      	b.n	800b632 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b620:	4b06      	ldr	r3, [pc, #24]	; (800b63c <xTimerGenericCommand+0x94>)
 800b622:	6818      	ldr	r0, [r3, #0]
 800b624:	f107 0114 	add.w	r1, r7, #20
 800b628:	2300      	movs	r3, #0
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	f7fe fc7c 	bl	8009f28 <xQueueGenericSendFromISR>
 800b630:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b634:	4618      	mov	r0, r3
 800b636:	3728      	adds	r7, #40	; 0x28
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20001b18 	.word	0x20001b18

0800b640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b088      	sub	sp, #32
 800b644:	af02      	add	r7, sp, #8
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b64a:	4b1c      	ldr	r3, [pc, #112]	; (800b6bc <prvProcessExpiredTimer+0x7c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	3304      	adds	r3, #4
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fd fe06 	bl	800926a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	69db      	ldr	r3, [r3, #28]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d121      	bne.n	800b6aa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	699a      	ldr	r2, [r3, #24]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	18d1      	adds	r1, r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	6978      	ldr	r0, [r7, #20]
 800b674:	f000 f8c8 	bl	800b808 <prvInsertTimerInActiveList>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d015      	beq.n	800b6aa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b67e:	2300      	movs	r3, #0
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	2300      	movs	r3, #0
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	2100      	movs	r1, #0
 800b688:	6978      	ldr	r0, [r7, #20]
 800b68a:	f7ff ff8d 	bl	800b5a8 <xTimerGenericCommand>
 800b68e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d109      	bne.n	800b6aa <prvProcessExpiredTimer+0x6a>
 800b696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	60fb      	str	r3, [r7, #12]
 800b6a8:	e7fe      	b.n	800b6a8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ae:	6978      	ldr	r0, [r7, #20]
 800b6b0:	4798      	blx	r3
}
 800b6b2:	bf00      	nop
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20001b10 	.word	0x20001b10

0800b6c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6c8:	f107 0308 	add.w	r3, r7, #8
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 f857 	bl	800b780 <prvGetNextExpireTime>
 800b6d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 f803 	bl	800b6e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6de:	f000 f8d5 	bl	800b88c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6e2:	e7f1      	b.n	800b6c8 <prvTimerTask+0x8>

0800b6e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b6ee:	f7ff f9a7 	bl	800aa40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6f2:	f107 0308 	add.w	r3, r7, #8
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 f866 	bl	800b7c8 <prvSampleTimeNow>
 800b6fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d130      	bne.n	800b766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10a      	bne.n	800b720 <prvProcessTimerOrBlockTask+0x3c>
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d806      	bhi.n	800b720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b712:	f7ff f9a3 	bl	800aa5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b716:	68f9      	ldr	r1, [r7, #12]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff ff91 	bl	800b640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b71e:	e024      	b.n	800b76a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d008      	beq.n	800b738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b726:	4b13      	ldr	r3, [pc, #76]	; (800b774 <prvProcessTimerOrBlockTask+0x90>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	bf0c      	ite	eq
 800b730:	2301      	moveq	r3, #1
 800b732:	2300      	movne	r3, #0
 800b734:	b2db      	uxtb	r3, r3
 800b736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b738:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <prvProcessTimerOrBlockTask+0x94>)
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	4619      	mov	r1, r3
 800b746:	f7fe fe97 	bl	800a478 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b74a:	f7ff f987 	bl	800aa5c <xTaskResumeAll>
 800b74e:	4603      	mov	r3, r0
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b754:	4b09      	ldr	r3, [pc, #36]	; (800b77c <prvProcessTimerOrBlockTask+0x98>)
 800b756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	f3bf 8f6f 	isb	sy
}
 800b764:	e001      	b.n	800b76a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b766:	f7ff f979 	bl	800aa5c <xTaskResumeAll>
}
 800b76a:	bf00      	nop
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20001b14 	.word	0x20001b14
 800b778:	20001b18 	.word	0x20001b18
 800b77c:	e000ed04 	.word	0xe000ed04

0800b780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b788:	4b0e      	ldr	r3, [pc, #56]	; (800b7c4 <prvGetNextExpireTime+0x44>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	bf0c      	ite	eq
 800b792:	2301      	moveq	r3, #1
 800b794:	2300      	movne	r3, #0
 800b796:	b2db      	uxtb	r3, r3
 800b798:	461a      	mov	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d105      	bne.n	800b7b2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7a6:	4b07      	ldr	r3, [pc, #28]	; (800b7c4 <prvGetNextExpireTime+0x44>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	e001      	b.n	800b7b6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bc80      	pop	{r7}
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	20001b10 	.word	0x20001b10

0800b7c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7d0:	f7ff f9e0 	bl	800ab94 <xTaskGetTickCount>
 800b7d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7d6:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <prvSampleTimeNow+0x3c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d205      	bcs.n	800b7ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7e0:	f000 f8ea 	bl	800b9b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	e002      	b.n	800b7f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b7f2:	4a04      	ldr	r2, [pc, #16]	; (800b804 <prvSampleTimeNow+0x3c>)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	20001b20 	.word	0x20001b20

0800b808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
 800b814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d812      	bhi.n	800b854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	1ad2      	subs	r2, r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d302      	bcc.n	800b842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	e01b      	b.n	800b87a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b842:	4b10      	ldr	r3, [pc, #64]	; (800b884 <prvInsertTimerInActiveList+0x7c>)
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3304      	adds	r3, #4
 800b84a:	4619      	mov	r1, r3
 800b84c:	4610      	mov	r0, r2
 800b84e:	f7fd fcd4 	bl	80091fa <vListInsert>
 800b852:	e012      	b.n	800b87a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b854:	687a      	ldr	r2, [r7, #4]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d206      	bcs.n	800b86a <prvInsertTimerInActiveList+0x62>
 800b85c:	68ba      	ldr	r2, [r7, #8]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d302      	bcc.n	800b86a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b864:	2301      	movs	r3, #1
 800b866:	617b      	str	r3, [r7, #20]
 800b868:	e007      	b.n	800b87a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b86a:	4b07      	ldr	r3, [pc, #28]	; (800b888 <prvInsertTimerInActiveList+0x80>)
 800b86c:	681a      	ldr	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3304      	adds	r3, #4
 800b872:	4619      	mov	r1, r3
 800b874:	4610      	mov	r0, r2
 800b876:	f7fd fcc0 	bl	80091fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b87a:	697b      	ldr	r3, [r7, #20]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20001b14 	.word	0x20001b14
 800b888:	20001b10 	.word	0x20001b10

0800b88c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08c      	sub	sp, #48	; 0x30
 800b890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b892:	e07f      	b.n	800b994 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	db7c      	blt.n	800b994 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd fcdd 	bl	800926a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8b0:	1d3b      	adds	r3, r7, #4
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ff88 	bl	800b7c8 <prvSampleTimeNow>
 800b8b8:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	2b09      	cmp	r3, #9
 800b8be:	d868      	bhi.n	800b992 <prvProcessReceivedCommands+0x106>
 800b8c0:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <prvProcessReceivedCommands+0x3c>)
 800b8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c6:	bf00      	nop
 800b8c8:	0800b8f1 	.word	0x0800b8f1
 800b8cc:	0800b8f1 	.word	0x0800b8f1
 800b8d0:	0800b8f1 	.word	0x0800b8f1
 800b8d4:	0800b995 	.word	0x0800b995
 800b8d8:	0800b94b 	.word	0x0800b94b
 800b8dc:	0800b981 	.word	0x0800b981
 800b8e0:	0800b8f1 	.word	0x0800b8f1
 800b8e4:	0800b8f1 	.word	0x0800b8f1
 800b8e8:	0800b995 	.word	0x0800b995
 800b8ec:	0800b94b 	.word	0x0800b94b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	18d1      	adds	r1, r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a3a      	ldr	r2, [r7, #32]
 800b8fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8fe:	f7ff ff83 	bl	800b808 <prvInsertTimerInActiveList>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d045      	beq.n	800b994 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b90e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d13d      	bne.n	800b994 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	441a      	add	r2, r3
 800b920:	2300      	movs	r3, #0
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	2300      	movs	r3, #0
 800b926:	2100      	movs	r1, #0
 800b928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b92a:	f7ff fe3d 	bl	800b5a8 <xTimerGenericCommand>
 800b92e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d12e      	bne.n	800b994 <prvProcessReceivedCommands+0x108>
 800b936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	61bb      	str	r3, [r7, #24]
 800b948:	e7fe      	b.n	800b948 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d109      	bne.n	800b96c <prvProcessReceivedCommands+0xe0>
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	e7fe      	b.n	800b96a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	699a      	ldr	r2, [r3, #24]
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	18d1      	adds	r1, r2, r3
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	6a3a      	ldr	r2, [r7, #32]
 800b978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b97a:	f7ff ff45 	bl	800b808 <prvInsertTimerInActiveList>
					break;
 800b97e:	e009      	b.n	800b994 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b986:	2b00      	cmp	r3, #0
 800b988:	d104      	bne.n	800b994 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800b98a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b98c:	f7fd ff3c 	bl	8009808 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b990:	e000      	b.n	800b994 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800b992:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b994:	4b07      	ldr	r3, [pc, #28]	; (800b9b4 <prvProcessReceivedCommands+0x128>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f107 0108 	add.w	r1, r7, #8
 800b99c:	2200      	movs	r2, #0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe fb56 	bl	800a050 <xQueueReceive>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f47f af74 	bne.w	800b894 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b9ac:	bf00      	nop
 800b9ae:	3728      	adds	r7, #40	; 0x28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	20001b18 	.word	0x20001b18

0800b9b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b088      	sub	sp, #32
 800b9bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9be:	e044      	b.n	800ba4a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9c0:	4b2b      	ldr	r3, [pc, #172]	; (800ba70 <prvSwitchTimerLists+0xb8>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68db      	ldr	r3, [r3, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9ca:	4b29      	ldr	r3, [pc, #164]	; (800ba70 <prvSwitchTimerLists+0xb8>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	3304      	adds	r3, #4
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fd fc46 	bl	800926a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	6938      	ldr	r0, [r7, #16]
 800b9e4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	69db      	ldr	r3, [r3, #28]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d12d      	bne.n	800ba4a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	699a      	ldr	r2, [r3, #24]
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d90e      	bls.n	800ba1e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba0c:	4b18      	ldr	r3, [pc, #96]	; (800ba70 <prvSwitchTimerLists+0xb8>)
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7fd fbef 	bl	80091fa <vListInsert>
 800ba1c:	e015      	b.n	800ba4a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba1e:	2300      	movs	r3, #0
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	2300      	movs	r3, #0
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	2100      	movs	r1, #0
 800ba28:	6938      	ldr	r0, [r7, #16]
 800ba2a:	f7ff fdbd 	bl	800b5a8 <xTimerGenericCommand>
 800ba2e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d109      	bne.n	800ba4a <prvSwitchTimerLists+0x92>
 800ba36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	e7fe      	b.n	800ba48 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba4a:	4b09      	ldr	r3, [pc, #36]	; (800ba70 <prvSwitchTimerLists+0xb8>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d1b5      	bne.n	800b9c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba54:	4b06      	ldr	r3, [pc, #24]	; (800ba70 <prvSwitchTimerLists+0xb8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba5a:	4b06      	ldr	r3, [pc, #24]	; (800ba74 <prvSwitchTimerLists+0xbc>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a04      	ldr	r2, [pc, #16]	; (800ba70 <prvSwitchTimerLists+0xb8>)
 800ba60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba62:	4a04      	ldr	r2, [pc, #16]	; (800ba74 <prvSwitchTimerLists+0xbc>)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6013      	str	r3, [r2, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	3718      	adds	r7, #24
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	20001b10 	.word	0x20001b10
 800ba74:	20001b14 	.word	0x20001b14

0800ba78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba7e:	f7fd fd0b 	bl	8009498 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba82:	4b15      	ldr	r3, [pc, #84]	; (800bad8 <prvCheckForValidListAndQueue+0x60>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d120      	bne.n	800bacc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba8a:	4814      	ldr	r0, [pc, #80]	; (800badc <prvCheckForValidListAndQueue+0x64>)
 800ba8c:	f7fd fb67 	bl	800915e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba90:	4813      	ldr	r0, [pc, #76]	; (800bae0 <prvCheckForValidListAndQueue+0x68>)
 800ba92:	f7fd fb64 	bl	800915e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <prvCheckForValidListAndQueue+0x6c>)
 800ba98:	4a10      	ldr	r2, [pc, #64]	; (800badc <prvCheckForValidListAndQueue+0x64>)
 800ba9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba9c:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <prvCheckForValidListAndQueue+0x70>)
 800ba9e:	4a10      	ldr	r2, [pc, #64]	; (800bae0 <prvCheckForValidListAndQueue+0x68>)
 800baa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800baa2:	2300      	movs	r3, #0
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	4b11      	ldr	r3, [pc, #68]	; (800baec <prvCheckForValidListAndQueue+0x74>)
 800baa8:	4a11      	ldr	r2, [pc, #68]	; (800baf0 <prvCheckForValidListAndQueue+0x78>)
 800baaa:	210c      	movs	r1, #12
 800baac:	200a      	movs	r0, #10
 800baae:	f7fe f825 	bl	8009afc <xQueueGenericCreateStatic>
 800bab2:	4602      	mov	r2, r0
 800bab4:	4b08      	ldr	r3, [pc, #32]	; (800bad8 <prvCheckForValidListAndQueue+0x60>)
 800bab6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bab8:	4b07      	ldr	r3, [pc, #28]	; (800bad8 <prvCheckForValidListAndQueue+0x60>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d005      	beq.n	800bacc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bac0:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <prvCheckForValidListAndQueue+0x60>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	490b      	ldr	r1, [pc, #44]	; (800baf4 <prvCheckForValidListAndQueue+0x7c>)
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7fe fcae 	bl	800a428 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bacc:	f7fd fd12 	bl	80094f4 <vPortExitCritical>
}
 800bad0:	bf00      	nop
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20001b18 	.word	0x20001b18
 800badc:	20001ae8 	.word	0x20001ae8
 800bae0:	20001afc 	.word	0x20001afc
 800bae4:	20001b10 	.word	0x20001b10
 800bae8:	20001b14 	.word	0x20001b14
 800baec:	20001b9c 	.word	0x20001b9c
 800baf0:	20001b24 	.word	0x20001b24
 800baf4:	0800cdb8 	.word	0x0800cdb8

0800baf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800bafc:	4b27      	ldr	r3, [pc, #156]	; (800bb9c <MX_USB_DEVICE_Init+0xa4>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d124      	bne.n	800bb50 <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb06:	2200      	movs	r2, #0
 800bb08:	4925      	ldr	r1, [pc, #148]	; (800bba0 <MX_USB_DEVICE_Init+0xa8>)
 800bb0a:	4826      	ldr	r0, [pc, #152]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb0c:	f7fc f8f8 	bl	8007d00 <USBD_Init>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800bb16:	f7f4 fec5 	bl	80008a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800bb1a:	4923      	ldr	r1, [pc, #140]	; (800bba8 <MX_USB_DEVICE_Init+0xb0>)
 800bb1c:	4821      	ldr	r0, [pc, #132]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb1e:	f7fc f91a 	bl	8007d56 <USBD_RegisterClass>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d001      	beq.n	800bb2c <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800bb28:	f7f4 febc 	bl	80008a4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800bb2c:	491f      	ldr	r1, [pc, #124]	; (800bbac <MX_USB_DEVICE_Init+0xb4>)
 800bb2e:	481d      	ldr	r0, [pc, #116]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb30:	f7fc f8d0 	bl	8007cd4 <USBD_CUSTOM_HID_RegisterInterface>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800bb3a:	f7f4 feb3 	bl	80008a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb3e:	4819      	ldr	r0, [pc, #100]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb40:	f7fc f922 	bl	8007d88 <USBD_Start>
 800bb44:	4603      	mov	r3, r0
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d01e      	beq.n	800bb88 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800bb4a:	f7f4 feab 	bl	80008a4 <Error_Handler>
 800bb4e:	e01b      	b.n	800bb88 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800bb50:	2200      	movs	r2, #0
 800bb52:	4913      	ldr	r1, [pc, #76]	; (800bba0 <MX_USB_DEVICE_Init+0xa8>)
 800bb54:	4813      	ldr	r0, [pc, #76]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb56:	f7fc f8d3 	bl	8007d00 <USBD_Init>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800bb60:	f7f4 fea0 	bl	80008a4 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800bb64:	4912      	ldr	r1, [pc, #72]	; (800bbb0 <MX_USB_DEVICE_Init+0xb8>)
 800bb66:	480f      	ldr	r0, [pc, #60]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb68:	f7fc f8f5 	bl	8007d56 <USBD_RegisterClass>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d001      	beq.n	800bb76 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800bb72:	f7f4 fe97 	bl	80008a4 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800bb76:	490f      	ldr	r1, [pc, #60]	; (800bbb4 <MX_USB_DEVICE_Init+0xbc>)
 800bb78:	480a      	ldr	r0, [pc, #40]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb7a:	f7fa fe69 	bl	8006850 <USBD_MSC_RegisterStorage>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800bb84:	f7f4 fe8e 	bl	80008a4 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bb88:	4806      	ldr	r0, [pc, #24]	; (800bba4 <MX_USB_DEVICE_Init+0xac>)
 800bb8a:	f7fc f8fd 	bl	8007d88 <USBD_Start>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800bb94:	f7f4 fe86 	bl	80008a4 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb98:	bf00      	nop
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	20000330 	.word	0x20000330
 800bba0:	20000260 	.word	0x20000260
 800bba4:	200031c4 	.word	0x200031c4
 800bba8:	20000118 	.word	0x20000118
 800bbac:	20000250 	.word	0x20000250
 800bbb0:	20000074 	.word	0x20000074
 800bbb4:	20000034 	.word	0x20000034

0800bbb8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bbbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bc80      	pop	{r7}
 800bbc4:	4770      	bx	lr

0800bbc6 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bbca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bc80      	pop	{r7}
 800bbd2:	4770      	bx	lr

0800bbd4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	460a      	mov	r2, r1
 800bbde:	71fb      	strb	r3, [r7, #7]
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800bbe4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bc80      	pop	{r7}
 800bbee:	4770      	bx	lr

0800bbf0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	6039      	str	r1, [r7, #0]
 800bbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	2212      	movs	r2, #18
 800bc00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc02:	4b03      	ldr	r3, [pc, #12]	; (800bc10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bc80      	pop	{r7}
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	2000027c 	.word	0x2000027c

0800bc14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	6039      	str	r1, [r7, #0]
 800bc1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2204      	movs	r2, #4
 800bc24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc26:	4b03      	ldr	r3, [pc, #12]	; (800bc34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bc80      	pop	{r7}
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20000290 	.word	0x20000290

0800bc38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	6039      	str	r1, [r7, #0]
 800bc42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc44:	79fb      	ldrb	r3, [r7, #7]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d105      	bne.n	800bc56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	4907      	ldr	r1, [pc, #28]	; (800bc6c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc4e:	4808      	ldr	r0, [pc, #32]	; (800bc70 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc50:	f7fd f805 	bl	8008c5e <USBD_GetString>
 800bc54:	e004      	b.n	800bc60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc56:	683a      	ldr	r2, [r7, #0]
 800bc58:	4904      	ldr	r1, [pc, #16]	; (800bc6c <USBD_FS_ProductStrDescriptor+0x34>)
 800bc5a:	4805      	ldr	r0, [pc, #20]	; (800bc70 <USBD_FS_ProductStrDescriptor+0x38>)
 800bc5c:	f7fc ffff 	bl	8008c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc60:	4b02      	ldr	r3, [pc, #8]	; (800bc6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20003488 	.word	0x20003488
 800bc70:	0800cdc0 	.word	0x0800cdc0

0800bc74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	4904      	ldr	r1, [pc, #16]	; (800bc94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bc84:	4804      	ldr	r0, [pc, #16]	; (800bc98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bc86:	f7fc ffea 	bl	8008c5e <USBD_GetString>
  return USBD_StrDesc;
 800bc8a:	4b02      	ldr	r3, [pc, #8]	; (800bc94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	20003488 	.word	0x20003488
 800bc98:	0800cde4 	.word	0x0800cde4

0800bc9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	6039      	str	r1, [r7, #0]
 800bca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	221a      	movs	r2, #26
 800bcac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcae:	f000 f843 	bl	800bd38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcb2:	4b02      	ldr	r3, [pc, #8]	; (800bcbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20000294 	.word	0x20000294

0800bcc0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	6039      	str	r1, [r7, #0]
 800bcca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bccc:	79fb      	ldrb	r3, [r7, #7]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d105      	bne.n	800bcde <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcd2:	683a      	ldr	r2, [r7, #0]
 800bcd4:	4907      	ldr	r1, [pc, #28]	; (800bcf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bcd6:	4808      	ldr	r0, [pc, #32]	; (800bcf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bcd8:	f7fc ffc1 	bl	8008c5e <USBD_GetString>
 800bcdc:	e004      	b.n	800bce8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bcde:	683a      	ldr	r2, [r7, #0]
 800bce0:	4904      	ldr	r1, [pc, #16]	; (800bcf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bce2:	4805      	ldr	r0, [pc, #20]	; (800bcf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bce4:	f7fc ffbb 	bl	8008c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce8:	4b02      	ldr	r3, [pc, #8]	; (800bcf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	20003488 	.word	0x20003488
 800bcf8:	0800cdf4 	.word	0x0800cdf4

0800bcfc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d105      	bne.n	800bd1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd0e:	683a      	ldr	r2, [r7, #0]
 800bd10:	4907      	ldr	r1, [pc, #28]	; (800bd30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd12:	4808      	ldr	r0, [pc, #32]	; (800bd34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd14:	f7fc ffa3 	bl	8008c5e <USBD_GetString>
 800bd18:	e004      	b.n	800bd24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	4904      	ldr	r1, [pc, #16]	; (800bd30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd1e:	4805      	ldr	r0, [pc, #20]	; (800bd34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd20:	f7fc ff9d 	bl	8008c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd24:	4b02      	ldr	r3, [pc, #8]	; (800bd30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	20003488 	.word	0x20003488
 800bd34:	0800ce08 	.word	0x0800ce08

0800bd38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	; (800bd7c <Get_SerialNum+0x44>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd44:	4b0e      	ldr	r3, [pc, #56]	; (800bd80 <Get_SerialNum+0x48>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd4a:	4b0e      	ldr	r3, [pc, #56]	; (800bd84 <Get_SerialNum+0x4c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4413      	add	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d009      	beq.n	800bd72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bd5e:	2208      	movs	r2, #8
 800bd60:	4909      	ldr	r1, [pc, #36]	; (800bd88 <Get_SerialNum+0x50>)
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f000 f814 	bl	800bd90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bd68:	2204      	movs	r2, #4
 800bd6a:	4908      	ldr	r1, [pc, #32]	; (800bd8c <Get_SerialNum+0x54>)
 800bd6c:	68b8      	ldr	r0, [r7, #8]
 800bd6e:	f000 f80f 	bl	800bd90 <IntToUnicode>
  }
}
 800bd72:	bf00      	nop
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	1ffff7e8 	.word	0x1ffff7e8
 800bd80:	1ffff7ec 	.word	0x1ffff7ec
 800bd84:	1ffff7f0 	.word	0x1ffff7f0
 800bd88:	20000296 	.word	0x20000296
 800bd8c:	200002a6 	.word	0x200002a6

0800bd90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bda2:	2300      	movs	r3, #0
 800bda4:	75fb      	strb	r3, [r7, #23]
 800bda6:	e027      	b.n	800bdf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	0f1b      	lsrs	r3, r3, #28
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d80b      	bhi.n	800bdc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
 800bdb2:	005b      	lsls	r3, r3, #1
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	0f12      	lsrs	r2, r2, #28
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	3230      	adds	r2, #48	; 0x30
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e00a      	b.n	800bdde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bdc8:	7dfb      	ldrb	r3, [r7, #23]
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	0f12      	lsrs	r2, r2, #28
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	3237      	adds	r2, #55	; 0x37
 800bdda:	b2d2      	uxtb	r2, r2
 800bddc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	011b      	lsls	r3, r3, #4
 800bde2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	3301      	adds	r3, #1
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	4413      	add	r3, r2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	75fb      	strb	r3, [r7, #23]
 800bdf8:	7dfa      	ldrb	r2, [r7, #23]
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d3d3      	bcc.n	800bda8 <IntToUnicode+0x18>
  }
}
 800be00:	bf00      	nop
 800be02:	371c      	adds	r7, #28
 800be04:	46bd      	mov	sp, r7
 800be06:	bc80      	pop	{r7}
 800be08:	4770      	bx	lr
	...

0800be0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a0d      	ldr	r2, [pc, #52]	; (800be50 <HAL_PCD_MspInit+0x44>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d113      	bne.n	800be46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800be1e:	4a0d      	ldr	r2, [pc, #52]	; (800be54 <HAL_PCD_MspInit+0x48>)
 800be20:	4b0c      	ldr	r3, [pc, #48]	; (800be54 <HAL_PCD_MspInit+0x48>)
 800be22:	69db      	ldr	r3, [r3, #28]
 800be24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800be28:	61d3      	str	r3, [r2, #28]
 800be2a:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <HAL_PCD_MspInit+0x48>)
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800be36:	2200      	movs	r2, #0
 800be38:	2105      	movs	r1, #5
 800be3a:	2014      	movs	r0, #20
 800be3c:	f7f5 f863 	bl	8000f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800be40:	2014      	movs	r0, #20
 800be42:	f7f5 f87c 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	40005c00 	.word	0x40005c00
 800be54:	40021000 	.word	0x40021000

0800be58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800be6c:	4619      	mov	r1, r3
 800be6e:	4610      	mov	r0, r2
 800be70:	f7fb ffd2 	bl	8007e18 <USBD_LL_SetupStage>
}
 800be74:	bf00      	nop
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800be8e:	78fa      	ldrb	r2, [r7, #3]
 800be90:	6879      	ldr	r1, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	440b      	add	r3, r1
 800be9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f7fc f802 	bl	8007eae <USBD_LL_DataOutStage>
}
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
 800beba:	460b      	mov	r3, r1
 800bebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bec4:	78fa      	ldrb	r2, [r7, #3]
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	440b      	add	r3, r1
 800bed2:	333c      	adds	r3, #60	; 0x3c
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	4619      	mov	r1, r3
 800beda:	f7fc f859 	bl	8007f90 <USBD_LL_DataInStage>
}
 800bede:	bf00      	nop
 800bee0:	3708      	adds	r7, #8
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}

0800bee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b082      	sub	sp, #8
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fc f969 	bl	80081cc <USBD_LL_SOF>
}
 800befa:	bf00      	nop
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d001      	beq.n	800bf1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bf16:	f7f4 fcc5 	bl	80008a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf20:	7bfa      	ldrb	r2, [r7, #15]
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fc f919 	bl	800815c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fc f8d2 	bl	80080da <USBD_LL_Reset>
}
 800bf36:	bf00      	nop
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
	...

0800bf40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fc f913 	bl	800817a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d005      	beq.n	800bf68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf5c:	4a04      	ldr	r2, [pc, #16]	; (800bf70 <HAL_PCD_SuspendCallback+0x30>)
 800bf5e:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <HAL_PCD_SuspendCallback+0x30>)
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	f043 0306 	orr.w	r3, r3, #6
 800bf66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	e000ed00 	.word	0xe000ed00

0800bf74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b082      	sub	sp, #8
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7fc f90d 	bl	80081a2 <USBD_LL_Resume>
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bf98:	4a23      	ldr	r2, [pc, #140]	; (800c028 <USBD_LL_Init+0x98>)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a21      	ldr	r2, [pc, #132]	; (800c028 <USBD_LL_Init+0x98>)
 800bfa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bfa8:	4b1f      	ldr	r3, [pc, #124]	; (800c028 <USBD_LL_Init+0x98>)
 800bfaa:	4a20      	ldr	r2, [pc, #128]	; (800c02c <USBD_LL_Init+0x9c>)
 800bfac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bfae:	4b1e      	ldr	r3, [pc, #120]	; (800c028 <USBD_LL_Init+0x98>)
 800bfb0:	2208      	movs	r2, #8
 800bfb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bfb4:	4b1c      	ldr	r3, [pc, #112]	; (800c028 <USBD_LL_Init+0x98>)
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bfba:	4b1b      	ldr	r3, [pc, #108]	; (800c028 <USBD_LL_Init+0x98>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bfc0:	4b19      	ldr	r3, [pc, #100]	; (800c028 <USBD_LL_Init+0x98>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bfc6:	4b18      	ldr	r3, [pc, #96]	; (800c028 <USBD_LL_Init+0x98>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bfcc:	4816      	ldr	r0, [pc, #88]	; (800c028 <USBD_LL_Init+0x98>)
 800bfce:	f7f5 f93b 	bl	8001248 <HAL_PCD_Init>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bfd8:	f7f4 fc64 	bl	80008a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bfe2:	2318      	movs	r3, #24
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	f7f6 fdfb 	bl	8002be2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bff2:	2358      	movs	r3, #88	; 0x58
 800bff4:	2200      	movs	r2, #0
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	f7f6 fdf3 	bl	8002be2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c002:	2398      	movs	r3, #152	; 0x98
 800c004:	2200      	movs	r2, #0
 800c006:	2181      	movs	r1, #129	; 0x81
 800c008:	f7f6 fdeb 	bl	8002be2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c012:	23d8      	movs	r3, #216	; 0xd8
 800c014:	2200      	movs	r2, #0
 800c016:	2101      	movs	r1, #1
 800c018:	f7f6 fde3 	bl	8002be2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20003688 	.word	0x20003688
 800c02c:	40005c00 	.word	0x40005c00

0800c030 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c046:	4618      	mov	r0, r3
 800c048:	f7f5 fa09 	bl	800145e <HAL_PCD_Start>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 f96e 	bl	800c334 <USBD_Get_USB_Status>
 800c058:	4603      	mov	r3, r0
 800c05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	4608      	mov	r0, r1
 800c070:	4611      	mov	r1, r2
 800c072:	461a      	mov	r2, r3
 800c074:	4603      	mov	r3, r0
 800c076:	70fb      	strb	r3, [r7, #3]
 800c078:	460b      	mov	r3, r1
 800c07a:	70bb      	strb	r3, [r7, #2]
 800c07c:	4613      	mov	r3, r2
 800c07e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c08e:	78bb      	ldrb	r3, [r7, #2]
 800c090:	883a      	ldrh	r2, [r7, #0]
 800c092:	78f9      	ldrb	r1, [r7, #3]
 800c094:	f7f5 fb83 	bl	800179e <HAL_PCD_EP_Open>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 f948 	bl	800c334 <USBD_Get_USB_Status>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f5 fbca 	bl	800186a <HAL_PCD_EP_Close>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 f929 	bl	800c334 <USBD_Get_USB_Status>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c10a:	78fa      	ldrb	r2, [r7, #3]
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f5 fd3e 	bl	8001b90 <HAL_PCD_EP_Flush>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f90a 	bl	800c334 <USBD_Get_USB_Status>
 800c120:	4603      	mov	r3, r0
 800c122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c124:	7bbb      	ldrb	r3, [r7, #14]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7f5 fc6b 	bl	8001a28 <HAL_PCD_EP_SetStall>
 800c152:	4603      	mov	r3, r0
 800c154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 f8eb 	bl	800c334 <USBD_Get_USB_Status>
 800c15e:	4603      	mov	r3, r0
 800c160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c162:	7bbb      	ldrb	r3, [r7, #14]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c186:	78fa      	ldrb	r2, [r7, #3]
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7f5 fcac 	bl	8001ae8 <HAL_PCD_EP_ClrStall>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f8cc 	bl	800c334 <USBD_Get_USB_Status>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b085      	sub	sp, #20
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1bc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c1be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	da0c      	bge.n	800c1e0 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1cc:	68f9      	ldr	r1, [r7, #12]
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	440b      	add	r3, r1
 800c1da:	3302      	adds	r3, #2
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	e00b      	b.n	800c1f8 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1e6:	68f9      	ldr	r1, [r7, #12]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	440b      	add	r3, r1
 800c1f2:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c1f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3714      	adds	r7, #20
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bc80      	pop	{r7}
 800c200:	4770      	bx	lr

0800c202 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c21c:	78fa      	ldrb	r2, [r7, #3]
 800c21e:	4611      	mov	r1, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f7f5 fa97 	bl	8001754 <HAL_PCD_SetAddress>
 800c226:	4603      	mov	r3, r0
 800c228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 f881 	bl	800c334 <USBD_Get_USB_Status>
 800c232:	4603      	mov	r3, r0
 800c234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c236:	7bbb      	ldrb	r3, [r7, #14]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	607a      	str	r2, [r7, #4]
 800c24a:	461a      	mov	r2, r3
 800c24c:	460b      	mov	r3, r1
 800c24e:	72fb      	strb	r3, [r7, #11]
 800c250:	4613      	mov	r3, r2
 800c252:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c262:	893b      	ldrh	r3, [r7, #8]
 800c264:	7af9      	ldrb	r1, [r7, #11]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	f7f5 fb9b 	bl	80019a2 <HAL_PCD_EP_Transmit>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f85e 	bl	800c334 <USBD_Get_USB_Status>
 800c278:	4603      	mov	r3, r0
 800c27a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c27c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b086      	sub	sp, #24
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	60f8      	str	r0, [r7, #12]
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	461a      	mov	r2, r3
 800c292:	460b      	mov	r3, r1
 800c294:	72fb      	strb	r3, [r7, #11]
 800c296:	4613      	mov	r3, r2
 800c298:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c2a8:	893b      	ldrh	r3, [r7, #8]
 800c2aa:	7af9      	ldrb	r1, [r7, #11]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	f7f5 fb24 	bl	80018fa <HAL_PCD_EP_Receive>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2b6:	7dfb      	ldrb	r3, [r7, #23]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f83b 	bl	800c334 <USBD_Get_USB_Status>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3718      	adds	r7, #24
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2de:	78fa      	ldrb	r2, [r7, #3]
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f5 fb46 	bl	8001974 <HAL_PCD_EP_GetRxCount>
 800c2e8:	4603      	mov	r3, r0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800c2fc:	4b02      	ldr	r3, [pc, #8]	; (800c308 <USBD_static_malloc+0x14>)
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	bc80      	pop	{r7}
 800c306:	4770      	bx	lr
 800c308:	20001be4 	.word	0x20001be4

0800c30c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]

}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	bc80      	pop	{r7}
 800c31c:	4770      	bx	lr

0800c31e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c31e:	b480      	push	{r7}
 800c320:	b083      	sub	sp, #12
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
 800c326:	460b      	mov	r3, r1
 800c328:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c32a:	bf00      	nop
 800c32c:	370c      	adds	r7, #12
 800c32e:	46bd      	mov	sp, r7
 800c330:	bc80      	pop	{r7}
 800c332:	4770      	bx	lr

0800c334 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c342:	79fb      	ldrb	r3, [r7, #7]
 800c344:	2b03      	cmp	r3, #3
 800c346:	d817      	bhi.n	800c378 <USBD_Get_USB_Status+0x44>
 800c348:	a201      	add	r2, pc, #4	; (adr r2, 800c350 <USBD_Get_USB_Status+0x1c>)
 800c34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c34e:	bf00      	nop
 800c350:	0800c361 	.word	0x0800c361
 800c354:	0800c367 	.word	0x0800c367
 800c358:	0800c36d 	.word	0x0800c36d
 800c35c:	0800c373 	.word	0x0800c373
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	73fb      	strb	r3, [r7, #15]
    break;
 800c364:	e00b      	b.n	800c37e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c366:	2302      	movs	r3, #2
 800c368:	73fb      	strb	r3, [r7, #15]
    break;
 800c36a:	e008      	b.n	800c37e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c36c:	2301      	movs	r3, #1
 800c36e:	73fb      	strb	r3, [r7, #15]
    break;
 800c370:	e005      	b.n	800c37e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c372:	2302      	movs	r3, #2
 800c374:	73fb      	strb	r3, [r7, #15]
    break;
 800c376:	e002      	b.n	800c37e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c378:	2302      	movs	r3, #2
 800c37a:	73fb      	strb	r3, [r7, #15]
    break;
 800c37c:	bf00      	nop
  }
  return usb_status;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	bc80      	pop	{r7}
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop

0800c38c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c38c:	480c      	ldr	r0, [pc, #48]	; (800c3c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c38e:	490d      	ldr	r1, [pc, #52]	; (800c3c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c390:	4a0d      	ldr	r2, [pc, #52]	; (800c3c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c394:	e002      	b.n	800c39c <LoopCopyDataInit>

0800c396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c39a:	3304      	adds	r3, #4

0800c39c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c39c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c39e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c3a0:	d3f9      	bcc.n	800c396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c3a2:	4a0a      	ldr	r2, [pc, #40]	; (800c3cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c3a4:	4c0a      	ldr	r4, [pc, #40]	; (800c3d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c3a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c3a8:	e001      	b.n	800c3ae <LoopFillZerobss>

0800c3aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c3aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c3ac:	3204      	adds	r2, #4

0800c3ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c3ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c3b0:	d3fb      	bcc.n	800c3aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c3b2:	f7f4 fcbd 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c3b6:	f000 f815 	bl	800c3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c3ba:	f7f4 f9f3 	bl	80007a4 <main>
  bx lr
 800c3be:	4770      	bx	lr
  ldr r0, =_sdata
 800c3c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c3c4:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 800c3c8:	0800ceb0 	.word	0x0800ceb0
  ldr r2, =_sbss
 800c3cc:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 800c3d0:	20003978 	.word	0x20003978

0800c3d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c3d4:	e7fe      	b.n	800c3d4 <ADC1_2_IRQHandler>
	...

0800c3d8 <__errno>:
 800c3d8:	4b01      	ldr	r3, [pc, #4]	; (800c3e0 <__errno+0x8>)
 800c3da:	6818      	ldr	r0, [r3, #0]
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	200002b0 	.word	0x200002b0

0800c3e4 <__libc_init_array>:
 800c3e4:	b570      	push	{r4, r5, r6, lr}
 800c3e6:	2500      	movs	r5, #0
 800c3e8:	4e0c      	ldr	r6, [pc, #48]	; (800c41c <__libc_init_array+0x38>)
 800c3ea:	4c0d      	ldr	r4, [pc, #52]	; (800c420 <__libc_init_array+0x3c>)
 800c3ec:	1ba4      	subs	r4, r4, r6
 800c3ee:	10a4      	asrs	r4, r4, #2
 800c3f0:	42a5      	cmp	r5, r4
 800c3f2:	d109      	bne.n	800c408 <__libc_init_array+0x24>
 800c3f4:	f000 fc4e 	bl	800cc94 <_init>
 800c3f8:	2500      	movs	r5, #0
 800c3fa:	4e0a      	ldr	r6, [pc, #40]	; (800c424 <__libc_init_array+0x40>)
 800c3fc:	4c0a      	ldr	r4, [pc, #40]	; (800c428 <__libc_init_array+0x44>)
 800c3fe:	1ba4      	subs	r4, r4, r6
 800c400:	10a4      	asrs	r4, r4, #2
 800c402:	42a5      	cmp	r5, r4
 800c404:	d105      	bne.n	800c412 <__libc_init_array+0x2e>
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c40c:	4798      	blx	r3
 800c40e:	3501      	adds	r5, #1
 800c410:	e7ee      	b.n	800c3f0 <__libc_init_array+0xc>
 800c412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c416:	4798      	blx	r3
 800c418:	3501      	adds	r5, #1
 800c41a:	e7f2      	b.n	800c402 <__libc_init_array+0x1e>
 800c41c:	0800cea8 	.word	0x0800cea8
 800c420:	0800cea8 	.word	0x0800cea8
 800c424:	0800cea8 	.word	0x0800cea8
 800c428:	0800ceac 	.word	0x0800ceac

0800c42c <memcpy>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	1e43      	subs	r3, r0, #1
 800c430:	440a      	add	r2, r1
 800c432:	4291      	cmp	r1, r2
 800c434:	d100      	bne.n	800c438 <memcpy+0xc>
 800c436:	bd10      	pop	{r4, pc}
 800c438:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c43c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c440:	e7f7      	b.n	800c432 <memcpy+0x6>

0800c442 <memset>:
 800c442:	4603      	mov	r3, r0
 800c444:	4402      	add	r2, r0
 800c446:	4293      	cmp	r3, r2
 800c448:	d100      	bne.n	800c44c <memset+0xa>
 800c44a:	4770      	bx	lr
 800c44c:	f803 1b01 	strb.w	r1, [r3], #1
 800c450:	e7f9      	b.n	800c446 <memset+0x4>
	...

0800c454 <siprintf>:
 800c454:	b40e      	push	{r1, r2, r3}
 800c456:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c45a:	b500      	push	{lr}
 800c45c:	b09c      	sub	sp, #112	; 0x70
 800c45e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c466:	9104      	str	r1, [sp, #16]
 800c468:	9107      	str	r1, [sp, #28]
 800c46a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c46e:	ab1d      	add	r3, sp, #116	; 0x74
 800c470:	9002      	str	r0, [sp, #8]
 800c472:	9006      	str	r0, [sp, #24]
 800c474:	4808      	ldr	r0, [pc, #32]	; (800c498 <siprintf+0x44>)
 800c476:	f853 2b04 	ldr.w	r2, [r3], #4
 800c47a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c47e:	6800      	ldr	r0, [r0, #0]
 800c480:	a902      	add	r1, sp, #8
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	f000 f866 	bl	800c554 <_svfiprintf_r>
 800c488:	2200      	movs	r2, #0
 800c48a:	9b02      	ldr	r3, [sp, #8]
 800c48c:	701a      	strb	r2, [r3, #0]
 800c48e:	b01c      	add	sp, #112	; 0x70
 800c490:	f85d eb04 	ldr.w	lr, [sp], #4
 800c494:	b003      	add	sp, #12
 800c496:	4770      	bx	lr
 800c498:	200002b0 	.word	0x200002b0

0800c49c <__ssputs_r>:
 800c49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a0:	688e      	ldr	r6, [r1, #8]
 800c4a2:	4682      	mov	sl, r0
 800c4a4:	429e      	cmp	r6, r3
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	4691      	mov	r9, r2
 800c4aa:	4698      	mov	r8, r3
 800c4ac:	d835      	bhi.n	800c51a <__ssputs_r+0x7e>
 800c4ae:	898a      	ldrh	r2, [r1, #12]
 800c4b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4b4:	d031      	beq.n	800c51a <__ssputs_r+0x7e>
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	6825      	ldr	r5, [r4, #0]
 800c4ba:	6909      	ldr	r1, [r1, #16]
 800c4bc:	1a6f      	subs	r7, r5, r1
 800c4be:	6965      	ldr	r5, [r4, #20]
 800c4c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4c4:	fb95 f5f3 	sdiv	r5, r5, r3
 800c4c8:	f108 0301 	add.w	r3, r8, #1
 800c4cc:	443b      	add	r3, r7
 800c4ce:	429d      	cmp	r5, r3
 800c4d0:	bf38      	it	cc
 800c4d2:	461d      	movcc	r5, r3
 800c4d4:	0553      	lsls	r3, r2, #21
 800c4d6:	d531      	bpl.n	800c53c <__ssputs_r+0xa0>
 800c4d8:	4629      	mov	r1, r5
 800c4da:	f000 fb3b 	bl	800cb54 <_malloc_r>
 800c4de:	4606      	mov	r6, r0
 800c4e0:	b950      	cbnz	r0, 800c4f8 <__ssputs_r+0x5c>
 800c4e2:	230c      	movs	r3, #12
 800c4e4:	f8ca 3000 	str.w	r3, [sl]
 800c4e8:	89a3      	ldrh	r3, [r4, #12]
 800c4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f8:	463a      	mov	r2, r7
 800c4fa:	6921      	ldr	r1, [r4, #16]
 800c4fc:	f7ff ff96 	bl	800c42c <memcpy>
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	6126      	str	r6, [r4, #16]
 800c50e:	443e      	add	r6, r7
 800c510:	6026      	str	r6, [r4, #0]
 800c512:	4646      	mov	r6, r8
 800c514:	6165      	str	r5, [r4, #20]
 800c516:	1bed      	subs	r5, r5, r7
 800c518:	60a5      	str	r5, [r4, #8]
 800c51a:	4546      	cmp	r6, r8
 800c51c:	bf28      	it	cs
 800c51e:	4646      	movcs	r6, r8
 800c520:	4649      	mov	r1, r9
 800c522:	4632      	mov	r2, r6
 800c524:	6820      	ldr	r0, [r4, #0]
 800c526:	f000 faaf 	bl	800ca88 <memmove>
 800c52a:	68a3      	ldr	r3, [r4, #8]
 800c52c:	2000      	movs	r0, #0
 800c52e:	1b9b      	subs	r3, r3, r6
 800c530:	60a3      	str	r3, [r4, #8]
 800c532:	6823      	ldr	r3, [r4, #0]
 800c534:	441e      	add	r6, r3
 800c536:	6026      	str	r6, [r4, #0]
 800c538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c53c:	462a      	mov	r2, r5
 800c53e:	f000 fb67 	bl	800cc10 <_realloc_r>
 800c542:	4606      	mov	r6, r0
 800c544:	2800      	cmp	r0, #0
 800c546:	d1e1      	bne.n	800c50c <__ssputs_r+0x70>
 800c548:	6921      	ldr	r1, [r4, #16]
 800c54a:	4650      	mov	r0, sl
 800c54c:	f000 fab6 	bl	800cabc <_free_r>
 800c550:	e7c7      	b.n	800c4e2 <__ssputs_r+0x46>
	...

0800c554 <_svfiprintf_r>:
 800c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c558:	b09d      	sub	sp, #116	; 0x74
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	898b      	ldrh	r3, [r1, #12]
 800c55e:	4680      	mov	r8, r0
 800c560:	061c      	lsls	r4, r3, #24
 800c562:	460d      	mov	r5, r1
 800c564:	4616      	mov	r6, r2
 800c566:	d50f      	bpl.n	800c588 <_svfiprintf_r+0x34>
 800c568:	690b      	ldr	r3, [r1, #16]
 800c56a:	b96b      	cbnz	r3, 800c588 <_svfiprintf_r+0x34>
 800c56c:	2140      	movs	r1, #64	; 0x40
 800c56e:	f000 faf1 	bl	800cb54 <_malloc_r>
 800c572:	6028      	str	r0, [r5, #0]
 800c574:	6128      	str	r0, [r5, #16]
 800c576:	b928      	cbnz	r0, 800c584 <_svfiprintf_r+0x30>
 800c578:	230c      	movs	r3, #12
 800c57a:	f8c8 3000 	str.w	r3, [r8]
 800c57e:	f04f 30ff 	mov.w	r0, #4294967295
 800c582:	e0c4      	b.n	800c70e <_svfiprintf_r+0x1ba>
 800c584:	2340      	movs	r3, #64	; 0x40
 800c586:	616b      	str	r3, [r5, #20]
 800c588:	2300      	movs	r3, #0
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	2320      	movs	r3, #32
 800c58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c592:	2330      	movs	r3, #48	; 0x30
 800c594:	f04f 0b01 	mov.w	fp, #1
 800c598:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c59c:	4637      	mov	r7, r6
 800c59e:	463c      	mov	r4, r7
 800c5a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d13c      	bne.n	800c622 <_svfiprintf_r+0xce>
 800c5a8:	ebb7 0a06 	subs.w	sl, r7, r6
 800c5ac:	d00b      	beq.n	800c5c6 <_svfiprintf_r+0x72>
 800c5ae:	4653      	mov	r3, sl
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	4629      	mov	r1, r5
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	f7ff ff71 	bl	800c49c <__ssputs_r>
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	f000 80a2 	beq.w	800c704 <_svfiprintf_r+0x1b0>
 800c5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c2:	4453      	add	r3, sl
 800c5c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5c6:	783b      	ldrb	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	f000 809b 	beq.w	800c704 <_svfiprintf_r+0x1b0>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	9307      	str	r3, [sp, #28]
 800c5d8:	9205      	str	r2, [sp, #20]
 800c5da:	9306      	str	r3, [sp, #24]
 800c5dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5e0:	931a      	str	r3, [sp, #104]	; 0x68
 800c5e2:	2205      	movs	r2, #5
 800c5e4:	7821      	ldrb	r1, [r4, #0]
 800c5e6:	4850      	ldr	r0, [pc, #320]	; (800c728 <_svfiprintf_r+0x1d4>)
 800c5e8:	f000 fa40 	bl	800ca6c <memchr>
 800c5ec:	1c67      	adds	r7, r4, #1
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	b9d8      	cbnz	r0, 800c62a <_svfiprintf_r+0xd6>
 800c5f2:	06d9      	lsls	r1, r3, #27
 800c5f4:	bf44      	itt	mi
 800c5f6:	2220      	movmi	r2, #32
 800c5f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c5fc:	071a      	lsls	r2, r3, #28
 800c5fe:	bf44      	itt	mi
 800c600:	222b      	movmi	r2, #43	; 0x2b
 800c602:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c606:	7822      	ldrb	r2, [r4, #0]
 800c608:	2a2a      	cmp	r2, #42	; 0x2a
 800c60a:	d016      	beq.n	800c63a <_svfiprintf_r+0xe6>
 800c60c:	2100      	movs	r1, #0
 800c60e:	200a      	movs	r0, #10
 800c610:	9a07      	ldr	r2, [sp, #28]
 800c612:	4627      	mov	r7, r4
 800c614:	783b      	ldrb	r3, [r7, #0]
 800c616:	3401      	adds	r4, #1
 800c618:	3b30      	subs	r3, #48	; 0x30
 800c61a:	2b09      	cmp	r3, #9
 800c61c:	d950      	bls.n	800c6c0 <_svfiprintf_r+0x16c>
 800c61e:	b1c9      	cbz	r1, 800c654 <_svfiprintf_r+0x100>
 800c620:	e011      	b.n	800c646 <_svfiprintf_r+0xf2>
 800c622:	2b25      	cmp	r3, #37	; 0x25
 800c624:	d0c0      	beq.n	800c5a8 <_svfiprintf_r+0x54>
 800c626:	4627      	mov	r7, r4
 800c628:	e7b9      	b.n	800c59e <_svfiprintf_r+0x4a>
 800c62a:	4a3f      	ldr	r2, [pc, #252]	; (800c728 <_svfiprintf_r+0x1d4>)
 800c62c:	463c      	mov	r4, r7
 800c62e:	1a80      	subs	r0, r0, r2
 800c630:	fa0b f000 	lsl.w	r0, fp, r0
 800c634:	4318      	orrs	r0, r3
 800c636:	9004      	str	r0, [sp, #16]
 800c638:	e7d3      	b.n	800c5e2 <_svfiprintf_r+0x8e>
 800c63a:	9a03      	ldr	r2, [sp, #12]
 800c63c:	1d11      	adds	r1, r2, #4
 800c63e:	6812      	ldr	r2, [r2, #0]
 800c640:	9103      	str	r1, [sp, #12]
 800c642:	2a00      	cmp	r2, #0
 800c644:	db01      	blt.n	800c64a <_svfiprintf_r+0xf6>
 800c646:	9207      	str	r2, [sp, #28]
 800c648:	e004      	b.n	800c654 <_svfiprintf_r+0x100>
 800c64a:	4252      	negs	r2, r2
 800c64c:	f043 0302 	orr.w	r3, r3, #2
 800c650:	9207      	str	r2, [sp, #28]
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	783b      	ldrb	r3, [r7, #0]
 800c656:	2b2e      	cmp	r3, #46	; 0x2e
 800c658:	d10d      	bne.n	800c676 <_svfiprintf_r+0x122>
 800c65a:	787b      	ldrb	r3, [r7, #1]
 800c65c:	1c79      	adds	r1, r7, #1
 800c65e:	2b2a      	cmp	r3, #42	; 0x2a
 800c660:	d132      	bne.n	800c6c8 <_svfiprintf_r+0x174>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	3702      	adds	r7, #2
 800c666:	1d1a      	adds	r2, r3, #4
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	9203      	str	r2, [sp, #12]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bfb8      	it	lt
 800c670:	f04f 33ff 	movlt.w	r3, #4294967295
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	4c2d      	ldr	r4, [pc, #180]	; (800c72c <_svfiprintf_r+0x1d8>)
 800c678:	2203      	movs	r2, #3
 800c67a:	7839      	ldrb	r1, [r7, #0]
 800c67c:	4620      	mov	r0, r4
 800c67e:	f000 f9f5 	bl	800ca6c <memchr>
 800c682:	b138      	cbz	r0, 800c694 <_svfiprintf_r+0x140>
 800c684:	2340      	movs	r3, #64	; 0x40
 800c686:	1b00      	subs	r0, r0, r4
 800c688:	fa03 f000 	lsl.w	r0, r3, r0
 800c68c:	9b04      	ldr	r3, [sp, #16]
 800c68e:	3701      	adds	r7, #1
 800c690:	4303      	orrs	r3, r0
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	7839      	ldrb	r1, [r7, #0]
 800c696:	2206      	movs	r2, #6
 800c698:	4825      	ldr	r0, [pc, #148]	; (800c730 <_svfiprintf_r+0x1dc>)
 800c69a:	1c7e      	adds	r6, r7, #1
 800c69c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6a0:	f000 f9e4 	bl	800ca6c <memchr>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d035      	beq.n	800c714 <_svfiprintf_r+0x1c0>
 800c6a8:	4b22      	ldr	r3, [pc, #136]	; (800c734 <_svfiprintf_r+0x1e0>)
 800c6aa:	b9fb      	cbnz	r3, 800c6ec <_svfiprintf_r+0x198>
 800c6ac:	9b03      	ldr	r3, [sp, #12]
 800c6ae:	3307      	adds	r3, #7
 800c6b0:	f023 0307 	bic.w	r3, r3, #7
 800c6b4:	3308      	adds	r3, #8
 800c6b6:	9303      	str	r3, [sp, #12]
 800c6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ba:	444b      	add	r3, r9
 800c6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6be:	e76d      	b.n	800c59c <_svfiprintf_r+0x48>
 800c6c0:	fb00 3202 	mla	r2, r0, r2, r3
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	e7a4      	b.n	800c612 <_svfiprintf_r+0xbe>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	240a      	movs	r4, #10
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	9305      	str	r3, [sp, #20]
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	783a      	ldrb	r2, [r7, #0]
 800c6d4:	3101      	adds	r1, #1
 800c6d6:	3a30      	subs	r2, #48	; 0x30
 800c6d8:	2a09      	cmp	r2, #9
 800c6da:	d903      	bls.n	800c6e4 <_svfiprintf_r+0x190>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d0ca      	beq.n	800c676 <_svfiprintf_r+0x122>
 800c6e0:	9005      	str	r0, [sp, #20]
 800c6e2:	e7c8      	b.n	800c676 <_svfiprintf_r+0x122>
 800c6e4:	fb04 2000 	mla	r0, r4, r0, r2
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e7f1      	b.n	800c6d0 <_svfiprintf_r+0x17c>
 800c6ec:	ab03      	add	r3, sp, #12
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	462a      	mov	r2, r5
 800c6f2:	4b11      	ldr	r3, [pc, #68]	; (800c738 <_svfiprintf_r+0x1e4>)
 800c6f4:	a904      	add	r1, sp, #16
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	f3af 8000 	nop.w
 800c6fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c700:	4681      	mov	r9, r0
 800c702:	d1d9      	bne.n	800c6b8 <_svfiprintf_r+0x164>
 800c704:	89ab      	ldrh	r3, [r5, #12]
 800c706:	065b      	lsls	r3, r3, #25
 800c708:	f53f af39 	bmi.w	800c57e <_svfiprintf_r+0x2a>
 800c70c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c70e:	b01d      	add	sp, #116	; 0x74
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	ab03      	add	r3, sp, #12
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	462a      	mov	r2, r5
 800c71a:	4b07      	ldr	r3, [pc, #28]	; (800c738 <_svfiprintf_r+0x1e4>)
 800c71c:	a904      	add	r1, sp, #16
 800c71e:	4640      	mov	r0, r8
 800c720:	f000 f884 	bl	800c82c <_printf_i>
 800c724:	e7ea      	b.n	800c6fc <_svfiprintf_r+0x1a8>
 800c726:	bf00      	nop
 800c728:	0800ce74 	.word	0x0800ce74
 800c72c:	0800ce7a 	.word	0x0800ce7a
 800c730:	0800ce7e 	.word	0x0800ce7e
 800c734:	00000000 	.word	0x00000000
 800c738:	0800c49d 	.word	0x0800c49d

0800c73c <_printf_common>:
 800c73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c740:	4691      	mov	r9, r2
 800c742:	461f      	mov	r7, r3
 800c744:	688a      	ldr	r2, [r1, #8]
 800c746:	690b      	ldr	r3, [r1, #16]
 800c748:	4606      	mov	r6, r0
 800c74a:	4293      	cmp	r3, r2
 800c74c:	bfb8      	it	lt
 800c74e:	4613      	movlt	r3, r2
 800c750:	f8c9 3000 	str.w	r3, [r9]
 800c754:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c758:	460c      	mov	r4, r1
 800c75a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c75e:	b112      	cbz	r2, 800c766 <_printf_common+0x2a>
 800c760:	3301      	adds	r3, #1
 800c762:	f8c9 3000 	str.w	r3, [r9]
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	0699      	lsls	r1, r3, #26
 800c76a:	bf42      	ittt	mi
 800c76c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c770:	3302      	addmi	r3, #2
 800c772:	f8c9 3000 	strmi.w	r3, [r9]
 800c776:	6825      	ldr	r5, [r4, #0]
 800c778:	f015 0506 	ands.w	r5, r5, #6
 800c77c:	d107      	bne.n	800c78e <_printf_common+0x52>
 800c77e:	f104 0a19 	add.w	sl, r4, #25
 800c782:	68e3      	ldr	r3, [r4, #12]
 800c784:	f8d9 2000 	ldr.w	r2, [r9]
 800c788:	1a9b      	subs	r3, r3, r2
 800c78a:	429d      	cmp	r5, r3
 800c78c:	db2a      	blt.n	800c7e4 <_printf_common+0xa8>
 800c78e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c792:	6822      	ldr	r2, [r4, #0]
 800c794:	3300      	adds	r3, #0
 800c796:	bf18      	it	ne
 800c798:	2301      	movne	r3, #1
 800c79a:	0692      	lsls	r2, r2, #26
 800c79c:	d42f      	bmi.n	800c7fe <_printf_common+0xc2>
 800c79e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	4630      	mov	r0, r6
 800c7a6:	47c0      	blx	r8
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d022      	beq.n	800c7f2 <_printf_common+0xb6>
 800c7ac:	6823      	ldr	r3, [r4, #0]
 800c7ae:	68e5      	ldr	r5, [r4, #12]
 800c7b0:	f003 0306 	and.w	r3, r3, #6
 800c7b4:	2b04      	cmp	r3, #4
 800c7b6:	bf18      	it	ne
 800c7b8:	2500      	movne	r5, #0
 800c7ba:	f8d9 2000 	ldr.w	r2, [r9]
 800c7be:	f04f 0900 	mov.w	r9, #0
 800c7c2:	bf08      	it	eq
 800c7c4:	1aad      	subeq	r5, r5, r2
 800c7c6:	68a3      	ldr	r3, [r4, #8]
 800c7c8:	6922      	ldr	r2, [r4, #16]
 800c7ca:	bf08      	it	eq
 800c7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	bfc4      	itt	gt
 800c7d4:	1a9b      	subgt	r3, r3, r2
 800c7d6:	18ed      	addgt	r5, r5, r3
 800c7d8:	341a      	adds	r4, #26
 800c7da:	454d      	cmp	r5, r9
 800c7dc:	d11b      	bne.n	800c816 <_printf_common+0xda>
 800c7de:	2000      	movs	r0, #0
 800c7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	4652      	mov	r2, sl
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	47c0      	blx	r8
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d103      	bne.n	800c7fa <_printf_common+0xbe>
 800c7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fa:	3501      	adds	r5, #1
 800c7fc:	e7c1      	b.n	800c782 <_printf_common+0x46>
 800c7fe:	2030      	movs	r0, #48	; 0x30
 800c800:	18e1      	adds	r1, r4, r3
 800c802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c80c:	4422      	add	r2, r4
 800c80e:	3302      	adds	r3, #2
 800c810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c814:	e7c3      	b.n	800c79e <_printf_common+0x62>
 800c816:	2301      	movs	r3, #1
 800c818:	4622      	mov	r2, r4
 800c81a:	4639      	mov	r1, r7
 800c81c:	4630      	mov	r0, r6
 800c81e:	47c0      	blx	r8
 800c820:	3001      	adds	r0, #1
 800c822:	d0e6      	beq.n	800c7f2 <_printf_common+0xb6>
 800c824:	f109 0901 	add.w	r9, r9, #1
 800c828:	e7d7      	b.n	800c7da <_printf_common+0x9e>
	...

0800c82c <_printf_i>:
 800c82c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c830:	4617      	mov	r7, r2
 800c832:	7e0a      	ldrb	r2, [r1, #24]
 800c834:	b085      	sub	sp, #20
 800c836:	2a6e      	cmp	r2, #110	; 0x6e
 800c838:	4698      	mov	r8, r3
 800c83a:	4606      	mov	r6, r0
 800c83c:	460c      	mov	r4, r1
 800c83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c840:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c844:	f000 80bc 	beq.w	800c9c0 <_printf_i+0x194>
 800c848:	d81a      	bhi.n	800c880 <_printf_i+0x54>
 800c84a:	2a63      	cmp	r2, #99	; 0x63
 800c84c:	d02e      	beq.n	800c8ac <_printf_i+0x80>
 800c84e:	d80a      	bhi.n	800c866 <_printf_i+0x3a>
 800c850:	2a00      	cmp	r2, #0
 800c852:	f000 80c8 	beq.w	800c9e6 <_printf_i+0x1ba>
 800c856:	2a58      	cmp	r2, #88	; 0x58
 800c858:	f000 808a 	beq.w	800c970 <_printf_i+0x144>
 800c85c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c860:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c864:	e02a      	b.n	800c8bc <_printf_i+0x90>
 800c866:	2a64      	cmp	r2, #100	; 0x64
 800c868:	d001      	beq.n	800c86e <_printf_i+0x42>
 800c86a:	2a69      	cmp	r2, #105	; 0x69
 800c86c:	d1f6      	bne.n	800c85c <_printf_i+0x30>
 800c86e:	6821      	ldr	r1, [r4, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c876:	d023      	beq.n	800c8c0 <_printf_i+0x94>
 800c878:	1d11      	adds	r1, r2, #4
 800c87a:	6019      	str	r1, [r3, #0]
 800c87c:	6813      	ldr	r3, [r2, #0]
 800c87e:	e027      	b.n	800c8d0 <_printf_i+0xa4>
 800c880:	2a73      	cmp	r2, #115	; 0x73
 800c882:	f000 80b4 	beq.w	800c9ee <_printf_i+0x1c2>
 800c886:	d808      	bhi.n	800c89a <_printf_i+0x6e>
 800c888:	2a6f      	cmp	r2, #111	; 0x6f
 800c88a:	d02a      	beq.n	800c8e2 <_printf_i+0xb6>
 800c88c:	2a70      	cmp	r2, #112	; 0x70
 800c88e:	d1e5      	bne.n	800c85c <_printf_i+0x30>
 800c890:	680a      	ldr	r2, [r1, #0]
 800c892:	f042 0220 	orr.w	r2, r2, #32
 800c896:	600a      	str	r2, [r1, #0]
 800c898:	e003      	b.n	800c8a2 <_printf_i+0x76>
 800c89a:	2a75      	cmp	r2, #117	; 0x75
 800c89c:	d021      	beq.n	800c8e2 <_printf_i+0xb6>
 800c89e:	2a78      	cmp	r2, #120	; 0x78
 800c8a0:	d1dc      	bne.n	800c85c <_printf_i+0x30>
 800c8a2:	2278      	movs	r2, #120	; 0x78
 800c8a4:	496f      	ldr	r1, [pc, #444]	; (800ca64 <_printf_i+0x238>)
 800c8a6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c8aa:	e064      	b.n	800c976 <_printf_i+0x14a>
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c8b2:	1d11      	adds	r1, r2, #4
 800c8b4:	6019      	str	r1, [r3, #0]
 800c8b6:	6813      	ldr	r3, [r2, #0]
 800c8b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e0a3      	b.n	800ca08 <_printf_i+0x1dc>
 800c8c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c8c4:	f102 0104 	add.w	r1, r2, #4
 800c8c8:	6019      	str	r1, [r3, #0]
 800c8ca:	d0d7      	beq.n	800c87c <_printf_i+0x50>
 800c8cc:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	da03      	bge.n	800c8dc <_printf_i+0xb0>
 800c8d4:	222d      	movs	r2, #45	; 0x2d
 800c8d6:	425b      	negs	r3, r3
 800c8d8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c8dc:	4962      	ldr	r1, [pc, #392]	; (800ca68 <_printf_i+0x23c>)
 800c8de:	220a      	movs	r2, #10
 800c8e0:	e017      	b.n	800c912 <_printf_i+0xe6>
 800c8e2:	6820      	ldr	r0, [r4, #0]
 800c8e4:	6819      	ldr	r1, [r3, #0]
 800c8e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c8ea:	d003      	beq.n	800c8f4 <_printf_i+0xc8>
 800c8ec:	1d08      	adds	r0, r1, #4
 800c8ee:	6018      	str	r0, [r3, #0]
 800c8f0:	680b      	ldr	r3, [r1, #0]
 800c8f2:	e006      	b.n	800c902 <_printf_i+0xd6>
 800c8f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8f8:	f101 0004 	add.w	r0, r1, #4
 800c8fc:	6018      	str	r0, [r3, #0]
 800c8fe:	d0f7      	beq.n	800c8f0 <_printf_i+0xc4>
 800c900:	880b      	ldrh	r3, [r1, #0]
 800c902:	2a6f      	cmp	r2, #111	; 0x6f
 800c904:	bf14      	ite	ne
 800c906:	220a      	movne	r2, #10
 800c908:	2208      	moveq	r2, #8
 800c90a:	4957      	ldr	r1, [pc, #348]	; (800ca68 <_printf_i+0x23c>)
 800c90c:	2000      	movs	r0, #0
 800c90e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c912:	6865      	ldr	r5, [r4, #4]
 800c914:	2d00      	cmp	r5, #0
 800c916:	60a5      	str	r5, [r4, #8]
 800c918:	f2c0 809c 	blt.w	800ca54 <_printf_i+0x228>
 800c91c:	6820      	ldr	r0, [r4, #0]
 800c91e:	f020 0004 	bic.w	r0, r0, #4
 800c922:	6020      	str	r0, [r4, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d13f      	bne.n	800c9a8 <_printf_i+0x17c>
 800c928:	2d00      	cmp	r5, #0
 800c92a:	f040 8095 	bne.w	800ca58 <_printf_i+0x22c>
 800c92e:	4675      	mov	r5, lr
 800c930:	2a08      	cmp	r2, #8
 800c932:	d10b      	bne.n	800c94c <_printf_i+0x120>
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	07da      	lsls	r2, r3, #31
 800c938:	d508      	bpl.n	800c94c <_printf_i+0x120>
 800c93a:	6923      	ldr	r3, [r4, #16]
 800c93c:	6862      	ldr	r2, [r4, #4]
 800c93e:	429a      	cmp	r2, r3
 800c940:	bfde      	ittt	le
 800c942:	2330      	movle	r3, #48	; 0x30
 800c944:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c948:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c94c:	ebae 0305 	sub.w	r3, lr, r5
 800c950:	6123      	str	r3, [r4, #16]
 800c952:	f8cd 8000 	str.w	r8, [sp]
 800c956:	463b      	mov	r3, r7
 800c958:	aa03      	add	r2, sp, #12
 800c95a:	4621      	mov	r1, r4
 800c95c:	4630      	mov	r0, r6
 800c95e:	f7ff feed 	bl	800c73c <_printf_common>
 800c962:	3001      	adds	r0, #1
 800c964:	d155      	bne.n	800ca12 <_printf_i+0x1e6>
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	b005      	add	sp, #20
 800c96c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c970:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c974:	493c      	ldr	r1, [pc, #240]	; (800ca68 <_printf_i+0x23c>)
 800c976:	6822      	ldr	r2, [r4, #0]
 800c978:	6818      	ldr	r0, [r3, #0]
 800c97a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c97e:	f100 0504 	add.w	r5, r0, #4
 800c982:	601d      	str	r5, [r3, #0]
 800c984:	d001      	beq.n	800c98a <_printf_i+0x15e>
 800c986:	6803      	ldr	r3, [r0, #0]
 800c988:	e002      	b.n	800c990 <_printf_i+0x164>
 800c98a:	0655      	lsls	r5, r2, #25
 800c98c:	d5fb      	bpl.n	800c986 <_printf_i+0x15a>
 800c98e:	8803      	ldrh	r3, [r0, #0]
 800c990:	07d0      	lsls	r0, r2, #31
 800c992:	bf44      	itt	mi
 800c994:	f042 0220 	orrmi.w	r2, r2, #32
 800c998:	6022      	strmi	r2, [r4, #0]
 800c99a:	b91b      	cbnz	r3, 800c9a4 <_printf_i+0x178>
 800c99c:	6822      	ldr	r2, [r4, #0]
 800c99e:	f022 0220 	bic.w	r2, r2, #32
 800c9a2:	6022      	str	r2, [r4, #0]
 800c9a4:	2210      	movs	r2, #16
 800c9a6:	e7b1      	b.n	800c90c <_printf_i+0xe0>
 800c9a8:	4675      	mov	r5, lr
 800c9aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9ae:	fb02 3310 	mls	r3, r2, r0, r3
 800c9b2:	5ccb      	ldrb	r3, [r1, r3]
 800c9b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d1f5      	bne.n	800c9aa <_printf_i+0x17e>
 800c9be:	e7b7      	b.n	800c930 <_printf_i+0x104>
 800c9c0:	6808      	ldr	r0, [r1, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c9c8:	6949      	ldr	r1, [r1, #20]
 800c9ca:	d004      	beq.n	800c9d6 <_printf_i+0x1aa>
 800c9cc:	1d10      	adds	r0, r2, #4
 800c9ce:	6018      	str	r0, [r3, #0]
 800c9d0:	6813      	ldr	r3, [r2, #0]
 800c9d2:	6019      	str	r1, [r3, #0]
 800c9d4:	e007      	b.n	800c9e6 <_printf_i+0x1ba>
 800c9d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9da:	f102 0004 	add.w	r0, r2, #4
 800c9de:	6018      	str	r0, [r3, #0]
 800c9e0:	6813      	ldr	r3, [r2, #0]
 800c9e2:	d0f6      	beq.n	800c9d2 <_printf_i+0x1a6>
 800c9e4:	8019      	strh	r1, [r3, #0]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	4675      	mov	r5, lr
 800c9ea:	6123      	str	r3, [r4, #16]
 800c9ec:	e7b1      	b.n	800c952 <_printf_i+0x126>
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	1d11      	adds	r1, r2, #4
 800c9f2:	6019      	str	r1, [r3, #0]
 800c9f4:	6815      	ldr	r5, [r2, #0]
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	6862      	ldr	r2, [r4, #4]
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f000 f836 	bl	800ca6c <memchr>
 800ca00:	b108      	cbz	r0, 800ca06 <_printf_i+0x1da>
 800ca02:	1b40      	subs	r0, r0, r5
 800ca04:	6060      	str	r0, [r4, #4]
 800ca06:	6863      	ldr	r3, [r4, #4]
 800ca08:	6123      	str	r3, [r4, #16]
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca10:	e79f      	b.n	800c952 <_printf_i+0x126>
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	462a      	mov	r2, r5
 800ca16:	4639      	mov	r1, r7
 800ca18:	4630      	mov	r0, r6
 800ca1a:	47c0      	blx	r8
 800ca1c:	3001      	adds	r0, #1
 800ca1e:	d0a2      	beq.n	800c966 <_printf_i+0x13a>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	079b      	lsls	r3, r3, #30
 800ca24:	d507      	bpl.n	800ca36 <_printf_i+0x20a>
 800ca26:	2500      	movs	r5, #0
 800ca28:	f104 0919 	add.w	r9, r4, #25
 800ca2c:	68e3      	ldr	r3, [r4, #12]
 800ca2e:	9a03      	ldr	r2, [sp, #12]
 800ca30:	1a9b      	subs	r3, r3, r2
 800ca32:	429d      	cmp	r5, r3
 800ca34:	db05      	blt.n	800ca42 <_printf_i+0x216>
 800ca36:	68e0      	ldr	r0, [r4, #12]
 800ca38:	9b03      	ldr	r3, [sp, #12]
 800ca3a:	4298      	cmp	r0, r3
 800ca3c:	bfb8      	it	lt
 800ca3e:	4618      	movlt	r0, r3
 800ca40:	e793      	b.n	800c96a <_printf_i+0x13e>
 800ca42:	2301      	movs	r3, #1
 800ca44:	464a      	mov	r2, r9
 800ca46:	4639      	mov	r1, r7
 800ca48:	4630      	mov	r0, r6
 800ca4a:	47c0      	blx	r8
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d08a      	beq.n	800c966 <_printf_i+0x13a>
 800ca50:	3501      	adds	r5, #1
 800ca52:	e7eb      	b.n	800ca2c <_printf_i+0x200>
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1a7      	bne.n	800c9a8 <_printf_i+0x17c>
 800ca58:	780b      	ldrb	r3, [r1, #0]
 800ca5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca62:	e765      	b.n	800c930 <_printf_i+0x104>
 800ca64:	0800ce96 	.word	0x0800ce96
 800ca68:	0800ce85 	.word	0x0800ce85

0800ca6c <memchr>:
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	b2c9      	uxtb	r1, r1
 800ca70:	4402      	add	r2, r0
 800ca72:	4290      	cmp	r0, r2
 800ca74:	4603      	mov	r3, r0
 800ca76:	d101      	bne.n	800ca7c <memchr+0x10>
 800ca78:	2000      	movs	r0, #0
 800ca7a:	bd10      	pop	{r4, pc}
 800ca7c:	781c      	ldrb	r4, [r3, #0]
 800ca7e:	3001      	adds	r0, #1
 800ca80:	428c      	cmp	r4, r1
 800ca82:	d1f6      	bne.n	800ca72 <memchr+0x6>
 800ca84:	4618      	mov	r0, r3
 800ca86:	bd10      	pop	{r4, pc}

0800ca88 <memmove>:
 800ca88:	4288      	cmp	r0, r1
 800ca8a:	b510      	push	{r4, lr}
 800ca8c:	eb01 0302 	add.w	r3, r1, r2
 800ca90:	d803      	bhi.n	800ca9a <memmove+0x12>
 800ca92:	1e42      	subs	r2, r0, #1
 800ca94:	4299      	cmp	r1, r3
 800ca96:	d10c      	bne.n	800cab2 <memmove+0x2a>
 800ca98:	bd10      	pop	{r4, pc}
 800ca9a:	4298      	cmp	r0, r3
 800ca9c:	d2f9      	bcs.n	800ca92 <memmove+0xa>
 800ca9e:	1881      	adds	r1, r0, r2
 800caa0:	1ad2      	subs	r2, r2, r3
 800caa2:	42d3      	cmn	r3, r2
 800caa4:	d100      	bne.n	800caa8 <memmove+0x20>
 800caa6:	bd10      	pop	{r4, pc}
 800caa8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cab0:	e7f7      	b.n	800caa2 <memmove+0x1a>
 800cab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cab6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800caba:	e7eb      	b.n	800ca94 <memmove+0xc>

0800cabc <_free_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4605      	mov	r5, r0
 800cac0:	2900      	cmp	r1, #0
 800cac2:	d043      	beq.n	800cb4c <_free_r+0x90>
 800cac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac8:	1f0c      	subs	r4, r1, #4
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bfb8      	it	lt
 800cace:	18e4      	addlt	r4, r4, r3
 800cad0:	f000 f8d4 	bl	800cc7c <__malloc_lock>
 800cad4:	4a1e      	ldr	r2, [pc, #120]	; (800cb50 <_free_r+0x94>)
 800cad6:	6813      	ldr	r3, [r2, #0]
 800cad8:	4610      	mov	r0, r2
 800cada:	b933      	cbnz	r3, 800caea <_free_r+0x2e>
 800cadc:	6063      	str	r3, [r4, #4]
 800cade:	6014      	str	r4, [r2, #0]
 800cae0:	4628      	mov	r0, r5
 800cae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cae6:	f000 b8ca 	b.w	800cc7e <__malloc_unlock>
 800caea:	42a3      	cmp	r3, r4
 800caec:	d90b      	bls.n	800cb06 <_free_r+0x4a>
 800caee:	6821      	ldr	r1, [r4, #0]
 800caf0:	1862      	adds	r2, r4, r1
 800caf2:	4293      	cmp	r3, r2
 800caf4:	bf01      	itttt	eq
 800caf6:	681a      	ldreq	r2, [r3, #0]
 800caf8:	685b      	ldreq	r3, [r3, #4]
 800cafa:	1852      	addeq	r2, r2, r1
 800cafc:	6022      	streq	r2, [r4, #0]
 800cafe:	6063      	str	r3, [r4, #4]
 800cb00:	6004      	str	r4, [r0, #0]
 800cb02:	e7ed      	b.n	800cae0 <_free_r+0x24>
 800cb04:	4613      	mov	r3, r2
 800cb06:	685a      	ldr	r2, [r3, #4]
 800cb08:	b10a      	cbz	r2, 800cb0e <_free_r+0x52>
 800cb0a:	42a2      	cmp	r2, r4
 800cb0c:	d9fa      	bls.n	800cb04 <_free_r+0x48>
 800cb0e:	6819      	ldr	r1, [r3, #0]
 800cb10:	1858      	adds	r0, r3, r1
 800cb12:	42a0      	cmp	r0, r4
 800cb14:	d10b      	bne.n	800cb2e <_free_r+0x72>
 800cb16:	6820      	ldr	r0, [r4, #0]
 800cb18:	4401      	add	r1, r0
 800cb1a:	1858      	adds	r0, r3, r1
 800cb1c:	4282      	cmp	r2, r0
 800cb1e:	6019      	str	r1, [r3, #0]
 800cb20:	d1de      	bne.n	800cae0 <_free_r+0x24>
 800cb22:	6810      	ldr	r0, [r2, #0]
 800cb24:	6852      	ldr	r2, [r2, #4]
 800cb26:	4401      	add	r1, r0
 800cb28:	6019      	str	r1, [r3, #0]
 800cb2a:	605a      	str	r2, [r3, #4]
 800cb2c:	e7d8      	b.n	800cae0 <_free_r+0x24>
 800cb2e:	d902      	bls.n	800cb36 <_free_r+0x7a>
 800cb30:	230c      	movs	r3, #12
 800cb32:	602b      	str	r3, [r5, #0]
 800cb34:	e7d4      	b.n	800cae0 <_free_r+0x24>
 800cb36:	6820      	ldr	r0, [r4, #0]
 800cb38:	1821      	adds	r1, r4, r0
 800cb3a:	428a      	cmp	r2, r1
 800cb3c:	bf01      	itttt	eq
 800cb3e:	6811      	ldreq	r1, [r2, #0]
 800cb40:	6852      	ldreq	r2, [r2, #4]
 800cb42:	1809      	addeq	r1, r1, r0
 800cb44:	6021      	streq	r1, [r4, #0]
 800cb46:	6062      	str	r2, [r4, #4]
 800cb48:	605c      	str	r4, [r3, #4]
 800cb4a:	e7c9      	b.n	800cae0 <_free_r+0x24>
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	20001c00 	.word	0x20001c00

0800cb54 <_malloc_r>:
 800cb54:	b570      	push	{r4, r5, r6, lr}
 800cb56:	1ccd      	adds	r5, r1, #3
 800cb58:	f025 0503 	bic.w	r5, r5, #3
 800cb5c:	3508      	adds	r5, #8
 800cb5e:	2d0c      	cmp	r5, #12
 800cb60:	bf38      	it	cc
 800cb62:	250c      	movcc	r5, #12
 800cb64:	2d00      	cmp	r5, #0
 800cb66:	4606      	mov	r6, r0
 800cb68:	db01      	blt.n	800cb6e <_malloc_r+0x1a>
 800cb6a:	42a9      	cmp	r1, r5
 800cb6c:	d903      	bls.n	800cb76 <_malloc_r+0x22>
 800cb6e:	230c      	movs	r3, #12
 800cb70:	6033      	str	r3, [r6, #0]
 800cb72:	2000      	movs	r0, #0
 800cb74:	bd70      	pop	{r4, r5, r6, pc}
 800cb76:	f000 f881 	bl	800cc7c <__malloc_lock>
 800cb7a:	4a23      	ldr	r2, [pc, #140]	; (800cc08 <_malloc_r+0xb4>)
 800cb7c:	6814      	ldr	r4, [r2, #0]
 800cb7e:	4621      	mov	r1, r4
 800cb80:	b991      	cbnz	r1, 800cba8 <_malloc_r+0x54>
 800cb82:	4c22      	ldr	r4, [pc, #136]	; (800cc0c <_malloc_r+0xb8>)
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	b91b      	cbnz	r3, 800cb90 <_malloc_r+0x3c>
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f000 f867 	bl	800cc5c <_sbrk_r>
 800cb8e:	6020      	str	r0, [r4, #0]
 800cb90:	4629      	mov	r1, r5
 800cb92:	4630      	mov	r0, r6
 800cb94:	f000 f862 	bl	800cc5c <_sbrk_r>
 800cb98:	1c43      	adds	r3, r0, #1
 800cb9a:	d126      	bne.n	800cbea <_malloc_r+0x96>
 800cb9c:	230c      	movs	r3, #12
 800cb9e:	4630      	mov	r0, r6
 800cba0:	6033      	str	r3, [r6, #0]
 800cba2:	f000 f86c 	bl	800cc7e <__malloc_unlock>
 800cba6:	e7e4      	b.n	800cb72 <_malloc_r+0x1e>
 800cba8:	680b      	ldr	r3, [r1, #0]
 800cbaa:	1b5b      	subs	r3, r3, r5
 800cbac:	d41a      	bmi.n	800cbe4 <_malloc_r+0x90>
 800cbae:	2b0b      	cmp	r3, #11
 800cbb0:	d90f      	bls.n	800cbd2 <_malloc_r+0x7e>
 800cbb2:	600b      	str	r3, [r1, #0]
 800cbb4:	18cc      	adds	r4, r1, r3
 800cbb6:	50cd      	str	r5, [r1, r3]
 800cbb8:	4630      	mov	r0, r6
 800cbba:	f000 f860 	bl	800cc7e <__malloc_unlock>
 800cbbe:	f104 000b 	add.w	r0, r4, #11
 800cbc2:	1d23      	adds	r3, r4, #4
 800cbc4:	f020 0007 	bic.w	r0, r0, #7
 800cbc8:	1ac3      	subs	r3, r0, r3
 800cbca:	d01b      	beq.n	800cc04 <_malloc_r+0xb0>
 800cbcc:	425a      	negs	r2, r3
 800cbce:	50e2      	str	r2, [r4, r3]
 800cbd0:	bd70      	pop	{r4, r5, r6, pc}
 800cbd2:	428c      	cmp	r4, r1
 800cbd4:	bf0b      	itete	eq
 800cbd6:	6863      	ldreq	r3, [r4, #4]
 800cbd8:	684b      	ldrne	r3, [r1, #4]
 800cbda:	6013      	streq	r3, [r2, #0]
 800cbdc:	6063      	strne	r3, [r4, #4]
 800cbde:	bf18      	it	ne
 800cbe0:	460c      	movne	r4, r1
 800cbe2:	e7e9      	b.n	800cbb8 <_malloc_r+0x64>
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	6849      	ldr	r1, [r1, #4]
 800cbe8:	e7ca      	b.n	800cb80 <_malloc_r+0x2c>
 800cbea:	1cc4      	adds	r4, r0, #3
 800cbec:	f024 0403 	bic.w	r4, r4, #3
 800cbf0:	42a0      	cmp	r0, r4
 800cbf2:	d005      	beq.n	800cc00 <_malloc_r+0xac>
 800cbf4:	1a21      	subs	r1, r4, r0
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f000 f830 	bl	800cc5c <_sbrk_r>
 800cbfc:	3001      	adds	r0, #1
 800cbfe:	d0cd      	beq.n	800cb9c <_malloc_r+0x48>
 800cc00:	6025      	str	r5, [r4, #0]
 800cc02:	e7d9      	b.n	800cbb8 <_malloc_r+0x64>
 800cc04:	bd70      	pop	{r4, r5, r6, pc}
 800cc06:	bf00      	nop
 800cc08:	20001c00 	.word	0x20001c00
 800cc0c:	20001c04 	.word	0x20001c04

0800cc10 <_realloc_r>:
 800cc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc12:	4607      	mov	r7, r0
 800cc14:	4614      	mov	r4, r2
 800cc16:	460e      	mov	r6, r1
 800cc18:	b921      	cbnz	r1, 800cc24 <_realloc_r+0x14>
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc20:	f7ff bf98 	b.w	800cb54 <_malloc_r>
 800cc24:	b922      	cbnz	r2, 800cc30 <_realloc_r+0x20>
 800cc26:	f7ff ff49 	bl	800cabc <_free_r>
 800cc2a:	4625      	mov	r5, r4
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc30:	f000 f826 	bl	800cc80 <_malloc_usable_size_r>
 800cc34:	4284      	cmp	r4, r0
 800cc36:	d90f      	bls.n	800cc58 <_realloc_r+0x48>
 800cc38:	4621      	mov	r1, r4
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	f7ff ff8a 	bl	800cb54 <_malloc_r>
 800cc40:	4605      	mov	r5, r0
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d0f2      	beq.n	800cc2c <_realloc_r+0x1c>
 800cc46:	4631      	mov	r1, r6
 800cc48:	4622      	mov	r2, r4
 800cc4a:	f7ff fbef 	bl	800c42c <memcpy>
 800cc4e:	4631      	mov	r1, r6
 800cc50:	4638      	mov	r0, r7
 800cc52:	f7ff ff33 	bl	800cabc <_free_r>
 800cc56:	e7e9      	b.n	800cc2c <_realloc_r+0x1c>
 800cc58:	4635      	mov	r5, r6
 800cc5a:	e7e7      	b.n	800cc2c <_realloc_r+0x1c>

0800cc5c <_sbrk_r>:
 800cc5c:	b538      	push	{r3, r4, r5, lr}
 800cc5e:	2300      	movs	r3, #0
 800cc60:	4c05      	ldr	r4, [pc, #20]	; (800cc78 <_sbrk_r+0x1c>)
 800cc62:	4605      	mov	r5, r0
 800cc64:	4608      	mov	r0, r1
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	f7f3 feda 	bl	8000a20 <_sbrk>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	d102      	bne.n	800cc76 <_sbrk_r+0x1a>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	b103      	cbz	r3, 800cc76 <_sbrk_r+0x1a>
 800cc74:	602b      	str	r3, [r5, #0]
 800cc76:	bd38      	pop	{r3, r4, r5, pc}
 800cc78:	20003974 	.word	0x20003974

0800cc7c <__malloc_lock>:
 800cc7c:	4770      	bx	lr

0800cc7e <__malloc_unlock>:
 800cc7e:	4770      	bx	lr

0800cc80 <_malloc_usable_size_r>:
 800cc80:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800cc84:	2800      	cmp	r0, #0
 800cc86:	f1a0 0004 	sub.w	r0, r0, #4
 800cc8a:	bfbc      	itt	lt
 800cc8c:	580b      	ldrlt	r3, [r1, r0]
 800cc8e:	18c0      	addlt	r0, r0, r3
 800cc90:	4770      	bx	lr
	...

0800cc94 <_init>:
 800cc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc96:	bf00      	nop
 800cc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc9a:	bc08      	pop	{r3}
 800cc9c:	469e      	mov	lr, r3
 800cc9e:	4770      	bx	lr

0800cca0 <_fini>:
 800cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca2:	bf00      	nop
 800cca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cca6:	bc08      	pop	{r3}
 800cca8:	469e      	mov	lr, r3
 800ccaa:	4770      	bx	lr
