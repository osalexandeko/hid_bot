
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0800cb5c  0800cb5c  0001cb5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800cd5c  0800cd5c  0001cd5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002ec  20000000  0800cd60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003664  200002ec  0800d04c  000202ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003950  0800d04c  00023950  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00029d08  00000000  00000000  00020315  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005ded  00000000  00000000  0004a01d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001a88  00000000  00000000  0004fe10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017a0  00000000  00000000  00051898  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ef95  00000000  00000000  00053038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007fef  00000000  00000000  00061fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00069fbc  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006cac  00000000  00000000  0006a038  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200002ec 	.word	0x200002ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb44 	.word	0x0800cb44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200002f0 	.word	0x200002f0
 800014c:	0800cb44 	.word	0x0800cb44

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f000 fe55 	bl	8000e0a <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 faf5 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001be0 	.word	0x20001be0
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	2000030c 	.word	0x2000030c
 80001e0:	20000360 	.word	0x20000360

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000560 	.word	0x20000560
 8000214:	200005b4 	.word	0x200005b4

08000218 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
const uint32_t test1 = 12345;
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0ba      	sub	sp, #232	; 0xe8
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800022e:	4618      	mov	r0, r3
 8000230:	f008 feac 	bl	8008f8c <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b68      	ldr	r3, [pc, #416]	; (80003d8 <MX_FREERTOS_Init+0x1c0>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b68      	ldr	r3, [pc, #416]	; (80003dc <MX_FREERTOS_Init+0x1c4>)
 800023c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f008 fe22 	bl	8008e98 <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b62      	ldr	r3, [pc, #392]	; (80003e0 <MX_FREERTOS_Init+0x1c8>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b62      	ldr	r3, [pc, #392]	; (80003e4 <MX_FREERTOS_Init+0x1cc>)
 800025c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f008 fe12 	bl	8008e98 <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b5c      	ldr	r3, [pc, #368]	; (80003e8 <MX_FREERTOS_Init+0x1d0>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

	/*buttons off oneshot time def.*/
	osTimerDef(buttons_off_tmr, Buttons_Off_Callback);
 800027a:	4b5c      	ldr	r3, [pc, #368]	; (80003ec <MX_FREERTOS_Init+0x1d4>)
 800027c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	Buttons_Off_Tmr_Handle = osTimerCreate(osTimer(buttons_off_tmr), osTimerOnce,
 8000286:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800028a:	2200      	movs	r2, #0
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f008 fe02 	bl	8008e98 <osTimerCreate>
 8000294:	4602      	mov	r2, r0
 8000296:	4b56      	ldr	r3, [pc, #344]	; (80003f0 <MX_FREERTOS_Init+0x1d8>)
 8000298:	601a      	str	r2, [r3, #0]
	NULL);

//NF20211125_MEM_KEY_ENTRY======================================================
   int i = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   char tmr_name[10];
   sprintf(tmr_name, "%d",i);
 80002a0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80002a4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80002a8:	4952      	ldr	r1, [pc, #328]	; (80003f4 <MX_FREERTOS_Init+0x1dc>)
 80002aa:	4618      	mov	r0, r3
 80002ac:	f00c f82a 	bl	800c304 <siprintf>
   osTimerDef(tmr_name , hid_entry_tmr_callback);
 80002b0:	4b51      	ldr	r3, [pc, #324]	; (80003f8 <MX_FREERTOS_Init+0x1e0>)
 80002b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80002b6:	2300      	movs	r3, #0
 80002b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   hid_entry_tmr_handle_arr[i] = osTimerCreate(osTimer(tmr_name), osTimerOnce,
 80002bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80002c0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f008 fde6 	bl	8008e98 <osTimerCreate>
 80002cc:	4601      	mov	r1, r0
 80002ce:	4a4b      	ldr	r2, [pc, #300]	; (80003fc <MX_FREERTOS_Init+0x1e4>)
 80002d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80002d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//NF_20211115_HID_COMMAND==============================================Е========

	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 80002d8:	4b49      	ldr	r3, [pc, #292]	; (8000400 <MX_FREERTOS_Init+0x1e8>)
 80002da:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80002de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 80002e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f008 fe66 	bl	8008fbc <osMessageCreate>
 80002f0:	4602      	mov	r2, r0
 80002f2:	4b44      	ldr	r3, [pc, #272]	; (8000404 <MX_FREERTOS_Init+0x1ec>)
 80002f4:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 80002f6:	4b42      	ldr	r3, [pc, #264]	; (8000400 <MX_FREERTOS_Init+0x1e8>)
 80002f8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80002fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 8000302:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f008 fe57 	bl	8008fbc <osMessageCreate>
 800030e:	4602      	mov	r2, r0
 8000310:	4b3d      	ldr	r3, [pc, #244]	; (8000408 <MX_FREERTOS_Init+0x1f0>)
 8000312:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000314:	4b3d      	ldr	r3, [pc, #244]	; (800040c <MX_FREERTOS_Init+0x1f4>)
 8000316:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800031a:	461d      	mov	r5, r3
 800031c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800031e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000324:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000328:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f008 fd52 	bl	8008dd8 <osThreadCreate>
 8000334:	4602      	mov	r2, r0
 8000336:	4b36      	ldr	r3, [pc, #216]	; (8000410 <MX_FREERTOS_Init+0x1f8>)
 8000338:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 800033a:	4b36      	ldr	r3, [pc, #216]	; (8000414 <MX_FREERTOS_Init+0x1fc>)
 800033c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000340:	461d      	mov	r5, r3
 8000342:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000346:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800034a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 800034e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f008 fd3f 	bl	8008dd8 <osThreadCreate>
 800035a:	4602      	mov	r2, r0
 800035c:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <MX_FREERTOS_Init+0x200>)
 800035e:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000360:	4b2e      	ldr	r3, [pc, #184]	; (800041c <MX_FREERTOS_Init+0x204>)
 8000362:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000366:	461d      	mov	r5, r3
 8000368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800036a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 8000374:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f008 fd2c 	bl	8008dd8 <osThreadCreate>
 8000380:	4602      	mov	r2, r0
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_FREERTOS_Init+0x208>)
 8000384:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 8000386:	4b27      	ldr	r3, [pc, #156]	; (8000424 <MX_FREERTOS_Init+0x20c>)
 8000388:	f107 0420 	add.w	r4, r7, #32
 800038c:	461d      	mov	r5, r3
 800038e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000392:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000396:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 800039a:	f107 0320 	add.w	r3, r7, #32
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f008 fd19 	bl	8008dd8 <osThreadCreate>
 80003a6:	4602      	mov	r2, r0
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_FREERTOS_Init+0x210>)
 80003aa:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_FREERTOS_Init+0x214>)
 80003ae:	1d3c      	adds	r4, r7, #4
 80003b0:	461d      	mov	r5, r3
 80003b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2100      	movs	r1, #0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f008 fd08 	bl	8008dd8 <osThreadCreate>
 80003c8:	4602      	mov	r2, r0
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <MX_FREERTOS_Init+0x218>)
 80003cc:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

}
 80003ce:	bf00      	nop
 80003d0:	37e8      	adds	r7, #232	; 0xe8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bdb0      	pop	{r4, r5, r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20001c2c 	.word	0x20001c2c
 80003dc:	08000479 	.word	0x08000479
 80003e0:	20001c20 	.word	0x20001c20
 80003e4:	080004c1 	.word	0x080004c1
 80003e8:	20001bec 	.word	0x20001bec
 80003ec:	08000531 	.word	0x08000531
 80003f0:	20001c24 	.word	0x20001c24
 80003f4:	0800cb5c 	.word	0x0800cb5c
 80003f8:	08000559 	.word	0x08000559
 80003fc:	20001bf0 	.word	0x20001bf0
 8000400:	0800cb60 	.word	0x0800cb60
 8000404:	20001c38 	.word	0x20001c38
 8000408:	20001c18 	.word	0x20001c18
 800040c:	0800cb7c 	.word	0x0800cb7c
 8000410:	20001be8 	.word	0x20001be8
 8000414:	0800cba4 	.word	0x0800cba4
 8000418:	20001c34 	.word	0x20001c34
 800041c:	0800cbcc 	.word	0x0800cbcc
 8000420:	20001c30 	.word	0x20001c30
 8000424:	0800cbf4 	.word	0x0800cbf4
 8000428:	20001c1c 	.word	0x20001c1c
 800042c:	0800cc20 	.word	0x0800cc20
 8000430:	20001c28 	.word	0x20001c28

08000434 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 800043c:	f00b fab4 	bl	800b9a8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1; //HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <StartDefaultTask+0x30>)
 8000442:	2201      	movs	r2, #1
 8000444:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 8000446:	f00b faaf 	bl	800b9a8 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 800044a:	2301      	movs	r3, #1
 800044c:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 800044e:	2301      	movs	r3, #1
 8000450:	73bb      	strb	r3, [r7, #14]

	init_hid();
 8000452:	f000 f8ab 	bl	80005ac <init_hid>
//				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
//
//			}
//			tst = 0;
//		}
		osDelay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f008 fd0a 	bl	8008e70 <osDelay>
		vTaskSuspend(NULL);
 800045c:	2000      	movs	r0, #0
 800045e:	f00a f951 	bl	800a704 <vTaskSuspend>
		osDelay(1);
 8000462:	e7f8      	b.n	8000456 <StartDefaultTask+0x22>
 8000464:	20000308 	.word	0x20000308

08000468 <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f008 fcfd 	bl	8008e70 <osDelay>
 8000476:	e7fb      	b.n	8000470 <Start_Ram_MSD_Task+0x8>

08000478 <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <delay_click_event_tmr_Callback+0x3c>)
 8000482:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 8000484:	2300      	movs	r3, #0
 8000486:	81fb      	strh	r3, [r7, #14]
 8000488:	e007      	b.n	800049a <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 800048a:	89fb      	ldrh	r3, [r7, #14]
 800048c:	68ba      	ldr	r2, [r7, #8]
 800048e:	4413      	add	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 8000494:	89fb      	ldrh	r3, [r7, #14]
 8000496:	3301      	adds	r3, #1
 8000498:	81fb      	strh	r3, [r7, #14]
 800049a:	89fb      	ldrh	r3, [r7, #14]
 800049c:	2b19      	cmp	r3, #25
 800049e:	d9f4      	bls.n	800048a <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 80004a0:	221c      	movs	r2, #28
 80004a2:	4905      	ldr	r1, [pc, #20]	; (80004b8 <delay_click_event_tmr_Callback+0x40>)
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <delay_click_event_tmr_Callback+0x44>)
 80004a6:	f007 fab9 	bl	8007a1c <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 80004aa:	bf00      	nop
 80004ac:	3710      	adds	r7, #16
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20001c3e 	.word	0x20001c3e
 80004b8:	20001c3c 	.word	0x20001c3c
 80004bc:	2000319c 	.word	0x2000319c

080004c0 <periodic_click_event_Callback>:
//test1
#define TEST_STR_LEN 12
char test_str[TEST_STR_LEN] = "osalexandeko";

/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
//		i = 1;
//		hid_state.mouseHID.x=-100;
//	}
///////////////////////////////////////////////////////////////////////////////////////
	static uint16_t i = 0;
	hid_state.curr_hid_type = KEYBOARD_TYPE;
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <periodic_click_event_Callback+0x5c>)
 80004ca:	220f      	movs	r2, #15
 80004cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hid_state.keyboardHID.k_a = test_str[i++] - 0x5D;
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <periodic_click_event_Callback+0x60>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	b291      	uxth	r1, r2
 80004d8:	4a11      	ldr	r2, [pc, #68]	; (8000520 <periodic_click_event_Callback+0x60>)
 80004da:	8011      	strh	r1, [r2, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <periodic_click_event_Callback+0x64>)
 80004e0:	5c9b      	ldrb	r3, [r3, r2]
 80004e2:	3b5d      	subs	r3, #93	; 0x5d
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b0d      	ldr	r3, [pc, #52]	; (800051c <periodic_click_event_Callback+0x5c>)
 80004e8:	709a      	strb	r2, [r3, #2]
	hid_state.keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_SHIFT;
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <periodic_click_event_Callback+0x5c>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	705a      	strb	r2, [r3, #1]
	if (TEST_STR_LEN <= i) {
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <periodic_click_event_Callback+0x60>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	2b0b      	cmp	r3, #11
 80004f6:	d902      	bls.n	80004fe <periodic_click_event_Callback+0x3e>
		i = 0;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <periodic_click_event_Callback+0x60>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	801a      	strh	r2, [r3, #0]
	}
	//hid_state.keyboardHID.k_b = USB_HID_KEY_B;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 80004fe:	221c      	movs	r2, #28
 8000500:	4906      	ldr	r1, [pc, #24]	; (800051c <periodic_click_event_Callback+0x5c>)
 8000502:	4809      	ldr	r0, [pc, #36]	; (8000528 <periodic_click_event_Callback+0x68>)
 8000504:	f007 fa8a 	bl	8007a1c <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));

	osTimerStart(Buttons_Off_Tmr_Handle, 100);
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <periodic_click_event_Callback+0x6c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2164      	movs	r1, #100	; 0x64
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fcf6 	bl	8008f00 <osTimerStart>

}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20001c3c 	.word	0x20001c3c
 8000520:	200009b4 	.word	0x200009b4
 8000524:	20000000 	.word	0x20000000
 8000528:	2000319c 	.word	0x2000319c
 800052c:	20001c24 	.word	0x20001c24

08000530 <Buttons_Off_Callback>:

/**
 * Callback to switch buttons off.
 * @param argument
 */
void Buttons_Off_Callback(void const * argument) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	//hid_state.curr_hid_type = KEYBOARD_TYPE;
	hid_state.keyboardHID.k_a = 0;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <Buttons_Off_Callback+0x20>)
 800053a:	2200      	movs	r2, #0
 800053c:	709a      	strb	r2, [r3, #2]
	//hid_state.keyboardHID.k_b = 0;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 800053e:	221c      	movs	r2, #28
 8000540:	4903      	ldr	r1, [pc, #12]	; (8000550 <Buttons_Off_Callback+0x20>)
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <Buttons_Off_Callback+0x24>)
 8000544:	f007 fa6a 	bl	8007a1c <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));
}
 8000548:	bf00      	nop
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20001c3c 	.word	0x20001c3c
 8000554:	2000319c 	.word	0x2000319c

08000558 <hid_entry_tmr_callback>:

//NF20211125_MEM_KEY_ENTRY
void hid_entry_tmr_callback(void const * argument){
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <Start_Hid_Task>:
//}



/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 800056a:	b580      	push	{r7, lr}
 800056c:	b082      	sub	sp, #8
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	//uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
	//static uint8_t bit_select = 0x01;

	//osTimerStart(Left_Shift_Off_Tmr_Handle, 1000);

	osDelay(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f008 fc7c 	bl	8008e70 <osDelay>
	/* Infinite loop */
	for (;;) {
//		//test1
		osDelay(10);
 8000578:	200a      	movs	r0, #10
 800057a:	f008 fc79 	bl	8008e70 <osDelay>
 800057e:	e7fb      	b.n	8000578 <Start_Hid_Task+0xe>

08000580 <Start_Usb_Task>:
 	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000588:	2001      	movs	r0, #1
 800058a:	f008 fc71 	bl	8008e70 <osDelay>
		vTaskSuspend(NULL);
 800058e:	2000      	movs	r0, #0
 8000590:	f00a f8b8 	bl	800a704 <vTaskSuspend>
		osDelay(1);
 8000594:	e7f8      	b.n	8000588 <Start_Usb_Task+0x8>

08000596 <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 800059e:	2000      	movs	r0, #0
 80005a0:	f00a f8b0 	bl	800a704 <vTaskSuspend>
	//osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f008 fc63 	bl	8008e70 <osDelay>
 80005aa:	e7fb      	b.n	80005a4 <Start_Mouse_Task+0xe>

080005ac <init_hid>:
//	(hid_state.mouseHID.buttons) ?
//			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);
//
//}

uint8_t init_hid(void) {
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <init_hid+0x20>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <init_hid+0x20>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <init_hid+0x20>)
 80005be:	2202      	movs	r2, #2
 80005c0:	771a      	strb	r2, [r3, #28]
	return 0;
 80005c2:	2300      	movs	r3, #0
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	20001c3c 	.word	0x20001c3c

080005d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e4:	4a19      	ldr	r2, [pc, #100]	; (800064c <MX_GPIO_Init+0x7c>)
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_GPIO_Init+0x7c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	f043 0320 	orr.w	r3, r3, #32
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_GPIO_Init+0x7c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_GPIO_Init+0x7c>)
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_GPIO_Init+0x7c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_GPIO_Init+0x7c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <MX_GPIO_Init+0x7c>)
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_GPIO_Init+0x7c>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_GPIO_Init+0x7c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0x80>)
 8000640:	f000 fc00 	bl	8000e44 <HAL_GPIO_Init>

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40021000 	.word	0x40021000
 8000650:	40010c00 	.word	0x40010c00

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fac8 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f80d 	bl	800067a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ffb6 	bl	80005d0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000664:	f7ff fd74 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 8000668:	f000 f95e 	bl	8000928 <MX_TIM1_Init>
  MX_FATFS_Init();
 800066c:	f005 fdda 	bl	8006224 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000670:	f7ff fdd2 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000674:	f008 fba9 	bl	8008dca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x24>

0800067a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b094      	sub	sp, #80	; 0x50
 800067e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000684:	2228      	movs	r2, #40	; 0x28
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f00b fe32 	bl	800c2f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fa21 	bl	8002b18 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006dc:	f000 f83a 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f002 fc8b 	bl	8003018 <HAL_RCC_ClockConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000708:	f000 f824 	bl	8000754 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800070c:	2310      	movs	r3, #16
 800070e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000714:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fe35 	bl	8003388 <HAL_RCCEx_PeriphCLKConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000724:	f000 f816 	bl	8000754 <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f000 fa69 	bl	8000c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40000800 	.word	0x40000800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075a:	e7fe      	b.n	800075a <Error_Handler+0x6>

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000762:	4a18      	ldr	r2, [pc, #96]	; (80007c4 <HAL_MspInit+0x68>)
 8000764:	4b17      	ldr	r3, [pc, #92]	; (80007c4 <HAL_MspInit+0x68>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x68>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <HAL_MspInit+0x68>)
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_MspInit+0x68>)
 800077e:	69db      	ldr	r3, [r3, #28]
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x68>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 fb0c 	bl	8000db6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x6c>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x6c>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	201e      	movs	r0, #30
 80007e2:	f000 fae8 	bl	8000db6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007e6:	201e      	movs	r0, #30
 80007e8:	f000 fb01 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <HAL_InitTick+0xa0>)
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <HAL_InitTick+0xa0>)
 80007f0:	69db      	ldr	r3, [r3, #28]
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	61d3      	str	r3, [r2, #28]
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <HAL_InitTick+0xa0>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f003 0304 	and.w	r3, r3, #4
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000804:	f107 0210 	add.w	r2, r7, #16
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fd6c 	bl	80032ec <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000814:	f002 fd56 	bl	80032c4 <HAL_RCC_GetPCLK1Freq>
 8000818:	4603      	mov	r3, r0
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <HAL_InitTick+0xa4>)
 8000822:	fba2 2303 	umull	r2, r3, r2, r3
 8000826:	0c9b      	lsrs	r3, r3, #18
 8000828:	3b01      	subs	r3, #1
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_InitTick+0xa8>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <HAL_InitTick+0xac>)
 8000830:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <HAL_InitTick+0xa8>)
 8000834:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000838:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_InitTick+0xa8>)
 800083c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_InitTick+0xa8>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_InitTick+0xa8>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <HAL_InitTick+0xa8>)
 800084e:	f002 fe51 	bl	80034f4 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d104      	bne.n	8000862 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <HAL_InitTick+0xa8>)
 800085a:	f002 fe9b 	bl	8003594 <HAL_TIM_Base_Start_IT>
 800085e:	4603      	mov	r3, r0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3730      	adds	r7, #48	; 0x30
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	431bde83 	.word	0x431bde83
 8000874:	20001c60 	.word	0x20001c60
 8000878:	40000800 	.word	0x40000800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
	...

080008a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008ae:	f000 fd54 	bl	800135a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20003660 	.word	0x20003660

080008bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <TIM4_IRQHandler+0x10>)
 80008c2:	f002 feb9 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20001c60 	.word	0x20001c60

080008d0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <_sbrk+0x50>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d102      	bne.n	80008e6 <_sbrk+0x16>
		heap_end = &end;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <_sbrk+0x50>)
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <_sbrk+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <_sbrk+0x50>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <_sbrk+0x50>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	466a      	mov	r2, sp
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d907      	bls.n	800090a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80008fa:	f00b fcc5 	bl	800c288 <__errno>
 80008fe:	4602      	mov	r2, r0
 8000900:	230c      	movs	r3, #12
 8000902:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	e006      	b.n	8000918 <_sbrk+0x48>
	}

	heap_end += incr;
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <_sbrk+0x50>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4413      	add	r3, r2
 8000912:	4a03      	ldr	r2, [pc, #12]	; (8000920 <_sbrk+0x50>)
 8000914:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000916:	68fb      	ldr	r3, [r7, #12]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200009b8 	.word	0x200009b8
 8000924:	20003950 	.word	0x20003950

08000928 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000944:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000946:	4a1f      	ldr	r2, [pc, #124]	; (80009c4 <MX_TIM1_Init+0x9c>)
 8000948:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800094a:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM1_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM1_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_TIM1_Init+0x98>)
 8000972:	f002 fdbf 	bl	80034f4 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800097c:	f7ff feea 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM1_Init+0x98>)
 800098e:	f002 ff5b 	bl	8003848 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000998:	f7ff fedc 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM1_Init+0x98>)
 80009aa:	f003 f921 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009b4:	f7ff fece 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20001ca8 	.word	0x20001ca8
 80009c4:	40012c00 	.word	0x40012c00

080009c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_TIM_Base_MspInit+0x34>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d10b      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_TIM_Base_MspInit+0x38>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40012c00 	.word	0x40012c00
 8000a00:	40021000 	.word	0x40021000

08000a04 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000a0e:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr

08000a1a <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b085      	sub	sp, #20
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4603      	mov	r3, r0
 8000a22:	60b9      	str	r1, [r7, #8]
 8000a24:	607a      	str	r2, [r7, #4]
 8000a26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000a36:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000a4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000a62:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
	...

08000a70 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	4613      	mov	r3, r2
 8000a82:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	025b      	lsls	r3, r3, #9
 8000a88:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000a8e:	89bb      	ldrh	r3, [r7, #12]
 8000a90:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	e00f      	b.n	8000ab8 <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <STORAGE_Read_FS+0x60>)
 8000aa0:	5cd3      	ldrb	r3, [r2, r3]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	68ba      	ldr	r2, [r7, #8]
 8000aaa:	4413      	add	r3, r2
 8000aac:	7dfa      	ldrb	r2, [r7, #23]
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	89bb      	ldrh	r3, [r7, #12]
 8000aba:	025b      	lsls	r3, r3, #9
 8000abc:	461a      	mov	r2, r3
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8e9      	bhi.n	8000a98 <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000ac4:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	20001cf0 	.word	0x20001cf0

08000ad4 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	025b      	lsls	r3, r3, #9
 8000aec:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	e00e      	b.n	8000b16 <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	4413      	add	r3, r2
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	4413      	add	r3, r2
 8000b08:	7dfa      	ldrb	r2, [r7, #23]
 8000b0a:	b2d1      	uxtb	r1, r2
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <STORAGE_Write_FS+0x64>)
 8000b0e:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	3301      	adds	r3, #1
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	025b      	lsls	r3, r3, #9
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d8ea      	bhi.n	8000af8 <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f814 	bl	8000b50 <eof_check>
	st_info.blk_len = blk_len;
 8000b28:	89bb      	ldrh	r3, [r7, #12]
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <STORAGE_Write_FS+0x68>)
 8000b2c:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000b2e:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20001cf0 	.word	0x20001cf0
 8000b3c:	200009bc 	.word	0x200009bc

08000b40 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000b44:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <eof_check+0x84>)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	6812      	ldr	r2, [r2, #0]
 8000b60:	4611      	mov	r1, r2
 8000b62:	8019      	strh	r1, [r3, #0]
 8000b64:	3302      	adds	r3, #2
 8000b66:	0c12      	lsrs	r2, r2, #16
 8000b68:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	e022      	b.n	8000bb8 <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	e017      	b.n	8000ba8 <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <eof_check+0x88>)
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	f107 010c 	add.w	r1, r7, #12
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	440b      	add	r3, r1
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d10e      	bne.n	8000bb0 <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d803      	bhi.n	8000ba0 <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	e003      	b.n	8000ba8 <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <eof_check+0x8c>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e011      	b.n	8000bcc <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d9e4      	bls.n	8000b78 <eof_check+0x28>
 8000bae:	e000      	b.n	8000bb2 <eof_check+0x62>
				break;
 8000bb0:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	01db      	lsls	r3, r3, #7
 8000bc0:	1a9b      	subs	r3, r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	441a      	add	r2, r3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d8d2      	bhi.n	8000b72 <eof_check+0x22>
			return;
		}	
	}
	
}
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	0800cc3c 	.word	0x0800cc3c
 8000bd8:	20001cf0 	.word	0x20001cf0
 8000bdc:	200009bc 	.word	0x200009bc

08000be0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_Init+0x28>)
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x28>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f8cf 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fde2 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fda8 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x1c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x20>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <HAL_IncTick+0x20>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	20000034 	.word	0x20000034
 8000c38:	20002cf0 	.word	0x20002cf0

08000c3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <HAL_GetTick+0x10>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	20002cf0 	.word	0x20002cf0

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_EnableIRQ+0x34>)
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	095b      	lsrs	r3, r3, #5
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	f002 021f 	and.w	r2, r2, #31
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	490d      	ldr	r1, [pc, #52]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	4909      	ldr	r1, [pc, #36]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	2201      	movs	r2, #1
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	1e5a      	subs	r2, r3, #1
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	401a      	ands	r2, r3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d86:	2101      	movs	r1, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	1e59      	subs	r1, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff51 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff66 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ffb4 	bl	8000d40 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff83 	bl	8000cec <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff59 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e00e      	b.n	8000e3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d105      	bne.n	8000e32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff f9a3 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b08b      	sub	sp, #44	; 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e127      	b.n	80010a8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 8116 	bne.w	80010a2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b12      	cmp	r3, #18
 8000e7c:	d034      	beq.n	8000ee8 <HAL_GPIO_Init+0xa4>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d80d      	bhi.n	8000e9e <HAL_GPIO_Init+0x5a>
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x9a>
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d804      	bhi.n	8000e94 <HAL_GPIO_Init+0x50>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d031      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d01c      	beq.n	8000ecc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e92:	e048      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d043      	beq.n	8000f20 <HAL_GPIO_Init+0xdc>
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d01b      	beq.n	8000ed4 <HAL_GPIO_Init+0x90>
          break;
 8000e9c:	e043      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e9e:	4a89      	ldr	r2, [pc, #548]	; (80010c4 <HAL_GPIO_Init+0x280>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d026      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
 8000ea4:	4a87      	ldr	r2, [pc, #540]	; (80010c4 <HAL_GPIO_Init+0x280>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d806      	bhi.n	8000eb8 <HAL_GPIO_Init+0x74>
 8000eaa:	4a87      	ldr	r2, [pc, #540]	; (80010c8 <HAL_GPIO_Init+0x284>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d020      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
 8000eb0:	4a86      	ldr	r2, [pc, #536]	; (80010cc <HAL_GPIO_Init+0x288>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d01d      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
          break;
 8000eb6:	e036      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eb8:	4a85      	ldr	r2, [pc, #532]	; (80010d0 <HAL_GPIO_Init+0x28c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d019      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
 8000ebe:	4a85      	ldr	r2, [pc, #532]	; (80010d4 <HAL_GPIO_Init+0x290>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d016      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
 8000ec4:	4a84      	ldr	r2, [pc, #528]	; (80010d8 <HAL_GPIO_Init+0x294>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0xae>
          break;
 8000eca:	e02c      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e028      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e023      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e01e      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	330c      	adds	r3, #12
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e019      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000efa:	2304      	movs	r3, #4
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e012      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d105      	bne.n	8000f14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	611a      	str	r2, [r3, #16]
          break;
 8000f12:	e008      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	615a      	str	r2, [r3, #20]
          break;
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	2bff      	cmp	r3, #255	; 0xff
 8000f2a:	d801      	bhi.n	8000f30 <HAL_GPIO_Init+0xec>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	e001      	b.n	8000f34 <HAL_GPIO_Init+0xf0>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3304      	adds	r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2bff      	cmp	r3, #255	; 0xff
 8000f3a:	d802      	bhi.n	8000f42 <HAL_GPIO_Init+0xfe>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x104>
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	3b08      	subs	r3, #8
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	210f      	movs	r1, #15
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	6a39      	ldr	r1, [r7, #32]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	431a      	orrs	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 8096 	beq.w	80010a2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	4a59      	ldr	r2, [pc, #356]	; (80010dc <HAL_GPIO_Init+0x298>)
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_GPIO_Init+0x298>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <HAL_GPIO_Init+0x298>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f8e:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <HAL_GPIO_Init+0x29c>)
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_GPIO_Init+0x2a0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x19e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4a      	ldr	r2, [pc, #296]	; (80010e8 <HAL_GPIO_Init+0x2a4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x19a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a49      	ldr	r2, [pc, #292]	; (80010ec <HAL_GPIO_Init+0x2a8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x196>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2ac>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x192>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x1a0>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x1a0>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x1a0>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x1a0>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe6:	f002 0203 	and.w	r2, r2, #3
 8000fea:	0092      	lsls	r2, r2, #2
 8000fec:	4093      	lsls	r3, r2
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff4:	493a      	ldr	r1, [pc, #232]	; (80010e0 <HAL_GPIO_Init+0x29c>)
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800100e:	4939      	ldr	r1, [pc, #228]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
 800101a:	e006      	b.n	800102a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800101c:	4935      	ldr	r1, [pc, #212]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 800101e:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	43db      	mvns	r3, r3
 8001026:	4013      	ands	r3, r2
 8001028:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001036:	492f      	ldr	r1, [pc, #188]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
 8001042:	e006      	b.n	8001052 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001044:	492b      	ldr	r1, [pc, #172]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	43db      	mvns	r3, r3
 800104e:	4013      	ands	r3, r2
 8001050:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d006      	beq.n	800106c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800105e:	4925      	ldr	r1, [pc, #148]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	608b      	str	r3, [r1, #8]
 800106a:	e006      	b.n	800107a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800106c:	4921      	ldr	r1, [pc, #132]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	43db      	mvns	r3, r3
 8001076:	4013      	ands	r3, r2
 8001078:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d006      	beq.n	8001094 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001086:	491b      	ldr	r1, [pc, #108]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]
 8001092:	e006      	b.n	80010a2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001094:	4917      	ldr	r1, [pc, #92]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_GPIO_Init+0x2b0>)
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	4013      	ands	r3, r2
 80010a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	3301      	adds	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ae:	fa22 f303 	lsr.w	r3, r2, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f47f aed0 	bne.w	8000e58 <HAL_GPIO_Init+0x14>
  }
}
 80010b8:	bf00      	nop
 80010ba:	372c      	adds	r7, #44	; 0x2c
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	10210000 	.word	0x10210000
 80010c8:	10110000 	.word	0x10110000
 80010cc:	10120000 	.word	0x10120000
 80010d0:	10310000 	.word	0x10310000
 80010d4:	10320000 	.word	0x10320000
 80010d8:	10220000 	.word	0x10220000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40010800 	.word	0x40010800
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	40011000 	.word	0x40011000
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b08b      	sub	sp, #44	; 0x2c
 80010fc:	af06      	add	r7, sp, #24
 80010fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0fd      	b.n	8001306 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f00a fdcc 	bl	800bcbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fdf3 	bl	8003d1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	687e      	ldr	r6, [r7, #4]
 800113e:	466d      	mov	r5, sp
 8001140:	f106 0410 	add.w	r4, r6, #16
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	6823      	ldr	r3, [r4, #0]
 800114a:	602b      	str	r3, [r5, #0]
 800114c:	1d33      	adds	r3, r6, #4
 800114e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f002 fdbd 	bl	8003cd0 <USB_CoreInit>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2202      	movs	r2, #2
 8001160:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0ce      	b.n	8001306 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fdee 	bl	8003d50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e04c      	b.n	8001214 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	3301      	adds	r3, #1
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	b298      	uxth	r0, r3
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	3336      	adds	r3, #54	; 0x36
 80011b8:	4602      	mov	r2, r0
 80011ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	3303      	adds	r3, #3
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	3338      	adds	r3, #56	; 0x38
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	333c      	adds	r3, #60	; 0x3c
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	3340      	adds	r3, #64	; 0x40
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	3301      	adds	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3ad      	bcc.n	800117a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e044      	b.n	80012ae <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001236:	2200      	movs	r2, #0
 8001238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	440b      	add	r3, r1
 8001248:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4413      	add	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	440b      	add	r3, r1
 8001274:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001292:	7bfa      	ldrb	r2, [r7, #15]
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	440b      	add	r3, r1
 80012a0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	3301      	adds	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	7bfa      	ldrb	r2, [r7, #15]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d3b5      	bcc.n	8001224 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	687e      	ldr	r6, [r7, #4]
 80012c0:	466d      	mov	r5, sp
 80012c2:	f106 0410 	add.w	r4, r6, #16
 80012c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ca:	6823      	ldr	r3, [r4, #0]
 80012cc:	602b      	str	r3, [r5, #0]
 80012ce:	1d33      	adds	r3, r6, #4
 80012d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f002 fd48 	bl	8003d68 <USB_DevInit>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2202      	movs	r2, #2
 80012e2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00d      	b.n	8001306 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f004 fed9 	bl	80060b6 <USB_DevDisconnect>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800130e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_PCD_Start+0x16>
 8001320:	2302      	movs	r3, #2
 8001322:	e016      	b.n	8001352 <HAL_PCD_Start+0x44>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fcdd 	bl	8003cf0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001336:	2101      	movs	r1, #1
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f00a ff48 	bl	800c1ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f004 fead 	bl	80060a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b088      	sub	sp, #32
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f004 feaf 	bl	80060ca <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001376:	d102      	bne.n	800137e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fb8e 	bl	8001a9a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f004 fea1 	bl	80060ca <USB_ReadInterrupts>
 8001388:	4603      	mov	r3, r0
 800138a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001392:	d112      	bne.n	80013ba <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80013a0:	b292      	uxth	r2, r2
 80013a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a6:	b292      	uxth	r2, r2
 80013a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f00a fd00 	bl	800bdb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013b2:	2100      	movs	r1, #0
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f925 	bl	8001604 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fe83 	bl	80060ca <USB_ReadInterrupts>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ce:	d10b      	bne.n	80013e8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80013dc:	b292      	uxth	r2, r2
 80013de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013e2:	b292      	uxth	r2, r2
 80013e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fe6c 	bl	80060ca <USB_ReadInterrupts>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013fc:	d10b      	bne.n	8001416 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800140a:	b292      	uxth	r2, r2
 800140c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001410:	b292      	uxth	r2, r2
 8001412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f004 fe55 	bl	80060ca <USB_ReadInterrupts>
 8001420:	4603      	mov	r3, r0
 8001422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142a:	d126      	bne.n	800147a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001438:	b292      	uxth	r2, r2
 800143a:	f022 0204 	bic.w	r2, r2, #4
 800143e:	b292      	uxth	r2, r2
 8001440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001450:	b292      	uxth	r2, r2
 8001452:	f022 0208 	bic.w	r2, r2, #8
 8001456:	b292      	uxth	r2, r2
 8001458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f00a fce1 	bl	800be24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800146e:	b292      	uxth	r2, r2
 8001470:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001474:	b292      	uxth	r2, r2
 8001476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fe23 	bl	80060ca <USB_ReadInterrupts>
 8001484:	4603      	mov	r3, r0
 8001486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800148e:	f040 8084 	bne.w	800159a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001492:	2300      	movs	r3, #0
 8001494:	77fb      	strb	r3, [r7, #31]
 8001496:	e011      	b.n	80014bc <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4611      	mov	r1, r2
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	440a      	add	r2, r1
 80014a6:	8812      	ldrh	r2, [r2, #0]
 80014a8:	b292      	uxth	r2, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	f107 0120 	add.w	r1, r7, #32
 80014b0:	440b      	add	r3, r1
 80014b2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80014b6:	7ffb      	ldrb	r3, [r7, #31]
 80014b8:	3301      	adds	r3, #1
 80014ba:	77fb      	strb	r3, [r7, #31]
 80014bc:	7ffb      	ldrb	r3, [r7, #31]
 80014be:	2b07      	cmp	r3, #7
 80014c0:	d9ea      	bls.n	8001498 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80014ce:	b292      	uxth	r2, r2
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	b292      	uxth	r2, r2
 80014d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80014e6:	b292      	uxth	r2, r2
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80014f2:	bf00      	nop
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f6      	beq.n	80014f4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001512:	b292      	uxth	r2, r2
 8001514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001518:	b292      	uxth	r2, r2
 800151a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	77fb      	strb	r3, [r7, #31]
 8001522:	e010      	b.n	8001546 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	441a      	add	r2, r3
 8001530:	7ffb      	ldrb	r3, [r7, #31]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	f107 0120 	add.w	r1, r7, #32
 8001538:	440b      	add	r3, r1
 800153a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800153e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	3301      	adds	r3, #1
 8001544:	77fb      	strb	r3, [r7, #31]
 8001546:	7ffb      	ldrb	r3, [r7, #31]
 8001548:	2b07      	cmp	r3, #7
 800154a:	d9eb      	bls.n	8001524 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001558:	b292      	uxth	r2, r2
 800155a:	f042 0208 	orr.w	r2, r2, #8
 800155e:	b292      	uxth	r2, r2
 8001560:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001570:	b292      	uxth	r2, r2
 8001572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001576:	b292      	uxth	r2, r2
 8001578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001588:	b292      	uxth	r2, r2
 800158a:	f042 0204 	orr.w	r2, r2, #4
 800158e:	b292      	uxth	r2, r2
 8001590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f00a fc2b 	bl	800bdf0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fd93 	bl	80060ca <USB_ReadInterrupts>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	d10e      	bne.n	80015ce <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80015bc:	b292      	uxth	r2, r2
 80015be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015c2:	b292      	uxth	r2, r2
 80015c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f00a fbe4 	bl	800bd96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fd79 	bl	80060ca <USB_ReadInterrupts>
 80015d8:	4603      	mov	r3, r0
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015e2:	d10b      	bne.n	80015fc <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80015f0:	b292      	uxth	r2, r2
 80015f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f6:	b292      	uxth	r2, r2
 80015f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_PCD_SetAddress+0x1a>
 800161a:	2302      	movs	r3, #2
 800161c:	e013      	b.n	8001646 <HAL_PCD_SetAddress+0x42>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	4611      	mov	r1, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f004 fd20 	bl	800607c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	4608      	mov	r0, r1
 8001658:	4611      	mov	r1, r2
 800165a:	461a      	mov	r2, r3
 800165c:	4603      	mov	r3, r0
 800165e:	70fb      	strb	r3, [r7, #3]
 8001660:	460b      	mov	r3, r1
 8001662:	803b      	strh	r3, [r7, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800166c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001670:	2b00      	cmp	r3, #0
 8001672:	da0e      	bge.n	8001692 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001674:	78fb      	ldrb	r3, [r7, #3]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	705a      	strb	r2, [r3, #1]
 8001690:	e00e      	b.n	80016b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	f003 0207 	and.w	r2, r3, #7
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80016bc:	883a      	ldrh	r2, [r7, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	78ba      	ldrb	r2, [r7, #2]
 80016c6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016da:	78bb      	ldrb	r3, [r7, #2]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d102      	bne.n	80016e6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_PCD_EP_Open+0xa6>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e00e      	b.n	8001712 <HAL_PCD_EP_Open+0xc4>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	4618      	mov	r0, r3
 8001704:	f002 fb66 	bl	8003dd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001710:	7afb      	ldrb	r3, [r7, #11]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001726:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da0e      	bge.n	800174c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	705a      	strb	r2, [r3, #1]
 800174a:	e00e      	b.n	800176a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 0207 	and.w	r2, r3, #7
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800177c:	2b01      	cmp	r3, #1
 800177e:	d101      	bne.n	8001784 <HAL_PCD_EP_Close+0x6a>
 8001780:	2302      	movs	r3, #2
 8001782:	e00e      	b.n	80017a2 <HAL_PCD_EP_Close+0x88>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 fe82 	bl	800449c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	460b      	mov	r3, r1
 80017b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	f003 0207 	and.w	r2, r3, #7
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2200      	movs	r2, #0
 80017e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d106      	bne.n	800180e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6979      	ldr	r1, [r7, #20]
 8001806:	4618      	mov	r0, r3
 8001808:	f003 f834 	bl	8004874 <USB_EPStartXfer>
 800180c:	e005      	b.n	800181a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6979      	ldr	r1, [r7, #20]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f82d 	bl	8004874 <USB_EPStartXfer>
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	f003 0207 	and.w	r2, r3, #7
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	460b      	mov	r3, r1
 8001860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2201      	movs	r2, #1
 800189c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d106      	bne.n	80018c2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 ffda 	bl	8004874 <USB_EPStartXfer>
 80018c0:	e005      	b.n	80018ce <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6979      	ldr	r1, [r7, #20]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 ffd3 	bl	8004874 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d901      	bls.n	80018f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e04c      	b.n	8001990 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da0e      	bge.n	800191c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2201      	movs	r2, #1
 8001918:	705a      	strb	r2, [r3, #1]
 800191a:	e00c      	b.n	8001936 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	b2da      	uxtb	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800194e:	2b01      	cmp	r3, #1
 8001950:	d101      	bne.n	8001956 <HAL_PCD_EP_SetStall+0x7e>
 8001952:	2302      	movs	r3, #2
 8001954:	e01c      	b.n	8001990 <HAL_PCD_EP_SetStall+0xb8>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68f9      	ldr	r1, [r7, #12]
 8001964:	4618      	mov	r0, r3
 8001966:	f004 fa8c 	bl	8005e82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f004 fbb1 	bl	80060e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	f003 020f 	and.w	r2, r3, #15
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d901      	bls.n	80019b6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e040      	b.n	8001a38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da0e      	bge.n	80019dc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2201      	movs	r2, #1
 80019d8:	705a      	strb	r2, [r3, #1]
 80019da:	e00e      	b.n	80019fa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	f003 0207 	and.w	r2, r3, #7
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_PCD_EP_ClrStall+0x82>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e00e      	b.n	8001a38 <HAL_PCD_EP_ClrStall+0xa0>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fa7a 	bl	8005f22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_PCD_EP_Flush+0x1a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e01b      	b.n	8001a92 <HAL_PCD_EP_Flush+0x52>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da09      	bge.n	8001a7e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4619      	mov	r1, r3
 8001a76:	4610      	mov	r0, r2
 8001a78:	f002 f996 	bl	8003da8 <USB_FlushTxFifo>
 8001a7c:	e004      	b.n	8001a88 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 f99b 	bl	8003dbe <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b08e      	sub	sp, #56	; 0x38
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aa2:	e2ec      	b.n	800207e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aac:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001aae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001aba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 8161 	bne.w	8001d86 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ac4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d152      	bne.n	8001b74 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ade:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3328      	adds	r3, #40	; 0x28
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	441a      	add	r2, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b32:	2100      	movs	r1, #0
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f00a f914 	bl	800bd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 829b 	beq.w	800207e <PCD_EP_ISR_Handler+0x5e4>
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f040 8296 	bne.w	800207e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001b5c:	b2d2      	uxtb	r2, r2
 8001b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	b292      	uxth	r2, r2
 8001b66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b72:	e284      	b.n	800207e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d034      	beq.n	8001bf8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	461a      	mov	r2, r3
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3306      	adds	r3, #6
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f004 fada 	bl	8006186 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bde:	4013      	ands	r3, r2
 8001be0:	843b      	strh	r3, [r7, #32]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	8c3a      	ldrh	r2, [r7, #32]
 8001be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bec:	b292      	uxth	r2, r2
 8001bee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f00a f889 	bl	800bd08 <HAL_PCD_SetupStageCallback>
 8001bf6:	e242      	b.n	800207e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f280 823e 	bge.w	800207e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c0e:	4013      	ands	r3, r2
 8001c10:	83fb      	strh	r3, [r7, #30]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	8bfa      	ldrh	r2, [r7, #30]
 8001c18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	3306      	adds	r3, #6
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d019      	beq.n	8001c88 <PCD_EP_ISR_Handler+0x1ee>
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d015      	beq.n	8001c88 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6818      	ldr	r0, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	6959      	ldr	r1, [r3, #20]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f004 fa8a 	bl	8006186 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	441a      	add	r2, r3
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c80:	2100      	movs	r1, #0
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f00a f852 	bl	800bd2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 81f2 	bne.w	800207e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	4413      	add	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d112      	bne.n	8001ce8 <PCD_EP_ISR_Handler+0x24e>
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	801a      	strh	r2, [r3, #0]
 8001ce6:	e02f      	b.n	8001d48 <PCD_EP_ISR_Handler+0x2ae>
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b3e      	cmp	r3, #62	; 0x3e
 8001cee:	d813      	bhi.n	8001d18 <PCD_EP_ISR_Handler+0x27e>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d002      	beq.n	8001d0a <PCD_EP_ISR_Handler+0x270>
 8001d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d06:	3301      	adds	r3, #1
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	029b      	lsls	r3, r3, #10
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	e017      	b.n	8001d48 <PCD_EP_ISR_Handler+0x2ae>
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <PCD_EP_ISR_Handler+0x298>
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
 8001d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	827b      	strh	r3, [r7, #18]
 8001d5a:	8a7b      	ldrh	r3, [r7, #18]
 8001d5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d60:	827b      	strh	r3, [r7, #18]
 8001d62:	8a7b      	ldrh	r3, [r7, #18]
 8001d64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d68:	827b      	strh	r3, [r7, #18]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	8a7b      	ldrh	r3, [r7, #18]
 8001d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	8013      	strh	r3, [r2, #0]
 8001d84:	e17b      	b.n	800207e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f280 80ea 	bge.w	8001f76 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001db8:	4013      	ands	r3, r2
 8001dba:	823b      	strh	r3, [r7, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	8a3a      	ldrh	r2, [r7, #16]
 8001dcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd0:	b292      	uxth	r2, r2
 8001dd2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dd4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	7b1b      	ldrb	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d122      	bne.n	8001e38 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	3306      	adds	r3, #6
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8087 	beq.w	8001f32 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	6959      	ldr	r1, [r3, #20]
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	88da      	ldrh	r2, [r3, #6]
 8001e30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e32:	f004 f9a8 	bl	8006186 <USB_ReadPMA>
 8001e36:	e07c      	b.n	8001f32 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	78db      	ldrb	r3, [r3, #3]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d108      	bne.n	8001e52 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e42:	461a      	mov	r2, r3
 8001e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f927 	bl	800209a <HAL_PCD_EP_DB_Receive>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e50:	e06f      	b.n	8001f32 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e6c:	81fb      	strh	r3, [r7, #14]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	441a      	add	r2, r3
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
 8001e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d021      	beq.n	8001ef0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ed4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ed6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02a      	beq.n	8001f32 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	891a      	ldrh	r2, [r3, #8]
 8001ee8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eea:	f004 f94c 	bl	8006186 <USB_ReadPMA>
 8001eee:	e020      	b.n	8001f32 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	3306      	adds	r3, #6
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6812      	ldr	r2, [r2, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f18:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f1a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	6959      	ldr	r1, [r3, #20]
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	895a      	ldrh	r2, [r3, #10]
 8001f2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f2e:	f004 f92a 	bl	8006186 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	69da      	ldr	r2, [r3, #28]
 8001f36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f38:	441a      	add	r2, r3
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f44:	441a      	add	r2, r3
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <PCD_EP_ISR_Handler+0x4c2>
 8001f52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d206      	bcs.n	8001f6a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f009 fee2 	bl	800bd2c <HAL_PCD_DataOutStageCallback>
 8001f68:	e005      	b.n	8001f76 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fc7f 	bl	8004874 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d07e      	beq.n	800207e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fae:	81bb      	strh	r3, [r7, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	89bb      	ldrh	r3, [r7, #12]
 8001fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d00c      	beq.n	8001fee <PCD_EP_ISR_Handler+0x554>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	78db      	ldrb	r3, [r3, #3]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d141      	bne.n	8002072 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	3302      	adds	r3, #2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4413      	add	r3, r2
 800200c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002016:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	897b      	ldrh	r3, [r7, #10]
 800201e:	429a      	cmp	r2, r3
 8002020:	d906      	bls.n	8002030 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	897b      	ldrh	r3, [r7, #10]
 8002028:	1ad2      	subs	r2, r2, r3
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	619a      	str	r2, [r3, #24]
 800202e:	e002      	b.n	8002036 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f009 fe8c 	bl	800bd62 <HAL_PCD_DataInStageCallback>
 800204a:	e018      	b.n	800207e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	695a      	ldr	r2, [r3, #20]
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	441a      	add	r2, r3
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	69da      	ldr	r2, [r3, #28]
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	441a      	add	r2, r3
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206a:	4618      	mov	r0, r3
 800206c:	f002 fc02 	bl	8004874 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002070:	e005      	b.n	800207e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002072:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002074:	461a      	mov	r2, r3
 8002076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f91b 	bl	80022b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002086:	b29b      	uxth	r3, r3
 8002088:	b21b      	sxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	f6ff ad0a 	blt.w	8001aa4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3738      	adds	r7, #56	; 0x38
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b088      	sub	sp, #32
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	4613      	mov	r3, r2
 80020a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d07e      	beq.n	80021b0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	3302      	adds	r3, #2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020da:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	8bfb      	ldrh	r3, [r7, #30]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d306      	bcc.n	80020f4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	8bfb      	ldrh	r3, [r7, #30]
 80020ec:	1ad2      	subs	r2, r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	619a      	str	r2, [r3, #24]
 80020f2:	e002      	b.n	80020fa <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d123      	bne.n	800214a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211c:	83bb      	strh	r3, [r7, #28]
 800211e:	8bbb      	ldrh	r3, [r7, #28]
 8002120:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002124:	83bb      	strh	r3, [r7, #28]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	441a      	add	r2, r3
 8002134:	8bbb      	ldrh	r3, [r7, #28]
 8002136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800213a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800213e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002146:	b29b      	uxth	r3, r3
 8002148:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01f      	beq.n	8002194 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b29b      	uxth	r3, r3
 8002166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800216a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216e:	837b      	strh	r3, [r7, #26]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	441a      	add	r2, r3
 800217e:	8b7b      	ldrh	r3, [r7, #26]
 8002180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002190:	b29b      	uxth	r3, r3
 8002192:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002194:	8bfb      	ldrh	r3, [r7, #30]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6959      	ldr	r1, [r3, #20]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	891a      	ldrh	r2, [r3, #8]
 80021a8:	8bfb      	ldrh	r3, [r7, #30]
 80021aa:	f003 ffec 	bl	8006186 <USB_ReadPMA>
 80021ae:	e07c      	b.n	80022aa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	4413      	add	r3, r2
 80021c4:	3306      	adds	r3, #6
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	8bfb      	ldrh	r3, [r7, #30]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d306      	bcc.n	80021f2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	699a      	ldr	r2, [r3, #24]
 80021e8:	8bfb      	ldrh	r3, [r7, #30]
 80021ea:	1ad2      	subs	r2, r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	619a      	str	r2, [r3, #24]
 80021f0:	e002      	b.n	80021f8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d123      	bne.n	8002248 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b29b      	uxth	r3, r3
 8002212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221a:	833b      	strh	r3, [r7, #24]
 800221c:	8b3b      	ldrh	r3, [r7, #24]
 800221e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002222:	833b      	strh	r3, [r7, #24]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	8b3b      	ldrh	r3, [r7, #24]
 8002234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800223c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002244:	b29b      	uxth	r3, r3
 8002246:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11f      	bne.n	8002292 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800226c:	82fb      	strh	r3, [r7, #22]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	441a      	add	r2, r3
 800227c:	8afb      	ldrh	r3, [r7, #22]
 800227e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800228e:	b29b      	uxth	r3, r3
 8002290:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6959      	ldr	r1, [r3, #20]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	895a      	ldrh	r2, [r3, #10]
 80022a4:	8bfb      	ldrh	r3, [r7, #30]
 80022a6:	f003 ff6e 	bl	8006186 <USB_ReadPMA>
    }
  }

  return count;
 80022aa:	8bfb      	ldrh	r3, [r7, #30]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b0a4      	sub	sp, #144	; 0x90
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 81dd 	beq.w	8002688 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	3302      	adds	r3, #2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022f6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002302:	429a      	cmp	r2, r3
 8002304:	d907      	bls.n	8002316 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800230e:	1ad2      	subs	r2, r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	619a      	str	r2, [r3, #24]
 8002314:	e002      	b.n	800231c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f040 80bb 	bne.w	800249c <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d126      	bne.n	800237c <HAL_PCD_EP_DB_Transmit+0xc8>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002342:	4413      	add	r3, r2
 8002344:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	011a      	lsls	r2, r3, #4
 800234c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800234e:	4413      	add	r3, r2
 8002350:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002354:	67bb      	str	r3, [r7, #120]	; 0x78
 8002356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002360:	b29a      	uxth	r2, r3
 8002362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002364:	801a      	strh	r2, [r3, #0]
 8002366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b29b      	uxth	r3, r3
 800236c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002374:	b29a      	uxth	r2, r3
 8002376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	e01a      	b.n	80023b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	785b      	ldrb	r3, [r3, #1]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d116      	bne.n	80023b2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	677b      	str	r3, [r7, #116]	; 0x74
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002398:	4413      	add	r3, r2
 800239a:	677b      	str	r3, [r7, #116]	; 0x74
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	011a      	lsls	r2, r3, #4
 80023a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a4:	4413      	add	r3, r2
 80023a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023aa:	673b      	str	r3, [r7, #112]	; 0x70
 80023ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ae:	2200      	movs	r2, #0
 80023b0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	785b      	ldrb	r3, [r3, #1]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d126      	bne.n	800240e <HAL_PCD_EP_DB_Transmit+0x15a>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d4:	4413      	add	r3, r2
 80023d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	011a      	lsls	r2, r3, #4
 80023de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e0:	4413      	add	r3, r2
 80023e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023e6:	667b      	str	r3, [r7, #100]	; 0x64
 80023e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023f6:	801a      	strh	r2, [r3, #0]
 80023f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002406:	b29a      	uxth	r2, r3
 8002408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	e017      	b.n	800243e <HAL_PCD_EP_DB_Transmit+0x18a>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d113      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800241e:	b29b      	uxth	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002424:	4413      	add	r3, r2
 8002426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	011a      	lsls	r2, r3, #4
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002430:	4413      	add	r3, r2
 8002432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002436:	663b      	str	r3, [r7, #96]	; 0x60
 8002438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4619      	mov	r1, r3
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f009 fc8c 	bl	800bd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 82f1 	beq.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002470:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800248a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	b29b      	uxth	r3, r3
 8002498:	8013      	strh	r3, [r2, #0]
 800249a:	e2cd      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d021      	beq.n	80024ea <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	441a      	add	r2, r3
 80024d2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80024d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f040 82a1 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80024fe:	441a      	add	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800250c:	441a      	add	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	429a      	cmp	r2, r3
 800251c:	d30b      	bcc.n	8002536 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252e:	1ad2      	subs	r2, r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	621a      	str	r2, [r3, #32]
 8002534:	e017      	b.n	8002566 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d108      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 800253e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800254e:	e00a      	b.n	8002566 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d163      	bne.n	8002636 <HAL_PCD_EP_DB_Transmit+0x382>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	65bb      	str	r3, [r7, #88]	; 0x58
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002582:	4413      	add	r3, r2
 8002584:	65bb      	str	r3, [r7, #88]	; 0x58
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	011a      	lsls	r2, r3, #4
 800258c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258e:	4413      	add	r3, r2
 8002590:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002594:	657b      	str	r3, [r7, #84]	; 0x54
 8002596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d112      	bne.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x310>
 800259e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025bc:	b29a      	uxth	r2, r3
 80025be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025c0:	801a      	strh	r2, [r3, #0]
 80025c2:	e055      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c8:	2b3e      	cmp	r3, #62	; 0x3e
 80025ca:	d817      	bhi.n	80025fc <HAL_PCD_EP_DB_Transmit+0x348>
 80025cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <HAL_PCD_EP_DB_Transmit+0x338>
 80025e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e6:	3301      	adds	r3, #1
 80025e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	e039      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80025fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <HAL_PCD_EP_DB_Transmit+0x368>
 8002612:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002616:	3b01      	subs	r3, #1
 8002618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800261c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002620:	b29b      	uxth	r3, r3
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	b29b      	uxth	r3, r3
 8002626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800262a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800262e:	b29a      	uxth	r2, r3
 8002630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e01c      	b.n	8002670 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d118      	bne.n	8002670 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	653b      	str	r3, [r7, #80]	; 0x50
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002652:	4413      	add	r3, r2
 8002654:	653b      	str	r3, [r7, #80]	; 0x50
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	011a      	lsls	r2, r3, #4
 800265c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800265e:	4413      	add	r3, r2
 8002660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002666:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266a:	b29a      	uxth	r2, r3
 800266c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800266e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	6959      	ldr	r1, [r3, #20]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	891a      	ldrh	r2, [r3, #8]
 800267c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002680:	b29b      	uxth	r3, r3
 8002682:	f003 fd3c 	bl	80060fe <USB_WritePMA>
 8002686:	e1d7      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	3306      	adds	r3, #6
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80026bc:	429a      	cmp	r2, r3
 80026be:	d307      	bcc.n	80026d0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	699a      	ldr	r2, [r3, #24]
 80026c4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80026c8:	1ad2      	subs	r2, r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	619a      	str	r2, [r3, #24]
 80026ce:	e002      	b.n	80026d6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 80b9 	bne.w	8002852 <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	785b      	ldrb	r3, [r3, #1]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d126      	bne.n	8002736 <HAL_PCD_EP_DB_Transmit+0x482>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026fc:	4413      	add	r3, r2
 80026fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	011a      	lsls	r2, r3, #4
 8002706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002708:	4413      	add	r3, r2
 800270a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800270e:	647b      	str	r3, [r7, #68]	; 0x44
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29b      	uxth	r3, r3
 8002716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800271a:	b29a      	uxth	r2, r3
 800271c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271e:	801a      	strh	r2, [r3, #0]
 8002720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	b29b      	uxth	r3, r3
 8002726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800272a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272e:	b29a      	uxth	r2, r3
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	e01a      	b.n	800276c <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d116      	bne.n	800276c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	643b      	str	r3, [r7, #64]	; 0x40
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274c:	b29b      	uxth	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	4413      	add	r3, r2
 8002754:	643b      	str	r3, [r7, #64]	; 0x40
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	011a      	lsls	r2, r3, #4
 800275c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275e:	4413      	add	r3, r2
 8002760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	2200      	movs	r2, #0
 800276a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d126      	bne.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x514>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	4413      	add	r3, r2
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	011a      	lsls	r2, r3, #4
 8002798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279a:	4413      	add	r3, r2
 800279c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e017      	b.n	80027f8 <HAL_PCD_EP_DB_Transmit+0x544>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d113      	bne.n	80027f8 <HAL_PCD_EP_DB_Transmit+0x544>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d8:	b29b      	uxth	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	4413      	add	r3, r2
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	011a      	lsls	r2, r3, #4
 80027e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ea:	4413      	add	r3, r2
 80027ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	2200      	movs	r2, #0
 80027f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f009 faaf 	bl	800bd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 8114 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b29b      	uxth	r3, r3
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800282a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	441a      	add	r2, r3
 800283a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800283c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284c:	b29b      	uxth	r3, r3
 800284e:	8013      	strh	r3, [r2, #0]
 8002850:	e0f2      	b.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11f      	bne.n	800289c <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	b29b      	uxth	r3, r3
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	853b      	strh	r3, [r7, #40]	; 0x28
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	b29b      	uxth	r3, r3
 800289a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 80c8 	bne.w	8002a38 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80028b0:	441a      	add	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80028be:	441a      	add	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	6a1a      	ldr	r2, [r3, #32]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d30b      	bcc.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e0:	1ad2      	subs	r2, r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	621a      	str	r2, [r3, #32]
 80028e6:	e017      	b.n	8002918 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d108      	bne.n	8002902 <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 80028f0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80028f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002900:	e00a      	b.n	8002918 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	785b      	ldrb	r3, [r3, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d163      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x73a>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	623b      	str	r3, [r7, #32]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002934:	b29b      	uxth	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	4413      	add	r3, r2
 800293c:	623b      	str	r3, [r7, #32]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	011a      	lsls	r2, r3, #4
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	4413      	add	r3, r2
 8002948:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d112      	bne.n	800297c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002960:	b29a      	uxth	r2, r3
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002970:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002974:	b29a      	uxth	r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	e052      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x76e>
 800297c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002980:	2b3e      	cmp	r3, #62	; 0x3e
 8002982:	d817      	bhi.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x700>
 8002984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800298e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d004      	beq.n	80029a4 <HAL_PCD_EP_DB_Transmit+0x6f0>
 800299a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800299e:	3301      	adds	r3, #1
 80029a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	e036      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x76e>
 80029b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d104      	bne.n	80029d4 <HAL_PCD_EP_DB_Transmit+0x720>
 80029ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d8:	b29b      	uxth	r3, r3
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	b29b      	uxth	r3, r3
 80029de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	801a      	strh	r2, [r3, #0]
 80029ec:	e019      	b.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x76e>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	785b      	ldrb	r3, [r3, #1]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d115      	bne.n	8002a22 <HAL_PCD_EP_DB_Transmit+0x76e>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	4413      	add	r3, r2
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	011a      	lsls	r2, r3, #4
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	6959      	ldr	r1, [r3, #20]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	895a      	ldrh	r2, [r3, #10]
 8002a2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	f003 fb63 	bl	80060fe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a52:	82fb      	strh	r3, [r7, #22]
 8002a54:	8afb      	ldrh	r3, [r7, #22]
 8002a56:	f083 0310 	eor.w	r3, r3, #16
 8002a5a:	82fb      	strh	r3, [r7, #22]
 8002a5c:	8afb      	ldrh	r3, [r7, #22]
 8002a5e:	f083 0320 	eor.w	r3, r3, #32
 8002a62:	82fb      	strh	r3, [r7, #22]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3790      	adds	r7, #144	; 0x90
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	817b      	strh	r3, [r7, #10]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002aa4:	897b      	ldrh	r3, [r7, #10]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	897b      	ldrh	r3, [r7, #10]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e009      	b.n	8002adc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ac8:	897a      	ldrh	r2, [r7, #10]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4413      	add	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002adc:	893b      	ldrh	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d107      	bne.n	8002af2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	80da      	strh	r2, [r3, #6]
 8002af0:	e00b      	b.n	8002b0a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2201      	movs	r2, #1
 8002af6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
	...

08002b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e26c      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8087 	beq.w	8002c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b38:	4b92      	ldr	r3, [pc, #584]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 030c 	and.w	r3, r3, #12
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d00c      	beq.n	8002b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b44:	4b8f      	ldr	r3, [pc, #572]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 030c 	and.w	r3, r3, #12
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d112      	bne.n	8002b76 <HAL_RCC_OscConfig+0x5e>
 8002b50:	4b8c      	ldr	r3, [pc, #560]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5e:	4b89      	ldr	r3, [pc, #548]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d06c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x12c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d168      	bne.n	8002c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e246      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_OscConfig+0x76>
 8002b80:	4a80      	ldr	r2, [pc, #512]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	4b80      	ldr	r3, [pc, #512]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e02e      	b.n	8002bec <HAL_RCC_OscConfig+0xd4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x98>
 8002b96:	4a7b      	ldr	r2, [pc, #492]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	4b7a      	ldr	r3, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4a78      	ldr	r2, [pc, #480]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e01d      	b.n	8002bec <HAL_RCC_OscConfig+0xd4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0xbc>
 8002bba:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	4b71      	ldr	r3, [pc, #452]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	4a6f      	ldr	r2, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0xd4>
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	4b6b      	ldr	r3, [pc, #428]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4a68      	ldr	r2, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fe f822 	bl	8000c3c <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe f81e 	bl	8000c3c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e1fa      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0xe4>
 8002c1a:	e014      	b.n	8002c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe f80e 	bl	8000c3c <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c24:	f7fe f80a 	bl	8000c3c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e1e6      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c36:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x10c>
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d063      	beq.n	8002d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c52:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c5e:	4b49      	ldr	r3, [pc, #292]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d11c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x18c>
 8002c6a:	4b46      	ldr	r3, [pc, #280]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	4b43      	ldr	r3, [pc, #268]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x176>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1ba      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	493d      	ldr	r1, [pc, #244]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca2:	e03a      	b.n	8002d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7fd ffc3 	bl	8000c3c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cba:	f7fd ffbf 	bl	8000c3c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e19b      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	492a      	ldr	r1, [pc, #168]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	600b      	str	r3, [r1, #0]
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd ffa2 	bl	8000c3c <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cfc:	f7fd ff9e 	bl	8000c3c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e17a      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d03a      	beq.n	8002d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d019      	beq.n	8002d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2e:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d34:	f7fd ff82 	bl	8000c3c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7fd ff7e 	bl	8000c3c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e15a      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_RCC_OscConfig+0x26c>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0f0      	beq.n	8002d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f000 faf6 	bl	800334c <RCC_Delay>
 8002d60:	e01c      	b.n	8002d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_OscConfig+0x274>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fd ff68 	bl	8000c3c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6e:	e00f      	b.n	8002d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fd ff64 	bl	8000c3c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d908      	bls.n	8002d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e140      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	42420000 	.word	0x42420000
 8002d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b9e      	ldr	r3, [pc, #632]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e9      	bne.n	8002d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80a6 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b97      	ldr	r3, [pc, #604]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4a94      	ldr	r2, [pc, #592]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002dbc:	4b93      	ldr	r3, [pc, #588]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	4b91      	ldr	r3, [pc, #580]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b8e      	ldr	r3, [pc, #568]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4a8b      	ldr	r2, [pc, #556]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	4b8a      	ldr	r3, [pc, #552]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fd ff25 	bl	8000c3c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fd ff21 	bl	8000c3c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e0fd      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b81      	ldr	r3, [pc, #516]	; (8003010 <HAL_RCC_OscConfig+0x4f8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x312>
 8002e1c:	4a7b      	ldr	r2, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	4b7b      	ldr	r3, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6213      	str	r3, [r2, #32]
 8002e28:	e02d      	b.n	8002e86 <HAL_RCC_OscConfig+0x36e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x334>
 8002e32:	4a76      	ldr	r2, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	4b75      	ldr	r3, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6213      	str	r3, [r2, #32]
 8002e3e:	4a73      	ldr	r2, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	4b72      	ldr	r3, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCC_OscConfig+0x36e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x356>
 8002e54:	4a6d      	ldr	r2, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	4a6a      	ldr	r2, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e62:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x36e>
 8002e6e:	4a67      	ldr	r2, [pc, #412]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4a64      	ldr	r2, [pc, #400]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7fd fed5 	bl	8000c3c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fd fed1 	bl	8000c3c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0ab      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCC_OscConfig+0x37e>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fd febf 	bl	8000c3c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fd febb 	bl	8000c3c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e095      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4a48      	ldr	r2, [pc, #288]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8081 	beq.w	8003002 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	4b42      	ldr	r3, [pc, #264]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d061      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d146      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <HAL_RCC_OscConfig+0x4fc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fd fe8f 	bl	8000c3c <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd fe8b 	bl	8000c3c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e067      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f48:	d108      	bne.n	8002f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f4a:	4930      	ldr	r1, [pc, #192]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	4b2f      	ldr	r3, [pc, #188]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f5c:	482b      	ldr	r0, [pc, #172]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	4b2b      	ldr	r3, [pc, #172]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a19      	ldr	r1, [r3, #32]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	4313      	orrs	r3, r2
 8002f72:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b27      	ldr	r3, [pc, #156]	; (8003014 <HAL_RCC_OscConfig+0x4fc>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7a:	f7fd fe5f 	bl	8000c3c <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f82:	f7fd fe5b 	bl	8000c3c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e037      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f94:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x46a>
 8002fa0:	e02f      	b.n	8003002 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_RCC_OscConfig+0x4fc>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fd fe48 	bl	8000c3c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fd fe44 	bl	8000c3c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e020      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x498>
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e013      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x4f4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
 8003014:	42420060 	.word	0x42420060

08003018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0d0      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800302c:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0207 	and.w	r2, r3, #7
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4967      	ldr	r1, [pc, #412]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 0207 	bic.w	r2, r3, #7
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4a59      	ldr	r2, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800307e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4a53      	ldr	r2, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4950      	ldr	r1, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d040      	beq.n	8003138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d115      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d109      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e073      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e6:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	4939      	ldr	r1, [pc, #228]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	4b38      	ldr	r3, [pc, #224]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 0203 	bic.w	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003108:	f7fd fd98 	bl	8000c3c <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	e00a      	b.n	8003126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003110:	f7fd fd94 	bl	8000c3c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e053      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 020c 	and.w	r2, r3, #12
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	429a      	cmp	r2, r3
 8003136:	d1eb      	bne.n	8003110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0207 	and.w	r2, r3, #7
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4924      	ldr	r1, [pc, #144]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 0207 	bic.w	r2, r3, #7
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4919      	ldr	r1, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003192:	4912      	ldr	r1, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f821 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031aa:	4601      	mov	r1, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	fa21 f303 	lsr.w	r3, r1, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1cc>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fb00 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40022000 	.word	0x40022000
 80031dc:	40021000 	.word	0x40021000
 80031e0:	0800ccf4 	.word	0x0800ccf4
 80031e4:	2000002c 	.word	0x2000002c
 80031e8:	20000030 	.word	0x20000030

080031ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b490      	push	{r4, r7}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031f2:	4b2a      	ldr	r3, [pc, #168]	; (800329c <HAL_RCC_GetSysClockFreq+0xb0>)
 80031f4:	1d3c      	adds	r4, r7, #4
 80031f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031fc:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	2300      	movs	r3, #0
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003216:	4b23      	ldr	r3, [pc, #140]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b04      	cmp	r3, #4
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x40>
 8003226:	2b08      	cmp	r3, #8
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x46>
 800322a:	e02d      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800322e:	623b      	str	r3, [r7, #32]
      break;
 8003230:	e02d      	b.n	800328e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	0c9b      	lsrs	r3, r3, #18
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800323e:	4413      	add	r3, r2
 8003240:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003244:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c5b      	lsrs	r3, r3, #17
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325e:	4413      	add	r3, r2
 8003260:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003264:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	4a0f      	ldr	r2, [pc, #60]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800326a:	fb02 f203 	mul.w	r2, r2, r3
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	e004      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	623b      	str	r3, [r7, #32]
      break;
 8003286:	e002      	b.n	800328e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800328a:	623b      	str	r3, [r7, #32]
      break;
 800328c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328e:	6a3b      	ldr	r3, [r7, #32]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bc90      	pop	{r4, r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	0800cc40 	.word	0x0800cc40
 80032a0:	0800cc50 	.word	0x0800cc50
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200
 80032ac:	003d0900 	.word	0x003d0900

080032b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b4:	4b02      	ldr	r3, [pc, #8]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	2000002c 	.word	0x2000002c

080032c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032c8:	f7ff fff2 	bl	80032b0 <HAL_RCC_GetHCLKFreq>
 80032cc:	4601      	mov	r1, r0
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	4a03      	ldr	r2, [pc, #12]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032da:	5cd3      	ldrb	r3, [r2, r3]
 80032dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	0800cd04 	.word	0x0800cd04

080032ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	220f      	movs	r2, #15
 80032fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0203 	and.w	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003308:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_RCC_GetClockConfig+0x58>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	08db      	lsrs	r3, r3, #3
 8003326:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_RCC_GetClockConfig+0x5c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0207 	and.w	r2, r3, #7
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	40021000 	.word	0x40021000
 8003348:	40022000 	.word	0x40022000

0800334c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <RCC_Delay+0x34>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <RCC_Delay+0x38>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	0a5b      	lsrs	r3, r3, #9
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003368:	bf00      	nop
  }
  while (Delay --);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	60fa      	str	r2, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <RCC_Delay+0x1c>
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	2000002c 	.word	0x2000002c
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d07d      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a8:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10d      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b4:	4a4c      	ldr	r2, [pc, #304]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033be:	61d3      	str	r3, [r2, #28]
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033cc:	2301      	movs	r3, #1
 80033ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d0:	4b46      	ldr	r3, [pc, #280]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d118      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033dc:	4a43      	ldr	r2, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e8:	f7fd fc28 	bl	8000c3c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ee:	e008      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7fd fc24 	bl	8000c3c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e06d      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003402:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800340e:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d02e      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d027      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800342c:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003436:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003442:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d014      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003452:	f7fd fbf3 	bl	8000c3c <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fd fbef 	bl	8000c3c <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	f241 3288 	movw	r2, #5000	; 0x1388
 8003468:	4293      	cmp	r3, r2
 800346a:	d901      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e036      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ee      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800347c:	491a      	ldr	r1, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4313      	orrs	r3, r2
 800348c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ac:	490e      	ldr	r1, [pc, #56]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ca:	4907      	ldr	r1, [pc, #28]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
 80034f0:	42420440 	.word	0x42420440

080034f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e041      	b.n	800358a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fa54 	bl	80009c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f000 fa64 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d001      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e03a      	b.n	8003622 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	68d2      	ldr	r2, [r2, #12]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_TIM_Base_Start_IT+0x98>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x58>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x58>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a14      	ldr	r2, [pc, #80]	; (8003630 <HAL_TIM_Base_Start_IT+0x9c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x58>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a13      	ldr	r2, [pc, #76]	; (8003634 <HAL_TIM_Base_Start_IT+0xa0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d010      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6812      	ldr	r2, [r2, #0]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360e:	e007      	b.n	8003620 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0202 	mvn.w	r2, #2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9a4 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f997 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9a6 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0204 	mvn.w	r2, #4
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f97a 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f96d 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f97c 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0208 	mvn.w	r2, #8
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f950 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f943 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f952 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	2b10      	cmp	r3, #16
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0210 	mvn.w	r2, #16
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2208      	movs	r2, #8
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f926 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f919 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f928 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10e      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0201 	mvn.w	r2, #1
 80037b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fc ffba 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d10e      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b80      	cmp	r3, #128	; 0x80
 80037d6:	d107      	bne.n	80037e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa6b 	bl	8003cbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d10e      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b40      	cmp	r3, #64	; 0x40
 8003802:	d107      	bne.n	8003814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f8ec 	bl	80039ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d10e      	bne.n	8003840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b20      	cmp	r3, #32
 800382e:	d107      	bne.n	8003840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0220 	mvn.w	r2, #32
 8003838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa36 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_TIM_ConfigClockSource+0x18>
 800385c:	2302      	movs	r3, #2
 800385e:	e0a6      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x166>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800387e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003886:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d067      	beq.n	8003968 <HAL_TIM_ConfigClockSource+0x120>
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d80b      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x6c>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d073      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0x140>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d802      	bhi.n	80038aa <HAL_TIM_ConfigClockSource+0x62>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d06f      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80038a8:	e078      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d06c      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0x140>
 80038ae:	2b30      	cmp	r3, #48	; 0x30
 80038b0:	d06a      	beq.n	8003988 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80038b2:	e073      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038b4:	2b70      	cmp	r3, #112	; 0x70
 80038b6:	d00d      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0x8c>
 80038b8:	2b70      	cmp	r3, #112	; 0x70
 80038ba:	d804      	bhi.n	80038c6 <HAL_TIM_ConfigClockSource+0x7e>
 80038bc:	2b50      	cmp	r3, #80	; 0x50
 80038be:	d033      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0xe0>
 80038c0:	2b60      	cmp	r3, #96	; 0x60
 80038c2:	d041      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80038c4:	e06a      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ca:	d066      	beq.n	800399a <HAL_TIM_ConfigClockSource+0x152>
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d017      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80038d2:	e063      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f000 f965 	bl	8003bb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
      break;
 8003900:	e04c      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6899      	ldr	r1, [r3, #8]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f000 f94e 	bl	8003bb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	6892      	ldr	r2, [r2, #8]
 8003920:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003924:	609a      	str	r2, [r3, #8]
      break;
 8003926:	e039      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	461a      	mov	r2, r3
 8003936:	f000 f8c5 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2150      	movs	r1, #80	; 0x50
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f91c 	bl	8003b7e <TIM_ITRx_SetConfig>
      break;
 8003946:	e029      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	461a      	mov	r2, r3
 8003956:	f000 f8e3 	bl	8003b20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2160      	movs	r1, #96	; 0x60
 8003960:	4618      	mov	r0, r3
 8003962:	f000 f90c 	bl	8003b7e <TIM_ITRx_SetConfig>
      break;
 8003966:	e019      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	461a      	mov	r2, r3
 8003976:	f000 f8a5 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f8fc 	bl	8003b7e <TIM_ITRx_SetConfig>
      break;
 8003986:	e009      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 f8f3 	bl	8003b7e <TIM_ITRx_SetConfig>
        break;
 8003998:	e000      	b.n	800399c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800399a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
	...

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <TIM_Base_SetConfig+0xb8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <TIM_Base_SetConfig+0x30>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d007      	beq.n	8003a30 <TIM_Base_SetConfig+0x30>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a26      	ldr	r2, [pc, #152]	; (8003abc <TIM_Base_SetConfig+0xbc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0x30>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a25      	ldr	r2, [pc, #148]	; (8003ac0 <TIM_Base_SetConfig+0xc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d108      	bne.n	8003a42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <TIM_Base_SetConfig+0xb8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00b      	beq.n	8003a62 <TIM_Base_SetConfig+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d007      	beq.n	8003a62 <TIM_Base_SetConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <TIM_Base_SetConfig+0xbc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_Base_SetConfig+0x62>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <TIM_Base_SetConfig+0xc0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d108      	bne.n	8003a74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a07      	ldr	r2, [pc, #28]	; (8003ab8 <TIM_Base_SetConfig+0xb8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d103      	bne.n	8003aa8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	615a      	str	r2, [r3, #20]
}
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	40012c00 	.word	0x40012c00
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800

08003ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 030a 	bic.w	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	f023 0210 	bic.w	r2, r3, #16
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	031b      	lsls	r3, r3, #12
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	621a      	str	r2, [r3, #32]
}
 8003b74:	bf00      	nop
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b085      	sub	sp, #20
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f043 0307 	orr.w	r3, r3, #7
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	609a      	str	r2, [r3, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bc80      	pop	{r7}
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	021a      	lsls	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	609a      	str	r2, [r3, #8]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e046      	b.n	8003c96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00e      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c54:	d009      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a10      	ldr	r2, [pc, #64]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10c      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr

08003cd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	f107 0014 	add.w	r0, r7, #20
 8003cde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	b004      	add	sp, #16
 8003cee:	4770      	bx	lr

08003cf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d24:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003d28:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr

08003d68 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d68:	b084      	sub	sp, #16
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	f107 0014 	add.w	r0, r7, #20
 8003d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	b004      	add	sp, #16
 8003da6:	4770      	bx	lr

08003da8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bc80      	pop	{r7}
 8003dbc:	4770      	bx	lr

08003dbe <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
	...

08003dd4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b09b      	sub	sp, #108	; 0x6c
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	78db      	ldrb	r3, [r3, #3]
 8003e02:	2b03      	cmp	r3, #3
 8003e04:	d81f      	bhi.n	8003e46 <USB_ActivateEndpoint+0x72>
 8003e06:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <USB_ActivateEndpoint+0x38>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e4f 	.word	0x08003e4f
 8003e18:	08003e2b 	.word	0x08003e2b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e1c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e24:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e28:	e012      	b.n	8003e50 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003e32:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e36:	e00b      	b.n	8003e50 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e38:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e40:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003e44:	e004      	b.n	8003e50 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003e4c:	e000      	b.n	8003e50 <USB_ActivateEndpoint+0x7c>
      break;
 8003e4e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	441a      	add	r2, r3
 8003ea0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	7b1b      	ldrb	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f040 8153 	bne.w	8004168 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 808e 	beq.w	8003fe8 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	4413      	add	r3, r2
 8003ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	011a      	lsls	r2, r3, #4
 8003ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	88db      	ldrh	r3, [r3, #6]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003f10:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01d      	beq.n	8003f58 <USB_ActivateEndpoint+0x184>
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	441a      	add	r2, r3
 8003f40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	78db      	ldrb	r3, [r3, #3]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d024      	beq.n	8003faa <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003f7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f7e:	f083 0320 	eor.w	r3, r3, #32
 8003f82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	441a      	add	r2, r3
 8003f90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
 8003fa8:	e271      	b.n	800448e <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	8013      	strh	r3, [r2, #0]
 8003fe6:	e252      	b.n	800448e <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff8:	4413      	add	r3, r2
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	011a      	lsls	r2, r3, #4
 8004002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004004:	4413      	add	r3, r2
 8004006:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800400a:	647b      	str	r3, [r7, #68]	; 0x44
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	88db      	ldrh	r3, [r3, #6]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	643b      	str	r3, [r7, #64]	; 0x40
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	4413      	add	r3, r2
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	011a      	lsls	r2, r3, #4
 8004036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004038:	4413      	add	r3, r2
 800403a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800403e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d112      	bne.n	800406e <USB_ActivateEndpoint+0x29a>
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004052:	b29a      	uxth	r2, r3
 8004054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004066:	b29a      	uxth	r2, r3
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	e02f      	b.n	80040ce <USB_ActivateEndpoint+0x2fa>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b3e      	cmp	r3, #62	; 0x3e
 8004074:	d813      	bhi.n	800409e <USB_ActivateEndpoint+0x2ca>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	085b      	lsrs	r3, r3, #1
 800407c:	663b      	str	r3, [r7, #96]	; 0x60
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <USB_ActivateEndpoint+0x2bc>
 800408a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800408c:	3301      	adds	r3, #1
 800408e:	663b      	str	r3, [r7, #96]	; 0x60
 8004090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004092:	b29b      	uxth	r3, r3
 8004094:	029b      	lsls	r3, r3, #10
 8004096:	b29a      	uxth	r2, r3
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	801a      	strh	r2, [r3, #0]
 800409c:	e017      	b.n	80040ce <USB_ActivateEndpoint+0x2fa>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	663b      	str	r3, [r7, #96]	; 0x60
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <USB_ActivateEndpoint+0x2e4>
 80040b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b4:	3b01      	subs	r3, #1
 80040b6:	663b      	str	r3, [r7, #96]	; 0x60
 80040b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	029b      	lsls	r3, r3, #10
 80040be:	b29b      	uxth	r3, r3
 80040c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	877b      	strh	r3, [r7, #58]	; 0x3a
 80040dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01b      	beq.n	800411e <USB_ActivateEndpoint+0x34a>
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040fc:	873b      	strh	r3, [r7, #56]	; 0x38
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800410a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800410e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	b29b      	uxth	r3, r3
 800411c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004136:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004138:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800413c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800413e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004140:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004144:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	441a      	add	r2, r3
 8004150:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800415e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004162:	b29b      	uxth	r3, r3
 8004164:	8013      	strh	r3, [r2, #0]
 8004166:	e192      	b.n	800448e <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	441a      	add	r2, r3
 800418a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800418c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004190:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004194:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419c:	b29b      	uxth	r3, r3
 800419e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	633b      	str	r3, [r7, #48]	; 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	461a      	mov	r2, r3
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	4413      	add	r3, r2
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	891b      	ldrh	r3, [r3, #8]
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	801a      	strh	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041de:	b29b      	uxth	r3, r3
 80041e0:	461a      	mov	r2, r3
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	4413      	add	r3, r2
 80041e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	011a      	lsls	r2, r3, #4
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	895b      	ldrh	r3, [r3, #10]
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	b29b      	uxth	r3, r3
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	785b      	ldrb	r3, [r3, #1]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 8091 	bne.w	8004334 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004220:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01b      	beq.n	8004262 <USB_ActivateEndpoint+0x48e>
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004240:	843b      	strh	r3, [r7, #32]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	8c3b      	ldrh	r3, [r7, #32]
 800424e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004256:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800425a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425e:	b29b      	uxth	r3, r3
 8004260:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	83fb      	strh	r3, [r7, #30]
 8004270:	8bfb      	ldrh	r3, [r7, #30]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d01b      	beq.n	80042b2 <USB_ActivateEndpoint+0x4de>
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4413      	add	r3, r2
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004290:	83bb      	strh	r3, [r7, #28]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	8bbb      	ldrh	r3, [r7, #28]
 800429e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c8:	837b      	strh	r3, [r7, #26]
 80042ca:	8b7b      	ldrh	r3, [r7, #26]
 80042cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042d0:	837b      	strh	r3, [r7, #26]
 80042d2:	8b7b      	ldrh	r3, [r7, #26]
 80042d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042d8:	837b      	strh	r3, [r7, #26]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	8b7b      	ldrh	r3, [r7, #26]
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004310:	833b      	strh	r3, [r7, #24]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	441a      	add	r2, r3
 800431c:	8b3b      	ldrh	r3, [r7, #24]
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]
 8004332:	e0ac      	b.n	800448e <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	82fb      	strh	r3, [r7, #22]
 8004342:	8afb      	ldrh	r3, [r7, #22]
 8004344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01b      	beq.n	8004384 <USB_ActivateEndpoint+0x5b0>
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004362:	82bb      	strh	r3, [r7, #20]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	8abb      	ldrh	r3, [r7, #20]
 8004370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004378:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	827b      	strh	r3, [r7, #18]
 8004392:	8a7b      	ldrh	r3, [r7, #18]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <USB_ActivateEndpoint+0x600>
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	823b      	strh	r3, [r7, #16]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	8a3b      	ldrh	r3, [r7, #16]
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	78db      	ldrb	r3, [r3, #3]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d020      	beq.n	800441e <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f2:	81fb      	strh	r3, [r7, #14]
 80043f4:	89fb      	ldrh	r3, [r7, #14]
 80043f6:	f083 0320 	eor.w	r3, r3, #32
 80043fa:	81fb      	strh	r3, [r7, #14]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	441a      	add	r2, r3
 8004406:	89fb      	ldrh	r3, [r7, #14]
 8004408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004418:	b29b      	uxth	r3, r3
 800441a:	8013      	strh	r3, [r2, #0]
 800441c:	e01b      	b.n	8004456 <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004434:	81bb      	strh	r3, [r7, #12]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	441a      	add	r2, r3
 8004440:	89bb      	ldrh	r3, [r7, #12]
 8004442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004452:	b29b      	uxth	r3, r3
 8004454:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	441a      	add	r2, r3
 8004478:	897b      	ldrh	r3, [r7, #10]
 800447a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800447e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800448a:	b29b      	uxth	r3, r3
 800448c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800448e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004492:	4618      	mov	r0, r3
 8004494:	376c      	adds	r7, #108	; 0x6c
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800449c:	b480      	push	{r7}
 800449e:	b08d      	sub	sp, #52	; 0x34
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	7b1b      	ldrb	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 808e 	bne.w	80045cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d044      	beq.n	8004542 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80044c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d01b      	beq.n	8004508 <USB_DeactivateEndpoint+0x6c>
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004504:	b29b      	uxth	r3, r3
 8004506:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	441a      	add	r2, r3
 800452a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800452c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	b29b      	uxth	r3, r3
 800453e:	8013      	strh	r3, [r2, #0]
 8004540:	e192      	b.n	8004868 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	853b      	strh	r3, [r7, #40]	; 0x28
 8004550:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01b      	beq.n	8004592 <USB_DeactivateEndpoint+0xf6>
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004570:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	441a      	add	r2, r3
 800457c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800457e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800458a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800458e:	b29b      	uxth	r3, r3
 8004590:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	441a      	add	r2, r3
 80045b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	8013      	strh	r3, [r2, #0]
 80045ca:	e14d      	b.n	8004868 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	785b      	ldrb	r3, [r3, #1]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 80a5 	bne.w	8004720 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80045e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01b      	beq.n	8004626 <USB_DeactivateEndpoint+0x18a>
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004604:	843b      	strh	r3, [r7, #32]
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	8c3b      	ldrh	r3, [r7, #32]
 8004612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800461e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004622:	b29b      	uxth	r3, r3
 8004624:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	83fb      	strh	r3, [r7, #30]
 8004634:	8bfb      	ldrh	r3, [r7, #30]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01b      	beq.n	8004676 <USB_DeactivateEndpoint+0x1da>
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004654:	83bb      	strh	r3, [r7, #28]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	8bbb      	ldrh	r3, [r7, #28]
 8004662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004672:	b29b      	uxth	r3, r3
 8004674:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29b      	uxth	r3, r3
 8004684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468c:	837b      	strh	r3, [r7, #26]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	441a      	add	r2, r3
 8004698:	8b7b      	ldrh	r3, [r7, #26]
 800469a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c4:	833b      	strh	r3, [r7, #24]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	8b3b      	ldrh	r3, [r7, #24]
 80046d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	82fb      	strh	r3, [r7, #22]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	441a      	add	r2, r3
 8004708:	8afb      	ldrh	r3, [r7, #22]
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]
 800471e:	e0a3      	b.n	8004868 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	82bb      	strh	r3, [r7, #20]
 800472e:	8abb      	ldrh	r3, [r7, #20]
 8004730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <USB_DeactivateEndpoint+0x2d4>
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29b      	uxth	r3, r3
 8004746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474e:	827b      	strh	r3, [r7, #18]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	8a7b      	ldrh	r3, [r7, #18]
 800475c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	823b      	strh	r3, [r7, #16]
 800477e:	8a3b      	ldrh	r3, [r7, #16]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01b      	beq.n	80047c0 <USB_DeactivateEndpoint+0x324>
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800479a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479e:	81fb      	strh	r3, [r7, #14]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047bc:	b29b      	uxth	r3, r3
 80047be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d6:	81bb      	strh	r3, [r7, #12]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	441a      	add	r2, r3
 80047e2:	89bb      	ldrh	r3, [r7, #12]
 80047e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480e:	817b      	strh	r3, [r7, #10]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	441a      	add	r2, r3
 800481a:	897b      	ldrh	r3, [r7, #10]
 800481c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800482c:	b29b      	uxth	r3, r3
 800482e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	813b      	strh	r3, [r7, #8]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	441a      	add	r2, r3
 8004852:	893b      	ldrh	r3, [r7, #8]
 8004854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800485c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004864:	b29b      	uxth	r3, r3
 8004866:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3734      	adds	r7, #52	; 0x34
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b0ce      	sub	sp, #312	; 0x138
 8004878:	af00      	add	r7, sp, #0
 800487a:	1d3b      	adds	r3, r7, #4
 800487c:	6018      	str	r0, [r3, #0]
 800487e:	463b      	mov	r3, r7
 8004880:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004882:	463b      	mov	r3, r7
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	785b      	ldrb	r3, [r3, #1]
 8004888:	2b01      	cmp	r3, #1
 800488a:	f040 873e 	bne.w	800570a <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800488e:	463b      	mov	r3, r7
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	463b      	mov	r3, r7
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	429a      	cmp	r2, r3
 800489c:	d905      	bls.n	80048aa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800489e:	463b      	mov	r3, r7
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80048a8:	e004      	b.n	80048b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80048aa:	463b      	mov	r3, r7
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80048b4:	463b      	mov	r3, r7
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	7b1b      	ldrb	r3, [r3, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d12e      	bne.n	800491c <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80048be:	463b      	mov	r3, r7
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6959      	ldr	r1, [r3, #20]
 80048c4:	463b      	mov	r3, r7
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	88da      	ldrh	r2, [r3, #6]
 80048ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	1d38      	adds	r0, r7, #4
 80048d2:	6800      	ldr	r0, [r0, #0]
 80048d4:	f001 fc13 	bl	80060fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048d8:	1d3b      	adds	r3, r7, #4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048f0:	4413      	add	r3, r2
 80048f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048f6:	463b      	mov	r3, r7
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	011a      	lsls	r2, r3, #4
 80048fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004902:	4413      	add	r3, r2
 8004904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800490c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004910:	b29a      	uxth	r2, r3
 8004912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	f000 bec2 	b.w	80056a0 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800491c:	463b      	mov	r3, r7
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	78db      	ldrb	r3, [r3, #3]
 8004922:	2b02      	cmp	r3, #2
 8004924:	f040 836a 	bne.w	8004ffc <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	463b      	mov	r3, r7
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	429a      	cmp	r2, r3
 8004936:	f240 830e 	bls.w	8004f56 <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	463b      	mov	r3, r7
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b29b      	uxth	r3, r3
 800494c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004954:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	463b      	mov	r3, r7
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800496a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800496e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004972:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800497a:	b29b      	uxth	r3, r3
 800497c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800497e:	463b      	mov	r3, r7
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004988:	1ad2      	subs	r2, r2, r3
 800498a:	463b      	mov	r3, r7
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004990:	1d3b      	adds	r3, r7, #4
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	463b      	mov	r3, r7
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 817c 	beq.w	8004ca4 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049ac:	1d3b      	adds	r3, r7, #4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049b4:	463b      	mov	r3, r7
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d16f      	bne.n	8004a9e <USB_EPStartXfer+0x22a>
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049c6:	1d3b      	adds	r3, r7, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049d6:	4413      	add	r3, r2
 80049d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049dc:	463b      	mov	r3, r7
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	011a      	lsls	r2, r3, #4
 80049e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049e8:	4413      	add	r3, r2
 80049ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <USB_EPStartXfer+0x1b4>
 80049fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e05b      	b.n	8004ae0 <USB_EPStartXfer+0x26c>
 8004a28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a2e:	d818      	bhi.n	8004a62 <USB_EPStartXfer+0x1ee>
 8004a30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <USB_EPStartXfer+0x1dc>
 8004a46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	029b      	lsls	r3, r3, #10
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e03e      	b.n	8004ae0 <USB_EPStartXfer+0x26c>
 8004a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d104      	bne.n	8004a82 <USB_EPStartXfer+0x20e>
 8004a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004a82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	e020      	b.n	8004ae0 <USB_EPStartXfer+0x26c>
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d11b      	bne.n	8004ae0 <USB_EPStartXfer+0x26c>
 8004aa8:	1d3b      	adds	r3, r7, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ab8:	4413      	add	r3, r2
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004abe:	463b      	mov	r3, r7
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	011a      	lsls	r2, r3, #4
 8004ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004aca:	4413      	add	r3, r2
 8004acc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ad0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ade:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	895b      	ldrh	r3, [r3, #10]
 8004ae6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aea:	463b      	mov	r3, r7
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6959      	ldr	r1, [r3, #20]
 8004af0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004afa:	1d38      	adds	r0, r7, #4
 8004afc:	6800      	ldr	r0, [r0, #0]
 8004afe:	f001 fafe 	bl	80060fe <USB_WritePMA>
            ep->xfer_buff += len;
 8004b02:	463b      	mov	r3, r7
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b0c:	441a      	add	r2, r3
 8004b0e:	463b      	mov	r3, r7
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b14:	463b      	mov	r3, r7
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	463b      	mov	r3, r7
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d909      	bls.n	8004b38 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 8004b24:	463b      	mov	r3, r7
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a1a      	ldr	r2, [r3, #32]
 8004b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b2e:	1ad2      	subs	r2, r2, r3
 8004b30:	463b      	mov	r3, r7
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	621a      	str	r2, [r3, #32]
 8004b36:	e008      	b.n	8004b4a <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8004b42:	463b      	mov	r3, r7
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b4a:	463b      	mov	r3, r7
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	785b      	ldrb	r3, [r3, #1]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d16f      	bne.n	8004c34 <USB_EPStartXfer+0x3c0>
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b72:	463b      	mov	r3, r7
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	011a      	lsls	r2, r3, #4
 8004b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7e:	4413      	add	r3, r2
 8004b80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d116      	bne.n	8004bbe <USB_EPStartXfer+0x34a>
 8004b90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bba:	801a      	strh	r2, [r3, #0]
 8004bbc:	e05f      	b.n	8004c7e <USB_EPStartXfer+0x40a>
 8004bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bc4:	d818      	bhi.n	8004bf8 <USB_EPStartXfer+0x384>
 8004bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <USB_EPStartXfer+0x372>
 8004bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004be0:	3301      	adds	r3, #1
 8004be2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	029b      	lsls	r3, r3, #10
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf4:	801a      	strh	r2, [r3, #0]
 8004bf6:	e042      	b.n	8004c7e <USB_EPStartXfer+0x40a>
 8004bf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bfc:	095b      	lsrs	r3, r3, #5
 8004bfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <USB_EPStartXfer+0x3a4>
 8004c0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c12:	3b01      	subs	r3, #1
 8004c14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	029b      	lsls	r3, r3, #10
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	e024      	b.n	8004c7e <USB_EPStartXfer+0x40a>
 8004c34:	463b      	mov	r3, r7
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d11f      	bne.n	8004c7e <USB_EPStartXfer+0x40a>
 8004c3e:	1d3b      	adds	r3, r7, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c56:	4413      	add	r3, r2
 8004c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	011a      	lsls	r2, r3, #4
 8004c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c68:	4413      	add	r3, r2
 8004c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c7e:	463b      	mov	r3, r7
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	891b      	ldrh	r3, [r3, #8]
 8004c84:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c88:	463b      	mov	r3, r7
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6959      	ldr	r1, [r3, #20]
 8004c8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004c98:	1d38      	adds	r0, r7, #4
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	f001 fa2f 	bl	80060fe <USB_WritePMA>
 8004ca0:	f000 bcfe 	b.w	80056a0 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d164      	bne.n	8004d78 <USB_EPStartXfer+0x504>
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cc2:	4413      	add	r3, r2
 8004cc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cc6:	463b      	mov	r3, r7
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	011a      	lsls	r2, r3, #4
 8004cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d112      	bne.n	8004d06 <USB_EPStartXfer+0x492>
 8004ce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	e057      	b.n	8004db6 <USB_EPStartXfer+0x542>
 8004d06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d0c:	d817      	bhi.n	8004d3e <USB_EPStartXfer+0x4ca>
 8004d0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <USB_EPStartXfer+0x4ba>
 8004d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d28:	3301      	adds	r3, #1
 8004d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d3a:	801a      	strh	r2, [r3, #0]
 8004d3c:	e03b      	b.n	8004db6 <USB_EPStartXfer+0x542>
 8004d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d104      	bne.n	8004d5e <USB_EPStartXfer+0x4ea>
 8004d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	e01e      	b.n	8004db6 <USB_EPStartXfer+0x542>
 8004d78:	463b      	mov	r3, r7
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d119      	bne.n	8004db6 <USB_EPStartXfer+0x542>
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	677b      	str	r3, [r7, #116]	; 0x74
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d96:	4413      	add	r3, r2
 8004d98:	677b      	str	r3, [r7, #116]	; 0x74
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	011a      	lsls	r2, r3, #4
 8004da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da4:	4413      	add	r3, r2
 8004da6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004daa:	673b      	str	r3, [r7, #112]	; 0x70
 8004dac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004db6:	463b      	mov	r3, r7
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	891b      	ldrh	r3, [r3, #8]
 8004dbc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004dd0:	1d38      	adds	r0, r7, #4
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	f001 f993 	bl	80060fe <USB_WritePMA>
            ep->xfer_buff += len;
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004de2:	441a      	add	r2, r3
 8004de4:	463b      	mov	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dea:	463b      	mov	r3, r7
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	463b      	mov	r3, r7
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d909      	bls.n	8004e0e <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e04:	1ad2      	subs	r2, r2, r3
 8004e06:	463b      	mov	r3, r7
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	621a      	str	r2, [r3, #32]
 8004e0c:	e008      	b.n	8004e20 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e0e:	463b      	mov	r3, r7
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8004e18:	463b      	mov	r3, r7
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e20:	1d3b      	adds	r3, r7, #4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d164      	bne.n	8004efa <USB_EPStartXfer+0x686>
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e44:	4413      	add	r3, r2
 8004e46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	011a      	lsls	r2, r3, #4
 8004e50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e58:	667b      	str	r3, [r7, #100]	; 0x64
 8004e5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d112      	bne.n	8004e88 <USB_EPStartXfer+0x614>
 8004e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e054      	b.n	8004f32 <USB_EPStartXfer+0x6be>
 8004e88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e8e:	d817      	bhi.n	8004ec0 <USB_EPStartXfer+0x64c>
 8004e90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <USB_EPStartXfer+0x63c>
 8004ea6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	029b      	lsls	r3, r3, #10
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e038      	b.n	8004f32 <USB_EPStartXfer+0x6be>
 8004ec0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004eca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ece:	f003 031f 	and.w	r3, r3, #31
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <USB_EPStartXfer+0x66c>
 8004ed6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004eda:	3b01      	subs	r3, #1
 8004edc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ee0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e01b      	b.n	8004f32 <USB_EPStartXfer+0x6be>
 8004efa:	463b      	mov	r3, r7
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d116      	bne.n	8004f32 <USB_EPStartXfer+0x6be>
 8004f04:	1d3b      	adds	r3, r7, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f12:	4413      	add	r3, r2
 8004f14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	011a      	lsls	r2, r3, #4
 8004f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f26:	663b      	str	r3, [r7, #96]	; 0x60
 8004f28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f32:	463b      	mov	r3, r7
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	895b      	ldrh	r3, [r3, #10]
 8004f38:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6959      	ldr	r1, [r3, #20]
 8004f42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004f4c:	1d38      	adds	r0, r7, #4
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	f001 f8d5 	bl	80060fe <USB_WritePMA>
 8004f54:	e3a4      	b.n	80056a0 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004f56:	463b      	mov	r3, r7
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	463b      	mov	r3, r7
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004faa:	1d3b      	adds	r3, r7, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb8:	4413      	add	r3, r2
 8004fba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	011a      	lsls	r2, r3, #4
 8004fc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fcc:	657b      	str	r3, [r7, #84]	; 0x54
 8004fce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004fd8:	463b      	mov	r3, r7
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	891b      	ldrh	r3, [r3, #8]
 8004fde:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6959      	ldr	r1, [r3, #20]
 8004fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8004ff2:	1d38      	adds	r0, r7, #4
 8004ff4:	6800      	ldr	r0, [r0, #0]
 8004ff6:	f001 f882 	bl	80060fe <USB_WritePMA>
 8004ffa:	e351      	b.n	80056a0 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	463b      	mov	r3, r7
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800501a:	1d3b      	adds	r3, r7, #4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	463b      	mov	r3, r7
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800502c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005034:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	b29b      	uxth	r3, r3
 800503e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005040:	463b      	mov	r3, r7
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1a      	ldr	r2, [r3, #32]
 8005046:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005052:	1d3b      	adds	r3, r7, #4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8178 	beq.w	800535e <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800506e:	1d3b      	adds	r3, r7, #4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005074:	463b      	mov	r3, r7
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d164      	bne.n	8005148 <USB_EPStartXfer+0x8d4>
 800507e:	1d3b      	adds	r3, r7, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	64bb      	str	r3, [r7, #72]	; 0x48
 8005084:	1d3b      	adds	r3, r7, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005092:	4413      	add	r3, r2
 8005094:	64bb      	str	r3, [r7, #72]	; 0x48
 8005096:	463b      	mov	r3, r7
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	011a      	lsls	r2, r3, #4
 800509e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a0:	4413      	add	r3, r2
 80050a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050a6:	647b      	str	r3, [r7, #68]	; 0x44
 80050a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d112      	bne.n	80050d6 <USB_EPStartXfer+0x862>
 80050b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050be:	801a      	strh	r2, [r3, #0]
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	e054      	b.n	8005180 <USB_EPStartXfer+0x90c>
 80050d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050da:	2b3e      	cmp	r3, #62	; 0x3e
 80050dc:	d817      	bhi.n	800510e <USB_EPStartXfer+0x89a>
 80050de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d004      	beq.n	80050fe <USB_EPStartXfer+0x88a>
 80050f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80050fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005102:	b29b      	uxth	r3, r3
 8005104:	029b      	lsls	r3, r3, #10
 8005106:	b29a      	uxth	r2, r3
 8005108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	e038      	b.n	8005180 <USB_EPStartXfer+0x90c>
 800510e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005118:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800511c:	f003 031f 	and.w	r3, r3, #31
 8005120:	2b00      	cmp	r3, #0
 8005122:	d104      	bne.n	800512e <USB_EPStartXfer+0x8ba>
 8005124:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005128:	3b01      	subs	r3, #1
 800512a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800512e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005132:	b29b      	uxth	r3, r3
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	b29b      	uxth	r3, r3
 8005138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800513c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005140:	b29a      	uxth	r2, r3
 8005142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e01b      	b.n	8005180 <USB_EPStartXfer+0x90c>
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d116      	bne.n	8005180 <USB_EPStartXfer+0x90c>
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800515a:	b29b      	uxth	r3, r3
 800515c:	461a      	mov	r2, r3
 800515e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005160:	4413      	add	r3, r2
 8005162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	011a      	lsls	r2, r3, #4
 800516c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516e:	4413      	add	r3, r2
 8005170:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005174:	643b      	str	r3, [r7, #64]	; 0x40
 8005176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800517a:	b29a      	uxth	r2, r3
 800517c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800517e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005180:	463b      	mov	r3, r7
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	895b      	ldrh	r3, [r3, #10]
 8005186:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518a:	463b      	mov	r3, r7
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6959      	ldr	r1, [r3, #20]
 8005190:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005194:	b29b      	uxth	r3, r3
 8005196:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800519a:	1d38      	adds	r0, r7, #4
 800519c:	6800      	ldr	r0, [r0, #0]
 800519e:	f000 ffae 	bl	80060fe <USB_WritePMA>
          ep->xfer_buff += len;
 80051a2:	463b      	mov	r3, r7
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ac:	441a      	add	r2, r3
 80051ae:	463b      	mov	r3, r7
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80051b4:	463b      	mov	r3, r7
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	463b      	mov	r3, r7
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d909      	bls.n	80051d8 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 80051c4:	463b      	mov	r3, r7
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a1a      	ldr	r2, [r3, #32]
 80051ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	463b      	mov	r3, r7
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	621a      	str	r2, [r3, #32]
 80051d6:	e008      	b.n	80051ea <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 80051e2:	463b      	mov	r3, r7
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2200      	movs	r2, #0
 80051e8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80051ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f000 8256 	beq.w	80056a0 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d172      	bne.n	80052e4 <USB_EPStartXfer+0xa70>
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	4413      	add	r3, r2
 8005214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005216:	463b      	mov	r3, r7
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	4413      	add	r3, r2
 8005222:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005226:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005230:	2b00      	cmp	r3, #0
 8005232:	d11a      	bne.n	800526a <USB_EPStartXfer+0x9f6>
 8005234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005242:	b29a      	uxth	r2, r3
 8005244:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525e:	b29a      	uxth	r2, r3
 8005260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e067      	b.n	800533a <USB_EPStartXfer+0xac6>
 800526a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800526e:	2b3e      	cmp	r3, #62	; 0x3e
 8005270:	d819      	bhi.n	80052a6 <USB_EPStartXfer+0xa32>
 8005272:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800527c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d004      	beq.n	8005292 <USB_EPStartXfer+0xa1e>
 8005288:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800528c:	3301      	adds	r3, #1
 800528e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005296:	b29b      	uxth	r3, r3
 8005298:	029b      	lsls	r3, r3, #10
 800529a:	b29a      	uxth	r2, r3
 800529c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e049      	b.n	800533a <USB_EPStartXfer+0xac6>
 80052a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d104      	bne.n	80052c6 <USB_EPStartXfer+0xa52>
 80052bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052c0:	3b01      	subs	r3, #1
 80052c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80052c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	029b      	lsls	r3, r3, #10
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d8:	b29a      	uxth	r2, r3
 80052da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e02a      	b.n	800533a <USB_EPStartXfer+0xac6>
 80052e4:	463b      	mov	r3, r7
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d125      	bne.n	800533a <USB_EPStartXfer+0xac6>
 80052ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052f2:	1d3a      	adds	r2, r7, #4
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005300:	b29b      	uxth	r3, r3
 8005302:	4619      	mov	r1, r3
 8005304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005308:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	440a      	add	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	011a      	lsls	r2, r3, #4
 800531a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4413      	add	r3, r2
 8005322:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005330:	b29a      	uxth	r2, r3
 8005332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800533a:	463b      	mov	r3, r7
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	891b      	ldrh	r3, [r3, #8]
 8005340:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6959      	ldr	r1, [r3, #20]
 800534a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800534e:	b29b      	uxth	r3, r3
 8005350:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005354:	1d38      	adds	r0, r7, #4
 8005356:	6800      	ldr	r0, [r0, #0]
 8005358:	f000 fed1 	bl	80060fe <USB_WritePMA>
 800535c:	e1a0      	b.n	80056a0 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800535e:	463b      	mov	r3, r7
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	785b      	ldrb	r3, [r3, #1]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d17a      	bne.n	800545e <USB_EPStartXfer+0xbea>
 8005368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800536c:	1d3a      	adds	r2, r7, #4
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	1d3b      	adds	r3, r7, #4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800537a:	b29b      	uxth	r3, r3
 800537c:	4619      	mov	r1, r3
 800537e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005382:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	440a      	add	r2, r1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	463b      	mov	r3, r7
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	011a      	lsls	r2, r3, #4
 8005394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4413      	add	r3, r2
 800539c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80053a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d11a      	bne.n	80053e4 <USB_EPStartXfer+0xb70>
 80053ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053bc:	b29a      	uxth	r2, r3
 80053be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d8:	b29a      	uxth	r2, r3
 80053da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	801a      	strh	r2, [r3, #0]
 80053e2:	e067      	b.n	80054b4 <USB_EPStartXfer+0xc40>
 80053e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053e8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ea:	d819      	bhi.n	8005420 <USB_EPStartXfer+0xbac>
 80053ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053f0:	085b      	lsrs	r3, r3, #1
 80053f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <USB_EPStartXfer+0xb98>
 8005402:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005406:	3301      	adds	r3, #1
 8005408:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800540c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005410:	b29b      	uxth	r3, r3
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	b29a      	uxth	r2, r3
 8005416:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e049      	b.n	80054b4 <USB_EPStartXfer+0xc40>
 8005420:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800542a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_EPStartXfer+0xbcc>
 8005436:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800543a:	3b01      	subs	r3, #1
 800543c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005440:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29b      	uxth	r3, r3
 800544a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005452:	b29a      	uxth	r2, r3
 8005454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	e02a      	b.n	80054b4 <USB_EPStartXfer+0xc40>
 800545e:	463b      	mov	r3, r7
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d125      	bne.n	80054b4 <USB_EPStartXfer+0xc40>
 8005468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800546c:	1d3a      	adds	r2, r7, #4
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	1d3b      	adds	r3, r7, #4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547a:	b29b      	uxth	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005482:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	440a      	add	r2, r1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4413      	add	r3, r2
 800549c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054a0:	f107 0320 	add.w	r3, r7, #32
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	f107 0320 	add.w	r3, r7, #32
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054b4:	463b      	mov	r3, r7
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	891b      	ldrh	r3, [r3, #8]
 80054ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6959      	ldr	r1, [r3, #20]
 80054c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80054ce:	1d38      	adds	r0, r7, #4
 80054d0:	6800      	ldr	r0, [r0, #0]
 80054d2:	f000 fe14 	bl	80060fe <USB_WritePMA>
          ep->xfer_buff += len;
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054e0:	441a      	add	r2, r3
 80054e2:	463b      	mov	r3, r7
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6a1a      	ldr	r2, [r3, #32]
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d909      	bls.n	800550c <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 80054f8:	463b      	mov	r3, r7
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a1a      	ldr	r2, [r3, #32]
 80054fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	463b      	mov	r3, r7
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	621a      	str	r2, [r3, #32]
 800550a:	e008      	b.n	800551e <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2200      	movs	r2, #0
 800551c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800551e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80bc 	beq.w	80056a0 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005528:	f107 031c 	add.w	r3, r7, #28
 800552c:	1d3a      	adds	r2, r7, #4
 800552e:	6812      	ldr	r2, [r2, #0]
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	463b      	mov	r3, r7
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d17a      	bne.n	8005632 <USB_EPStartXfer+0xdbe>
 800553c:	f107 0318 	add.w	r3, r7, #24
 8005540:	1d3a      	adds	r2, r7, #4
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	4619      	mov	r1, r3
 8005552:	f107 0318 	add.w	r3, r7, #24
 8005556:	f107 0218 	add.w	r2, r7, #24
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	440a      	add	r2, r1
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	463b      	mov	r3, r7
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	011a      	lsls	r2, r3, #4
 8005568:	f107 0318 	add.w	r3, r7, #24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4413      	add	r3, r2
 8005570:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11a      	bne.n	80055b8 <USB_EPStartXfer+0xd44>
 8005582:	f107 0314 	add.w	r3, r7, #20
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005590:	b29a      	uxth	r2, r3
 8005592:	f107 0314 	add.w	r3, r7, #20
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	f107 0314 	add.w	r3, r7, #20
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	f107 0314 	add.w	r3, r7, #20
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	801a      	strh	r2, [r3, #0]
 80055b6:	e062      	b.n	800567e <USB_EPStartXfer+0xe0a>
 80055b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055bc:	2b3e      	cmp	r3, #62	; 0x3e
 80055be:	d819      	bhi.n	80055f4 <USB_EPStartXfer+0xd80>
 80055c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d004      	beq.n	80055e0 <USB_EPStartXfer+0xd6c>
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055da:	3301      	adds	r3, #1
 80055dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	f107 0314 	add.w	r3, r7, #20
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	801a      	strh	r2, [r3, #0]
 80055f2:	e044      	b.n	800567e <USB_EPStartXfer+0xe0a>
 80055f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <USB_EPStartXfer+0xda0>
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560e:	3b01      	subs	r3, #1
 8005610:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005618:	b29b      	uxth	r3, r3
 800561a:	029b      	lsls	r3, r3, #10
 800561c:	b29b      	uxth	r3, r3
 800561e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005626:	b29a      	uxth	r2, r3
 8005628:	f107 0314 	add.w	r3, r7, #20
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	801a      	strh	r2, [r3, #0]
 8005630:	e025      	b.n	800567e <USB_EPStartXfer+0xe0a>
 8005632:	463b      	mov	r3, r7
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	785b      	ldrb	r3, [r3, #1]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d120      	bne.n	800567e <USB_EPStartXfer+0xe0a>
 800563c:	1d3b      	adds	r3, r7, #4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	4619      	mov	r1, r3
 8005648:	f107 031c 	add.w	r3, r7, #28
 800564c:	f107 021c 	add.w	r2, r7, #28
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	440a      	add	r2, r1
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	463b      	mov	r3, r7
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	011a      	lsls	r2, r3, #4
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4413      	add	r3, r2
 8005666:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800566a:	f107 0310 	add.w	r3, r7, #16
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005674:	b29a      	uxth	r2, r3
 8005676:	f107 0310 	add.w	r3, r7, #16
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	895b      	ldrh	r3, [r3, #10]
 8005684:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005688:	463b      	mov	r3, r7
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005692:	b29b      	uxth	r3, r3
 8005694:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005698:	1d38      	adds	r0, r7, #4
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	f000 fd2f 	bl	80060fe <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	463b      	mov	r3, r7
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f107 020e 	add.w	r2, r7, #14
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056be:	8013      	strh	r3, [r2, #0]
 80056c0:	f107 030e 	add.w	r3, r7, #14
 80056c4:	f107 020e 	add.w	r2, r7, #14
 80056c8:	8812      	ldrh	r2, [r2, #0]
 80056ca:	f082 0210 	eor.w	r2, r2, #16
 80056ce:	801a      	strh	r2, [r3, #0]
 80056d0:	f107 030e 	add.w	r3, r7, #14
 80056d4:	f107 020e 	add.w	r2, r7, #14
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	f082 0220 	eor.w	r2, r2, #32
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	f107 030e 	add.w	r3, r7, #14
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005704:	b29b      	uxth	r3, r3
 8005706:	8013      	strh	r3, [r2, #0]
 8005708:	e3b5      	b.n	8005e76 <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800570a:	463b      	mov	r3, r7
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	7b1b      	ldrb	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8090 	bne.w	8005836 <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	463b      	mov	r3, r7
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d90e      	bls.n	8005744 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8005726:	463b      	mov	r3, r7
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800573a:	1ad2      	subs	r2, r2, r3
 800573c:	463b      	mov	r3, r7
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	619a      	str	r2, [r3, #24]
 8005742:	e008      	b.n	8005756 <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8005744:	463b      	mov	r3, r7
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 800574e:	463b      	mov	r3, r7
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2200      	movs	r2, #0
 8005754:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005766:	b29b      	uxth	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800576e:	4413      	add	r3, r2
 8005770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	011a      	lsls	r2, r3, #4
 800577c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005780:	4413      	add	r3, r2
 8005782:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800578a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800578e:	2b00      	cmp	r3, #0
 8005790:	d116      	bne.n	80057c0 <USB_EPStartXfer+0xf4c>
 8005792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800579e:	b29a      	uxth	r2, r3
 80057a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e32c      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
 80057c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057c4:	2b3e      	cmp	r3, #62	; 0x3e
 80057c6:	d818      	bhi.n	80057fa <USB_EPStartXfer+0xf86>
 80057c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057cc:	085b      	lsrs	r3, r3, #1
 80057ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d004      	beq.n	80057e8 <USB_EPStartXfer+0xf74>
 80057de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057e2:	3301      	adds	r3, #1
 80057e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	e30f      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
 80057fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005804:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	2b00      	cmp	r3, #0
 800580e:	d104      	bne.n	800581a <USB_EPStartXfer+0xfa6>
 8005810:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005814:	3b01      	subs	r3, #1
 8005816:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800581a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800581e:	b29b      	uxth	r3, r3
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	b29b      	uxth	r3, r3
 8005824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800582c:	b29a      	uxth	r2, r3
 800582e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e2f1      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005836:	463b      	mov	r3, r7
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	2b02      	cmp	r3, #2
 800583e:	f040 818f 	bne.w	8005b60 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005842:	463b      	mov	r3, r7
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	785b      	ldrb	r3, [r3, #1]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d175      	bne.n	8005938 <USB_EPStartXfer+0x10c4>
 800584c:	1d3b      	adds	r3, r7, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005854:	1d3b      	adds	r3, r7, #4
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005864:	4413      	add	r3, r2
 8005866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800586a:	463b      	mov	r3, r7
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	011a      	lsls	r2, r3, #4
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005876:	4413      	add	r3, r2
 8005878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800587c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d116      	bne.n	80058b8 <USB_EPStartXfer+0x1044>
 800588a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005896:	b29a      	uxth	r2, r3
 8005898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	e065      	b.n	8005984 <USB_EPStartXfer+0x1110>
 80058b8:	463b      	mov	r3, r7
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	2b3e      	cmp	r3, #62	; 0x3e
 80058c0:	d81a      	bhi.n	80058f8 <USB_EPStartXfer+0x1084>
 80058c2:	463b      	mov	r3, r7
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <USB_EPStartXfer+0x1072>
 80058dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e0:	3301      	adds	r3, #1
 80058e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80058e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	029b      	lsls	r3, r3, #10
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	e045      	b.n	8005984 <USB_EPStartXfer+0x1110>
 80058f8:	463b      	mov	r3, r7
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <USB_EPStartXfer+0x10a8>
 8005912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005916:	3b01      	subs	r3, #1
 8005918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800591c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005920:	b29b      	uxth	r3, r3
 8005922:	029b      	lsls	r3, r3, #10
 8005924:	b29b      	uxth	r3, r3
 8005926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800592a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592e:	b29a      	uxth	r2, r3
 8005930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	e025      	b.n	8005984 <USB_EPStartXfer+0x1110>
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d120      	bne.n	8005984 <USB_EPStartXfer+0x1110>
 8005942:	1d3b      	adds	r3, r7, #4
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800594a:	1d3b      	adds	r3, r7, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800595a:	4413      	add	r3, r2
 800595c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	011a      	lsls	r2, r3, #4
 8005968:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800596c:	4413      	add	r3, r2
 800596e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	b29a      	uxth	r2, r3
 800597e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	1d3b      	adds	r3, r7, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800598c:	463b      	mov	r3, r7
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d175      	bne.n	8005a82 <USB_EPStartXfer+0x120e>
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059ae:	4413      	add	r3, r2
 80059b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059c0:	4413      	add	r3, r2
 80059c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d116      	bne.n	8005a02 <USB_EPStartXfer+0x118e>
 80059d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e061      	b.n	8005ac6 <USB_EPStartXfer+0x1252>
 8005a02:	463b      	mov	r3, r7
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b3e      	cmp	r3, #62	; 0x3e
 8005a0a:	d81a      	bhi.n	8005a42 <USB_EPStartXfer+0x11ce>
 8005a0c:	463b      	mov	r3, r7
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a18:	463b      	mov	r3, r7
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <USB_EPStartXfer+0x11bc>
 8005a26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e041      	b.n	8005ac6 <USB_EPStartXfer+0x1252>
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	095b      	lsrs	r3, r3, #5
 8005a4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a4e:	463b      	mov	r3, r7
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 031f 	and.w	r3, r3, #31
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <USB_EPStartXfer+0x11f2>
 8005a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a60:	3b01      	subs	r3, #1
 8005a62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005a66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	029b      	lsls	r3, r3, #10
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e021      	b.n	8005ac6 <USB_EPStartXfer+0x1252>
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d11c      	bne.n	8005ac6 <USB_EPStartXfer+0x1252>
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005aa2:	463b      	mov	r3, r7
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	011a      	lsls	r2, r3, #4
 8005aaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005aae:	4413      	add	r3, r2
 8005ab0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ac4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 81a4 	beq.w	8005e1a <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005ae6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <USB_EPStartXfer+0x128a>
 8005af2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10d      	bne.n	8005b1a <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005afe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f040 8187 	bne.w	8005e1a <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f040 8180 	bne.w	8005e1a <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b1a:	1d3b      	adds	r3, r7, #4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	463b      	mov	r3, r7
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b34:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8005b38:	1d3b      	adds	r3, r7, #4
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	441a      	add	r2, r3
 8005b46:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8005b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	8013      	strh	r3, [r2, #0]
 8005b5e:	e15c      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005b60:	463b      	mov	r3, r7
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	78db      	ldrb	r3, [r3, #3]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	f040 8155 	bne.w	8005e16 <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d90e      	bls.n	8005b9a <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 8005b86:	463b      	mov	r3, r7
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b90:	1ad2      	subs	r2, r2, r3
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	619a      	str	r2, [r3, #24]
 8005b98:	e008      	b.n	8005bac <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 8005b9a:	463b      	mov	r3, r7
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005bac:	463b      	mov	r3, r7
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d16f      	bne.n	8005c96 <USB_EPStartXfer+0x1422>
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bbe:	1d3b      	adds	r3, r7, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bce:	4413      	add	r3, r2
 8005bd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bd4:	463b      	mov	r3, r7
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005be6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d116      	bne.n	8005c20 <USB_EPStartXfer+0x13ac>
 8005bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	e05f      	b.n	8005ce0 <USB_EPStartXfer+0x146c>
 8005c20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c24:	2b3e      	cmp	r3, #62	; 0x3e
 8005c26:	d818      	bhi.n	8005c5a <USB_EPStartXfer+0x13e6>
 8005c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <USB_EPStartXfer+0x13d4>
 8005c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	e042      	b.n	8005ce0 <USB_EPStartXfer+0x146c>
 8005c5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <USB_EPStartXfer+0x1406>
 8005c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c74:	3b01      	subs	r3, #1
 8005c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e024      	b.n	8005ce0 <USB_EPStartXfer+0x146c>
 8005c96:	463b      	mov	r3, r7
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d11f      	bne.n	8005ce0 <USB_EPStartXfer+0x146c>
 8005ca0:	1d3b      	adds	r3, r7, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ca8:	1d3b      	adds	r3, r7, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	4413      	add	r3, r2
 8005cba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	011a      	lsls	r2, r3, #4
 8005cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cca:	4413      	add	r3, r2
 8005ccc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d16f      	bne.n	8005dd2 <USB_EPStartXfer+0x155e>
 8005cf2:	1d3b      	adds	r3, r7, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cfa:	1d3b      	adds	r3, r7, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	011a      	lsls	r2, r3, #4
 8005d18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d116      	bne.n	8005d5c <USB_EPStartXfer+0x14e8>
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e05e      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
 8005d5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d60:	2b3e      	cmp	r3, #62	; 0x3e
 8005d62:	d818      	bhi.n	8005d96 <USB_EPStartXfer+0x1522>
 8005d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d68:	085b      	lsrs	r3, r3, #1
 8005d6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <USB_EPStartXfer+0x1510>
 8005d7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	029b      	lsls	r3, r3, #10
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	e041      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
 8005d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d104      	bne.n	8005db6 <USB_EPStartXfer+0x1542>
 8005dac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005db0:	3b01      	subs	r3, #1
 8005db2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005db6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	e023      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d11e      	bne.n	8005e1a <USB_EPStartXfer+0x15a6>
 8005ddc:	1d3b      	adds	r3, r7, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dec:	4413      	add	r3, r2
 8005dee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005df2:	463b      	mov	r3, r7
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	011a      	lsls	r2, r3, #4
 8005dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dfe:	4413      	add	r3, r2
 8005e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e001      	b.n	8005e1a <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e02e      	b.n	8005e78 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	463b      	mov	r3, r7
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e34:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005e38:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005e3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e40:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005e44:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005e48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e4c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8005e50:	1d3b      	adds	r3, r7, #4
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b085      	sub	sp, #20
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d020      	beq.n	8005ed6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eaa:	81fb      	strh	r3, [r7, #14]
 8005eac:	89fb      	ldrh	r3, [r7, #14]
 8005eae:	f083 0310 	eor.w	r3, r3, #16
 8005eb2:	81fb      	strh	r3, [r7, #14]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
 8005ed4:	e01f      	b.n	8005f16 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	81bb      	strh	r3, [r7, #12]
 8005eee:	89bb      	ldrh	r3, [r7, #12]
 8005ef0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ef4:	81bb      	strh	r3, [r7, #12]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	89bb      	ldrh	r3, [r7, #12]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	7b1b      	ldrb	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 809d 	bne.w	8006070 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	785b      	ldrb	r3, [r3, #1]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d04c      	beq.n	8005fd8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	82fb      	strh	r3, [r7, #22]
 8005f4c:	8afb      	ldrh	r3, [r7, #22]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01b      	beq.n	8005f8e <USB_EPClearStall+0x6c>
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	82bb      	strh	r3, [r7, #20]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	8abb      	ldrh	r3, [r7, #20]
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	78db      	ldrb	r3, [r3, #3]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d06c      	beq.n	8006070 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	827b      	strh	r3, [r7, #18]
 8005fae:	8a7b      	ldrh	r3, [r7, #18]
 8005fb0:	f083 0320 	eor.w	r3, r3, #32
 8005fb4:	827b      	strh	r3, [r7, #18]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	8a7b      	ldrh	r3, [r7, #18]
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	e04b      	b.n	8006070 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	823b      	strh	r3, [r7, #16]
 8005fe6:	8a3b      	ldrh	r3, [r7, #16]
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_EPClearStall+0x106>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	81fb      	strh	r3, [r7, #14]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	89fb      	ldrh	r3, [r7, #14]
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800603a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603e:	81bb      	strh	r3, [r7, #12]
 8006040:	89bb      	ldrh	r3, [r7, #12]
 8006042:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006046:	81bb      	strh	r3, [r7, #12]
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800604e:	81bb      	strh	r3, [r7, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	441a      	add	r2, r3
 800605a:	89bb      	ldrh	r3, [r7, #12]
 800605c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	b29b      	uxth	r3, r3
 800606e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	bc80      	pop	{r7}
 800607a:	4770      	bx	lr

0800607c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d103      	bne.n	8006096 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2280      	movs	r2, #128	; 0x80
 8006092:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr

080060a2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060d8:	b29b      	uxth	r3, r3
 80060da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80060fe:	b480      	push	{r7}
 8006100:	b08d      	sub	sp, #52	; 0x34
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	4611      	mov	r1, r2
 800610a:	461a      	mov	r2, r3
 800610c:	460b      	mov	r3, r1
 800610e:	80fb      	strh	r3, [r7, #6]
 8006110:	4613      	mov	r3, r2
 8006112:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006114:	88bb      	ldrh	r3, [r7, #4]
 8006116:	3301      	adds	r3, #1
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006124:	88fb      	ldrh	r3, [r7, #6]
 8006126:	005a      	lsls	r2, r3, #1
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006136:	e01e      	b.n	8006176 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	3301      	adds	r3, #1
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	b29b      	uxth	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	b29a      	uxth	r2, r3
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	3302      	adds	r3, #2
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006166:	3302      	adds	r3, #2
 8006168:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	3301      	adds	r3, #1
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	3b01      	subs	r3, #1
 8006174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1dd      	bne.n	8006138 <USB_WritePMA+0x3a>
  }
}
 800617c:	bf00      	nop
 800617e:	3734      	adds	r7, #52	; 0x34
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006186:	b480      	push	{r7}
 8006188:	b08b      	sub	sp, #44	; 0x2c
 800618a:	af00      	add	r7, sp, #0
 800618c:	60f8      	str	r0, [r7, #12]
 800618e:	60b9      	str	r1, [r7, #8]
 8006190:	4611      	mov	r1, r2
 8006192:	461a      	mov	r2, r3
 8006194:	460b      	mov	r3, r1
 8006196:	80fb      	strh	r3, [r7, #6]
 8006198:	4613      	mov	r3, r2
 800619a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800619c:	88bb      	ldrh	r3, [r7, #4]
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80061ac:	88fb      	ldrh	r3, [r7, #6]
 80061ae:	005a      	lsls	r2, r3, #1
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
 80061be:	e01b      	b.n	80061f8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	3302      	adds	r3, #2
 80061cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	3301      	adds	r3, #1
 80061da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	3301      	adds	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	3302      	adds	r3, #2
 80061f0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	3b01      	subs	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e0      	bne.n	80061c0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80061fe:	88bb      	ldrh	r3, [r7, #4]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	701a      	strb	r2, [r3, #0]
  }
}
 800621a:	bf00      	nop
 800621c:	372c      	adds	r7, #44	; 0x2c
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006228:	4904      	ldr	r1, [pc, #16]	; (800623c <MX_FATFS_Init+0x18>)
 800622a:	4805      	ldr	r0, [pc, #20]	; (8006240 <MX_FATFS_Init+0x1c>)
 800622c:	f002 fd96 	bl	8008d5c <FATFS_LinkDriver>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	4b03      	ldr	r3, [pc, #12]	; (8006244 <MX_FATFS_Init+0x20>)
 8006236:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006238:	bf00      	nop
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20002cf4 	.word	0x20002cf4
 8006240:	20000038 	.word	0x20000038
 8006244:	20002cf8 	.word	0x20002cf8

08006248 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <USER_initialize+0x20>)
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <USER_initialize+0x20>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr
 8006268:	20000035 	.word	0x20000035

0800626c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <USER_status+0x20>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800627c:	4b03      	ldr	r3, [pc, #12]	; (800628c <USER_status+0x20>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr
 800628c:	20000035 	.word	0x20000035

08006290 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	607a      	str	r2, [r7, #4]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80062a0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80062bc:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bc80      	pop	{r7}
 80062c6:	4770      	bx	lr

080062c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	603a      	str	r2, [r7, #0]
 80062d2:	71fb      	strb	r3, [r7, #7]
 80062d4:	460b      	mov	r3, r1
 80062d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	73fb      	strb	r3, [r7, #15]
    return res;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7c1b      	ldrb	r3, [r3, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d115      	bne.n	8006328 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80062fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006300:	2202      	movs	r2, #2
 8006302:	2101      	movs	r1, #1
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f005 fe06 	bl	800bf16 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006316:	2202      	movs	r2, #2
 8006318:	2181      	movs	r1, #129	; 0x81
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f005 fdfb 	bl	800bf16 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	62da      	str	r2, [r3, #44]	; 0x2c
 8006326:	e012      	b.n	800634e <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006328:	2340      	movs	r3, #64	; 0x40
 800632a:	2202      	movs	r2, #2
 800632c:	2101      	movs	r1, #1
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f005 fdf1 	bl	800bf16 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800633c:	2340      	movs	r3, #64	; 0x40
 800633e:	2202      	movs	r2, #2
 8006340:	2181      	movs	r1, #129	; 0x81
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f005 fde7 	bl	800bf16 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800634e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006352:	f005 ff27 	bl	800c1a4 <USBD_static_malloc>
 8006356:	4602      	mov	r2, r0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006368:	2302      	movs	r3, #2
 800636a:	e003      	b.n	8006374 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f9d9 	bl	8006724 <MSC_BOT_Init>

  return USBD_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006388:	2101      	movs	r1, #1
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f005 fde9 	bl	800bf62 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006398:	2181      	movs	r1, #129	; 0x81
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f005 fde1 	bl	800bf62 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa06 	bl	80067b8 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	4618      	mov	r0, r3
 80063be:	f005 fefd 	bl	800c1bc <USBD_static_free>
    pdev->pClassData  = NULL;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e4:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d04d      	beq.n	8006496 <USBD_MSC_Setup+0xc2>
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	f040 8113 	bne.w	8006626 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2bfe      	cmp	r3, #254	; 0xfe
 8006406:	d002      	beq.n	800640e <USBD_MSC_Setup+0x3a>
 8006408:	2bff      	cmp	r3, #255	; 0xff
 800640a:	d024      	beq.n	8006456 <USBD_MSC_Setup+0x82>
 800640c:	e03b      	b.n	8006486 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d118      	bne.n	8006448 <USBD_MSC_Setup+0x74>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	88db      	ldrh	r3, [r3, #6]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d114      	bne.n	8006448 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006424:	2b00      	cmp	r3, #0
 8006426:	da0f      	bge.n	8006448 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	4798      	blx	r3
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2201      	movs	r2, #1
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f002 fbbd 	bl	8008bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006446:	e025      	b.n	8006494 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f002 fb4e 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 8006450:	2302      	movs	r3, #2
 8006452:	75fb      	strb	r3, [r7, #23]
          break;
 8006454:	e01e      	b.n	8006494 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10c      	bne.n	8006478 <USBD_MSC_Setup+0xa4>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	88db      	ldrh	r3, [r3, #6]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d108      	bne.n	8006478 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800646c:	2b00      	cmp	r3, #0
 800646e:	db03      	blt.n	8006478 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f987 	bl	8006784 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006476:	e00d      	b.n	8006494 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f002 fb36 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 8006480:	2302      	movs	r3, #2
 8006482:	75fb      	strb	r3, [r7, #23]
          break;
 8006484:	e006      	b.n	8006494 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f002 fb2f 	bl	8008aec <USBD_CtlError>
          ret = USBD_FAIL;
 800648e:	2302      	movs	r3, #2
 8006490:	75fb      	strb	r3, [r7, #23]
          break;
 8006492:	bf00      	nop
      }
      break;
 8006494:	e0ce      	b.n	8006634 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b0b      	cmp	r3, #11
 800649c:	f200 80bb 	bhi.w	8006616 <USBD_MSC_Setup+0x242>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <USBD_MSC_Setup+0xd4>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064d9 	.word	0x080064d9
 80064ac:	0800654f 	.word	0x0800654f
 80064b0:	08006617 	.word	0x08006617
 80064b4:	08006617 	.word	0x08006617
 80064b8:	08006617 	.word	0x08006617
 80064bc:	08006617 	.word	0x08006617
 80064c0:	08006617 	.word	0x08006617
 80064c4:	08006617 	.word	0x08006617
 80064c8:	08006617 	.word	0x08006617
 80064cc:	08006617 	.word	0x08006617
 80064d0:	08006501 	.word	0x08006501
 80064d4:	08006529 	.word	0x08006529
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d107      	bne.n	80064f2 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064e2:	f107 030e 	add.w	r3, r7, #14
 80064e6:	2202      	movs	r2, #2
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f002 fb68 	bl	8008bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80064f0:	e098      	b.n	8006624 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f002 faf9 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 80064fa:	2302      	movs	r3, #2
 80064fc:	75fb      	strb	r3, [r7, #23]
          break;
 80064fe:	e091      	b.n	8006624 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006506:	2b03      	cmp	r3, #3
 8006508:	d107      	bne.n	800651a <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	3304      	adds	r3, #4
 800650e:	2201      	movs	r2, #1
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f002 fb54 	bl	8008bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006518:	e084      	b.n	8006624 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f002 fae5 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 8006522:	2302      	movs	r3, #2
 8006524:	75fb      	strb	r3, [r7, #23]
          break;
 8006526:	e07d      	b.n	8006624 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652e:	2b03      	cmp	r3, #3
 8006530:	d106      	bne.n	8006540 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	885b      	ldrh	r3, [r3, #2]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800653e:	e071      	b.n	8006624 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f002 fad2 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 8006548:	2302      	movs	r3, #2
 800654a:	75fb      	strb	r3, [r7, #23]
          break;
 800654c:	e06a      	b.n	8006624 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	889b      	ldrh	r3, [r3, #4]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f005 fd22 	bl	800bfa0 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	889b      	ldrh	r3, [r3, #4]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f005 fcfc 	bl	800bf62 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	889b      	ldrh	r3, [r3, #4]
 800656e:	b25b      	sxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	da23      	bge.n	80065bc <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	889b      	ldrh	r3, [r3, #4]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3318      	adds	r3, #24
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	7c1b      	ldrb	r3, [r3, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800659c:	2202      	movs	r2, #2
 800659e:	2181      	movs	r1, #129	; 0x81
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f005 fcb8 	bl	800bf16 <USBD_LL_OpenEP>
 80065a6:	e005      	b.n	80065b4 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 80065a8:	2340      	movs	r3, #64	; 0x40
 80065aa:	2202      	movs	r2, #2
 80065ac:	2181      	movs	r1, #129	; 0x81
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f005 fcb1 	bl	800bf16 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80065ba:	e024      	b.n	8006606 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	889b      	ldrh	r3, [r3, #4]
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f003 020f 	and.w	r2, r3, #15
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	7c1b      	ldrb	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d107      	bne.n	80065f2 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80065e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065e6:	2202      	movs	r2, #2
 80065e8:	2101      	movs	r1, #1
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f005 fc93 	bl	800bf16 <USBD_LL_OpenEP>
 80065f0:	e005      	b.n	80065fe <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 80065f2:	2340      	movs	r3, #64	; 0x40
 80065f4:	2202      	movs	r2, #2
 80065f6:	2101      	movs	r1, #1
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f005 fc8c 	bl	800bf16 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	889b      	ldrh	r3, [r3, #4]
 800660a:	b2db      	uxtb	r3, r3
 800660c:	4619      	mov	r1, r3
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa50 	bl	8006ab4 <MSC_BOT_CplClrFeature>
          break;
 8006614:	e006      	b.n	8006624 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006616:	6839      	ldr	r1, [r7, #0]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f002 fa67 	bl	8008aec <USBD_CtlError>
          ret = USBD_FAIL;
 800661e:	2302      	movs	r3, #2
 8006620:	75fb      	strb	r3, [r7, #23]
          break;
 8006622:	bf00      	nop
      }
      break;
 8006624:	e006      	b.n	8006634 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f002 fa5f 	bl	8008aec <USBD_CtlError>
      ret = USBD_FAIL;
 800662e:	2302      	movs	r3, #2
 8006630:	75fb      	strb	r3, [r7, #23]
      break;
 8006632:	bf00      	nop
  }

  return ret;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop

08006640 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f8c1 	bl	80067d8 <MSC_BOT_DataIn>

  return USBD_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8e2 	bl	800683a <MSC_BOT_DataOut>

  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800668e:	4b03      	ldr	r3, [pc, #12]	; (800669c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000084 	.word	0x20000084

080066a0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80066ae:	4b03      	ldr	r3, [pc, #12]	; (80066bc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	200000a4 	.word	0x200000a4

080066c0 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80066ce:	4b03      	ldr	r3, [pc, #12]	; (80066dc <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	200000c4 	.word	0x200000c4

080066e0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	220a      	movs	r2, #10
 80066ec:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80066ee:	4b03      	ldr	r3, [pc, #12]	; (80066fc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200000e4 	.word	0x200000e4

08006700 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2000      	movs	r0, #0
 800675a:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800675c:	2101      	movs	r1, #1
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f005 fc1e 	bl	800bfa0 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006764:	2181      	movs	r1, #129	; 0x81
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f005 fc1a 	bl	800bfa0 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006772:	231f      	movs	r3, #31
 8006774:	2101      	movs	r1, #1
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f005 fcdd 	bl	800c136 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006792:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80067a6:	231f      	movs	r3, #31
 80067a8:	2101      	movs	r1, #1
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f005 fcc3 	bl	800c136 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c6:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	721a      	strb	r2, [r3, #8]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ea:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	7a1b      	ldrb	r3, [r3, #8]
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d004      	beq.n	80067fe <MSC_BOT_DataIn+0x26>
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	db19      	blt.n	800682c <MSC_BOT_DataIn+0x54>
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	dc17      	bgt.n	800682c <MSC_BOT_DataIn+0x54>
 80067fc:	e011      	b.n	8006822 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800680a:	461a      	mov	r2, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f979 	bl	8006b04 <SCSI_ProcessCmd>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	da0b      	bge.n	8006830 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006818:	2101      	movs	r1, #1
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8f0 	bl	8006a00 <MSC_BOT_SendCSW>
      }
      break;
 8006820:	e006      	b.n	8006830 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006822:	2100      	movs	r1, #0
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f8eb 	bl	8006a00 <MSC_BOT_SendCSW>
      break;
 800682a:	e002      	b.n	8006832 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 800682c:	bf00      	nop
 800682e:	e000      	b.n	8006832 <MSC_BOT_DataIn+0x5a>
      break;
 8006830:	bf00      	nop
  }
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684c:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	7a1b      	ldrb	r3, [r3, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <MSC_BOT_DataOut+0x22>
 8006856:	2b01      	cmp	r3, #1
 8006858:	d004      	beq.n	8006864 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800685a:	e015      	b.n	8006888 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f817 	bl	8006890 <MSC_BOT_CBW_Decode>
      break;
 8006862:	e011      	b.n	8006888 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006870:	461a      	mov	r2, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f946 	bl	8006b04 <SCSI_ProcessCmd>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	da03      	bge.n	8006886 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800687e:	2101      	movs	r1, #1
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f8bd 	bl	8006a00 <MSC_BOT_SendCSW>
      break;
 8006886:	bf00      	nop
  }
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80068b8:	2101      	movs	r1, #1
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f005 fc5e 	bl	800c17c <USBD_LL_GetRxDataSize>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b1f      	cmp	r3, #31
 80068c4:	d114      	bne.n	80068f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80068cc:	4a32      	ldr	r2, [pc, #200]	; (8006998 <MSC_BOT_CBW_Decode+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d10e      	bne.n	80068f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d809      	bhi.n	80068f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80068ec:	2b10      	cmp	r3, #16
 80068ee:	d90e      	bls.n	800690e <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80068f6:	2320      	movs	r3, #32
 80068f8:	2205      	movs	r2, #5
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fc48 	bl	8007190 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2202      	movs	r2, #2
 8006904:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f8a6 	bl	8006a58 <MSC_BOT_Abort>
 800690c:	e041      	b.n	8006992 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800691a:	461a      	mov	r2, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f8f1 	bl	8006b04 <SCSI_ProcessCmd>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	da0c      	bge.n	8006942 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	7a1b      	ldrb	r3, [r3, #8]
 800692c:	2b05      	cmp	r3, #5
 800692e:	d104      	bne.n	800693a <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006930:	2101      	movs	r1, #1
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f864 	bl	8006a00 <MSC_BOT_SendCSW>
 8006938:	e02b      	b.n	8006992 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f88c 	bl	8006a58 <MSC_BOT_Abort>
 8006940:	e027      	b.n	8006992 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	7a1b      	ldrb	r3, [r3, #8]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d022      	beq.n	8006990 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800694e:	2b01      	cmp	r3, #1
 8006950:	d01e      	beq.n	8006990 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8006956:	2b03      	cmp	r3, #3
 8006958:	d01a      	beq.n	8006990 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	895b      	ldrh	r3, [r3, #10]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f103 010c 	add.w	r1, r3, #12
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	895b      	ldrh	r3, [r3, #10]
 800696c:	461a      	mov	r2, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f814 	bl	800699c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8006974:	e00d      	b.n	8006992 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	895b      	ldrh	r3, [r3, #10]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800697e:	2100      	movs	r1, #0
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f83d 	bl	8006a00 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8006986:	e004      	b.n	8006992 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f865 	bl	8006a58 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800698e:	e000      	b.n	8006992 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8006990:	bf00      	nop
    }
  }
}
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	43425355 	.word	0x43425355

0800699c <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b0:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80069b8:	88fb      	ldrh	r3, [r7, #6]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d204      	bcs.n	80069c8 <MSC_BOT_SendData+0x2c>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	e000      	b.n	80069ca <MSC_BOT_SendData+0x2e>
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2204      	movs	r2, #4
 80069e8:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80069ea:	8a7b      	ldrh	r3, [r7, #18]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	2181      	movs	r1, #129	; 0x81
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f005 fb7d 	bl	800c0f0 <USBD_LL_Transmit>
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a12:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <MSC_BOT_SendCSW+0x54>)
 8006a18:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8006a30:	230d      	movs	r3, #13
 8006a32:	2181      	movs	r1, #129	; 0x81
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f005 fb5b 	bl	800c0f0 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006a40:	231f      	movs	r3, #31
 8006a42:	2101      	movs	r1, #1
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f005 fb76 	bl	800c136 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	53425355 	.word	0x53425355

08006a58 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a66:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10c      	bne.n	8006a8c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d103      	bne.n	8006a8c <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8006a84:	2101      	movs	r1, #1
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f005 faa9 	bl	800bfde <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006a8c:	2181      	movs	r1, #129	; 0x81
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f005 faa5 	bl	800bfde <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	7a5b      	ldrb	r3, [r3, #9]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d107      	bne.n	8006aac <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006aa2:	231f      	movs	r3, #31
 8006aa4:	2101      	movs	r1, #1
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f005 fb45 	bl	800c136 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8006aac:	bf00      	nop
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	7a5b      	ldrb	r3, [r3, #9]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d107      	bne.n	8006ae0 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8006ad0:	2181      	movs	r1, #129	; 0x81
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f005 fa83 	bl	800bfde <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	725a      	strb	r2, [r3, #9]
 8006ade:	e00d      	b.n	8006afc <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8006ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da08      	bge.n	8006afa <MSC_BOT_CplClrFeature+0x46>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	7a5b      	ldrb	r3, [r3, #9]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d004      	beq.n	8006afa <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006af0:	2101      	movs	r1, #1
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ff84 	bl	8006a00 <MSC_BOT_SendCSW>
 8006af8:	e000      	b.n	8006afc <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8006afa:	bf00      	nop
  }
}
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b5a      	cmp	r3, #90	; 0x5a
 8006b18:	f200 810e 	bhi.w	8006d38 <SCSI_ProcessCmd+0x234>
 8006b1c:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <SCSI_ProcessCmd+0x20>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006c91 	.word	0x08006c91
 8006b28:	08006d39 	.word	0x08006d39
 8006b2c:	08006d39 	.word	0x08006d39
 8006b30:	08006c9f 	.word	0x08006c9f
 8006b34:	08006d39 	.word	0x08006d39
 8006b38:	08006d39 	.word	0x08006d39
 8006b3c:	08006d39 	.word	0x08006d39
 8006b40:	08006d39 	.word	0x08006d39
 8006b44:	08006d39 	.word	0x08006d39
 8006b48:	08006d39 	.word	0x08006d39
 8006b4c:	08006d39 	.word	0x08006d39
 8006b50:	08006d39 	.word	0x08006d39
 8006b54:	08006d39 	.word	0x08006d39
 8006b58:	08006d39 	.word	0x08006d39
 8006b5c:	08006d39 	.word	0x08006d39
 8006b60:	08006d39 	.word	0x08006d39
 8006b64:	08006d39 	.word	0x08006d39
 8006b68:	08006d39 	.word	0x08006d39
 8006b6c:	08006cad 	.word	0x08006cad
 8006b70:	08006d39 	.word	0x08006d39
 8006b74:	08006d39 	.word	0x08006d39
 8006b78:	08006d39 	.word	0x08006d39
 8006b7c:	08006d39 	.word	0x08006d39
 8006b80:	08006d39 	.word	0x08006d39
 8006b84:	08006d39 	.word	0x08006d39
 8006b88:	08006d39 	.word	0x08006d39
 8006b8c:	08006cd7 	.word	0x08006cd7
 8006b90:	08006cbb 	.word	0x08006cbb
 8006b94:	08006d39 	.word	0x08006d39
 8006b98:	08006d39 	.word	0x08006d39
 8006b9c:	08006cc9 	.word	0x08006cc9
 8006ba0:	08006d39 	.word	0x08006d39
 8006ba4:	08006d39 	.word	0x08006d39
 8006ba8:	08006d39 	.word	0x08006d39
 8006bac:	08006d39 	.word	0x08006d39
 8006bb0:	08006cf3 	.word	0x08006cf3
 8006bb4:	08006d39 	.word	0x08006d39
 8006bb8:	08006d01 	.word	0x08006d01
 8006bbc:	08006d39 	.word	0x08006d39
 8006bc0:	08006d39 	.word	0x08006d39
 8006bc4:	08006d0f 	.word	0x08006d0f
 8006bc8:	08006d39 	.word	0x08006d39
 8006bcc:	08006d1d 	.word	0x08006d1d
 8006bd0:	08006d39 	.word	0x08006d39
 8006bd4:	08006d39 	.word	0x08006d39
 8006bd8:	08006d39 	.word	0x08006d39
 8006bdc:	08006d39 	.word	0x08006d39
 8006be0:	08006d2b 	.word	0x08006d2b
 8006be4:	08006d39 	.word	0x08006d39
 8006be8:	08006d39 	.word	0x08006d39
 8006bec:	08006d39 	.word	0x08006d39
 8006bf0:	08006d39 	.word	0x08006d39
 8006bf4:	08006d39 	.word	0x08006d39
 8006bf8:	08006d39 	.word	0x08006d39
 8006bfc:	08006d39 	.word	0x08006d39
 8006c00:	08006d39 	.word	0x08006d39
 8006c04:	08006d39 	.word	0x08006d39
 8006c08:	08006d39 	.word	0x08006d39
 8006c0c:	08006d39 	.word	0x08006d39
 8006c10:	08006d39 	.word	0x08006d39
 8006c14:	08006d39 	.word	0x08006d39
 8006c18:	08006d39 	.word	0x08006d39
 8006c1c:	08006d39 	.word	0x08006d39
 8006c20:	08006d39 	.word	0x08006d39
 8006c24:	08006d39 	.word	0x08006d39
 8006c28:	08006d39 	.word	0x08006d39
 8006c2c:	08006d39 	.word	0x08006d39
 8006c30:	08006d39 	.word	0x08006d39
 8006c34:	08006d39 	.word	0x08006d39
 8006c38:	08006d39 	.word	0x08006d39
 8006c3c:	08006d39 	.word	0x08006d39
 8006c40:	08006d39 	.word	0x08006d39
 8006c44:	08006d39 	.word	0x08006d39
 8006c48:	08006d39 	.word	0x08006d39
 8006c4c:	08006d39 	.word	0x08006d39
 8006c50:	08006d39 	.word	0x08006d39
 8006c54:	08006d39 	.word	0x08006d39
 8006c58:	08006d39 	.word	0x08006d39
 8006c5c:	08006d39 	.word	0x08006d39
 8006c60:	08006d39 	.word	0x08006d39
 8006c64:	08006d39 	.word	0x08006d39
 8006c68:	08006d39 	.word	0x08006d39
 8006c6c:	08006d39 	.word	0x08006d39
 8006c70:	08006d39 	.word	0x08006d39
 8006c74:	08006d39 	.word	0x08006d39
 8006c78:	08006d39 	.word	0x08006d39
 8006c7c:	08006d39 	.word	0x08006d39
 8006c80:	08006d39 	.word	0x08006d39
 8006c84:	08006d39 	.word	0x08006d39
 8006c88:	08006d39 	.word	0x08006d39
 8006c8c:	08006ce5 	.word	0x08006ce5
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8006c90:	7afb      	ldrb	r3, [r7, #11]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4619      	mov	r1, r3
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f85c 	bl	8006d54 <SCSI_TestUnitReady>
      break;
 8006c9c:	e055      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8006c9e:	7afb      	ldrb	r3, [r7, #11]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fa09 	bl	80070bc <SCSI_RequestSense>
      break;
 8006caa:	e04e      	b.n	8006d4a <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8006cac:	7afb      	ldrb	r3, [r7, #11]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 f888 	bl	8006dc8 <SCSI_Inquiry>
      break;
 8006cb8:	e047      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fa9e 	bl	8007202 <SCSI_StartStopUnit>
      break;
 8006cc6:	e040      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f000 fa97 	bl	8007202 <SCSI_StartStopUnit>
      break;
 8006cd4:	e039      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f99d 	bl	800701c <SCSI_ModeSense6>
      break;
 8006ce2:	e032      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f9be 	bl	800706c <SCSI_ModeSense10>
      break;
 8006cf0:	e02b      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f92a 	bl	8006f52 <SCSI_ReadFormatCapacity>
      break;
 8006cfe:	e024      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4619      	mov	r1, r3
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f8bc 	bl	8006e84 <SCSI_ReadCapacity10>
      break;
 8006d0c:	e01d      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8006d0e:	7afb      	ldrb	r3, [r7, #11]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	4619      	mov	r1, r3
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa88 	bl	800722a <SCSI_Read10>
      break;
 8006d1a:	e016      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8006d1c:	7afb      	ldrb	r3, [r7, #11]
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4619      	mov	r1, r3
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fb0d 	bl	8007342 <SCSI_Write10>
      break;
 8006d28:	e00f      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fbb6 	bl	80074a2 <SCSI_Verify10>
      break;
 8006d36:	e008      	b.n	8006d4a <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8006d38:	7af9      	ldrb	r1, [r7, #11]
 8006d3a:	2320      	movs	r3, #32
 8006d3c:	2205      	movs	r2, #5
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fa26 	bl	8007190 <SCSI_SenseCode>
      return -1;
 8006d44:	f04f 33ff 	mov.w	r3, #4294967295
 8006d48:	e000      	b.n	8006d4c <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d68:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006d7a:	2320      	movs	r3, #32
 8006d7c:	2205      	movs	r2, #5
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fa06 	bl	8007190 <SCSI_SenseCode>

    return -1;
 8006d84:	f04f 33ff 	mov.w	r3, #4294967295
 8006d88:	e019      	b.n	8006dbe <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	7afa      	ldrb	r2, [r7, #11]
 8006d94:	4610      	mov	r0, r2
 8006d96:	4798      	blx	r3
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00b      	beq.n	8006db6 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006d9e:	7af9      	ldrb	r1, [r7, #11]
 8006da0:	233a      	movs	r3, #58	; 0x3a
 8006da2:	2202      	movs	r2, #2
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 f9f3 	bl	8007190 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2205      	movs	r2, #5
 8006dae:	721a      	strb	r2, [r3, #8]

    return -1;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	e003      	b.n	8006dbe <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2200      	movs	r2, #0
 8006dba:	815a      	strh	r2, [r3, #10]

  return 0;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b089      	sub	sp, #36	; 0x24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3301      	adds	r3, #1
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d014      	beq.n	8006e16 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8006dec:	2307      	movs	r3, #7
 8006dee:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	8bfa      	ldrh	r2, [r7, #30]
 8006df4:	815a      	strh	r2, [r3, #10]

    while (len)
 8006df6:	e00a      	b.n	8006e0e <SCSI_Inquiry+0x46>
    {
      len--;
 8006df8:	8bfb      	ldrh	r3, [r7, #30]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8006dfe:	8bfb      	ldrh	r3, [r7, #30]
 8006e00:	8bfa      	ldrh	r2, [r7, #30]
 8006e02:	491f      	ldr	r1, [pc, #124]	; (8006e80 <SCSI_Inquiry+0xb8>)
 8006e04:	5c89      	ldrb	r1, [r1, r2]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	4413      	add	r3, r2
 8006e0a:	460a      	mov	r2, r1
 8006e0c:	731a      	strb	r2, [r3, #12]
    while (len)
 8006e0e:	8bfb      	ldrh	r3, [r7, #30]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1f1      	bne.n	8006df8 <SCSI_Inquiry+0x30>
 8006e14:	e02e      	b.n	8006e74 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e1c:	69d9      	ldr	r1, [r3, #28]
 8006e1e:	7afa      	ldrb	r2, [r7, #11]
 8006e20:	4613      	mov	r3, r2
 8006e22:	00db      	lsls	r3, r3, #3
 8006e24:	4413      	add	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	440b      	add	r3, r1
 8006e2a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3305      	adds	r3, #5
 8006e36:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8bfa      	ldrh	r2, [r7, #30]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d303      	bcc.n	8006e4e <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	8bfa      	ldrh	r2, [r7, #30]
 8006e52:	815a      	strh	r2, [r3, #10]

    while (len)
 8006e54:	e00b      	b.n	8006e6e <SCSI_Inquiry+0xa6>
    {
      len--;
 8006e56:	8bfb      	ldrh	r3, [r7, #30]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8006e5c:	8bfb      	ldrh	r3, [r7, #30]
 8006e5e:	8bfa      	ldrh	r2, [r7, #30]
 8006e60:	6979      	ldr	r1, [r7, #20]
 8006e62:	440a      	add	r2, r1
 8006e64:	7811      	ldrb	r1, [r2, #0]
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4413      	add	r3, r2
 8006e6a:	460a      	mov	r2, r1
 8006e6c:	731a      	strb	r2, [r3, #12]
    while (len)
 8006e6e:	8bfb      	ldrh	r3, [r7, #30]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1f0      	bne.n	8006e56 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3724      	adds	r7, #36	; 0x24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr
 8006e80:	0800cd0c 	.word	0x0800cd0c

08006e84 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e98:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8006eae:	7af8      	ldrb	r0, [r7, #11]
 8006eb0:	4798      	blx	r3
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006eb8:	7af9      	ldrb	r1, [r7, #11]
 8006eba:	233a      	movs	r3, #58	; 0x3a
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 f966 	bl	8007190 <SCSI_SenseCode>
    return -1;
 8006ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec8:	e03f      	b.n	8006f4a <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	0e1b      	lsrs	r3, r3, #24
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	0a1b      	lsrs	r3, r3, #8
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006f10:	161b      	asrs	r3, r3, #24
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006f1e:	141b      	asrs	r3, r3, #16
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006f2c:	0a1b      	lsrs	r3, r3, #8
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2208      	movs	r2, #8
 8006f46:	815a      	strh	r2, [r3, #10]
    return 0;
 8006f48:	2300      	movs	r3, #0
  }
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b088      	sub	sp, #32
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60f8      	str	r0, [r7, #12]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f66:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	83fb      	strh	r3, [r7, #30]
 8006f6c:	e007      	b.n	8006f7e <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8006f6e:	8bfb      	ldrh	r3, [r7, #30]
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	4413      	add	r3, r2
 8006f74:	2200      	movs	r2, #0
 8006f76:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8006f78:	8bfb      	ldrh	r3, [r7, #30]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	83fb      	strh	r3, [r7, #30]
 8006f7e:	8bfb      	ldrh	r3, [r7, #30]
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d9f4      	bls.n	8006f6e <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f107 0216 	add.w	r2, r7, #22
 8006f90:	f107 0110 	add.w	r1, r7, #16
 8006f94:	7af8      	ldrb	r0, [r7, #11]
 8006f96:	4798      	blx	r3
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006f9e:	7af9      	ldrb	r1, [r7, #11]
 8006fa0:	233a      	movs	r3, #58	; 0x3a
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f8f3 	bl	8007190 <SCSI_SenseCode>
    return -1;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
 8006fae:	e030      	b.n	8007012 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2208      	movs	r2, #8
 8006fb4:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	0e1b      	lsrs	r3, r3, #24
 8006fbc:	b2da      	uxtb	r2, r3
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	b2da      	uxtb	r2, r3
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8006fec:	8afb      	ldrh	r3, [r7, #22]
 8006fee:	141b      	asrs	r3, r3, #16
 8006ff0:	b2da      	uxtb	r2, r3
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8006ff6:	8afb      	ldrh	r3, [r7, #22]
 8006ff8:	0a1b      	lsrs	r3, r3, #8
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007002:	8afb      	ldrh	r3, [r7, #22]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	220c      	movs	r2, #12
 800700e:	815a      	strh	r2, [r3, #10]
    return 0;
 8007010:	2300      	movs	r3, #0
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	460b      	mov	r3, r1
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007030:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007032:	2308      	movs	r3, #8
 8007034:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	8afa      	ldrh	r2, [r7, #22]
 800703a:	815a      	strh	r2, [r3, #10]

  while (len)
 800703c:	e00a      	b.n	8007054 <SCSI_ModeSense6+0x38>
  {
    len--;
 800703e:	8afb      	ldrh	r3, [r7, #22]
 8007040:	3b01      	subs	r3, #1
 8007042:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007044:	8afb      	ldrh	r3, [r7, #22]
 8007046:	8afa      	ldrh	r2, [r7, #22]
 8007048:	4907      	ldr	r1, [pc, #28]	; (8007068 <SCSI_ModeSense6+0x4c>)
 800704a:	5c89      	ldrb	r1, [r1, r2]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	4413      	add	r3, r2
 8007050:	460a      	mov	r2, r1
 8007052:	731a      	strb	r2, [r3, #12]
  while (len)
 8007054:	8afb      	ldrh	r3, [r7, #22]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f1      	bne.n	800703e <SCSI_ModeSense6+0x22>
  }
  return 0;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	371c      	adds	r7, #28
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	0800cd14 	.word	0x0800cd14

0800706c <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	460b      	mov	r3, r1
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800707a:	2308      	movs	r3, #8
 800707c:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	8afa      	ldrh	r2, [r7, #22]
 800708a:	815a      	strh	r2, [r3, #10]

  while (len)
 800708c:	e00a      	b.n	80070a4 <SCSI_ModeSense10+0x38>
  {
    len--;
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	3b01      	subs	r3, #1
 8007092:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007094:	8afb      	ldrh	r3, [r7, #22]
 8007096:	8afa      	ldrh	r2, [r7, #22]
 8007098:	4907      	ldr	r1, [pc, #28]	; (80070b8 <SCSI_ModeSense10+0x4c>)
 800709a:	5c89      	ldrb	r1, [r1, r2]
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4413      	add	r3, r2
 80070a0:	460a      	mov	r2, r1
 80070a2:	731a      	strb	r2, [r3, #12]
  while (len)
 80070a4:	8afb      	ldrh	r3, [r7, #22]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f1      	bne.n	800708e <SCSI_ModeSense10+0x22>
  }

  return 0;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bc80      	pop	{r7}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	0800cd1c 	.word	0x0800cd1c

080070bc <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	460b      	mov	r3, r1
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
 80070d6:	e007      	b.n	80070e8 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4413      	add	r3, r2
 80070de:	2200      	movs	r2, #0
 80070e0:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	3301      	adds	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
 80070e8:	7dfb      	ldrb	r3, [r7, #23]
 80070ea:	2b11      	cmp	r3, #17
 80070ec:	d9f4      	bls.n	80070d8 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2270      	movs	r2, #112	; 0x70
 80070f2:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	220c      	movs	r2, #12
 80070f8:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007106:	429a      	cmp	r2, r3
 8007108:	d02e      	beq.n	8007168 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	3347      	adds	r3, #71	; 0x47
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4413      	add	r3, r2
 8007118:	791a      	ldrb	r2, [r3, #4]
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	3347      	adds	r3, #71	; 0x47
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	7a5a      	ldrb	r2, [r3, #9]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	3347      	adds	r3, #71	; 0x47
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	4413      	add	r3, r2
 8007140:	7a1a      	ldrb	r2, [r3, #8]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800714c:	3301      	adds	r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800715c:	2b04      	cmp	r3, #4
 800715e:	d103      	bne.n	8007168 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2212      	movs	r2, #18
 800716c:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3304      	adds	r3, #4
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b12      	cmp	r3, #18
 8007176:	d805      	bhi.n	8007184 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	3304      	adds	r3, #4
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b29a      	uxth	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	70fb      	strb	r3, [r7, #3]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70bb      	strb	r3, [r7, #2]
 80071a6:	4613      	mov	r3, r2
 80071a8:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b0:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	3347      	adds	r3, #71	; 0x47
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	4413      	add	r3, r2
 80071c0:	78ba      	ldrb	r2, [r7, #2]
 80071c2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	3347      	adds	r3, #71	; 0x47
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	4413      	add	r3, r2
 80071d2:	2200      	movs	r2, #0
 80071d4:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80071dc:	3301      	adds	r3, #1
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d103      	bne.n	80071f8 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc80      	pop	{r7}
 8007200:	4770      	bx	lr

08007202 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007202:	b480      	push	{r7}
 8007204:	b087      	sub	sp, #28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	460b      	mov	r3, r1
 800720c:	607a      	str	r2, [r7, #4]
 800720e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007216:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2200      	movs	r2, #0
 800721c:	815a      	strh	r2, [r3, #10]
  return 0;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	bc80      	pop	{r7}
 8007228:	4770      	bx	lr

0800722a <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	460b      	mov	r3, r1
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723e:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	7a1b      	ldrb	r3, [r3, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d16e      	bne.n	8007326 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800724e:	b25b      	sxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	db0a      	blt.n	800726a <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800725a:	2320      	movs	r3, #32
 800725c:	2205      	movs	r2, #5
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f7ff ff96 	bl	8007190 <SCSI_SenseCode>
      return -1;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295
 8007268:	e067      	b.n	800733a <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	7afa      	ldrb	r2, [r7, #11]
 8007274:	4610      	mov	r0, r2
 8007276:	4798      	blx	r3
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d008      	beq.n	8007290 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800727e:	7af9      	ldrb	r1, [r7, #11]
 8007280:	233a      	movs	r3, #58	; 0x3a
 8007282:	2202      	movs	r2, #2
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f7ff ff83 	bl	8007190 <SCSI_SenseCode>
      return -1;
 800728a:	f04f 33ff 	mov.w	r3, #4294967295
 800728e:	e054      	b.n	800733a <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	3302      	adds	r3, #2
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3303      	adds	r3, #3
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072a0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80072aa:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	3205      	adds	r2, #5
 80072b0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80072b2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3307      	adds	r3, #7
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	3208      	adds	r2, #8
 80072c6:	7812      	ldrb	r2, [r2, #0]
 80072c8:	431a      	orrs	r2, r3
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80072dc:	7af9      	ldrb	r1, [r7, #11]
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 f912 	bl	8007508 <SCSI_CheckAddressRange>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da02      	bge.n	80072f0 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80072ea:	f04f 33ff 	mov.w	r3, #4294967295
 80072ee:	e024      	b.n	800733a <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2202      	movs	r2, #2
 80072f4:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007302:	6979      	ldr	r1, [r7, #20]
 8007304:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	429a      	cmp	r2, r3
 800730e:	d00a      	beq.n	8007326 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007316:	2320      	movs	r3, #32
 8007318:	2205      	movs	r2, #5
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff ff38 	bl	8007190 <SCSI_SenseCode>
      return -1;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	e009      	b.n	800733a <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800732c:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	4619      	mov	r1, r3
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f90a 	bl	800754c <SCSI_ProcessRead>
 8007338:	4603      	mov	r3, r0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	460b      	mov	r3, r1
 800734c:	607a      	str	r2, [r7, #4]
 800734e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007356:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	7a1b      	ldrb	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f040 8096 	bne.w	800748e <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007368:	b25b      	sxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	da0a      	bge.n	8007384 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007374:	2320      	movs	r3, #32
 8007376:	2205      	movs	r2, #5
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f7ff ff09 	bl	8007190 <SCSI_SenseCode>
      return -1;
 800737e:	f04f 33ff 	mov.w	r3, #4294967295
 8007382:	e08a      	b.n	800749a <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	7afa      	ldrb	r2, [r7, #11]
 800738e:	4610      	mov	r0, r2
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007398:	7af9      	ldrb	r1, [r7, #11]
 800739a:	233a      	movs	r3, #58	; 0x3a
 800739c:	2202      	movs	r2, #2
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fef6 	bl	8007190 <SCSI_SenseCode>
      return -1;
 80073a4:	f04f 33ff 	mov.w	r3, #4294967295
 80073a8:	e077      	b.n	800749a <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	7afa      	ldrb	r2, [r7, #11]
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80073be:	7af9      	ldrb	r1, [r7, #11]
 80073c0:	2327      	movs	r3, #39	; 0x27
 80073c2:	2202      	movs	r2, #2
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff fee3 	bl	8007190 <SCSI_SenseCode>
      return -1;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295
 80073ce:	e064      	b.n	800749a <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3302      	adds	r3, #2
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3303      	adds	r3, #3
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80073ea:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	3205      	adds	r2, #5
 80073f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80073f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3307      	adds	r3, #7
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	3208      	adds	r2, #8
 8007406:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007408:	431a      	orrs	r2, r3
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800741c:	7af9      	ldrb	r1, [r7, #11]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f872 	bl	8007508 <SCSI_CheckAddressRange>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	da02      	bge.n	8007430 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800742a:	f04f 33ff 	mov.w	r3, #4294967295
 800742e:	e034      	b.n	800749a <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800743c:	fb02 f303 	mul.w	r3, r2, r3
 8007440:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	429a      	cmp	r2, r3
 800744c:	d00a      	beq.n	8007464 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007454:	2320      	movs	r3, #32
 8007456:	2205      	movs	r2, #5
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fe99 	bl	8007190 <SCSI_SenseCode>
      return -1;
 800745e:	f04f 33ff 	mov.w	r3, #4294967295
 8007462:	e01a      	b.n	800749a <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746a:	bf28      	it	cs
 800746c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007470:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2201      	movs	r2, #1
 8007476:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f103 020c 	add.w	r2, r3, #12
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	b29b      	uxth	r3, r3
 8007482:	2101      	movs	r1, #1
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f004 fe56 	bl	800c136 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 800748a:	2300      	movs	r3, #0
 800748c:	e005      	b.n	800749a <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 800748e:	7afb      	ldrb	r3, [r7, #11]
 8007490:	4619      	mov	r1, r3
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f8ce 	bl	8007634 <SCSI_ProcessWrite>
 8007498:	4603      	mov	r3, r0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	460b      	mov	r3, r1
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b6:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3301      	adds	r3, #1
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d008      	beq.n	80074d8 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80074c6:	7af9      	ldrb	r1, [r7, #11]
 80074c8:	2324      	movs	r3, #36	; 0x24
 80074ca:	2205      	movs	r2, #5
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f7ff fe5f 	bl	8007190 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295
 80074d6:	e013      	b.n	8007500 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80074e4:	7af9      	ldrb	r1, [r7, #11]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f80e 	bl	8007508 <SCSI_CheckAddressRange>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da02      	bge.n	80074f8 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 80074f2:	f04f 33ff 	mov.w	r3, #4294967295
 80074f6:	e003      	b.n	8007500 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2200      	movs	r2, #0
 80074fc:	815a      	strh	r2, [r3, #10]
  return 0;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	607a      	str	r2, [r7, #4]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	460b      	mov	r3, r1
 8007516:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	441a      	add	r2, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800752c:	429a      	cmp	r2, r3
 800752e:	d908      	bls.n	8007542 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007530:	7af9      	ldrb	r1, [r7, #11]
 8007532:	2321      	movs	r3, #33	; 0x21
 8007534:	2205      	movs	r2, #5
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7ff fe2a 	bl	8007190 <SCSI_SenseCode>
    return -1;
 800753c:	f04f 33ff 	mov.w	r3, #4294967295
 8007540:	e000      	b.n	8007544 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007578:	bf28      	it	cs
 800757a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800757e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007586:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800759a:	4618      	mov	r0, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	78f8      	ldrb	r0, [r7, #3]
 80075a6:	47a0      	blx	r4
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da08      	bge.n	80075c0 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80075ae:	78f9      	ldrb	r1, [r7, #3]
 80075b0:	2311      	movs	r3, #17
 80075b2:	2204      	movs	r2, #4
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff fdeb 	bl	8007190 <SCSI_SenseCode>
    return -1;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	e035      	b.n	800762c <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f103 020c 	add.w	r2, r3, #12
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2181      	movs	r1, #129	; 0x81
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f004 fd8f 	bl	800c0f0 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80075de:	4619      	mov	r1, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075e6:	441a      	add	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80075fa:	4619      	mov	r1, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2203      	movs	r2, #3
 8007628:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	bd90      	pop	{r4, r7, pc}

08007634 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007634:	b590      	push	{r4, r7, lr}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007646:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007654:	fb02 f303 	mul.w	r3, r2, r3
 8007658:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007660:	bf28      	it	cs
 8007662:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007666:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766e:	695c      	ldr	r4, [r3, #20]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f103 010c 	add.w	r1, r3, #12
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007682:	4618      	mov	r0, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800768a:	b29b      	uxth	r3, r3
 800768c:	78f8      	ldrb	r0, [r7, #3]
 800768e:	47a0      	blx	r4
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	da08      	bge.n	80076a8 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007696:	78f9      	ldrb	r1, [r7, #3]
 8007698:	2303      	movs	r3, #3
 800769a:	2204      	movs	r2, #4
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f7ff fd77 	bl	8007190 <SCSI_SenseCode>

    return -1;
 80076a2:	f04f 33ff 	mov.w	r3, #4294967295
 80076a6:	e045      	b.n	8007734 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076b4:	4619      	mov	r1, r3
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80076bc:	441a      	add	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076d0:	4619      	mov	r1, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80076d8:	1ad2      	subs	r2, r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad2      	subs	r2, r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80076fa:	2100      	movs	r1, #0
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff f97f 	bl	8006a00 <MSC_BOT_SendCSW>
 8007702:	e016      	b.n	8007732 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007710:	fb02 f303 	mul.w	r3, r2, r3
 8007714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007718:	bf28      	it	cs
 800771a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800771e:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f103 020c 	add.w	r2, r3, #12
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	b29b      	uxth	r3, r3
 800772a:	2101      	movs	r1, #1
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f004 fd02 	bl	800c136 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bd90      	pop	{r4, r7, pc}

0800773c <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800774c:	2302      	movs	r3, #2
 800774e:	2203      	movs	r2, #3
 8007750:	2181      	movs	r1, #129	; 0x81
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f004 fbdf 	bl	800bf16 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800775e:	2302      	movs	r3, #2
 8007760:	2203      	movs	r2, #3
 8007762:	2101      	movs	r1, #1
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f004 fbd6 	bl	800bf16 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2201      	movs	r2, #1
 800776e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007772:	2018      	movs	r0, #24
 8007774:	f004 fd16 	bl	800c1a4 <USBD_static_malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
 800778e:	e011      	b.n	80077b4 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	2302      	movs	r3, #2
 80077ac:	2101      	movs	r1, #1
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f004 fcc1 	bl	800c136 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80077ca:	2181      	movs	r1, #129	; 0x81
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f004 fbc8 	bl	800bf62 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80077d8:	2101      	movs	r1, #1
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f004 fbc1 	bl	800bf62 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007802:	4618      	mov	r0, r3
 8007804:	f004 fcda 	bl	800c1bc <USBD_static_free>
    pdev->pClassData = NULL;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b088      	sub	sp, #32
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800782c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007846:	2b00      	cmp	r3, #0
 8007848:	d051      	beq.n	80078ee <USBD_CUSTOM_HID_Setup+0xd2>
 800784a:	2b20      	cmp	r3, #32
 800784c:	f040 80d8 	bne.w	8007a00 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	3b02      	subs	r3, #2
 8007856:	2b09      	cmp	r3, #9
 8007858:	d841      	bhi.n	80078de <USBD_CUSTOM_HID_Setup+0xc2>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <USBD_CUSTOM_HID_Setup+0x44>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	080078b9 	.word	0x080078b9
 8007864:	08007897 	.word	0x08007897
 8007868:	080078df 	.word	0x080078df
 800786c:	080078df 	.word	0x080078df
 8007870:	080078df 	.word	0x080078df
 8007874:	080078df 	.word	0x080078df
 8007878:	080078df 	.word	0x080078df
 800787c:	080078c9 	.word	0x080078c9
 8007880:	080078a7 	.word	0x080078a7
 8007884:	08007889 	.word	0x08007889
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	885b      	ldrh	r3, [r3, #2]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	461a      	mov	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	605a      	str	r2, [r3, #4]
          break;
 8007894:	e02a      	b.n	80078ec <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	3304      	adds	r3, #4
 800789a:	2201      	movs	r2, #1
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f98e 	bl	8008bc0 <USBD_CtlSendData>
          break;
 80078a4:	e022      	b.n	80078ec <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	609a      	str	r2, [r3, #8]
          break;
 80078b6:	e019      	b.n	80078ec <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	3308      	adds	r3, #8
 80078bc:	2201      	movs	r2, #1
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f97d 	bl	8008bc0 <USBD_CtlSendData>
          break;
 80078c6:	e011      	b.n	80078ec <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2201      	movs	r2, #1
 80078cc:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80078ce:	6939      	ldr	r1, [r7, #16]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	88db      	ldrh	r3, [r3, #6]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 f9a0 	bl	8008c1c <USBD_CtlPrepareRx>
          break;
 80078dc:	e006      	b.n	80078ec <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 f903 	bl	8008aec <USBD_CtlError>
          ret = USBD_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	75fb      	strb	r3, [r7, #23]
          break;
 80078ea:	bf00      	nop
      }
      break;
 80078ec:	e08f      	b.n	8007a0e <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	785b      	ldrb	r3, [r3, #1]
 80078f2:	2b0b      	cmp	r3, #11
 80078f4:	d87c      	bhi.n	80079f0 <USBD_CUSTOM_HID_Setup+0x1d4>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_CUSTOM_HID_Setup+0xe0>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	0800792d 	.word	0x0800792d
 8007900:	080079f1 	.word	0x080079f1
 8007904:	080079f1 	.word	0x080079f1
 8007908:	080079f1 	.word	0x080079f1
 800790c:	080079f1 	.word	0x080079f1
 8007910:	080079f1 	.word	0x080079f1
 8007914:	08007955 	.word	0x08007955
 8007918:	080079f1 	.word	0x080079f1
 800791c:	080079f1 	.word	0x080079f1
 8007920:	080079f1 	.word	0x080079f1
 8007924:	080079a3 	.word	0x080079a3
 8007928:	080079cb 	.word	0x080079cb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007932:	2b03      	cmp	r3, #3
 8007934:	d107      	bne.n	8007946 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007936:	f107 030e 	add.w	r3, r7, #14
 800793a:	2202      	movs	r2, #2
 800793c:	4619      	mov	r1, r3
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f93e 	bl	8008bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007944:	e05b      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f8cf 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 800794e:	2302      	movs	r3, #2
 8007950:	75fb      	strb	r3, [r7, #23]
          break;
 8007952:	e054      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	b29b      	uxth	r3, r3
 800795c:	2b22      	cmp	r3, #34	; 0x22
 800795e:	d10b      	bne.n	8007978 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	88db      	ldrh	r3, [r3, #6]
 8007964:	2b5f      	cmp	r3, #95	; 0x5f
 8007966:	bf28      	it	cs
 8007968:	235f      	movcs	r3, #95	; 0x5f
 800796a:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	e00d      	b.n	8007994 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	885b      	ldrh	r3, [r3, #2]
 800797c:	0a1b      	lsrs	r3, r3, #8
 800797e:	b29b      	uxth	r3, r3
 8007980:	2b21      	cmp	r3, #33	; 0x21
 8007982:	d107      	bne.n	8007994 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8007986:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	88db      	ldrh	r3, [r3, #6]
 800798c:	2b09      	cmp	r3, #9
 800798e:	bf28      	it	cs
 8007990:	2309      	movcs	r3, #9
 8007992:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007994:	8bfb      	ldrh	r3, [r7, #30]
 8007996:	461a      	mov	r2, r3
 8007998:	69b9      	ldr	r1, [r7, #24]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 f910 	bl	8008bc0 <USBD_CtlSendData>
          break;
 80079a0:	e02d      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d107      	bne.n	80079bc <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	330c      	adds	r3, #12
 80079b0:	2201      	movs	r2, #1
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f903 	bl	8008bc0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ba:	e020      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 f894 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 80079c4:	2302      	movs	r3, #2
 80079c6:	75fb      	strb	r3, [r7, #23]
          break;
 80079c8:	e019      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d106      	bne.n	80079e2 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079e0:	e00d      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f881 	bl	8008aec <USBD_CtlError>
            ret = USBD_FAIL;
 80079ea:	2302      	movs	r3, #2
 80079ec:	75fb      	strb	r3, [r7, #23]
          break;
 80079ee:	e006      	b.n	80079fe <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f87a 	bl	8008aec <USBD_CtlError>
          ret = USBD_FAIL;
 80079f8:	2302      	movs	r3, #2
 80079fa:	75fb      	strb	r3, [r7, #23]
          break;
 80079fc:	bf00      	nop
      }
      break;
 80079fe:	e006      	b.n	8007a0e <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f872 	bl	8008aec <USBD_CtlError>
      ret = USBD_FAIL;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a0c:	bf00      	nop
  }
  return ret;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	200001ac 	.word	0x200001ac

08007a1c <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a30:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d10f      	bne.n	8007a5c <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	7d1b      	ldrb	r3, [r3, #20]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	2201      	movs	r2, #1
 8007a48:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007a4a:	88fb      	ldrh	r3, [r7, #6]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	2181      	movs	r1, #129	; 0x81
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f004 fb4d 	bl	800c0f0 <USBD_LL_Transmit>
 8007a56:	e001      	b.n	8007a5c <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e000      	b.n	8007a5e <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2229      	movs	r2, #41	; 0x29
 8007a74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bc80      	pop	{r7}
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000128 	.word	0x20000128

08007a88 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2229      	movs	r2, #41	; 0x29
 8007a94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000154 	.word	0x20000154

08007aa8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2229      	movs	r2, #41	; 0x29
 8007ab4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007ab6:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20000180 	.word	0x20000180

08007ac8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ada:	2200      	movs	r2, #0
 8007adc:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr

08007aea <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007afc:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	7810      	ldrb	r0, [r2, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	7852      	ldrb	r2, [r2, #1]
 8007b0e:	4611      	mov	r1, r2
 8007b10:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	2302      	movs	r3, #2
 8007b16:	2101      	movs	r1, #1
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f004 fb0c 	bl	800c136 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d10c      	bne.n	8007b5a <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	7810      	ldrb	r0, [r2, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	7852      	ldrb	r2, [r2, #1]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	220a      	movs	r2, #10
 8007b70:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007b72:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	200001b8 	.word	0x200001b8

08007b84 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007b8e:	2302      	movs	r3, #2
 8007b90:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr

08007bb0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e01a      	b.n	8007bfe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d003      	beq.n	8007be8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	79fa      	ldrb	r2, [r7, #7]
 8007bf4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f004 f922 	bl	800be40 <USBD_LL_Init>

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c10:	2300      	movs	r3, #0
 8007c12:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	e001      	b.n	8007c2c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c28:	2302      	movs	r3, #2
 8007c2a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f004 f94d 	bl	800bee0 <USBD_LL_Start>

  return USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c70:	2302      	movs	r3, #2
 8007c72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00c      	beq.n	8007c98 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	4611      	mov	r1, r2
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f000 feca 	bl	8008a74 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d00c      	beq.n	8007d1e <USBD_LL_SetupStage+0x56>
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d302      	bcc.n	8007d0e <USBD_LL_SetupStage+0x46>
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d010      	beq.n	8007d2e <USBD_LL_SetupStage+0x66>
 8007d0c:	e017      	b.n	8007d3e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9ca 	bl	80080b0 <USBD_StdDevReq>
      break;
 8007d1c:	e01a      	b.n	8007d54 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa2c 	bl	8008184 <USBD_StdItfReq>
      break;
 8007d2c:	e012      	b.n	8007d54 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa6a 	bl	8008210 <USBD_StdEPReq>
      break;
 8007d3c:	e00a      	b.n	8007d54 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f004 f946 	bl	800bfde <USBD_LL_StallEP>
      break;
 8007d52:	bf00      	nop
  }

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	460b      	mov	r3, r1
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d14b      	bne.n	8007e0a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d134      	bne.n	8007dee <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d919      	bls.n	8007dc4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	1ad2      	subs	r2, r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d203      	bcs.n	8007db2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	e002      	b.n	8007db8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f000 ff4b 	bl	8008c58 <USBD_CtlContinueRx>
 8007dc2:	e038      	b.n	8007e36 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d105      	bne.n	8007de6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 ff48 	bl	8008c7c <USBD_CtlSendStatus>
 8007dec:	e023      	b.n	8007e36 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	d11e      	bne.n	8007e36 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e00:	2100      	movs	r1, #0
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f004 f8eb 	bl	800bfde <USBD_LL_StallEP>
 8007e08:	e015      	b.n	8007e36 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00d      	beq.n	8007e32 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d108      	bne.n	8007e32 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	7afa      	ldrb	r2, [r7, #11]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	4798      	blx	r3
 8007e30:	e001      	b.n	8007e36 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e32:	2302      	movs	r3, #2
 8007e34:	e000      	b.n	8007e38 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e4e:	7afb      	ldrb	r3, [r7, #11]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d17f      	bne.n	8007f54 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3314      	adds	r3, #20
 8007e58:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d15c      	bne.n	8007f1e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d915      	bls.n	8007e9c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	1ad2      	subs	r2, r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 feb5 	bl	8008bf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f004 f94e 	bl	800c136 <USBD_LL_PrepareReceive>
 8007e9a:	e04e      	b.n	8007f3a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	6912      	ldr	r2, [r2, #16]
 8007ea4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ea8:	fb02 f201 	mul.w	r2, r2, r1
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d11c      	bne.n	8007eec <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d316      	bcc.n	8007eec <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d20f      	bcs.n	8007eec <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fe91 	bl	8008bf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f004 f926 	bl	800c136 <USBD_LL_PrepareReceive>
 8007eea:	e026      	b.n	8007f3a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d105      	bne.n	8007f0e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f004 f864 	bl	800bfde <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fec3 	bl	8008ca2 <USBD_CtlReceiveStatus>
 8007f1c:	e00d      	b.n	8007f3a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d004      	beq.n	8007f32 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d103      	bne.n	8007f3a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f32:	2180      	movs	r1, #128	; 0x80
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f004 f852 	bl	800bfde <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d11d      	bne.n	8007f80 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f7ff fe83 	bl	8007c50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f52:	e015      	b.n	8007f80 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00d      	beq.n	8007f7c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d108      	bne.n	8007f7c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	7afa      	ldrb	r2, [r7, #11]
 8007f74:	4611      	mov	r1, r2
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	4798      	blx	r3
 8007f7a:	e001      	b.n	8007f80 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e000      	b.n	8007f82 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f92:	2340      	movs	r3, #64	; 0x40
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f003 ffbc 	bl	800bf16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2240      	movs	r2, #64	; 0x40
 8007faa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fae:	2340      	movs	r3, #64	; 0x40
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2180      	movs	r1, #128	; 0x80
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f003 ffae 	bl	800bf16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2240      	movs	r2, #64	; 0x40
 8007fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6852      	ldr	r2, [r2, #4]
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
  }

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3708      	adds	r7, #8
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	78fa      	ldrb	r2, [r7, #3]
 800801c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2204      	movs	r2, #4
 8008042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr

08008052 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008060:	2b04      	cmp	r3, #4
 8008062:	d105      	bne.n	8008070 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	bc80      	pop	{r7}
 800807a:	4770      	bx	lr

0800807c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	2b03      	cmp	r3, #3
 800808c:	d10b      	bne.n	80080a6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d004      	beq.n	80080d4 <USBD_StdDevReq+0x24>
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d002      	beq.n	80080d4 <USBD_StdDevReq+0x24>
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d008      	beq.n	80080e4 <USBD_StdDevReq+0x34>
 80080d2:	e04c      	b.n	800816e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
      break;
 80080e2:	e049      	b.n	8008178 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b09      	cmp	r3, #9
 80080ea:	d83a      	bhi.n	8008162 <USBD_StdDevReq+0xb2>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <USBD_StdDevReq+0x44>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008145 	.word	0x08008145
 80080f8:	08008159 	.word	0x08008159
 80080fc:	08008163 	.word	0x08008163
 8008100:	0800814f 	.word	0x0800814f
 8008104:	08008163 	.word	0x08008163
 8008108:	08008127 	.word	0x08008127
 800810c:	0800811d 	.word	0x0800811d
 8008110:	08008163 	.word	0x08008163
 8008114:	0800813b 	.word	0x0800813b
 8008118:	08008131 	.word	0x08008131
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f9d4 	bl	80084cc <USBD_GetDescriptor>
          break;
 8008124:	e022      	b.n	800816c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fb37 	bl	800879c <USBD_SetAddress>
          break;
 800812e:	e01d      	b.n	800816c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb74 	bl	8008820 <USBD_SetConfig>
          break;
 8008138:	e018      	b.n	800816c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fbfd 	bl	800893c <USBD_GetConfig>
          break;
 8008142:	e013      	b.n	800816c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fc2c 	bl	80089a4 <USBD_GetStatus>
          break;
 800814c:	e00e      	b.n	800816c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc5a 	bl	8008a0a <USBD_SetFeature>
          break;
 8008156:	e009      	b.n	800816c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fc69 	bl	8008a32 <USBD_ClrFeature>
          break;
 8008160:	e004      	b.n	800816c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fcc1 	bl	8008aec <USBD_CtlError>
          break;
 800816a:	bf00      	nop
      }
      break;
 800816c:	e004      	b.n	8008178 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fcbb 	bl	8008aec <USBD_CtlError>
      break;
 8008176:	bf00      	nop
  }

  return ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop

08008184 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800819a:	2b20      	cmp	r3, #32
 800819c:	d003      	beq.n	80081a6 <USBD_StdItfReq+0x22>
 800819e:	2b40      	cmp	r3, #64	; 0x40
 80081a0:	d001      	beq.n	80081a6 <USBD_StdItfReq+0x22>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d12a      	bne.n	80081fc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d81d      	bhi.n	80081ee <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	889b      	ldrh	r3, [r3, #4]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d813      	bhi.n	80081e4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	88db      	ldrh	r3, [r3, #6]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d110      	bne.n	80081f8 <USBD_StdItfReq+0x74>
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10d      	bne.n	80081f8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fd4d 	bl	8008c7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80081e2:	e009      	b.n	80081f8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fc80 	bl	8008aec <USBD_CtlError>
          break;
 80081ec:	e004      	b.n	80081f8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fc7b 	bl	8008aec <USBD_CtlError>
          break;
 80081f6:	e000      	b.n	80081fa <USBD_StdItfReq+0x76>
          break;
 80081f8:	bf00      	nop
      }
      break;
 80081fa:	e004      	b.n	8008206 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fc74 	bl	8008aec <USBD_CtlError>
      break;
 8008204:	bf00      	nop
  }

  return USBD_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	889b      	ldrh	r3, [r3, #4]
 8008222:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800822c:	2b20      	cmp	r3, #32
 800822e:	d004      	beq.n	800823a <USBD_StdEPReq+0x2a>
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d002      	beq.n	800823a <USBD_StdEPReq+0x2a>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <USBD_StdEPReq+0x3a>
 8008238:	e13d      	b.n	80084b6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
      break;
 8008248:	e13a      	b.n	80084c0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008252:	2b20      	cmp	r3, #32
 8008254:	d10a      	bne.n	800826c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	4798      	blx	r3
 8008264:	4603      	mov	r3, r0
 8008266:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	e12a      	b.n	80084c2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d03e      	beq.n	80082f2 <USBD_StdEPReq+0xe2>
 8008274:	2b03      	cmp	r3, #3
 8008276:	d002      	beq.n	800827e <USBD_StdEPReq+0x6e>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d070      	beq.n	800835e <USBD_StdEPReq+0x14e>
 800827c:	e115      	b.n	80084aa <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008284:	2b02      	cmp	r3, #2
 8008286:	d002      	beq.n	800828e <USBD_StdEPReq+0x7e>
 8008288:	2b03      	cmp	r3, #3
 800828a:	d015      	beq.n	80082b8 <USBD_StdEPReq+0xa8>
 800828c:	e02b      	b.n	80082e6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00c      	beq.n	80082ae <USBD_StdEPReq+0x9e>
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	2b80      	cmp	r3, #128	; 0x80
 8008298:	d009      	beq.n	80082ae <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f003 fe9d 	bl	800bfde <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f003 fe99 	bl	800bfde <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082ac:	e020      	b.n	80082f0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fc1b 	bl	8008aec <USBD_CtlError>
              break;
 80082b6:	e01b      	b.n	80082f0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	885b      	ldrh	r3, [r3, #2]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10e      	bne.n	80082de <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00b      	beq.n	80082de <USBD_StdEPReq+0xce>
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	d008      	beq.n	80082de <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88db      	ldrh	r3, [r3, #6]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f003 fe80 	bl	800bfde <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fccc 	bl	8008c7c <USBD_CtlSendStatus>

              break;
 80082e4:	e004      	b.n	80082f0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fbff 	bl	8008aec <USBD_CtlError>
              break;
 80082ee:	bf00      	nop
          }
          break;
 80082f0:	e0e0      	b.n	80084b4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d002      	beq.n	8008302 <USBD_StdEPReq+0xf2>
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d015      	beq.n	800832c <USBD_StdEPReq+0x11c>
 8008300:	e026      	b.n	8008350 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00c      	beq.n	8008322 <USBD_StdEPReq+0x112>
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	2b80      	cmp	r3, #128	; 0x80
 800830c:	d009      	beq.n	8008322 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f003 fe63 	bl	800bfde <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008318:	2180      	movs	r1, #128	; 0x80
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f003 fe5f 	bl	800bfde <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008320:	e01c      	b.n	800835c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fbe1 	bl	8008aec <USBD_CtlError>
              break;
 800832a:	e017      	b.n	800835c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	885b      	ldrh	r3, [r3, #2]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d112      	bne.n	800835a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f003 fe6a 	bl	800c01c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fc97 	bl	8008c7c <USBD_CtlSendStatus>
              }
              break;
 800834e:	e004      	b.n	800835a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fbca 	bl	8008aec <USBD_CtlError>
              break;
 8008358:	e000      	b.n	800835c <USBD_StdEPReq+0x14c>
              break;
 800835a:	bf00      	nop
          }
          break;
 800835c:	e0aa      	b.n	80084b4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008364:	2b02      	cmp	r3, #2
 8008366:	d002      	beq.n	800836e <USBD_StdEPReq+0x15e>
 8008368:	2b03      	cmp	r3, #3
 800836a:	d032      	beq.n	80083d2 <USBD_StdEPReq+0x1c2>
 800836c:	e097      	b.n	800849e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800836e:	7bbb      	ldrb	r3, [r7, #14]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <USBD_StdEPReq+0x174>
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b80      	cmp	r3, #128	; 0x80
 8008378:	d004      	beq.n	8008384 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fbb5 	bl	8008aec <USBD_CtlError>
                break;
 8008382:	e091      	b.n	80084a8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008388:	2b00      	cmp	r3, #0
 800838a:	da0b      	bge.n	80083a4 <USBD_StdEPReq+0x194>
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	3310      	adds	r3, #16
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4413      	add	r3, r2
 80083a0:	3304      	adds	r3, #4
 80083a2:	e00b      	b.n	80083bc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	3304      	adds	r3, #4
 80083bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	2202      	movs	r2, #2
 80083c8:	4619      	mov	r1, r3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fbf8 	bl	8008bc0 <USBD_CtlSendData>
              break;
 80083d0:	e06a      	b.n	80084a8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da11      	bge.n	80083fe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	f003 020f 	and.w	r2, r3, #15
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	440b      	add	r3, r1
 80083ec:	3318      	adds	r3, #24
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d117      	bne.n	8008424 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 fb78 	bl	8008aec <USBD_CtlError>
                  break;
 80083fc:	e054      	b.n	80084a8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	f003 020f 	and.w	r2, r3, #15
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d104      	bne.n	8008424 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fb65 	bl	8008aec <USBD_CtlError>
                  break;
 8008422:	e041      	b.n	80084a8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008428:	2b00      	cmp	r3, #0
 800842a:	da0b      	bge.n	8008444 <USBD_StdEPReq+0x234>
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	3310      	adds	r3, #16
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	4413      	add	r3, r2
 8008440:	3304      	adds	r3, #4
 8008442:	e00b      	b.n	800845c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008444:	7bbb      	ldrb	r3, [r7, #14]
 8008446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844a:	4613      	mov	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	4413      	add	r3, r2
 800845a:	3304      	adds	r3, #4
 800845c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800845e:	7bbb      	ldrb	r3, [r7, #14]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <USBD_StdEPReq+0x25a>
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b80      	cmp	r3, #128	; 0x80
 8008468:	d103      	bne.n	8008472 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	e00e      	b.n	8008490 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f003 fdef 	bl	800c05a <USBD_LL_IsStallEP>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2201      	movs	r2, #1
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	e002      	b.n	8008490 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2200      	movs	r2, #0
 800848e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2202      	movs	r2, #2
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb92 	bl	8008bc0 <USBD_CtlSendData>
              break;
 800849c:	e004      	b.n	80084a8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fb23 	bl	8008aec <USBD_CtlError>
              break;
 80084a6:	bf00      	nop
          }
          break;
 80084a8:	e004      	b.n	80084b4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fb1d 	bl	8008aec <USBD_CtlError>
          break;
 80084b2:	bf00      	nop
      }
      break;
 80084b4:	e004      	b.n	80084c0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fb17 	bl	8008aec <USBD_CtlError>
      break;
 80084be:	bf00      	nop
  }

  return ret;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084d6:	2300      	movs	r3, #0
 80084d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	885b      	ldrh	r3, [r3, #2]
 80084e6:	0a1b      	lsrs	r3, r3, #8
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	2b06      	cmp	r3, #6
 80084ee:	f200 8128 	bhi.w	8008742 <USBD_GetDescriptor+0x276>
 80084f2:	a201      	add	r2, pc, #4	; (adr r2, 80084f8 <USBD_GetDescriptor+0x2c>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008515 	.word	0x08008515
 80084fc:	0800852d 	.word	0x0800852d
 8008500:	0800856d 	.word	0x0800856d
 8008504:	08008743 	.word	0x08008743
 8008508:	08008743 	.word	0x08008743
 800850c:	080086e3 	.word	0x080086e3
 8008510:	0800870f 	.word	0x0800870f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	7c12      	ldrb	r2, [r2, #16]
 8008520:	f107 0108 	add.w	r1, r7, #8
 8008524:	4610      	mov	r0, r2
 8008526:	4798      	blx	r3
 8008528:	60f8      	str	r0, [r7, #12]
      break;
 800852a:	e112      	b.n	8008752 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	7c1b      	ldrb	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853c:	f107 0208 	add.w	r2, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3301      	adds	r3, #1
 800854a:	2202      	movs	r2, #2
 800854c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800854e:	e100      	b.n	8008752 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008558:	f107 0208 	add.w	r2, r7, #8
 800855c:	4610      	mov	r0, r2
 800855e:	4798      	blx	r3
 8008560:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3301      	adds	r3, #1
 8008566:	2202      	movs	r2, #2
 8008568:	701a      	strb	r2, [r3, #0]
      break;
 800856a:	e0f2      	b.n	8008752 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	885b      	ldrh	r3, [r3, #2]
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b05      	cmp	r3, #5
 8008574:	f200 80ac 	bhi.w	80086d0 <USBD_GetDescriptor+0x204>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <USBD_GetDescriptor+0xb4>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	08008599 	.word	0x08008599
 8008584:	080085cd 	.word	0x080085cd
 8008588:	08008601 	.word	0x08008601
 800858c:	08008635 	.word	0x08008635
 8008590:	08008669 	.word	0x08008669
 8008594:	0800869d 	.word	0x0800869d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ba:	e091      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa94 	bl	8008aec <USBD_CtlError>
            err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ca:	e089      	b.n	80086e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	7c12      	ldrb	r2, [r2, #16]
 80085e4:	f107 0108 	add.w	r1, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ee:	e077      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa7a 	bl	8008aec <USBD_CtlError>
            err++;
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	3301      	adds	r3, #1
 80085fc:	72fb      	strb	r3, [r7, #11]
          break;
 80085fe:	e06f      	b.n	80086e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	7c12      	ldrb	r2, [r2, #16]
 8008618:	f107 0108 	add.w	r1, r7, #8
 800861c:	4610      	mov	r0, r2
 800861e:	4798      	blx	r3
 8008620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008622:	e05d      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa60 	bl	8008aec <USBD_CtlError>
            err++;
 800862c:	7afb      	ldrb	r3, [r7, #11]
 800862e:	3301      	adds	r3, #1
 8008630:	72fb      	strb	r3, [r7, #11]
          break;
 8008632:	e055      	b.n	80086e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00b      	beq.n	8008658 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	7c12      	ldrb	r2, [r2, #16]
 800864c:	f107 0108 	add.w	r1, r7, #8
 8008650:	4610      	mov	r0, r2
 8008652:	4798      	blx	r3
 8008654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008656:	e043      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fa46 	bl	8008aec <USBD_CtlError>
            err++;
 8008660:	7afb      	ldrb	r3, [r7, #11]
 8008662:	3301      	adds	r3, #1
 8008664:	72fb      	strb	r3, [r7, #11]
          break;
 8008666:	e03b      	b.n	80086e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	7c12      	ldrb	r2, [r2, #16]
 8008680:	f107 0108 	add.w	r1, r7, #8
 8008684:	4610      	mov	r0, r2
 8008686:	4798      	blx	r3
 8008688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800868a:	e029      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa2c 	bl	8008aec <USBD_CtlError>
            err++;
 8008694:	7afb      	ldrb	r3, [r7, #11]
 8008696:	3301      	adds	r3, #1
 8008698:	72fb      	strb	r3, [r7, #11]
          break;
 800869a:	e021      	b.n	80086e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	7c12      	ldrb	r2, [r2, #16]
 80086b4:	f107 0108 	add.w	r1, r7, #8
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086be:	e00f      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa12 	bl	8008aec <USBD_CtlError>
            err++;
 80086c8:	7afb      	ldrb	r3, [r7, #11]
 80086ca:	3301      	adds	r3, #1
 80086cc:	72fb      	strb	r3, [r7, #11]
          break;
 80086ce:	e007      	b.n	80086e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa0a 	bl	8008aec <USBD_CtlError>
          err++;
 80086d8:	7afb      	ldrb	r3, [r7, #11]
 80086da:	3301      	adds	r3, #1
 80086dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80086de:	e038      	b.n	8008752 <USBD_GetDescriptor+0x286>
 80086e0:	e037      	b.n	8008752 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7c1b      	ldrb	r3, [r3, #16]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d109      	bne.n	80086fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	f107 0208 	add.w	r2, r7, #8
 80086f6:	4610      	mov	r0, r2
 80086f8:	4798      	blx	r3
 80086fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086fc:	e029      	b.n	8008752 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f9f3 	bl	8008aec <USBD_CtlError>
        err++;
 8008706:	7afb      	ldrb	r3, [r7, #11]
 8008708:	3301      	adds	r3, #1
 800870a:	72fb      	strb	r3, [r7, #11]
      break;
 800870c:	e021      	b.n	8008752 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7c1b      	ldrb	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10d      	bne.n	8008732 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	f107 0208 	add.w	r2, r7, #8
 8008722:	4610      	mov	r0, r2
 8008724:	4798      	blx	r3
 8008726:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3301      	adds	r3, #1
 800872c:	2207      	movs	r2, #7
 800872e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008730:	e00f      	b.n	8008752 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9d9 	bl	8008aec <USBD_CtlError>
        err++;
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	3301      	adds	r3, #1
 800873e:	72fb      	strb	r3, [r7, #11]
      break;
 8008740:	e007      	b.n	8008752 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f9d1 	bl	8008aec <USBD_CtlError>
      err++;
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	3301      	adds	r3, #1
 800874e:	72fb      	strb	r3, [r7, #11]
      break;
 8008750:	bf00      	nop
  }

  if (err != 0U)
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11c      	bne.n	8008792 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008758:	893b      	ldrh	r3, [r7, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d011      	beq.n	8008782 <USBD_GetDescriptor+0x2b6>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	88db      	ldrh	r3, [r3, #6]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00d      	beq.n	8008782 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	88da      	ldrh	r2, [r3, #6]
 800876a:	893b      	ldrh	r3, [r7, #8]
 800876c:	4293      	cmp	r3, r2
 800876e:	bf28      	it	cs
 8008770:	4613      	movcs	r3, r2
 8008772:	b29b      	uxth	r3, r3
 8008774:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008776:	893b      	ldrh	r3, [r7, #8]
 8008778:	461a      	mov	r2, r3
 800877a:	68f9      	ldr	r1, [r7, #12]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fa1f 	bl	8008bc0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	88db      	ldrh	r3, [r3, #6]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa76 	bl	8008c7c <USBD_CtlSendStatus>
 8008790:	e000      	b.n	8008794 <USBD_GetDescriptor+0x2c8>
    return;
 8008792:	bf00      	nop
    }
  }
}
 8008794:	3710      	adds	r7, #16
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop

0800879c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	889b      	ldrh	r3, [r3, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d130      	bne.n	8008810 <USBD_SetAddress+0x74>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	88db      	ldrh	r3, [r3, #6]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d12c      	bne.n	8008810 <USBD_SetAddress+0x74>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	2b7f      	cmp	r3, #127	; 0x7f
 80087bc:	d828      	bhi.n	8008810 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d104      	bne.n	80087de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80087d4:	6839      	ldr	r1, [r7, #0]
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f988 	bl	8008aec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087dc:	e01c      	b.n	8008818 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7bfa      	ldrb	r2, [r7, #15]
 80087e2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f003 fc61 	bl	800c0b2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa43 	bl	8008c7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008804:	e008      	b.n	8008818 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880e:	e003      	b.n	8008818 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f96a 	bl	8008aec <USBD_CtlError>
  }
}
 8008818:	bf00      	nop
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	885b      	ldrh	r3, [r3, #2]
 800882e:	b2da      	uxtb	r2, r3
 8008830:	4b41      	ldr	r3, [pc, #260]	; (8008938 <USBD_SetConfig+0x118>)
 8008832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008834:	4b40      	ldr	r3, [pc, #256]	; (8008938 <USBD_SetConfig+0x118>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d904      	bls.n	8008846 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f954 	bl	8008aec <USBD_CtlError>
 8008844:	e075      	b.n	8008932 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800884c:	2b02      	cmp	r3, #2
 800884e:	d002      	beq.n	8008856 <USBD_SetConfig+0x36>
 8008850:	2b03      	cmp	r3, #3
 8008852:	d023      	beq.n	800889c <USBD_SetConfig+0x7c>
 8008854:	e062      	b.n	800891c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008856:	4b38      	ldr	r3, [pc, #224]	; (8008938 <USBD_SetConfig+0x118>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01a      	beq.n	8008894 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800885e:	4b36      	ldr	r3, [pc, #216]	; (8008938 <USBD_SetConfig+0x118>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2203      	movs	r2, #3
 800886c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008870:	4b31      	ldr	r3, [pc, #196]	; (8008938 <USBD_SetConfig+0x118>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff f9f4 	bl	8007c64 <USBD_SetClassConfig>
 800887c:	4603      	mov	r3, r0
 800887e:	2b02      	cmp	r3, #2
 8008880:	d104      	bne.n	800888c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f931 	bl	8008aec <USBD_CtlError>
            return;
 800888a:	e052      	b.n	8008932 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f9f5 	bl	8008c7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008892:	e04e      	b.n	8008932 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f9f1 	bl	8008c7c <USBD_CtlSendStatus>
        break;
 800889a:	e04a      	b.n	8008932 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800889c:	4b26      	ldr	r3, [pc, #152]	; (8008938 <USBD_SetConfig+0x118>)
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d112      	bne.n	80088ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80088ac:	4b22      	ldr	r3, [pc, #136]	; (8008938 <USBD_SetConfig+0x118>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	461a      	mov	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80088b6:	4b20      	ldr	r3, [pc, #128]	; (8008938 <USBD_SetConfig+0x118>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff f9f0 	bl	8007ca2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f9da 	bl	8008c7c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088c8:	e033      	b.n	8008932 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80088ca:	4b1b      	ldr	r3, [pc, #108]	; (8008938 <USBD_SetConfig+0x118>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d01d      	beq.n	8008914 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff f9de 	bl	8007ca2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <USBD_SetConfig+0x118>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088f0:	4b11      	ldr	r3, [pc, #68]	; (8008938 <USBD_SetConfig+0x118>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff f9b4 	bl	8007c64 <USBD_SetClassConfig>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d104      	bne.n	800890c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f8f1 	bl	8008aec <USBD_CtlError>
            return;
 800890a:	e012      	b.n	8008932 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f9b5 	bl	8008c7c <USBD_CtlSendStatus>
        break;
 8008912:	e00e      	b.n	8008932 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f9b1 	bl	8008c7c <USBD_CtlSendStatus>
        break;
 800891a:	e00a      	b.n	8008932 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f8e4 	bl	8008aec <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008924:	4b04      	ldr	r3, [pc, #16]	; (8008938 <USBD_SetConfig+0x118>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff f9b9 	bl	8007ca2 <USBD_ClrClassConfig>
        break;
 8008930:	bf00      	nop
    }
  }
}
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200009c4 	.word	0x200009c4

0800893c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d004      	beq.n	8008958 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8cb 	bl	8008aec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008956:	e021      	b.n	800899c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	2b01      	cmp	r3, #1
 8008960:	db17      	blt.n	8008992 <USBD_GetConfig+0x56>
 8008962:	2b02      	cmp	r3, #2
 8008964:	dd02      	ble.n	800896c <USBD_GetConfig+0x30>
 8008966:	2b03      	cmp	r3, #3
 8008968:	d00b      	beq.n	8008982 <USBD_GetConfig+0x46>
 800896a:	e012      	b.n	8008992 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3308      	adds	r3, #8
 8008976:	2201      	movs	r2, #1
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f920 	bl	8008bc0 <USBD_CtlSendData>
        break;
 8008980:	e00c      	b.n	800899c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	3304      	adds	r3, #4
 8008986:	2201      	movs	r2, #1
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f918 	bl	8008bc0 <USBD_CtlSendData>
        break;
 8008990:	e004      	b.n	800899c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8a9 	bl	8008aec <USBD_CtlError>
        break;
 800899a:	bf00      	nop
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b4:	3b01      	subs	r3, #1
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d81e      	bhi.n	80089f8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	88db      	ldrh	r3, [r3, #6]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d004      	beq.n	80089cc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f891 	bl	8008aec <USBD_CtlError>
        break;
 80089ca:	e01a      	b.n	8008a02 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f043 0202 	orr.w	r2, r3, #2
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	330c      	adds	r3, #12
 80089ec:	2202      	movs	r2, #2
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f8e5 	bl	8008bc0 <USBD_CtlSendData>
      break;
 80089f6:	e004      	b.n	8008a02 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80089f8:	6839      	ldr	r1, [r7, #0]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f876 	bl	8008aec <USBD_CtlError>
      break;
 8008a00:	bf00      	nop
  }
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	885b      	ldrh	r3, [r3, #2]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d106      	bne.n	8008a2a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f929 	bl	8008c7c <USBD_CtlSendStatus>
  }
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a42:	3b01      	subs	r3, #1
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d80b      	bhi.n	8008a60 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10c      	bne.n	8008a6a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f90f 	bl	8008c7c <USBD_CtlSendStatus>
      }
      break;
 8008a5e:	e004      	b.n	8008a6a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f842 	bl	8008aec <USBD_CtlError>
      break;
 8008a68:	e000      	b.n	8008a6c <USBD_ClrFeature+0x3a>
      break;
 8008a6a:	bf00      	nop
  }
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781a      	ldrb	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	785a      	ldrb	r2, [r3, #1]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	3302      	adds	r3, #2
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	3303      	adds	r3, #3
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	021b      	lsls	r3, r3, #8
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	4413      	add	r3, r2
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	3304      	adds	r3, #4
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	3305      	adds	r3, #5
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	021b      	lsls	r3, r3, #8
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	4413      	add	r3, r2
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	3306      	adds	r3, #6
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	3307      	adds	r3, #7
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	80da      	strh	r2, [r3, #6]

}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008af6:	2180      	movs	r1, #128	; 0x80
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f003 fa70 	bl	800bfde <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008afe:	2100      	movs	r1, #0
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f003 fa6c 	bl	800bfde <USBD_LL_StallEP>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b086      	sub	sp, #24
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d032      	beq.n	8008b8a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f000 f834 	bl	8008b92 <USBD_GetLen>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	1c5a      	adds	r2, r3, #1
 8008b3c:	75fa      	strb	r2, [r7, #23]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4413      	add	r3, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	1c5a      	adds	r2, r3, #1
 8008b4e:	75fa      	strb	r2, [r7, #23]
 8008b50:	461a      	mov	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	4413      	add	r3, r2
 8008b56:	2203      	movs	r2, #3
 8008b58:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008b5a:	e012      	b.n	8008b82 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	75fa      	strb	r2, [r7, #23]
 8008b62:	461a      	mov	r2, r3
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	441a      	add	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1c59      	adds	r1, r3, #1
 8008b6c:	60f9      	str	r1, [r7, #12]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	75fa      	strb	r2, [r7, #23]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e8      	bne.n	8008b5c <USBD_GetString+0x4e>
    }
  }
}
 8008b8a:	bf00      	nop
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008b9e:	e005      	b.n	8008bac <USBD_GetLen+0x1a>
  {
    len++;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1f5      	bne.n	8008ba0 <USBD_GetLen+0xe>
  }

  return len;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bc80      	pop	{r7}
 8008bbe:	4770      	bx	lr

08008bc0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bd6:	88fa      	ldrh	r2, [r7, #6]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008bdc:	88fa      	ldrh	r2, [r7, #6]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	2100      	movs	r1, #0
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f003 fa81 	bl	800c0f0 <USBD_LL_Transmit>

  return USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	4613      	mov	r3, r2
 8008c04:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f003 fa6f 	bl	800c0f0 <USBD_LL_Transmit>

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2203      	movs	r2, #3
 8008c2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c32:	88fa      	ldrh	r2, [r7, #6]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c3a:	88fa      	ldrh	r2, [r7, #6]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	2100      	movs	r1, #0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f003 fa74 	bl	800c136 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f003 fa62 	bl	800c136 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2204      	movs	r2, #4
 8008c88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2100      	movs	r1, #0
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f003 fa2c 	bl	800c0f0 <USBD_LL_Transmit>

  return USBD_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2205      	movs	r2, #5
 8008cae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f003 fa3c 	bl	800c136 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008cde:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008ce0:	7a5b      	ldrb	r3, [r3, #9]
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d831      	bhi.n	8008d4c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008ce8:	4b1b      	ldr	r3, [pc, #108]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008cea:	7a5b      	ldrb	r3, [r3, #9]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4b19      	ldr	r3, [pc, #100]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008cf8:	7a5b      	ldrb	r3, [r3, #9]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	4a16      	ldr	r2, [pc, #88]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008d08:	7a5b      	ldrb	r3, [r3, #9]
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	4b12      	ldr	r3, [pc, #72]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008d10:	4413      	add	r3, r2
 8008d12:	79fa      	ldrb	r2, [r7, #7]
 8008d14:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008d16:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008d18:	7a5b      	ldrb	r3, [r3, #9]
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	b2d1      	uxtb	r1, r2
 8008d20:	4a0d      	ldr	r2, [pc, #52]	; (8008d58 <FATFS_LinkDriverEx+0x90>)
 8008d22:	7251      	strb	r1, [r2, #9]
 8008d24:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008d26:	7dbb      	ldrb	r3, [r7, #22]
 8008d28:	3330      	adds	r3, #48	; 0x30
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	3301      	adds	r3, #1
 8008d34:	223a      	movs	r2, #58	; 0x3a
 8008d36:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	3302      	adds	r3, #2
 8008d3c:	222f      	movs	r2, #47	; 0x2f
 8008d3e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	3303      	adds	r3, #3
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8008d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	371c      	adds	r7, #28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bc80      	pop	{r7}
 8008d56:	4770      	bx	lr
 8008d58:	200009c8 	.word	0x200009c8

08008d5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d66:	2200      	movs	r2, #0
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff ffac 	bl	8008cc8 <FATFS_LinkDriverEx>
 8008d70:	4603      	mov	r3, r0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008d7a:	b480      	push	{r7}
 8008d7c:	b085      	sub	sp, #20
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	4603      	mov	r3, r0
 8008d82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008d88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d8c:	2b84      	cmp	r3, #132	; 0x84
 8008d8e:	d005      	beq.n	8008d9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008d90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	3303      	adds	r3, #3
 8008d9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr

08008da8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dae:	f3ef 8305 	mrs	r3, IPSR
 8008db2:	607b      	str	r3, [r7, #4]
  return(result);
 8008db4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	bf14      	ite	ne
 8008dba:	2301      	movne	r3, #1
 8008dbc:	2300      	moveq	r3, #0
 8008dbe:	b2db      	uxtb	r3, r3
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008dce:	f001 fd2b 	bl	800a828 <vTaskStartScheduler>
  
  return osOK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dda:	b089      	sub	sp, #36	; 0x24
 8008ddc:	af04      	add	r7, sp, #16
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d020      	beq.n	8008e2c <osThreadCreate+0x54>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01c      	beq.n	8008e2c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685c      	ldr	r4, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681d      	ldr	r5, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691e      	ldr	r6, [r3, #16]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff ffb8 	bl	8008d7a <makeFreeRtosPriority>
 8008e0a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	695b      	ldr	r3, [r3, #20]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e14:	9202      	str	r2, [sp, #8]
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	9100      	str	r1, [sp, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	4632      	mov	r2, r6
 8008e1e:	4629      	mov	r1, r5
 8008e20:	4620      	mov	r0, r4
 8008e22:	f001 fab5 	bl	800a390 <xTaskCreateStatic>
 8008e26:	4603      	mov	r3, r0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	e01c      	b.n	8008e66 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685c      	ldr	r4, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e38:	b29e      	uxth	r6, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff ff9a 	bl	8008d7a <makeFreeRtosPriority>
 8008e46:	4602      	mov	r2, r0
 8008e48:	f107 030c 	add.w	r3, r7, #12
 8008e4c:	9301      	str	r3, [sp, #4]
 8008e4e:	9200      	str	r2, [sp, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	4632      	mov	r2, r6
 8008e54:	4629      	mov	r1, r5
 8008e56:	4620      	mov	r0, r4
 8008e58:	f001 faf3 	bl	800a442 <xTaskCreate>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d001      	beq.n	8008e66 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e000      	b.n	8008e68 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008e66:	68fb      	ldr	r3, [r7, #12]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e70 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <osDelay+0x16>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	e000      	b.n	8008e88 <osDelay+0x18>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f001 fc07 	bl	800a69c <vTaskDelay>
  
  return osOK;
 8008e8e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	607a      	str	r2, [r7, #4]
 8008ea4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d013      	beq.n	8008ed6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8008eae:	7afb      	ldrb	r3, [r7, #11]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <osTimerCreate+0x20>
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	e000      	b.n	8008eba <osTimerCreate+0x22>
 8008eb8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8008ec2:	9201      	str	r2, [sp, #4]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	460a      	mov	r2, r1
 8008eca:	2101      	movs	r1, #1
 8008ecc:	480b      	ldr	r0, [pc, #44]	; (8008efc <osTimerCreate+0x64>)
 8008ece:	f002 fa56 	bl	800b37e <xTimerCreateStatic>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	e00e      	b.n	8008ef4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <osTimerCreate+0x48>
 8008edc:	2201      	movs	r2, #1
 8008ede:	e000      	b.n	8008ee2 <osTimerCreate+0x4a>
 8008ee0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2101      	movs	r1, #1
 8008eec:	4803      	ldr	r0, [pc, #12]	; (8008efc <osTimerCreate+0x64>)
 8008eee:	f002 fa25 	bl	800b33c <xTimerCreate>
 8008ef2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	0800cc54 	.word	0x0800cc54

08008f00 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af02      	add	r7, sp, #8
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <osTimerStart+0x20>
    ticks = 1;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8008f20:	f7ff ff42 	bl	8008da8 <inHandlerMode>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01b      	beq.n	8008f62 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8008f2a:	f107 020c 	add.w	r2, r7, #12
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	2109      	movs	r1, #9
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f002 fa8d 	bl	800b458 <xTimerGenericCommand>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d002      	beq.n	8008f4a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8008f44:	23ff      	movs	r3, #255	; 0xff
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	e018      	b.n	8008f7c <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d015      	beq.n	8008f7c <osTimerStart+0x7c>
 8008f50:	4b0d      	ldr	r3, [pc, #52]	; (8008f88 <osTimerStart+0x88>)
 8008f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	f3bf 8f6f 	isb	sy
 8008f60:	e00c      	b.n	8008f7c <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008f62:	2300      	movs	r3, #0
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	2300      	movs	r3, #0
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	2104      	movs	r1, #4
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f002 fa73 	bl	800b458 <xTimerGenericCommand>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d001      	beq.n	8008f7c <osTimerStart+0x7c>
      result = osErrorOS;
 8008f78:	23ff      	movs	r3, #255	; 0xff
 8008f7a:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8008f7c:	697b      	ldr	r3, [r7, #20]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	e000ed04 	.word	0xe000ed04

08008f8c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	2001      	movs	r0, #1
 8008fa4:	f000 fe02 	bl	8009bac <xQueueCreateMutexStatic>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	e003      	b.n	8008fb4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008fac:	2001      	movs	r0, #1
 8008fae:	f000 fde5 	bl	8009b7c <xQueueCreateMutex>
 8008fb2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008fbc:	b590      	push	{r4, r7, lr}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d012      	beq.n	8008ff4 <osMessageCreate+0x38>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00e      	beq.n	8008ff4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6859      	ldr	r1, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689a      	ldr	r2, [r3, #8]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68dc      	ldr	r4, [r3, #12]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	4623      	mov	r3, r4
 8008fec:	f000 fcde 	bl	80099ac <xQueueGenericCreateStatic>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	e008      	b.n	8009006 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4619      	mov	r1, r3
 8009000:	f000 fd46 	bl	8009a90 <xQueueGenericCreate>
 8009004:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009006:	4618      	mov	r0, r3
 8009008:	370c      	adds	r7, #12
 800900a:	46bd      	mov	sp, r7
 800900c:	bd90      	pop	{r4, r7, pc}

0800900e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f103 0208 	add.w	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f04f 32ff 	mov.w	r2, #4294967295
 8009026:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f103 0208 	add.w	r2, r3, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f103 0208 	add.w	r2, r3, #8
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr

08009064 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	601a      	str	r2, [r3, #0]
}
 80090a0:	bf00      	nop
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c0:	d103      	bne.n	80090ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e00c      	b.n	80090e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3308      	adds	r3, #8
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e002      	b.n	80090d8 <vListInsert+0x2e>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d9f6      	bls.n	80090d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1c5a      	adds	r2, r3, #1
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	bc80      	pop	{r7}
 8009118:	4770      	bx	lr

0800911a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6892      	ldr	r2, [r2, #8]
 8009130:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6852      	ldr	r2, [r2, #4]
 800913a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d103      	bne.n	800914e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	1e5a      	subs	r2, r3, #1
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr

0800916c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3b04      	subs	r3, #4
 800917c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3b04      	subs	r3, #4
 800918a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f023 0201 	bic.w	r2, r3, #1
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3b04      	subs	r3, #4
 800919a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <pxPortInitialiseStack+0x54>)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3b14      	subs	r3, #20
 80091a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3b20      	subs	r3, #32
 80091b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bc80      	pop	{r7}
 80091be:	4770      	bx	lr
 80091c0:	080091c5 	.word	0x080091c5

080091c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091ce:	4b10      	ldr	r3, [pc, #64]	; (8009210 <prvTaskExitError+0x4c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d009      	beq.n	80091ec <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	60fb      	str	r3, [r7, #12]
 80091ea:	e7fe      	b.n	80091ea <prvTaskExitError+0x26>
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091fe:	bf00      	nop
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0fc      	beq.n	8009200 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009206:	bf00      	nop
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	bc80      	pop	{r7}
 800920e:	4770      	bx	lr
 8009210:	200001c4 	.word	0x200001c4
	...

08009220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009220:	4b07      	ldr	r3, [pc, #28]	; (8009240 <pxCurrentTCBConst2>)
 8009222:	6819      	ldr	r1, [r3, #0]
 8009224:	6808      	ldr	r0, [r1, #0]
 8009226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800922a:	f380 8809 	msr	PSP, r0
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f04f 0000 	mov.w	r0, #0
 8009236:	f380 8811 	msr	BASEPRI, r0
 800923a:	f04e 0e0d 	orr.w	lr, lr, #13
 800923e:	4770      	bx	lr

08009240 <pxCurrentTCBConst2>:
 8009240:	20001994 	.word	0x20001994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009244:	bf00      	nop
 8009246:	bf00      	nop

08009248 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009248:	4806      	ldr	r0, [pc, #24]	; (8009264 <prvPortStartFirstTask+0x1c>)
 800924a:	6800      	ldr	r0, [r0, #0]
 800924c:	6800      	ldr	r0, [r0, #0]
 800924e:	f380 8808 	msr	MSP, r0
 8009252:	b662      	cpsie	i
 8009254:	b661      	cpsie	f
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	df00      	svc	0
 8009260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009262:	bf00      	nop
 8009264:	e000ed08 	.word	0xe000ed08

08009268 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800926e:	4b31      	ldr	r3, [pc, #196]	; (8009334 <xPortStartScheduler+0xcc>)
 8009270:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	22ff      	movs	r2, #255	; 0xff
 800927e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	b2db      	uxtb	r3, r3
 8009286:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009288:	78fb      	ldrb	r3, [r7, #3]
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009290:	b2da      	uxtb	r2, r3
 8009292:	4b29      	ldr	r3, [pc, #164]	; (8009338 <xPortStartScheduler+0xd0>)
 8009294:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009296:	4b29      	ldr	r3, [pc, #164]	; (800933c <xPortStartScheduler+0xd4>)
 8009298:	2207      	movs	r2, #7
 800929a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800929c:	e009      	b.n	80092b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800929e:	4b27      	ldr	r3, [pc, #156]	; (800933c <xPortStartScheduler+0xd4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	4a25      	ldr	r2, [pc, #148]	; (800933c <xPortStartScheduler+0xd4>)
 80092a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092a8:	78fb      	ldrb	r3, [r7, #3]
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092b2:	78fb      	ldrb	r3, [r7, #3]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ba:	2b80      	cmp	r3, #128	; 0x80
 80092bc:	d0ef      	beq.n	800929e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092be:	4b1f      	ldr	r3, [pc, #124]	; (800933c <xPortStartScheduler+0xd4>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f1c3 0307 	rsb	r3, r3, #7
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	d009      	beq.n	80092de <xPortStartScheduler+0x76>
 80092ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ce:	f383 8811 	msr	BASEPRI, r3
 80092d2:	f3bf 8f6f 	isb	sy
 80092d6:	f3bf 8f4f 	dsb	sy
 80092da:	60bb      	str	r3, [r7, #8]
 80092dc:	e7fe      	b.n	80092dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80092de:	4b17      	ldr	r3, [pc, #92]	; (800933c <xPortStartScheduler+0xd4>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	021b      	lsls	r3, r3, #8
 80092e4:	4a15      	ldr	r2, [pc, #84]	; (800933c <xPortStartScheduler+0xd4>)
 80092e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80092e8:	4b14      	ldr	r3, [pc, #80]	; (800933c <xPortStartScheduler+0xd4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092f0:	4a12      	ldr	r2, [pc, #72]	; (800933c <xPortStartScheduler+0xd4>)
 80092f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80092fc:	4a10      	ldr	r2, [pc, #64]	; (8009340 <xPortStartScheduler+0xd8>)
 80092fe:	4b10      	ldr	r3, [pc, #64]	; (8009340 <xPortStartScheduler+0xd8>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009308:	4a0d      	ldr	r2, [pc, #52]	; (8009340 <xPortStartScheduler+0xd8>)
 800930a:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <xPortStartScheduler+0xd8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009314:	f000 f8b0 	bl	8009478 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009318:	4b0a      	ldr	r3, [pc, #40]	; (8009344 <xPortStartScheduler+0xdc>)
 800931a:	2200      	movs	r2, #0
 800931c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800931e:	f7ff ff93 	bl	8009248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009322:	f001 fc59 	bl	800abd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009326:	f7ff ff4d 	bl	80091c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	e000e400 	.word	0xe000e400
 8009338:	200009d4 	.word	0x200009d4
 800933c:	200009d8 	.word	0x200009d8
 8009340:	e000ed20 	.word	0xe000ed20
 8009344:	200001c4 	.word	0x200001c4

08009348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009360:	4b0e      	ldr	r3, [pc, #56]	; (800939c <vPortEnterCritical+0x54>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3301      	adds	r3, #1
 8009366:	4a0d      	ldr	r2, [pc, #52]	; (800939c <vPortEnterCritical+0x54>)
 8009368:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800936a:	4b0c      	ldr	r3, [pc, #48]	; (800939c <vPortEnterCritical+0x54>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d10e      	bne.n	8009390 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009372:	4b0b      	ldr	r3, [pc, #44]	; (80093a0 <vPortEnterCritical+0x58>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d009      	beq.n	8009390 <vPortEnterCritical+0x48>
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	603b      	str	r3, [r7, #0]
 800938e:	e7fe      	b.n	800938e <vPortEnterCritical+0x46>
	}
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	200001c4 	.word	0x200001c4
 80093a0:	e000ed04 	.word	0xe000ed04

080093a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093aa:	4b10      	ldr	r3, [pc, #64]	; (80093ec <vPortExitCritical+0x48>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d109      	bne.n	80093c6 <vPortExitCritical+0x22>
 80093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	607b      	str	r3, [r7, #4]
 80093c4:	e7fe      	b.n	80093c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80093c6:	4b09      	ldr	r3, [pc, #36]	; (80093ec <vPortExitCritical+0x48>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	4a07      	ldr	r2, [pc, #28]	; (80093ec <vPortExitCritical+0x48>)
 80093ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <vPortExitCritical+0x48>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d104      	bne.n	80093e2 <vPortExitCritical+0x3e>
 80093d8:	2300      	movs	r3, #0
 80093da:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr
 80093ec:	200001c4 	.word	0x200001c4

080093f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093f0:	f3ef 8009 	mrs	r0, PSP
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <pxCurrentTCBConst>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009400:	6010      	str	r0, [r2, #0]
 8009402:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009406:	f04f 0050 	mov.w	r0, #80	; 0x50
 800940a:	f380 8811 	msr	BASEPRI, r0
 800940e:	f001 fbe3 	bl	800abd8 <vTaskSwitchContext>
 8009412:	f04f 0000 	mov.w	r0, #0
 8009416:	f380 8811 	msr	BASEPRI, r0
 800941a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	6808      	ldr	r0, [r1, #0]
 8009422:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009426:	f380 8809 	msr	PSP, r0
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	4770      	bx	lr

08009430 <pxCurrentTCBConst>:
 8009430:	20001994 	.word	0x20001994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009434:	bf00      	nop
 8009436:	bf00      	nop

08009438 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009450:	f001 fb06 	bl	800aa60 <xTaskIncrementTick>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800945a:	4b06      	ldr	r3, [pc, #24]	; (8009474 <SysTick_Handler+0x3c>)
 800945c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	2300      	movs	r3, #0
 8009464:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009478:	b480      	push	{r7}
 800947a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <vPortSetupTimerInterrupt+0x30>)
 800947e:	2200      	movs	r2, #0
 8009480:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009482:	4b0a      	ldr	r3, [pc, #40]	; (80094ac <vPortSetupTimerInterrupt+0x34>)
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009488:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <vPortSetupTimerInterrupt+0x38>)
 800948a:	4b0a      	ldr	r3, [pc, #40]	; (80094b4 <vPortSetupTimerInterrupt+0x3c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	490a      	ldr	r1, [pc, #40]	; (80094b8 <vPortSetupTimerInterrupt+0x40>)
 8009490:	fba1 1303 	umull	r1, r3, r1, r3
 8009494:	099b      	lsrs	r3, r3, #6
 8009496:	3b01      	subs	r3, #1
 8009498:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800949a:	4b03      	ldr	r3, [pc, #12]	; (80094a8 <vPortSetupTimerInterrupt+0x30>)
 800949c:	2207      	movs	r2, #7
 800949e:	601a      	str	r2, [r3, #0]
}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr
 80094a8:	e000e010 	.word	0xe000e010
 80094ac:	e000e018 	.word	0xe000e018
 80094b0:	e000e014 	.word	0xe000e014
 80094b4:	2000002c 	.word	0x2000002c
 80094b8:	10624dd3 	.word	0x10624dd3

080094bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094c2:	f3ef 8305 	mrs	r3, IPSR
 80094c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b0f      	cmp	r3, #15
 80094cc:	d913      	bls.n	80094f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ce:	4a15      	ldr	r2, [pc, #84]	; (8009524 <vPortValidateInterruptPriority+0x68>)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094d8:	4b13      	ldr	r3, [pc, #76]	; (8009528 <vPortValidateInterruptPriority+0x6c>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	7afa      	ldrb	r2, [r7, #11]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d209      	bcs.n	80094f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	607b      	str	r3, [r7, #4]
 80094f4:	e7fe      	b.n	80094f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094f6:	4b0d      	ldr	r3, [pc, #52]	; (800952c <vPortValidateInterruptPriority+0x70>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80094fe:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <vPortValidateInterruptPriority+0x74>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	d909      	bls.n	800951a <vPortValidateInterruptPriority+0x5e>
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	e7fe      	b.n	8009518 <vPortValidateInterruptPriority+0x5c>
	}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	bc80      	pop	{r7}
 8009522:	4770      	bx	lr
 8009524:	e000e3f0 	.word	0xe000e3f0
 8009528:	200009d4 	.word	0x200009d4
 800952c:	e000ed0c 	.word	0xe000ed0c
 8009530:	200009d8 	.word	0x200009d8

08009534 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08a      	sub	sp, #40	; 0x28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800953c:	2300      	movs	r3, #0
 800953e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009540:	f001 f9d6 	bl	800a8f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009544:	4b57      	ldr	r3, [pc, #348]	; (80096a4 <pvPortMalloc+0x170>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800954c:	f000 f90c 	bl	8009768 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009550:	4b55      	ldr	r3, [pc, #340]	; (80096a8 <pvPortMalloc+0x174>)
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4013      	ands	r3, r2
 8009558:	2b00      	cmp	r3, #0
 800955a:	f040 808c 	bne.w	8009676 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01c      	beq.n	800959e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009564:	2208      	movs	r2, #8
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	2b00      	cmp	r3, #0
 8009574:	d013      	beq.n	800959e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f023 0307 	bic.w	r3, r3, #7
 800957c:	3308      	adds	r3, #8
 800957e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d009      	beq.n	800959e <pvPortMalloc+0x6a>
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	617b      	str	r3, [r7, #20]
 800959c:	e7fe      	b.n	800959c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d068      	beq.n	8009676 <pvPortMalloc+0x142>
 80095a4:	4b41      	ldr	r3, [pc, #260]	; (80096ac <pvPortMalloc+0x178>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d863      	bhi.n	8009676 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095ae:	4b40      	ldr	r3, [pc, #256]	; (80096b0 <pvPortMalloc+0x17c>)
 80095b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095b2:	4b3f      	ldr	r3, [pc, #252]	; (80096b0 <pvPortMalloc+0x17c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095b8:	e004      	b.n	80095c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c6:	685a      	ldr	r2, [r3, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d203      	bcs.n	80095d6 <pvPortMalloc+0xa2>
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1f1      	bne.n	80095ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095d6:	4b33      	ldr	r3, [pc, #204]	; (80096a4 <pvPortMalloc+0x170>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095dc:	429a      	cmp	r2, r3
 80095de:	d04a      	beq.n	8009676 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2208      	movs	r2, #8
 80095e6:	4413      	add	r3, r2
 80095e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	2308      	movs	r3, #8
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	429a      	cmp	r2, r3
 8009600:	d91e      	bls.n	8009640 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4413      	add	r3, r2
 8009608:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <pvPortMalloc+0xf4>
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	613b      	str	r3, [r7, #16]
 8009626:	e7fe      	b.n	8009626 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800963a:	69b8      	ldr	r0, [r7, #24]
 800963c:	f000 f8f6 	bl	800982c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009640:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <pvPortMalloc+0x178>)
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	4a18      	ldr	r2, [pc, #96]	; (80096ac <pvPortMalloc+0x178>)
 800964c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800964e:	4b17      	ldr	r3, [pc, #92]	; (80096ac <pvPortMalloc+0x178>)
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4b18      	ldr	r3, [pc, #96]	; (80096b4 <pvPortMalloc+0x180>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d203      	bcs.n	8009662 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800965a:	4b14      	ldr	r3, [pc, #80]	; (80096ac <pvPortMalloc+0x178>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a15      	ldr	r2, [pc, #84]	; (80096b4 <pvPortMalloc+0x180>)
 8009660:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <pvPortMalloc+0x174>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	431a      	orrs	r2, r3
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009676:	f001 f949 	bl	800a90c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <pvPortMalloc+0x164>
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	e7fe      	b.n	8009696 <pvPortMalloc+0x162>
	return pvReturn;
 8009698:	69fb      	ldr	r3, [r7, #28]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3728      	adds	r7, #40	; 0x28
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20001984 	.word	0x20001984
 80096a8:	20001990 	.word	0x20001990
 80096ac:	20001988 	.word	0x20001988
 80096b0:	2000197c 	.word	0x2000197c
 80096b4:	2000198c 	.word	0x2000198c

080096b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d046      	beq.n	8009758 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096ca:	2308      	movs	r3, #8
 80096cc:	425b      	negs	r3, r3
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4413      	add	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b20      	ldr	r3, [pc, #128]	; (8009760 <vPortFree+0xa8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4013      	ands	r3, r2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <vPortFree+0x42>
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	e7fe      	b.n	80096f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <vPortFree+0x5e>
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	60bb      	str	r3, [r7, #8]
 8009714:	e7fe      	b.n	8009714 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	4b11      	ldr	r3, [pc, #68]	; (8009760 <vPortFree+0xa8>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4013      	ands	r3, r2
 8009720:	2b00      	cmp	r3, #0
 8009722:	d019      	beq.n	8009758 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d115      	bne.n	8009758 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <vPortFree+0xa8>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	43db      	mvns	r3, r3
 8009736:	401a      	ands	r2, r3
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800973c:	f001 f8d8 	bl	800a8f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	685a      	ldr	r2, [r3, #4]
 8009744:	4b07      	ldr	r3, [pc, #28]	; (8009764 <vPortFree+0xac>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4413      	add	r3, r2
 800974a:	4a06      	ldr	r2, [pc, #24]	; (8009764 <vPortFree+0xac>)
 800974c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800974e:	6938      	ldr	r0, [r7, #16]
 8009750:	f000 f86c 	bl	800982c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009754:	f001 f8da 	bl	800a90c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20001990 	.word	0x20001990
 8009764:	20001988 	.word	0x20001988

08009768 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800976e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8009772:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009774:	4b27      	ldr	r3, [pc, #156]	; (8009814 <prvHeapInit+0xac>)
 8009776:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00c      	beq.n	800979c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	3307      	adds	r3, #7
 8009786:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0307 	bic.w	r3, r3, #7
 800978e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	1ad3      	subs	r3, r2, r3
 8009796:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <prvHeapInit+0xac>)
 8009798:	4413      	add	r3, r2
 800979a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097a0:	4a1d      	ldr	r2, [pc, #116]	; (8009818 <prvHeapInit+0xb0>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097a6:	4b1c      	ldr	r3, [pc, #112]	; (8009818 <prvHeapInit+0xb0>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	4413      	add	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097b4:	2208      	movs	r2, #8
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	1a9b      	subs	r3, r3, r2
 80097ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4a15      	ldr	r2, [pc, #84]	; (800981c <prvHeapInit+0xb4>)
 80097c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <prvHeapInit+0xb4>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2200      	movs	r2, #0
 80097d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097d2:	4b12      	ldr	r3, [pc, #72]	; (800981c <prvHeapInit+0xb4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	1ad2      	subs	r2, r2, r3
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097e8:	4b0c      	ldr	r3, [pc, #48]	; (800981c <prvHeapInit+0xb4>)
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4a0a      	ldr	r2, [pc, #40]	; (8009820 <prvHeapInit+0xb8>)
 80097f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	4a09      	ldr	r2, [pc, #36]	; (8009824 <prvHeapInit+0xbc>)
 80097fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009800:	4b09      	ldr	r3, [pc, #36]	; (8009828 <prvHeapInit+0xc0>)
 8009802:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009806:	601a      	str	r2, [r3, #0]
}
 8009808:	bf00      	nop
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	bc80      	pop	{r7}
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	200009dc 	.word	0x200009dc
 8009818:	2000197c 	.word	0x2000197c
 800981c:	20001984 	.word	0x20001984
 8009820:	2000198c 	.word	0x2000198c
 8009824:	20001988 	.word	0x20001988
 8009828:	20001990 	.word	0x20001990

0800982c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009834:	4b27      	ldr	r3, [pc, #156]	; (80098d4 <prvInsertBlockIntoFreeList+0xa8>)
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	e002      	b.n	8009840 <prvInsertBlockIntoFreeList+0x14>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d3f7      	bcc.n	800983a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	441a      	add	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	429a      	cmp	r2, r3
 800985a:	d108      	bne.n	800986e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	441a      	add	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	441a      	add	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d118      	bne.n	80098b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <prvInsertBlockIntoFreeList+0xac>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	429a      	cmp	r2, r3
 800988c:	d00d      	beq.n	80098aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	441a      	add	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	e008      	b.n	80098bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098aa:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <prvInsertBlockIntoFreeList+0xac>)
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	e003      	b.n	80098bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d002      	beq.n	80098ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bc80      	pop	{r7}
 80098d2:	4770      	bx	lr
 80098d4:	2000197c 	.word	0x2000197c
 80098d8:	20001984 	.word	0x20001984

080098dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b084      	sub	sp, #16
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <xQueueGenericReset+0x28>
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	e7fe      	b.n	8009902 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009904:	f7ff fd20 	bl	8009348 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009910:	68f9      	ldr	r1, [r7, #12]
 8009912:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009914:	fb01 f303 	mul.w	r3, r1, r3
 8009918:	441a      	add	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009934:	3b01      	subs	r3, #1
 8009936:	68f9      	ldr	r1, [r7, #12]
 8009938:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800993a:	fb01 f303 	mul.w	r3, r1, r3
 800993e:	441a      	add	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	22ff      	movs	r2, #255	; 0xff
 8009948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	22ff      	movs	r2, #255	; 0xff
 8009950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d114      	bne.n	8009984 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01a      	beq.n	8009998 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3310      	adds	r3, #16
 8009966:	4618      	mov	r0, r3
 8009968:	f001 f9de 	bl	800ad28 <xTaskRemoveFromEventList>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d012      	beq.n	8009998 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009972:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <xQueueGenericReset+0xcc>)
 8009974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	e009      	b.n	8009998 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3310      	adds	r3, #16
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff fb40 	bl	800900e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3324      	adds	r3, #36	; 0x24
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fb3b 	bl	800900e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009998:	f7ff fd04 	bl	80093a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800999c:	2301      	movs	r3, #1
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	e000ed04 	.word	0xe000ed04

080099ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08e      	sub	sp, #56	; 0x38
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <xQueueGenericCreateStatic+0x28>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d2:	e7fe      	b.n	80099d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <xQueueGenericCreateStatic+0x42>
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	627b      	str	r3, [r7, #36]	; 0x24
 80099ec:	e7fe      	b.n	80099ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <xQueueGenericCreateStatic+0x4e>
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <xQueueGenericCreateStatic+0x52>
 80099fa:	2301      	movs	r3, #1
 80099fc:	e000      	b.n	8009a00 <xQueueGenericCreateStatic+0x54>
 80099fe:	2300      	movs	r3, #0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d109      	bne.n	8009a18 <xQueueGenericCreateStatic+0x6c>
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	623b      	str	r3, [r7, #32]
 8009a16:	e7fe      	b.n	8009a16 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <xQueueGenericCreateStatic+0x78>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d101      	bne.n	8009a28 <xQueueGenericCreateStatic+0x7c>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e000      	b.n	8009a2a <xQueueGenericCreateStatic+0x7e>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d109      	bne.n	8009a42 <xQueueGenericCreateStatic+0x96>
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	61fb      	str	r3, [r7, #28]
 8009a40:	e7fe      	b.n	8009a40 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a42:	2348      	movs	r3, #72	; 0x48
 8009a44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b48      	cmp	r3, #72	; 0x48
 8009a4a:	d009      	beq.n	8009a60 <xQueueGenericCreateStatic+0xb4>
 8009a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a50:	f383 8811 	msr	BASEPRI, r3
 8009a54:	f3bf 8f6f 	isb	sy
 8009a58:	f3bf 8f4f 	dsb	sy
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	e7fe      	b.n	8009a5e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00d      	beq.n	8009a86 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a72:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	68b9      	ldr	r1, [r7, #8]
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 f842 	bl	8009b0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3730      	adds	r7, #48	; 0x30
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	; 0x28
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <xQueueGenericCreate+0x28>
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	e7fe      	b.n	8009ab6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61fb      	str	r3, [r7, #28]
 8009ac2:	e004      	b.n	8009ace <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	68ba      	ldr	r2, [r7, #8]
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
 8009acc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	3348      	adds	r3, #72	; 0x48
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7ff fd2e 	bl	8009534 <pvPortMalloc>
 8009ad8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00f      	beq.n	8009b00 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	3348      	adds	r3, #72	; 0x48
 8009ae4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aee:	79fa      	ldrb	r2, [r7, #7]
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	4613      	mov	r3, r2
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	68b9      	ldr	r1, [r7, #8]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 f805 	bl	8009b0a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009b00:	69bb      	ldr	r3, [r7, #24]
	}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3720      	adds	r7, #32
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	60f8      	str	r0, [r7, #12]
 8009b12:	60b9      	str	r1, [r7, #8]
 8009b14:	607a      	str	r2, [r7, #4]
 8009b16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d103      	bne.n	8009b26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	e002      	b.n	8009b2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b38:	2101      	movs	r1, #1
 8009b3a:	69b8      	ldr	r0, [r7, #24]
 8009b3c:	f7ff fece 	bl	80098dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b40:	bf00      	nop
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00e      	beq.n	8009b74 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009b68:	2300      	movs	r3, #0
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 f838 	bl	8009be4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	4603      	mov	r3, r0
 8009b84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b86:	2301      	movs	r3, #1
 8009b88:	617b      	str	r3, [r7, #20]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
 8009b90:	461a      	mov	r2, r3
 8009b92:	6939      	ldr	r1, [r7, #16]
 8009b94:	6978      	ldr	r0, [r7, #20]
 8009b96:	f7ff ff7b 	bl	8009a90 <xQueueGenericCreate>
 8009b9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff ffd3 	bl	8009b48 <prvInitialiseMutex>

		return pxNewQueue;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	6039      	str	r1, [r7, #0]
 8009bb6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	617b      	str	r3, [r7, #20]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009bc0:	79fb      	ldrb	r3, [r7, #7]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	6939      	ldr	r1, [r7, #16]
 8009bca:	6978      	ldr	r0, [r7, #20]
 8009bcc:	f7ff feee 	bl	80099ac <xQueueGenericCreateStatic>
 8009bd0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f7ff ffb8 	bl	8009b48 <prvInitialiseMutex>

		return pxNewQueue;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
	}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
	...

08009be4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08e      	sub	sp, #56	; 0x38
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d109      	bne.n	8009c14 <xQueueGenericSend+0x30>
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c12:	e7fe      	b.n	8009c12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d103      	bne.n	8009c22 <xQueueGenericSend+0x3e>
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <xQueueGenericSend+0x42>
 8009c22:	2301      	movs	r3, #1
 8009c24:	e000      	b.n	8009c28 <xQueueGenericSend+0x44>
 8009c26:	2300      	movs	r3, #0
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d109      	bne.n	8009c40 <xQueueGenericSend+0x5c>
 8009c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c30:	f383 8811 	msr	BASEPRI, r3
 8009c34:	f3bf 8f6f 	isb	sy
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c3e:	e7fe      	b.n	8009c3e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d103      	bne.n	8009c4e <xQueueGenericSend+0x6a>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d101      	bne.n	8009c52 <xQueueGenericSend+0x6e>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e000      	b.n	8009c54 <xQueueGenericSend+0x70>
 8009c52:	2300      	movs	r3, #0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d109      	bne.n	8009c6c <xQueueGenericSend+0x88>
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	623b      	str	r3, [r7, #32]
 8009c6a:	e7fe      	b.n	8009c6a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c6c:	f001 fa16 	bl	800b09c <xTaskGetSchedulerState>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d102      	bne.n	8009c7c <xQueueGenericSend+0x98>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <xQueueGenericSend+0x9c>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e000      	b.n	8009c82 <xQueueGenericSend+0x9e>
 8009c80:	2300      	movs	r3, #0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <xQueueGenericSend+0xb6>
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e7fe      	b.n	8009c98 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c9a:	f7ff fb55 	bl	8009348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d302      	bcc.n	8009cb0 <xQueueGenericSend+0xcc>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d129      	bne.n	8009d04 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	68b9      	ldr	r1, [r7, #8]
 8009cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb6:	f000 f9ff 	bl	800a0b8 <prvCopyDataToQueue>
 8009cba:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d010      	beq.n	8009ce6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	3324      	adds	r3, #36	; 0x24
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 f82d 	bl	800ad28 <xTaskRemoveFromEventList>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d013      	beq.n	8009cfc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cd4:	4b3f      	ldr	r3, [pc, #252]	; (8009dd4 <xQueueGenericSend+0x1f0>)
 8009cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cda:	601a      	str	r2, [r3, #0]
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	e00a      	b.n	8009cfc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cec:	4b39      	ldr	r3, [pc, #228]	; (8009dd4 <xQueueGenericSend+0x1f0>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cfc:	f7ff fb52 	bl	80093a4 <vPortExitCritical>
				return pdPASS;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e063      	b.n	8009dcc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d103      	bne.n	8009d12 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d0a:	f7ff fb4b 	bl	80093a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e05c      	b.n	8009dcc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d106      	bne.n	8009d26 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d18:	f107 0314 	add.w	r3, r7, #20
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 f865 	bl	800adec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d22:	2301      	movs	r3, #1
 8009d24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d26:	f7ff fb3d 	bl	80093a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d2a:	f000 fde1 	bl	800a8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d2e:	f7ff fb0b 	bl	8009348 <vPortEnterCritical>
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d38:	b25b      	sxtb	r3, r3
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d103      	bne.n	8009d48 <xQueueGenericSend+0x164>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d4e:	b25b      	sxtb	r3, r3
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d54:	d103      	bne.n	8009d5e <xQueueGenericSend+0x17a>
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d5e:	f7ff fb21 	bl	80093a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d62:	1d3a      	adds	r2, r7, #4
 8009d64:	f107 0314 	add.w	r3, r7, #20
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f001 f854 	bl	800ae18 <xTaskCheckForTimeOut>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d124      	bne.n	8009dc0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d78:	f000 fa96 	bl	800a2a8 <prvIsQueueFull>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d018      	beq.n	8009db4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	3310      	adds	r3, #16
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	4611      	mov	r1, r2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 ff7e 	bl	800ac8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d92:	f000 fa21 	bl	800a1d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d96:	f000 fdb9 	bl	800a90c <xTaskResumeAll>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f af7c 	bne.w	8009c9a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <xQueueGenericSend+0x1f0>)
 8009da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	e772      	b.n	8009c9a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009db6:	f000 fa0f 	bl	800a1d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dba:	f000 fda7 	bl	800a90c <xTaskResumeAll>
 8009dbe:	e76c      	b.n	8009c9a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dc2:	f000 fa09 	bl	800a1d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dc6:	f000 fda1 	bl	800a90c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dca:	2300      	movs	r3, #0
		}
	}
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3738      	adds	r7, #56	; 0x38
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	e000ed04 	.word	0xe000ed04

08009dd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b08e      	sub	sp, #56	; 0x38
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
 8009de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d109      	bne.n	8009e04 <xQueueGenericSendFromISR+0x2c>
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
 8009e02:	e7fe      	b.n	8009e02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d103      	bne.n	8009e12 <xQueueGenericSendFromISR+0x3a>
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <xQueueGenericSendFromISR+0x3e>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <xQueueGenericSendFromISR+0x40>
 8009e16:	2300      	movs	r3, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d109      	bne.n	8009e30 <xQueueGenericSendFromISR+0x58>
 8009e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	623b      	str	r3, [r7, #32]
 8009e2e:	e7fe      	b.n	8009e2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d103      	bne.n	8009e3e <xQueueGenericSendFromISR+0x66>
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <xQueueGenericSendFromISR+0x6a>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <xQueueGenericSendFromISR+0x6c>
 8009e42:	2300      	movs	r3, #0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d109      	bne.n	8009e5c <xQueueGenericSendFromISR+0x84>
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	61fb      	str	r3, [r7, #28]
 8009e5a:	e7fe      	b.n	8009e5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e5c:	f7ff fb2e 	bl	80094bc <vPortValidateInterruptPriority>
	__asm volatile
 8009e60:	f3ef 8211 	mrs	r2, BASEPRI
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	61ba      	str	r2, [r7, #24]
 8009e76:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009e78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d302      	bcc.n	8009e8e <xQueueGenericSendFromISR+0xb6>
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d12c      	bne.n	8009ee8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	68b9      	ldr	r1, [r7, #8]
 8009e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e9e:	f000 f90b 	bl	800a0b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ea2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eaa:	d112      	bne.n	8009ed2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d016      	beq.n	8009ee2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	3324      	adds	r3, #36	; 0x24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 ff35 	bl	800ad28 <xTaskRemoveFromEventList>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00e      	beq.n	8009ee2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d00b      	beq.n	8009ee2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	e007      	b.n	8009ee2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ed2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	b25a      	sxtb	r2, r3
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009ee6:	e001      	b.n	8009eec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	637b      	str	r3, [r7, #52]	; 0x34
 8009eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eee:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3738      	adds	r7, #56	; 0x38
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08c      	sub	sp, #48	; 0x30
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <xQueueReceive+0x2e>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1e:	f383 8811 	msr	BASEPRI, r3
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	623b      	str	r3, [r7, #32]
 8009f2c:	e7fe      	b.n	8009f2c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d103      	bne.n	8009f3c <xQueueReceive+0x3c>
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <xQueueReceive+0x40>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e000      	b.n	8009f42 <xQueueReceive+0x42>
 8009f40:	2300      	movs	r3, #0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d109      	bne.n	8009f5a <xQueueReceive+0x5a>
 8009f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
 8009f56:	61fb      	str	r3, [r7, #28]
 8009f58:	e7fe      	b.n	8009f58 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f5a:	f001 f89f 	bl	800b09c <xTaskGetSchedulerState>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d102      	bne.n	8009f6a <xQueueReceive+0x6a>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <xQueueReceive+0x6e>
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <xQueueReceive+0x70>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <xQueueReceive+0x88>
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	e7fe      	b.n	8009f86 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f88:	f7ff f9de 	bl	8009348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d01f      	beq.n	8009fd8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f9c:	f000 f8f6 	bl	800a18c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1e5a      	subs	r2, r3, #1
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00f      	beq.n	8009fd0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	3310      	adds	r3, #16
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 feb7 	bl	800ad28 <xTaskRemoveFromEventList>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d007      	beq.n	8009fd0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fc0:	4b3c      	ldr	r3, [pc, #240]	; (800a0b4 <xQueueReceive+0x1b4>)
 8009fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fd0:	f7ff f9e8 	bl	80093a4 <vPortExitCritical>
				return pdPASS;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e069      	b.n	800a0ac <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d103      	bne.n	8009fe6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fde:	f7ff f9e1 	bl	80093a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	e062      	b.n	800a0ac <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fec:	f107 0310 	add.w	r3, r7, #16
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fefb 	bl	800adec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ffa:	f7ff f9d3 	bl	80093a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ffe:	f000 fc77 	bl	800a8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a002:	f7ff f9a1 	bl	8009348 <vPortEnterCritical>
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a00c:	b25b      	sxtb	r3, r3
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d103      	bne.n	800a01c <xQueueReceive+0x11c>
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a022:	b25b      	sxtb	r3, r3
 800a024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a028:	d103      	bne.n	800a032 <xQueueReceive+0x132>
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a032:	f7ff f9b7 	bl	80093a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a036:	1d3a      	adds	r2, r7, #4
 800a038:	f107 0310 	add.w	r3, r7, #16
 800a03c:	4611      	mov	r1, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 feea 	bl	800ae18 <xTaskCheckForTimeOut>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d123      	bne.n	800a092 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a04c:	f000 f916 	bl	800a27c <prvIsQueueEmpty>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d017      	beq.n	800a086 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	3324      	adds	r3, #36	; 0x24
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	4611      	mov	r1, r2
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 fe14 	bl	800ac8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a066:	f000 f8b7 	bl	800a1d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a06a:	f000 fc4f 	bl	800a90c <xTaskResumeAll>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d189      	bne.n	8009f88 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800a074:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <xQueueReceive+0x1b4>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	e780      	b.n	8009f88 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a088:	f000 f8a6 	bl	800a1d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a08c:	f000 fc3e 	bl	800a90c <xTaskResumeAll>
 800a090:	e77a      	b.n	8009f88 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a094:	f000 f8a0 	bl	800a1d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a098:	f000 fc38 	bl	800a90c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09e:	f000 f8ed 	bl	800a27c <prvIsQueueEmpty>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f43f af6f 	beq.w	8009f88 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a0aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3730      	adds	r7, #48	; 0x30
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	e000ed04 	.word	0xe000ed04

0800a0b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10d      	bne.n	800a0f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d14d      	bne.n	800a17a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fff8 	bl	800b0d8 <xTaskPriorityDisinherit>
 800a0e8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	605a      	str	r2, [r3, #4]
 800a0f0:	e043      	b.n	800a17a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d119      	bne.n	800a12c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6898      	ldr	r0, [r3, #8]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a100:	461a      	mov	r2, r3
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	f002 f8ea 	bl	800c2dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689a      	ldr	r2, [r3, #8]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	441a      	add	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	689a      	ldr	r2, [r3, #8]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d32b      	bcc.n	800a17a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	609a      	str	r2, [r3, #8]
 800a12a:	e026      	b.n	800a17a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	68d8      	ldr	r0, [r3, #12]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a134:	461a      	mov	r2, r3
 800a136:	68b9      	ldr	r1, [r7, #8]
 800a138:	f002 f8d0 	bl	800c2dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	425b      	negs	r3, r3
 800a146:	441a      	add	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	68da      	ldr	r2, [r3, #12]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d207      	bcs.n	800a168 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a160:	425b      	negs	r3, r3
 800a162:	441a      	add	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d105      	bne.n	800a17a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d002      	beq.n	800a17a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3b01      	subs	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a182:	697b      	ldr	r3, [r7, #20]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d018      	beq.n	800a1d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68da      	ldr	r2, [r3, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	441a      	add	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d303      	bcc.n	800a1c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68d9      	ldr	r1, [r3, #12]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6838      	ldr	r0, [r7, #0]
 800a1cc:	f002 f886 	bl	800c2dc <memcpy>
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a1e0:	f7ff f8b2 	bl	8009348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1ec:	e011      	b.n	800a212 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d012      	beq.n	800a21c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3324      	adds	r3, #36	; 0x24
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fd94 	bl	800ad28 <xTaskRemoveFromEventList>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a206:	f000 fe67 	bl	800aed8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a216:	2b00      	cmp	r3, #0
 800a218:	dce9      	bgt.n	800a1ee <prvUnlockQueue+0x16>
 800a21a:	e000      	b.n	800a21e <prvUnlockQueue+0x46>
					break;
 800a21c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	22ff      	movs	r2, #255	; 0xff
 800a222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a226:	f7ff f8bd 	bl	80093a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a22a:	f7ff f88d 	bl	8009348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a234:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a236:	e011      	b.n	800a25c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d012      	beq.n	800a266 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	3310      	adds	r3, #16
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fd6f 	bl	800ad28 <xTaskRemoveFromEventList>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a250:	f000 fe42 	bl	800aed8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	3b01      	subs	r3, #1
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a25c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a260:	2b00      	cmp	r3, #0
 800a262:	dce9      	bgt.n	800a238 <prvUnlockQueue+0x60>
 800a264:	e000      	b.n	800a268 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a266:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	22ff      	movs	r2, #255	; 0xff
 800a26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a270:	f7ff f898 	bl	80093a4 <vPortExitCritical>
}
 800a274:	bf00      	nop
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a284:	f7ff f860 	bl	8009348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a290:	2301      	movs	r3, #1
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	e001      	b.n	800a29a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a29a:	f7ff f883 	bl	80093a4 <vPortExitCritical>

	return xReturn;
 800a29e:	68fb      	ldr	r3, [r7, #12]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2b0:	f7ff f84a 	bl	8009348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d102      	bne.n	800a2c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e001      	b.n	800a2ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2ca:	f7ff f86b 	bl	80093a4 <vPortExitCritical>

	return xReturn;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e014      	b.n	800a312 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2e8:	4a0e      	ldr	r2, [pc, #56]	; (800a324 <vQueueAddToRegistry+0x4c>)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a2f4:	490b      	ldr	r1, [pc, #44]	; (800a324 <vQueueAddToRegistry+0x4c>)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a2fe:	4a09      	ldr	r2, [pc, #36]	; (800a324 <vQueueAddToRegistry+0x4c>)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	4413      	add	r3, r2
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a30a:	e005      	b.n	800a318 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3301      	adds	r3, #1
 800a310:	60fb      	str	r3, [r7, #12]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2b07      	cmp	r3, #7
 800a316:	d9e7      	bls.n	800a2e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a318:	bf00      	nop
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bc80      	pop	{r7}
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	2000315c 	.word	0x2000315c

0800a328 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a338:	f7ff f806 	bl	8009348 <vPortEnterCritical>
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a342:	b25b      	sxtb	r3, r3
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a348:	d103      	bne.n	800a352 <vQueueWaitForMessageRestricted+0x2a>
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a358:	b25b      	sxtb	r3, r3
 800a35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35e:	d103      	bne.n	800a368 <vQueueWaitForMessageRestricted+0x40>
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a368:	f7ff f81c 	bl	80093a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	2b00      	cmp	r3, #0
 800a372:	d106      	bne.n	800a382 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	3324      	adds	r3, #36	; 0x24
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fca9 	bl	800acd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a382:	6978      	ldr	r0, [r7, #20]
 800a384:	f7ff ff28 	bl	800a1d8 <prvUnlockQueue>
	}
 800a388:	bf00      	nop
 800a38a:	3718      	adds	r7, #24
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08e      	sub	sp, #56	; 0x38
 800a394:	af04      	add	r7, sp, #16
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d109      	bne.n	800a3b8 <xTaskCreateStatic+0x28>
 800a3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a8:	f383 8811 	msr	BASEPRI, r3
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	623b      	str	r3, [r7, #32]
 800a3b6:	e7fe      	b.n	800a3b6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d109      	bne.n	800a3d2 <xTaskCreateStatic+0x42>
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	e7fe      	b.n	800a3d0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3d2:	2354      	movs	r3, #84	; 0x54
 800a3d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2b54      	cmp	r3, #84	; 0x54
 800a3da:	d009      	beq.n	800a3f0 <xTaskCreateStatic+0x60>
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	61bb      	str	r3, [r7, #24]
 800a3ee:	e7fe      	b.n	800a3ee <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d01e      	beq.n	800a434 <xTaskCreateStatic+0xa4>
 800a3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01b      	beq.n	800a434 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a404:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	2202      	movs	r2, #2
 800a40a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a40e:	2300      	movs	r3, #0
 800a410:	9303      	str	r3, [sp, #12]
 800a412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a414:	9302      	str	r3, [sp, #8]
 800a416:	f107 0314 	add.w	r3, r7, #20
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 f850 	bl	800a4cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a42c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a42e:	f000 f8cb 	bl	800a5c8 <prvAddNewTaskToReadyList>
 800a432:	e001      	b.n	800a438 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a434:	2300      	movs	r3, #0
 800a436:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a438:	697b      	ldr	r3, [r7, #20]
	}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3728      	adds	r7, #40	; 0x28
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a442:	b580      	push	{r7, lr}
 800a444:	b08c      	sub	sp, #48	; 0x30
 800a446:	af04      	add	r7, sp, #16
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	603b      	str	r3, [r7, #0]
 800a44e:	4613      	mov	r3, r2
 800a450:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a452:	88fb      	ldrh	r3, [r7, #6]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4618      	mov	r0, r3
 800a458:	f7ff f86c 	bl	8009534 <pvPortMalloc>
 800a45c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00e      	beq.n	800a482 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a464:	2054      	movs	r0, #84	; 0x54
 800a466:	f7ff f865 	bl	8009534 <pvPortMalloc>
 800a46a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	631a      	str	r2, [r3, #48]	; 0x30
 800a478:	e005      	b.n	800a486 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a47a:	6978      	ldr	r0, [r7, #20]
 800a47c:	f7ff f91c 	bl	80096b8 <vPortFree>
 800a480:	e001      	b.n	800a486 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a482:	2300      	movs	r3, #0
 800a484:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d017      	beq.n	800a4bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a494:	88fa      	ldrh	r2, [r7, #6]
 800a496:	2300      	movs	r3, #0
 800a498:	9303      	str	r3, [sp, #12]
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	9302      	str	r3, [sp, #8]
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f80e 	bl	800a4cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4b0:	69f8      	ldr	r0, [r7, #28]
 800a4b2:	f000 f889 	bl	800a5c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	61bb      	str	r3, [r7, #24]
 800a4ba:	e002      	b.n	800a4c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4c2:	69bb      	ldr	r3, [r7, #24]
	}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3720      	adds	r7, #32
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4413      	add	r3, r2
 800a4ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	f023 0307 	bic.w	r3, r3, #7
 800a4f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d009      	beq.n	800a512 <prvInitialiseNewTask+0x46>
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
 800a510:	e7fe      	b.n	800a510 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a512:	2300      	movs	r3, #0
 800a514:	61fb      	str	r3, [r7, #28]
 800a516:	e012      	b.n	800a53e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	4413      	add	r3, r2
 800a51e:	7819      	ldrb	r1, [r3, #0]
 800a520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	3334      	adds	r3, #52	; 0x34
 800a528:	460a      	mov	r2, r1
 800a52a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	4413      	add	r3, r2
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d006      	beq.n	800a546 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	3301      	adds	r3, #1
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	2b0f      	cmp	r3, #15
 800a542:	d9e9      	bls.n	800a518 <prvInitialiseNewTask+0x4c>
 800a544:	e000      	b.n	800a548 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a546:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	2b06      	cmp	r3, #6
 800a554:	d901      	bls.n	800a55a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a556:	2306      	movs	r3, #6
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a564:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	2200      	movs	r2, #0
 800a56a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56e:	3304      	adds	r3, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7fe fd6b 	bl	800904c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a578:	3318      	adds	r3, #24
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fe fd66 	bl	800904c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a584:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	f1c3 0207 	rsb	r2, r3, #7
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a594:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	2200      	movs	r2, #0
 800a59a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	68f9      	ldr	r1, [r7, #12]
 800a5a8:	69b8      	ldr	r0, [r7, #24]
 800a5aa:	f7fe fddf 	bl	800916c <pxPortInitialiseStack>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5c0:	bf00      	nop
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5d0:	f7fe feba 	bl	8009348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5d4:	4b2a      	ldr	r3, [pc, #168]	; (800a680 <prvAddNewTaskToReadyList+0xb8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	4a29      	ldr	r2, [pc, #164]	; (800a680 <prvAddNewTaskToReadyList+0xb8>)
 800a5dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5de:	4b29      	ldr	r3, [pc, #164]	; (800a684 <prvAddNewTaskToReadyList+0xbc>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d109      	bne.n	800a5fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5e6:	4a27      	ldr	r2, [pc, #156]	; (800a684 <prvAddNewTaskToReadyList+0xbc>)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5ec:	4b24      	ldr	r3, [pc, #144]	; (800a680 <prvAddNewTaskToReadyList+0xb8>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d110      	bne.n	800a616 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5f4:	f000 fc94 	bl	800af20 <prvInitialiseTaskLists>
 800a5f8:	e00d      	b.n	800a616 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5fa:	4b23      	ldr	r3, [pc, #140]	; (800a688 <prvAddNewTaskToReadyList+0xc0>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d109      	bne.n	800a616 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a602:	4b20      	ldr	r3, [pc, #128]	; (800a684 <prvAddNewTaskToReadyList+0xbc>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d802      	bhi.n	800a616 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a610:	4a1c      	ldr	r2, [pc, #112]	; (800a684 <prvAddNewTaskToReadyList+0xbc>)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a616:	4b1d      	ldr	r3, [pc, #116]	; (800a68c <prvAddNewTaskToReadyList+0xc4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3301      	adds	r3, #1
 800a61c:	4a1b      	ldr	r2, [pc, #108]	; (800a68c <prvAddNewTaskToReadyList+0xc4>)
 800a61e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	2201      	movs	r2, #1
 800a626:	409a      	lsls	r2, r3
 800a628:	4b19      	ldr	r3, [pc, #100]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	4a18      	ldr	r2, [pc, #96]	; (800a690 <prvAddNewTaskToReadyList+0xc8>)
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a636:	4613      	mov	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4a15      	ldr	r2, [pc, #84]	; (800a694 <prvAddNewTaskToReadyList+0xcc>)
 800a640:	441a      	add	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3304      	adds	r3, #4
 800a646:	4619      	mov	r1, r3
 800a648:	4610      	mov	r0, r2
 800a64a:	f7fe fd0b 	bl	8009064 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a64e:	f7fe fea9 	bl	80093a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <prvAddNewTaskToReadyList+0xc0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00e      	beq.n	800a678 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a65a:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <prvAddNewTaskToReadyList+0xbc>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a664:	429a      	cmp	r2, r3
 800a666:	d207      	bcs.n	800a678 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a668:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <prvAddNewTaskToReadyList+0xd0>)
 800a66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a678:	bf00      	nop
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	20001a94 	.word	0x20001a94
 800a684:	20001994 	.word	0x20001994
 800a688:	20001aa0 	.word	0x20001aa0
 800a68c:	20001ab0 	.word	0x20001ab0
 800a690:	20001a9c 	.word	0x20001a9c
 800a694:	20001998 	.word	0x20001998
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d016      	beq.n	800a6dc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <vTaskDelay+0x60>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d009      	beq.n	800a6ca <vTaskDelay+0x2e>
 800a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	60bb      	str	r3, [r7, #8]
 800a6c8:	e7fe      	b.n	800a6c8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a6ca:	f000 f911 	bl	800a8f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fd85 	bl	800b1e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6d6:	f000 f919 	bl	800a90c <xTaskResumeAll>
 800a6da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d107      	bne.n	800a6f2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a6e2:	4b07      	ldr	r3, [pc, #28]	; (800a700 <vTaskDelay+0x64>)
 800a6e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e8:	601a      	str	r2, [r3, #0]
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6f2:	bf00      	nop
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20001abc 	.word	0x20001abc
 800a700:	e000ed04 	.word	0xe000ed04

0800a704 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a70c:	f7fe fe1c 	bl	8009348 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d102      	bne.n	800a71c <vTaskSuspend+0x18>
 800a716:	4b3c      	ldr	r3, [pc, #240]	; (800a808 <vTaskSuspend+0x104>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	e000      	b.n	800a71e <vTaskSuspend+0x1a>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	3304      	adds	r3, #4
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe fcf8 	bl	800911a <uxListRemove>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d115      	bne.n	800a75c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a734:	4935      	ldr	r1, [pc, #212]	; (800a80c <vTaskSuspend+0x108>)
 800a736:	4613      	mov	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	4413      	add	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	440b      	add	r3, r1
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10a      	bne.n	800a75c <vTaskSuspend+0x58>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	2201      	movs	r2, #1
 800a74c:	fa02 f303 	lsl.w	r3, r2, r3
 800a750:	43da      	mvns	r2, r3
 800a752:	4b2f      	ldr	r3, [pc, #188]	; (800a810 <vTaskSuspend+0x10c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4013      	ands	r3, r2
 800a758:	4a2d      	ldr	r2, [pc, #180]	; (800a810 <vTaskSuspend+0x10c>)
 800a75a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a760:	2b00      	cmp	r3, #0
 800a762:	d004      	beq.n	800a76e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3318      	adds	r3, #24
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fcd6 	bl	800911a <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	4827      	ldr	r0, [pc, #156]	; (800a814 <vTaskSuspend+0x110>)
 800a776:	f7fe fc75 	bl	8009064 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b01      	cmp	r3, #1
 800a784:	d103      	bne.n	800a78e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a78e:	f7fe fe09 	bl	80093a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a792:	4b21      	ldr	r3, [pc, #132]	; (800a818 <vTaskSuspend+0x114>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d005      	beq.n	800a7a6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a79a:	f7fe fdd5 	bl	8009348 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a79e:	f000 fc59 	bl	800b054 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a7a2:	f7fe fdff 	bl	80093a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a7a6:	4b18      	ldr	r3, [pc, #96]	; (800a808 <vTaskSuspend+0x104>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68fa      	ldr	r2, [r7, #12]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d126      	bne.n	800a7fe <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800a7b0:	4b19      	ldr	r3, [pc, #100]	; (800a818 <vTaskSuspend+0x114>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d016      	beq.n	800a7e6 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a7b8:	4b18      	ldr	r3, [pc, #96]	; (800a81c <vTaskSuspend+0x118>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d009      	beq.n	800a7d4 <vTaskSuspend+0xd0>
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	60bb      	str	r3, [r7, #8]
 800a7d2:	e7fe      	b.n	800a7d2 <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800a7d4:	4b12      	ldr	r3, [pc, #72]	; (800a820 <vTaskSuspend+0x11c>)
 800a7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7e4:	e00b      	b.n	800a7fe <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	; (800a814 <vTaskSuspend+0x110>)
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <vTaskSuspend+0x120>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d103      	bne.n	800a7fa <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800a7f2:	4b05      	ldr	r3, [pc, #20]	; (800a808 <vTaskSuspend+0x104>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]
	}
 800a7f8:	e001      	b.n	800a7fe <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800a7fa:	f000 f9ed 	bl	800abd8 <vTaskSwitchContext>
	}
 800a7fe:	bf00      	nop
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20001994 	.word	0x20001994
 800a80c:	20001998 	.word	0x20001998
 800a810:	20001a9c 	.word	0x20001a9c
 800a814:	20001a80 	.word	0x20001a80
 800a818:	20001aa0 	.word	0x20001aa0
 800a81c:	20001abc 	.word	0x20001abc
 800a820:	e000ed04 	.word	0xe000ed04
 800a824:	20001a94 	.word	0x20001a94

0800a828 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	; 0x28
 800a82c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a836:	463a      	mov	r2, r7
 800a838:	1d39      	adds	r1, r7, #4
 800a83a:	f107 0308 	add.w	r3, r7, #8
 800a83e:	4618      	mov	r0, r3
 800a840:	f7f5 fcb8 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	9202      	str	r2, [sp, #8]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	2300      	movs	r3, #0
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	2300      	movs	r3, #0
 800a854:	460a      	mov	r2, r1
 800a856:	4920      	ldr	r1, [pc, #128]	; (800a8d8 <vTaskStartScheduler+0xb0>)
 800a858:	4820      	ldr	r0, [pc, #128]	; (800a8dc <vTaskStartScheduler+0xb4>)
 800a85a:	f7ff fd99 	bl	800a390 <xTaskCreateStatic>
 800a85e:	4602      	mov	r2, r0
 800a860:	4b1f      	ldr	r3, [pc, #124]	; (800a8e0 <vTaskStartScheduler+0xb8>)
 800a862:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <vTaskStartScheduler+0xb8>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a86c:	2301      	movs	r3, #1
 800a86e:	617b      	str	r3, [r7, #20]
 800a870:	e001      	b.n	800a876 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a872:	2300      	movs	r3, #0
 800a874:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d102      	bne.n	800a882 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a87c:	f000 fd16 	bl	800b2ac <xTimerCreateTimerTask>
 800a880:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d115      	bne.n	800a8b4 <vTaskStartScheduler+0x8c>
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a89a:	4b12      	ldr	r3, [pc, #72]	; (800a8e4 <vTaskStartScheduler+0xbc>)
 800a89c:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8a2:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <vTaskStartScheduler+0xc0>)
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a8a8:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <vTaskStartScheduler+0xc4>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8ae:	f7fe fcdb 	bl	8009268 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8b2:	e00d      	b.n	800a8d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ba:	d109      	bne.n	800a8d0 <vTaskStartScheduler+0xa8>
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	60fb      	str	r3, [r7, #12]
 800a8ce:	e7fe      	b.n	800a8ce <vTaskStartScheduler+0xa6>
}
 800a8d0:	bf00      	nop
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	0800cc58 	.word	0x0800cc58
 800a8dc:	0800aef1 	.word	0x0800aef1
 800a8e0:	20001ab8 	.word	0x20001ab8
 800a8e4:	20001ab4 	.word	0x20001ab4
 800a8e8:	20001aa0 	.word	0x20001aa0
 800a8ec:	20001a98 	.word	0x20001a98

0800a8f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a8f4:	4b04      	ldr	r3, [pc, #16]	; (800a908 <vTaskSuspendAll+0x18>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	4a03      	ldr	r2, [pc, #12]	; (800a908 <vTaskSuspendAll+0x18>)
 800a8fc:	6013      	str	r3, [r2, #0]
}
 800a8fe:	bf00      	nop
 800a900:	46bd      	mov	sp, r7
 800a902:	bc80      	pop	{r7}
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	20001abc 	.word	0x20001abc

0800a90c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a912:	2300      	movs	r3, #0
 800a914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a91a:	4b41      	ldr	r3, [pc, #260]	; (800aa20 <xTaskResumeAll+0x114>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d109      	bne.n	800a936 <xTaskResumeAll+0x2a>
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	e7fe      	b.n	800a934 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a936:	f7fe fd07 	bl	8009348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a93a:	4b39      	ldr	r3, [pc, #228]	; (800aa20 <xTaskResumeAll+0x114>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	3b01      	subs	r3, #1
 800a940:	4a37      	ldr	r2, [pc, #220]	; (800aa20 <xTaskResumeAll+0x114>)
 800a942:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a944:	4b36      	ldr	r3, [pc, #216]	; (800aa20 <xTaskResumeAll+0x114>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d161      	bne.n	800aa10 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a94c:	4b35      	ldr	r3, [pc, #212]	; (800aa24 <xTaskResumeAll+0x118>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d05d      	beq.n	800aa10 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a954:	e02e      	b.n	800a9b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a956:	4b34      	ldr	r3, [pc, #208]	; (800aa28 <xTaskResumeAll+0x11c>)
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3318      	adds	r3, #24
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fbd9 	bl	800911a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3304      	adds	r3, #4
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fbd4 	bl	800911a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a976:	2201      	movs	r2, #1
 800a978:	409a      	lsls	r2, r3
 800a97a:	4b2c      	ldr	r3, [pc, #176]	; (800aa2c <xTaskResumeAll+0x120>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4313      	orrs	r3, r2
 800a980:	4a2a      	ldr	r2, [pc, #168]	; (800aa2c <xTaskResumeAll+0x120>)
 800a982:	6013      	str	r3, [r2, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a988:	4613      	mov	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4a27      	ldr	r2, [pc, #156]	; (800aa30 <xTaskResumeAll+0x124>)
 800a992:	441a      	add	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3304      	adds	r3, #4
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f7fe fb62 	bl	8009064 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a4:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <xTaskResumeAll+0x128>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d302      	bcc.n	800a9b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a9ae:	4b22      	ldr	r3, [pc, #136]	; (800aa38 <xTaskResumeAll+0x12c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9b4:	4b1c      	ldr	r3, [pc, #112]	; (800aa28 <xTaskResumeAll+0x11c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1cc      	bne.n	800a956 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9c2:	f000 fb47 	bl	800b054 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a9c6:	4b1d      	ldr	r3, [pc, #116]	; (800aa3c <xTaskResumeAll+0x130>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d010      	beq.n	800a9f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9d2:	f000 f845 	bl	800aa60 <xTaskIncrementTick>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a9dc:	4b16      	ldr	r3, [pc, #88]	; (800aa38 <xTaskResumeAll+0x12c>)
 800a9de:	2201      	movs	r2, #1
 800a9e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d1f1      	bne.n	800a9d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a9ee:	4b13      	ldr	r3, [pc, #76]	; (800aa3c <xTaskResumeAll+0x130>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9f4:	4b10      	ldr	r3, [pc, #64]	; (800aa38 <xTaskResumeAll+0x12c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d009      	beq.n	800aa10 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa00:	4b0f      	ldr	r3, [pc, #60]	; (800aa40 <xTaskResumeAll+0x134>)
 800aa02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa06:	601a      	str	r2, [r3, #0]
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa10:	f7fe fcc8 	bl	80093a4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa14:	68bb      	ldr	r3, [r7, #8]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	20001abc 	.word	0x20001abc
 800aa24:	20001a94 	.word	0x20001a94
 800aa28:	20001a54 	.word	0x20001a54
 800aa2c:	20001a9c 	.word	0x20001a9c
 800aa30:	20001998 	.word	0x20001998
 800aa34:	20001994 	.word	0x20001994
 800aa38:	20001aa8 	.word	0x20001aa8
 800aa3c:	20001aa4 	.word	0x20001aa4
 800aa40:	e000ed04 	.word	0xe000ed04

0800aa44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa4a:	4b04      	ldr	r3, [pc, #16]	; (800aa5c <xTaskGetTickCount+0x18>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa50:	687b      	ldr	r3, [r7, #4]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bc80      	pop	{r7}
 800aa5a:	4770      	bx	lr
 800aa5c:	20001a98 	.word	0x20001a98

0800aa60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa6a:	4b50      	ldr	r3, [pc, #320]	; (800abac <xTaskIncrementTick+0x14c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f040 808c 	bne.w	800ab8c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa74:	4b4e      	ldr	r3, [pc, #312]	; (800abb0 <xTaskIncrementTick+0x150>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa7c:	4a4c      	ldr	r2, [pc, #304]	; (800abb0 <xTaskIncrementTick+0x150>)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d11f      	bne.n	800aac8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa88:	4b4a      	ldr	r3, [pc, #296]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d009      	beq.n	800aaa6 <xTaskIncrementTick+0x46>
 800aa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	603b      	str	r3, [r7, #0]
 800aaa4:	e7fe      	b.n	800aaa4 <xTaskIncrementTick+0x44>
 800aaa6:	4b43      	ldr	r3, [pc, #268]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	4b42      	ldr	r3, [pc, #264]	; (800abb8 <xTaskIncrementTick+0x158>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a40      	ldr	r2, [pc, #256]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aab2:	6013      	str	r3, [r2, #0]
 800aab4:	4a40      	ldr	r2, [pc, #256]	; (800abb8 <xTaskIncrementTick+0x158>)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	4b40      	ldr	r3, [pc, #256]	; (800abbc <xTaskIncrementTick+0x15c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	3301      	adds	r3, #1
 800aac0:	4a3e      	ldr	r2, [pc, #248]	; (800abbc <xTaskIncrementTick+0x15c>)
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	f000 fac6 	bl	800b054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aac8:	4b3d      	ldr	r3, [pc, #244]	; (800abc0 <xTaskIncrementTick+0x160>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d34d      	bcc.n	800ab6e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad2:	4b38      	ldr	r3, [pc, #224]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <xTaskIncrementTick+0x80>
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <xTaskIncrementTick+0x82>
 800aae0:	2300      	movs	r3, #0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d004      	beq.n	800aaf0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae6:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <xTaskIncrementTick+0x160>)
 800aae8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaec:	601a      	str	r2, [r3, #0]
					break;
 800aaee:	e03e      	b.n	800ab6e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aaf0:	4b30      	ldr	r3, [pc, #192]	; (800abb4 <xTaskIncrementTick+0x154>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d203      	bcs.n	800ab10 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab08:	4a2d      	ldr	r2, [pc, #180]	; (800abc0 <xTaskIncrementTick+0x160>)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6013      	str	r3, [r2, #0]
						break;
 800ab0e:	e02e      	b.n	800ab6e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	3304      	adds	r3, #4
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe fb00 	bl	800911a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	3318      	adds	r3, #24
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe faf7 	bl	800911a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab30:	2201      	movs	r2, #1
 800ab32:	409a      	lsls	r2, r3
 800ab34:	4b23      	ldr	r3, [pc, #140]	; (800abc4 <xTaskIncrementTick+0x164>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	4a22      	ldr	r2, [pc, #136]	; (800abc4 <xTaskIncrementTick+0x164>)
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4a1f      	ldr	r2, [pc, #124]	; (800abc8 <xTaskIncrementTick+0x168>)
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	3304      	adds	r3, #4
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7fe fa85 	bl	8009064 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5e:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <xTaskIncrementTick+0x16c>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d3b4      	bcc.n	800aad2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab6c:	e7b1      	b.n	800aad2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab6e:	4b17      	ldr	r3, [pc, #92]	; (800abcc <xTaskIncrementTick+0x16c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab74:	4914      	ldr	r1, [pc, #80]	; (800abc8 <xTaskIncrementTick+0x168>)
 800ab76:	4613      	mov	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	440b      	add	r3, r1
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d907      	bls.n	800ab96 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ab86:	2301      	movs	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	e004      	b.n	800ab96 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ab8c:	4b10      	ldr	r3, [pc, #64]	; (800abd0 <xTaskIncrementTick+0x170>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	3301      	adds	r3, #1
 800ab92:	4a0f      	ldr	r2, [pc, #60]	; (800abd0 <xTaskIncrementTick+0x170>)
 800ab94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ab96:	4b0f      	ldr	r3, [pc, #60]	; (800abd4 <xTaskIncrementTick+0x174>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aba2:	697b      	ldr	r3, [r7, #20]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	20001abc 	.word	0x20001abc
 800abb0:	20001a98 	.word	0x20001a98
 800abb4:	20001a4c 	.word	0x20001a4c
 800abb8:	20001a50 	.word	0x20001a50
 800abbc:	20001aac 	.word	0x20001aac
 800abc0:	20001ab4 	.word	0x20001ab4
 800abc4:	20001a9c 	.word	0x20001a9c
 800abc8:	20001998 	.word	0x20001998
 800abcc:	20001994 	.word	0x20001994
 800abd0:	20001aa4 	.word	0x20001aa4
 800abd4:	20001aa8 	.word	0x20001aa8

0800abd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b087      	sub	sp, #28
 800abdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abde:	4b26      	ldr	r3, [pc, #152]	; (800ac78 <vTaskSwitchContext+0xa0>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d003      	beq.n	800abee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abe6:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <vTaskSwitchContext+0xa4>)
 800abe8:	2201      	movs	r2, #1
 800abea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abec:	e03e      	b.n	800ac6c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800abee:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <vTaskSwitchContext+0xa4>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800abf4:	4b22      	ldr	r3, [pc, #136]	; (800ac80 <vTaskSwitchContext+0xa8>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	fab3 f383 	clz	r3, r3
 800ac00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac02:	7afb      	ldrb	r3, [r7, #11]
 800ac04:	f1c3 031f 	rsb	r3, r3, #31
 800ac08:	617b      	str	r3, [r7, #20]
 800ac0a:	491e      	ldr	r1, [pc, #120]	; (800ac84 <vTaskSwitchContext+0xac>)
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	607b      	str	r3, [r7, #4]
 800ac30:	e7fe      	b.n	800ac30 <vTaskSwitchContext+0x58>
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	4613      	mov	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4a11      	ldr	r2, [pc, #68]	; (800ac84 <vTaskSwitchContext+0xac>)
 800ac3e:	4413      	add	r3, r2
 800ac40:	613b      	str	r3, [r7, #16]
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	605a      	str	r2, [r3, #4]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	3308      	adds	r3, #8
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d104      	bne.n	800ac62 <vTaskSwitchContext+0x8a>
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	605a      	str	r2, [r3, #4]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	4a07      	ldr	r2, [pc, #28]	; (800ac88 <vTaskSwitchContext+0xb0>)
 800ac6a:	6013      	str	r3, [r2, #0]
}
 800ac6c:	bf00      	nop
 800ac6e:	371c      	adds	r7, #28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20001abc 	.word	0x20001abc
 800ac7c:	20001aa8 	.word	0x20001aa8
 800ac80:	20001a9c 	.word	0x20001a9c
 800ac84:	20001998 	.word	0x20001998
 800ac88:	20001994 	.word	0x20001994

0800ac8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <vTaskPlaceOnEventList+0x24>
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	60fb      	str	r3, [r7, #12]
 800acae:	e7fe      	b.n	800acae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acb0:	4b07      	ldr	r3, [pc, #28]	; (800acd0 <vTaskPlaceOnEventList+0x44>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3318      	adds	r3, #24
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7fe f9f6 	bl	80090aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acbe:	2101      	movs	r1, #1
 800acc0:	6838      	ldr	r0, [r7, #0]
 800acc2:	f000 fa8d 	bl	800b1e0 <prvAddCurrentTaskToDelayedList>
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20001994 	.word	0x20001994

0800acd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <vTaskPlaceOnEventListRestricted+0x26>
 800ace6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	e7fe      	b.n	800acf8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acfa:	4b0a      	ldr	r3, [pc, #40]	; (800ad24 <vTaskPlaceOnEventListRestricted+0x50>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3318      	adds	r3, #24
 800ad00:	4619      	mov	r1, r3
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f7fe f9ae 	bl	8009064 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	68b8      	ldr	r0, [r7, #8]
 800ad18:	f000 fa62 	bl	800b1e0 <prvAddCurrentTaskToDelayedList>
	}
 800ad1c:	bf00      	nop
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	20001994 	.word	0x20001994

0800ad28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <xTaskRemoveFromEventList+0x2a>
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	e7fe      	b.n	800ad50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	3318      	adds	r3, #24
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fe f9df 	bl	800911a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad5c:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <xTaskRemoveFromEventList+0xac>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d11c      	bne.n	800ad9e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	3304      	adds	r3, #4
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe f9d6 	bl	800911a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad72:	2201      	movs	r2, #1
 800ad74:	409a      	lsls	r2, r3
 800ad76:	4b18      	ldr	r3, [pc, #96]	; (800add8 <xTaskRemoveFromEventList+0xb0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	4a16      	ldr	r2, [pc, #88]	; (800add8 <xTaskRemoveFromEventList+0xb0>)
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4a13      	ldr	r2, [pc, #76]	; (800addc <xTaskRemoveFromEventList+0xb4>)
 800ad8e:	441a      	add	r2, r3
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	3304      	adds	r3, #4
 800ad94:	4619      	mov	r1, r3
 800ad96:	4610      	mov	r0, r2
 800ad98:	f7fe f964 	bl	8009064 <vListInsertEnd>
 800ad9c:	e005      	b.n	800adaa <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	3318      	adds	r3, #24
 800ada2:	4619      	mov	r1, r3
 800ada4:	480e      	ldr	r0, [pc, #56]	; (800ade0 <xTaskRemoveFromEventList+0xb8>)
 800ada6:	f7fe f95d 	bl	8009064 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adae:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <xTaskRemoveFromEventList+0xbc>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d905      	bls.n	800adc4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adbc:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <xTaskRemoveFromEventList+0xc0>)
 800adbe:	2201      	movs	r2, #1
 800adc0:	601a      	str	r2, [r3, #0]
 800adc2:	e001      	b.n	800adc8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800adc4:	2300      	movs	r3, #0
 800adc6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800adc8:	697b      	ldr	r3, [r7, #20]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20001abc 	.word	0x20001abc
 800add8:	20001a9c 	.word	0x20001a9c
 800addc:	20001998 	.word	0x20001998
 800ade0:	20001a54 	.word	0x20001a54
 800ade4:	20001994 	.word	0x20001994
 800ade8:	20001aa8 	.word	0x20001aa8

0800adec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf4:	4b06      	ldr	r3, [pc, #24]	; (800ae10 <vTaskInternalSetTimeOutState+0x24>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adfc:	4b05      	ldr	r3, [pc, #20]	; (800ae14 <vTaskInternalSetTimeOutState+0x28>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	605a      	str	r2, [r3, #4]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bc80      	pop	{r7}
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	20001aac 	.word	0x20001aac
 800ae14:	20001a98 	.word	0x20001a98

0800ae18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d109      	bne.n	800ae3c <xTaskCheckForTimeOut+0x24>
 800ae28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	e7fe      	b.n	800ae3a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d109      	bne.n	800ae56 <xTaskCheckForTimeOut+0x3e>
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	60fb      	str	r3, [r7, #12]
 800ae54:	e7fe      	b.n	800ae54 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ae56:	f7fe fa77 	bl	8009348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae5a:	4b1d      	ldr	r3, [pc, #116]	; (800aed0 <xTaskCheckForTimeOut+0xb8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	69ba      	ldr	r2, [r7, #24]
 800ae66:	1ad3      	subs	r3, r2, r3
 800ae68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae72:	d102      	bne.n	800ae7a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae74:	2300      	movs	r3, #0
 800ae76:	61fb      	str	r3, [r7, #28]
 800ae78:	e023      	b.n	800aec2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	4b15      	ldr	r3, [pc, #84]	; (800aed4 <xTaskCheckForTimeOut+0xbc>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d007      	beq.n	800ae96 <xTaskCheckForTimeOut+0x7e>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685a      	ldr	r2, [r3, #4]
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d802      	bhi.n	800ae96 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae90:	2301      	movs	r3, #1
 800ae92:	61fb      	str	r3, [r7, #28]
 800ae94:	e015      	b.n	800aec2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d90b      	bls.n	800aeb8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	1ad2      	subs	r2, r2, r3
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff ff9d 	bl	800adec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61fb      	str	r3, [r7, #28]
 800aeb6:	e004      	b.n	800aec2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aebe:	2301      	movs	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aec2:	f7fe fa6f 	bl	80093a4 <vPortExitCritical>

	return xReturn;
 800aec6:	69fb      	ldr	r3, [r7, #28]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3720      	adds	r7, #32
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	20001a98 	.word	0x20001a98
 800aed4:	20001aac 	.word	0x20001aac

0800aed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aed8:	b480      	push	{r7}
 800aeda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aedc:	4b03      	ldr	r3, [pc, #12]	; (800aeec <vTaskMissedYield+0x14>)
 800aede:	2201      	movs	r2, #1
 800aee0:	601a      	str	r2, [r3, #0]
}
 800aee2:	bf00      	nop
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bc80      	pop	{r7}
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20001aa8 	.word	0x20001aa8

0800aef0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aef8:	f000 f852 	bl	800afa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aefc:	4b06      	ldr	r3, [pc, #24]	; (800af18 <prvIdleTask+0x28>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b01      	cmp	r3, #1
 800af02:	d9f9      	bls.n	800aef8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <prvIdleTask+0x2c>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af14:	e7f0      	b.n	800aef8 <prvIdleTask+0x8>
 800af16:	bf00      	nop
 800af18:	20001998 	.word	0x20001998
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af26:	2300      	movs	r3, #0
 800af28:	607b      	str	r3, [r7, #4]
 800af2a:	e00c      	b.n	800af46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4a12      	ldr	r2, [pc, #72]	; (800af80 <prvInitialiseTaskLists+0x60>)
 800af38:	4413      	add	r3, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe f867 	bl	800900e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3301      	adds	r3, #1
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b06      	cmp	r3, #6
 800af4a:	d9ef      	bls.n	800af2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af4c:	480d      	ldr	r0, [pc, #52]	; (800af84 <prvInitialiseTaskLists+0x64>)
 800af4e:	f7fe f85e 	bl	800900e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af52:	480d      	ldr	r0, [pc, #52]	; (800af88 <prvInitialiseTaskLists+0x68>)
 800af54:	f7fe f85b 	bl	800900e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af58:	480c      	ldr	r0, [pc, #48]	; (800af8c <prvInitialiseTaskLists+0x6c>)
 800af5a:	f7fe f858 	bl	800900e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af5e:	480c      	ldr	r0, [pc, #48]	; (800af90 <prvInitialiseTaskLists+0x70>)
 800af60:	f7fe f855 	bl	800900e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af64:	480b      	ldr	r0, [pc, #44]	; (800af94 <prvInitialiseTaskLists+0x74>)
 800af66:	f7fe f852 	bl	800900e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <prvInitialiseTaskLists+0x78>)
 800af6c:	4a05      	ldr	r2, [pc, #20]	; (800af84 <prvInitialiseTaskLists+0x64>)
 800af6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af70:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <prvInitialiseTaskLists+0x7c>)
 800af72:	4a05      	ldr	r2, [pc, #20]	; (800af88 <prvInitialiseTaskLists+0x68>)
 800af74:	601a      	str	r2, [r3, #0]
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	20001998 	.word	0x20001998
 800af84:	20001a24 	.word	0x20001a24
 800af88:	20001a38 	.word	0x20001a38
 800af8c:	20001a54 	.word	0x20001a54
 800af90:	20001a68 	.word	0x20001a68
 800af94:	20001a80 	.word	0x20001a80
 800af98:	20001a4c 	.word	0x20001a4c
 800af9c:	20001a50 	.word	0x20001a50

0800afa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afa6:	e019      	b.n	800afdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afa8:	f7fe f9ce 	bl	8009348 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800afac:	4b0f      	ldr	r3, [pc, #60]	; (800afec <prvCheckTasksWaitingTermination+0x4c>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3304      	adds	r3, #4
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe f8ae 	bl	800911a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afbe:	4b0c      	ldr	r3, [pc, #48]	; (800aff0 <prvCheckTasksWaitingTermination+0x50>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	4a0a      	ldr	r2, [pc, #40]	; (800aff0 <prvCheckTasksWaitingTermination+0x50>)
 800afc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afc8:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <prvCheckTasksWaitingTermination+0x54>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3b01      	subs	r3, #1
 800afce:	4a09      	ldr	r2, [pc, #36]	; (800aff4 <prvCheckTasksWaitingTermination+0x54>)
 800afd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afd2:	f7fe f9e7 	bl	80093a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f80e 	bl	800aff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <prvCheckTasksWaitingTermination+0x54>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e1      	bne.n	800afa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20001a68 	.word	0x20001a68
 800aff0:	20001a94 	.word	0x20001a94
 800aff4:	20001a7c 	.word	0x20001a7c

0800aff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b006:	2b00      	cmp	r3, #0
 800b008:	d108      	bne.n	800b01c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fe fb52 	bl	80096b8 <vPortFree>
				vPortFree( pxTCB );
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7fe fb4f 	bl	80096b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b01a:	e017      	b.n	800b04c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b022:	2b01      	cmp	r3, #1
 800b024:	d103      	bne.n	800b02e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7fe fb46 	bl	80096b8 <vPortFree>
	}
 800b02c:	e00e      	b.n	800b04c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b034:	2b02      	cmp	r3, #2
 800b036:	d009      	beq.n	800b04c <prvDeleteTCB+0x54>
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	e7fe      	b.n	800b04a <prvDeleteTCB+0x52>
	}
 800b04c:	bf00      	nop
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b05a:	4b0e      	ldr	r3, [pc, #56]	; (800b094 <prvResetNextTaskUnblockTime+0x40>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <prvResetNextTaskUnblockTime+0x14>
 800b064:	2301      	movs	r3, #1
 800b066:	e000      	b.n	800b06a <prvResetNextTaskUnblockTime+0x16>
 800b068:	2300      	movs	r3, #0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d004      	beq.n	800b078 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b06e:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <prvResetNextTaskUnblockTime+0x44>)
 800b070:	f04f 32ff 	mov.w	r2, #4294967295
 800b074:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b076:	e008      	b.n	800b08a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b078:	4b06      	ldr	r3, [pc, #24]	; (800b094 <prvResetNextTaskUnblockTime+0x40>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	4a04      	ldr	r2, [pc, #16]	; (800b098 <prvResetNextTaskUnblockTime+0x44>)
 800b088:	6013      	str	r3, [r2, #0]
}
 800b08a:	bf00      	nop
 800b08c:	370c      	adds	r7, #12
 800b08e:	46bd      	mov	sp, r7
 800b090:	bc80      	pop	{r7}
 800b092:	4770      	bx	lr
 800b094:	20001a4c 	.word	0x20001a4c
 800b098:	20001ab4 	.word	0x20001ab4

0800b09c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <xTaskGetSchedulerState+0x34>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	e008      	b.n	800b0c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b0:	4b08      	ldr	r3, [pc, #32]	; (800b0d4 <xTaskGetSchedulerState+0x38>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d102      	bne.n	800b0be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	607b      	str	r3, [r7, #4]
 800b0bc:	e001      	b.n	800b0c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0c2:	687b      	ldr	r3, [r7, #4]
	}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bc80      	pop	{r7}
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	20001aa0 	.word	0x20001aa0
 800b0d4:	20001abc 	.word	0x20001abc

0800b0d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d06c      	beq.n	800b1c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0ee:	4b39      	ldr	r3, [pc, #228]	; (800b1d4 <xTaskPriorityDisinherit+0xfc>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d009      	beq.n	800b10c <xTaskPriorityDisinherit+0x34>
 800b0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	e7fe      	b.n	800b10a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b110:	2b00      	cmp	r3, #0
 800b112:	d109      	bne.n	800b128 <xTaskPriorityDisinherit+0x50>
 800b114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b118:	f383 8811 	msr	BASEPRI, r3
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	f3bf 8f4f 	dsb	sy
 800b124:	60bb      	str	r3, [r7, #8]
 800b126:	e7fe      	b.n	800b126 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b12c:	1e5a      	subs	r2, r3, #1
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d044      	beq.n	800b1c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b142:	2b00      	cmp	r3, #0
 800b144:	d140      	bne.n	800b1c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3304      	adds	r3, #4
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fd ffe5 	bl	800911a <uxListRemove>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d115      	bne.n	800b182 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15a:	491f      	ldr	r1, [pc, #124]	; (800b1d8 <xTaskPriorityDisinherit+0x100>)
 800b15c:	4613      	mov	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10a      	bne.n	800b182 <xTaskPriorityDisinherit+0xaa>
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b170:	2201      	movs	r2, #1
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	43da      	mvns	r2, r3
 800b178:	4b18      	ldr	r3, [pc, #96]	; (800b1dc <xTaskPriorityDisinherit+0x104>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4013      	ands	r3, r2
 800b17e:	4a17      	ldr	r2, [pc, #92]	; (800b1dc <xTaskPriorityDisinherit+0x104>)
 800b180:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	f1c3 0207 	rsb	r2, r3, #7
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	2201      	movs	r2, #1
 800b19c:	409a      	lsls	r2, r3
 800b19e:	4b0f      	ldr	r3, [pc, #60]	; (800b1dc <xTaskPriorityDisinherit+0x104>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	4a0d      	ldr	r2, [pc, #52]	; (800b1dc <xTaskPriorityDisinherit+0x104>)
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	4413      	add	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4a08      	ldr	r2, [pc, #32]	; (800b1d8 <xTaskPriorityDisinherit+0x100>)
 800b1b6:	441a      	add	r2, r3
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f7fd ff50 	bl	8009064 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1c8:	697b      	ldr	r3, [r7, #20]
	}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	20001994 	.word	0x20001994
 800b1d8:	20001998 	.word	0x20001998
 800b1dc:	20001a9c 	.word	0x20001a9c

0800b1e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1ea:	4b29      	ldr	r3, [pc, #164]	; (800b290 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1f0:	4b28      	ldr	r3, [pc, #160]	; (800b294 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3304      	adds	r3, #4
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fd ff8f 	bl	800911a <uxListRemove>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b202:	4b24      	ldr	r3, [pc, #144]	; (800b294 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	2201      	movs	r2, #1
 800b20a:	fa02 f303 	lsl.w	r3, r2, r3
 800b20e:	43da      	mvns	r2, r3
 800b210:	4b21      	ldr	r3, [pc, #132]	; (800b298 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4013      	ands	r3, r2
 800b216:	4a20      	ldr	r2, [pc, #128]	; (800b298 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b218:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b220:	d10a      	bne.n	800b238 <prvAddCurrentTaskToDelayedList+0x58>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d007      	beq.n	800b238 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b228:	4b1a      	ldr	r3, [pc, #104]	; (800b294 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3304      	adds	r3, #4
 800b22e:	4619      	mov	r1, r3
 800b230:	481a      	ldr	r0, [pc, #104]	; (800b29c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b232:	f7fd ff17 	bl	8009064 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b236:	e026      	b.n	800b286 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4413      	add	r3, r2
 800b23e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b240:	4b14      	ldr	r3, [pc, #80]	; (800b294 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d209      	bcs.n	800b264 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b250:	4b13      	ldr	r3, [pc, #76]	; (800b2a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	4b0f      	ldr	r3, [pc, #60]	; (800b294 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3304      	adds	r3, #4
 800b25a:	4619      	mov	r1, r3
 800b25c:	4610      	mov	r0, r2
 800b25e:	f7fd ff24 	bl	80090aa <vListInsert>
}
 800b262:	e010      	b.n	800b286 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b264:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	4b0a      	ldr	r3, [pc, #40]	; (800b294 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	3304      	adds	r3, #4
 800b26e:	4619      	mov	r1, r3
 800b270:	4610      	mov	r0, r2
 800b272:	f7fd ff1a 	bl	80090aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b276:	4b0c      	ldr	r3, [pc, #48]	; (800b2a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d202      	bcs.n	800b286 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b280:	4a09      	ldr	r2, [pc, #36]	; (800b2a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	6013      	str	r3, [r2, #0]
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	20001a98 	.word	0x20001a98
 800b294:	20001994 	.word	0x20001994
 800b298:	20001a9c 	.word	0x20001a9c
 800b29c:	20001a80 	.word	0x20001a80
 800b2a0:	20001a50 	.word	0x20001a50
 800b2a4:	20001a4c 	.word	0x20001a4c
 800b2a8:	20001ab4 	.word	0x20001ab4

0800b2ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08a      	sub	sp, #40	; 0x28
 800b2b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b2b6:	f000 fb37 	bl	800b928 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b2ba:	4b1c      	ldr	r3, [pc, #112]	; (800b32c <xTimerCreateTimerTask+0x80>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d021      	beq.n	800b306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b2ca:	1d3a      	adds	r2, r7, #4
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	f107 030c 	add.w	r3, r7, #12
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f4 ff85 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	9202      	str	r2, [sp, #8]
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	460a      	mov	r2, r1
 800b2ec:	4910      	ldr	r1, [pc, #64]	; (800b330 <xTimerCreateTimerTask+0x84>)
 800b2ee:	4811      	ldr	r0, [pc, #68]	; (800b334 <xTimerCreateTimerTask+0x88>)
 800b2f0:	f7ff f84e 	bl	800a390 <xTaskCreateStatic>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	4b10      	ldr	r3, [pc, #64]	; (800b338 <xTimerCreateTimerTask+0x8c>)
 800b2f8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <xTimerCreateTimerTask+0x8c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d001      	beq.n	800b306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b302:	2301      	movs	r3, #1
 800b304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d109      	bne.n	800b320 <xTimerCreateTimerTask+0x74>
 800b30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b310:	f383 8811 	msr	BASEPRI, r3
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	613b      	str	r3, [r7, #16]
 800b31e:	e7fe      	b.n	800b31e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b320:	697b      	ldr	r3, [r7, #20]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20001af0 	.word	0x20001af0
 800b330:	0800cc60 	.word	0x0800cc60
 800b334:	0800b571 	.word	0x0800b571
 800b338:	20001af4 	.word	0x20001af4

0800b33c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af02      	add	r7, sp, #8
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800b34a:	202c      	movs	r0, #44	; 0x2c
 800b34c:	f7fe f8f2 	bl	8009534 <pvPortMalloc>
 800b350:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00d      	beq.n	800b374 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 f844 	bl	800b3f4 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800b374:	697b      	ldr	r3, [r7, #20]
	}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b08a      	sub	sp, #40	; 0x28
 800b382:	af02      	add	r7, sp, #8
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	607a      	str	r2, [r7, #4]
 800b38a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b38c:	232c      	movs	r3, #44	; 0x2c
 800b38e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	2b2c      	cmp	r3, #44	; 0x2c
 800b394:	d009      	beq.n	800b3aa <xTimerCreateStatic+0x2c>
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	61bb      	str	r3, [r7, #24]
 800b3a8:	e7fe      	b.n	800b3a8 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d109      	bne.n	800b3c4 <xTimerCreateStatic+0x46>
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	617b      	str	r3, [r7, #20]
 800b3c2:	e7fe      	b.n	800b3c2 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00d      	beq.n	800b3ea <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	68b9      	ldr	r1, [r7, #8]
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 f809 	bl	800b3f4 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800b3ea:	69fb      	ldr	r3, [r7, #28]
	}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3720      	adds	r7, #32
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
 800b400:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d109      	bne.n	800b41c <prvInitialiseNewTimer+0x28>
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	617b      	str	r3, [r7, #20]
 800b41a:	e7fe      	b.n	800b41a <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d015      	beq.n	800b44e <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b422:	f000 fa81 	bl	800b928 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800b432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b440:	6a3a      	ldr	r2, [r7, #32]
 800b442:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b446:	3304      	adds	r3, #4
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fd fdff 	bl	800904c <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b44e:	bf00      	nop
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
	...

0800b458 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b08a      	sub	sp, #40	; 0x28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
 800b464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b466:	2300      	movs	r3, #0
 800b468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <xTimerGenericCommand+0x2c>
 800b470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	623b      	str	r3, [r7, #32]
 800b482:	e7fe      	b.n	800b482 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b484:	4b19      	ldr	r3, [pc, #100]	; (800b4ec <xTimerGenericCommand+0x94>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d02a      	beq.n	800b4e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2b05      	cmp	r3, #5
 800b49c:	dc18      	bgt.n	800b4d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b49e:	f7ff fdfd 	bl	800b09c <xTaskGetSchedulerState>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d109      	bne.n	800b4bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4a8:	4b10      	ldr	r3, [pc, #64]	; (800b4ec <xTimerGenericCommand+0x94>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	f107 0114 	add.w	r1, r7, #20
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4b4:	f7fe fb96 	bl	8009be4 <xQueueGenericSend>
 800b4b8:	6278      	str	r0, [r7, #36]	; 0x24
 800b4ba:	e012      	b.n	800b4e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4bc:	4b0b      	ldr	r3, [pc, #44]	; (800b4ec <xTimerGenericCommand+0x94>)
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	f107 0114 	add.w	r1, r7, #20
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f7fe fb8c 	bl	8009be4 <xQueueGenericSend>
 800b4cc:	6278      	str	r0, [r7, #36]	; 0x24
 800b4ce:	e008      	b.n	800b4e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b4d0:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <xTimerGenericCommand+0x94>)
 800b4d2:	6818      	ldr	r0, [r3, #0]
 800b4d4:	f107 0114 	add.w	r1, r7, #20
 800b4d8:	2300      	movs	r3, #0
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	f7fe fc7c 	bl	8009dd8 <xQueueGenericSendFromISR>
 800b4e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3728      	adds	r7, #40	; 0x28
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20001af0 	.word	0x20001af0

0800b4f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af02      	add	r7, sp, #8
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4fa:	4b1c      	ldr	r3, [pc, #112]	; (800b56c <prvProcessExpiredTimer+0x7c>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	3304      	adds	r3, #4
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fd fe06 	bl	800911a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d121      	bne.n	800b55a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	699a      	ldr	r2, [r3, #24]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	18d1      	adds	r1, r2, r3
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	6978      	ldr	r0, [r7, #20]
 800b524:	f000 f8c8 	bl	800b6b8 <prvInsertTimerInActiveList>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d015      	beq.n	800b55a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b52e:	2300      	movs	r3, #0
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	2300      	movs	r3, #0
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	2100      	movs	r1, #0
 800b538:	6978      	ldr	r0, [r7, #20]
 800b53a:	f7ff ff8d 	bl	800b458 <xTimerGenericCommand>
 800b53e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d109      	bne.n	800b55a <prvProcessExpiredTimer+0x6a>
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	e7fe      	b.n	800b558 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55e:	6978      	ldr	r0, [r7, #20]
 800b560:	4798      	blx	r3
}
 800b562:	bf00      	nop
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20001ae8 	.word	0x20001ae8

0800b570 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b578:	f107 0308 	add.w	r3, r7, #8
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 f857 	bl	800b630 <prvGetNextExpireTime>
 800b582:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	4619      	mov	r1, r3
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 f803 	bl	800b594 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b58e:	f000 f8d5 	bl	800b73c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b592:	e7f1      	b.n	800b578 <prvTimerTask+0x8>

0800b594 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b59e:	f7ff f9a7 	bl	800a8f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f000 f866 	bl	800b678 <prvSampleTimeNow>
 800b5ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d130      	bne.n	800b616 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <prvProcessTimerOrBlockTask+0x3c>
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d806      	bhi.n	800b5d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b5c2:	f7ff f9a3 	bl	800a90c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b5c6:	68f9      	ldr	r1, [r7, #12]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff ff91 	bl	800b4f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5ce:	e024      	b.n	800b61a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d008      	beq.n	800b5e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5d6:	4b13      	ldr	r3, [pc, #76]	; (800b624 <prvProcessTimerOrBlockTask+0x90>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	bf0c      	ite	eq
 800b5e0:	2301      	moveq	r3, #1
 800b5e2:	2300      	movne	r3, #0
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <prvProcessTimerOrBlockTask+0x94>)
 800b5ea:	6818      	ldr	r0, [r3, #0]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	683a      	ldr	r2, [r7, #0]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f7fe fe97 	bl	800a328 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5fa:	f7ff f987 	bl	800a90c <xTaskResumeAll>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b604:	4b09      	ldr	r3, [pc, #36]	; (800b62c <prvProcessTimerOrBlockTask+0x98>)
 800b606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	f3bf 8f6f 	isb	sy
}
 800b614:	e001      	b.n	800b61a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b616:	f7ff f979 	bl	800a90c <xTaskResumeAll>
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20001aec 	.word	0x20001aec
 800b628:	20001af0 	.word	0x20001af0
 800b62c:	e000ed04 	.word	0xe000ed04

0800b630 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b638:	4b0e      	ldr	r3, [pc, #56]	; (800b674 <prvGetNextExpireTime+0x44>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	bf0c      	ite	eq
 800b642:	2301      	moveq	r3, #1
 800b644:	2300      	movne	r3, #0
 800b646:	b2db      	uxtb	r3, r3
 800b648:	461a      	mov	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b656:	4b07      	ldr	r3, [pc, #28]	; (800b674 <prvGetNextExpireTime+0x44>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60fb      	str	r3, [r7, #12]
 800b660:	e001      	b.n	800b666 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b666:	68fb      	ldr	r3, [r7, #12]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3714      	adds	r7, #20
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bc80      	pop	{r7}
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	20001ae8 	.word	0x20001ae8

0800b678 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b680:	f7ff f9e0 	bl	800aa44 <xTaskGetTickCount>
 800b684:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <prvSampleTimeNow+0x3c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d205      	bcs.n	800b69c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b690:	f000 f8ea 	bl	800b868 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	601a      	str	r2, [r3, #0]
 800b69a:	e002      	b.n	800b6a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6a2:	4a04      	ldr	r2, [pc, #16]	; (800b6b4 <prvSampleTimeNow+0x3c>)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001af8 	.word	0x20001af8

0800b6b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d812      	bhi.n	800b704 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	1ad2      	subs	r2, r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d302      	bcc.n	800b6f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e01b      	b.n	800b72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6f2:	4b10      	ldr	r3, [pc, #64]	; (800b734 <prvInsertTimerInActiveList+0x7c>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7fd fcd4 	bl	80090aa <vListInsert>
 800b702:	e012      	b.n	800b72a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d206      	bcs.n	800b71a <prvInsertTimerInActiveList+0x62>
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d302      	bcc.n	800b71a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b714:	2301      	movs	r3, #1
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	e007      	b.n	800b72a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b71a:	4b07      	ldr	r3, [pc, #28]	; (800b738 <prvInsertTimerInActiveList+0x80>)
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	3304      	adds	r3, #4
 800b722:	4619      	mov	r1, r3
 800b724:	4610      	mov	r0, r2
 800b726:	f7fd fcc0 	bl	80090aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b72a:	697b      	ldr	r3, [r7, #20]
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3718      	adds	r7, #24
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	20001aec 	.word	0x20001aec
 800b738:	20001ae8 	.word	0x20001ae8

0800b73c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08c      	sub	sp, #48	; 0x30
 800b740:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b742:	e07f      	b.n	800b844 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	2b00      	cmp	r3, #0
 800b748:	db7c      	blt.n	800b844 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d004      	beq.n	800b760 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b758:	3304      	adds	r3, #4
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fd fcdd 	bl	800911a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b760:	1d3b      	adds	r3, r7, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff ff88 	bl	800b678 <prvSampleTimeNow>
 800b768:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	2b09      	cmp	r3, #9
 800b76e:	d868      	bhi.n	800b842 <prvProcessReceivedCommands+0x106>
 800b770:	a201      	add	r2, pc, #4	; (adr r2, 800b778 <prvProcessReceivedCommands+0x3c>)
 800b772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b776:	bf00      	nop
 800b778:	0800b7a1 	.word	0x0800b7a1
 800b77c:	0800b7a1 	.word	0x0800b7a1
 800b780:	0800b7a1 	.word	0x0800b7a1
 800b784:	0800b845 	.word	0x0800b845
 800b788:	0800b7fb 	.word	0x0800b7fb
 800b78c:	0800b831 	.word	0x0800b831
 800b790:	0800b7a1 	.word	0x0800b7a1
 800b794:	0800b7a1 	.word	0x0800b7a1
 800b798:	0800b845 	.word	0x0800b845
 800b79c:	0800b7fb 	.word	0x0800b7fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	18d1      	adds	r1, r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	6a3a      	ldr	r2, [r7, #32]
 800b7ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7ae:	f7ff ff83 	bl	800b6b8 <prvInsertTimerInActiveList>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d045      	beq.n	800b844 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	69db      	ldr	r3, [r3, #28]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d13d      	bne.n	800b844 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	441a      	add	r2, r3
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7da:	f7ff fe3d 	bl	800b458 <xTimerGenericCommand>
 800b7de:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d12e      	bne.n	800b844 <prvProcessReceivedCommands+0x108>
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	61bb      	str	r3, [r7, #24]
 800b7f8:	e7fe      	b.n	800b7f8 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7fa:	68fa      	ldr	r2, [r7, #12]
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <prvProcessReceivedCommands+0xe0>
 800b808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80c:	f383 8811 	msr	BASEPRI, r3
 800b810:	f3bf 8f6f 	isb	sy
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	e7fe      	b.n	800b81a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81e:	699a      	ldr	r2, [r3, #24]
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	18d1      	adds	r1, r2, r3
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	6a3a      	ldr	r2, [r7, #32]
 800b828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b82a:	f7ff ff45 	bl	800b6b8 <prvInsertTimerInActiveList>
					break;
 800b82e:	e009      	b.n	800b844 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b836:	2b00      	cmp	r3, #0
 800b838:	d104      	bne.n	800b844 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800b83a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b83c:	f7fd ff3c 	bl	80096b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b840:	e000      	b.n	800b844 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800b842:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b844:	4b07      	ldr	r3, [pc, #28]	; (800b864 <prvProcessReceivedCommands+0x128>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f107 0108 	add.w	r1, r7, #8
 800b84c:	2200      	movs	r2, #0
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fb56 	bl	8009f00 <xQueueReceive>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	f47f af74 	bne.w	800b744 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b85c:	bf00      	nop
 800b85e:	3728      	adds	r7, #40	; 0x28
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	20001af0 	.word	0x20001af0

0800b868 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b86e:	e044      	b.n	800b8fa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b870:	4b2b      	ldr	r3, [pc, #172]	; (800b920 <prvSwitchTimerLists+0xb8>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b87a:	4b29      	ldr	r3, [pc, #164]	; (800b920 <prvSwitchTimerLists+0xb8>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	3304      	adds	r3, #4
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fd fc46 	bl	800911a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b892:	6938      	ldr	r0, [r7, #16]
 800b894:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d12d      	bne.n	800b8fa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	699a      	ldr	r2, [r3, #24]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d90e      	bls.n	800b8ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	693a      	ldr	r2, [r7, #16]
 800b8ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8bc:	4b18      	ldr	r3, [pc, #96]	; (800b920 <prvSwitchTimerLists+0xb8>)
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	f7fd fbef 	bl	80090aa <vListInsert>
 800b8cc:	e015      	b.n	800b8fa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	697a      	ldr	r2, [r7, #20]
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	6938      	ldr	r0, [r7, #16]
 800b8da:	f7ff fdbd 	bl	800b458 <xTimerGenericCommand>
 800b8de:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d109      	bne.n	800b8fa <prvSwitchTimerLists+0x92>
 800b8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	e7fe      	b.n	800b8f8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8fa:	4b09      	ldr	r3, [pc, #36]	; (800b920 <prvSwitchTimerLists+0xb8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1b5      	bne.n	800b870 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b904:	4b06      	ldr	r3, [pc, #24]	; (800b920 <prvSwitchTimerLists+0xb8>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800b90a:	4b06      	ldr	r3, [pc, #24]	; (800b924 <prvSwitchTimerLists+0xbc>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a04      	ldr	r2, [pc, #16]	; (800b920 <prvSwitchTimerLists+0xb8>)
 800b910:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b912:	4a04      	ldr	r2, [pc, #16]	; (800b924 <prvSwitchTimerLists+0xbc>)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6013      	str	r3, [r2, #0]
}
 800b918:	bf00      	nop
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	20001ae8 	.word	0x20001ae8
 800b924:	20001aec 	.word	0x20001aec

0800b928 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b92e:	f7fd fd0b 	bl	8009348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b932:	4b15      	ldr	r3, [pc, #84]	; (800b988 <prvCheckForValidListAndQueue+0x60>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d120      	bne.n	800b97c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b93a:	4814      	ldr	r0, [pc, #80]	; (800b98c <prvCheckForValidListAndQueue+0x64>)
 800b93c:	f7fd fb67 	bl	800900e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b940:	4813      	ldr	r0, [pc, #76]	; (800b990 <prvCheckForValidListAndQueue+0x68>)
 800b942:	f7fd fb64 	bl	800900e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b946:	4b13      	ldr	r3, [pc, #76]	; (800b994 <prvCheckForValidListAndQueue+0x6c>)
 800b948:	4a10      	ldr	r2, [pc, #64]	; (800b98c <prvCheckForValidListAndQueue+0x64>)
 800b94a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b94c:	4b12      	ldr	r3, [pc, #72]	; (800b998 <prvCheckForValidListAndQueue+0x70>)
 800b94e:	4a10      	ldr	r2, [pc, #64]	; (800b990 <prvCheckForValidListAndQueue+0x68>)
 800b950:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b952:	2300      	movs	r3, #0
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	4b11      	ldr	r3, [pc, #68]	; (800b99c <prvCheckForValidListAndQueue+0x74>)
 800b958:	4a11      	ldr	r2, [pc, #68]	; (800b9a0 <prvCheckForValidListAndQueue+0x78>)
 800b95a:	210c      	movs	r1, #12
 800b95c:	200a      	movs	r0, #10
 800b95e:	f7fe f825 	bl	80099ac <xQueueGenericCreateStatic>
 800b962:	4602      	mov	r2, r0
 800b964:	4b08      	ldr	r3, [pc, #32]	; (800b988 <prvCheckForValidListAndQueue+0x60>)
 800b966:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b968:	4b07      	ldr	r3, [pc, #28]	; (800b988 <prvCheckForValidListAndQueue+0x60>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b970:	4b05      	ldr	r3, [pc, #20]	; (800b988 <prvCheckForValidListAndQueue+0x60>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	490b      	ldr	r1, [pc, #44]	; (800b9a4 <prvCheckForValidListAndQueue+0x7c>)
 800b976:	4618      	mov	r0, r3
 800b978:	f7fe fcae 	bl	800a2d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b97c:	f7fd fd12 	bl	80093a4 <vPortExitCritical>
}
 800b980:	bf00      	nop
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20001af0 	.word	0x20001af0
 800b98c:	20001ac0 	.word	0x20001ac0
 800b990:	20001ad4 	.word	0x20001ad4
 800b994:	20001ae8 	.word	0x20001ae8
 800b998:	20001aec 	.word	0x20001aec
 800b99c:	20001b74 	.word	0x20001b74
 800b9a0:	20001afc 	.word	0x20001afc
 800b9a4:	0800cc68 	.word	0x0800cc68

0800b9a8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800b9ac:	4b27      	ldr	r3, [pc, #156]	; (800ba4c <MX_USB_DEVICE_Init+0xa4>)
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d124      	bne.n	800ba00 <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4925      	ldr	r1, [pc, #148]	; (800ba50 <MX_USB_DEVICE_Init+0xa8>)
 800b9ba:	4826      	ldr	r0, [pc, #152]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800b9bc:	f7fc f8f8 	bl	8007bb0 <USBD_Init>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800b9c6:	f7f4 fec5 	bl	8000754 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800b9ca:	4923      	ldr	r1, [pc, #140]	; (800ba58 <MX_USB_DEVICE_Init+0xb0>)
 800b9cc:	4821      	ldr	r0, [pc, #132]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800b9ce:	f7fc f91a 	bl	8007c06 <USBD_RegisterClass>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800b9d8:	f7f4 febc 	bl	8000754 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800b9dc:	491f      	ldr	r1, [pc, #124]	; (800ba5c <MX_USB_DEVICE_Init+0xb4>)
 800b9de:	481d      	ldr	r0, [pc, #116]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800b9e0:	f7fc f8d0 	bl	8007b84 <USBD_CUSTOM_HID_RegisterInterface>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d001      	beq.n	800b9ee <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800b9ea:	f7f4 feb3 	bl	8000754 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b9ee:	4819      	ldr	r0, [pc, #100]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800b9f0:	f7fc f922 	bl	8007c38 <USBD_Start>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d01e      	beq.n	800ba38 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800b9fa:	f7f4 feab 	bl	8000754 <Error_Handler>
 800b9fe:	e01b      	b.n	800ba38 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ba00:	2200      	movs	r2, #0
 800ba02:	4913      	ldr	r1, [pc, #76]	; (800ba50 <MX_USB_DEVICE_Init+0xa8>)
 800ba04:	4813      	ldr	r0, [pc, #76]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800ba06:	f7fc f8d3 	bl	8007bb0 <USBD_Init>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800ba10:	f7f4 fea0 	bl	8000754 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800ba14:	4912      	ldr	r1, [pc, #72]	; (800ba60 <MX_USB_DEVICE_Init+0xb8>)
 800ba16:	480f      	ldr	r0, [pc, #60]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800ba18:	f7fc f8f5 	bl	8007c06 <USBD_RegisterClass>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d001      	beq.n	800ba26 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800ba22:	f7f4 fe97 	bl	8000754 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800ba26:	490f      	ldr	r1, [pc, #60]	; (800ba64 <MX_USB_DEVICE_Init+0xbc>)
 800ba28:	480a      	ldr	r0, [pc, #40]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800ba2a:	f7fa fe69 	bl	8006700 <USBD_MSC_RegisterStorage>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800ba34:	f7f4 fe8e 	bl	8000754 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ba38:	4806      	ldr	r0, [pc, #24]	; (800ba54 <MX_USB_DEVICE_Init+0xac>)
 800ba3a:	f7fc f8fd 	bl	8007c38 <USBD_Start>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d001      	beq.n	800ba48 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800ba44:	f7f4 fe86 	bl	8000754 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ba48:	bf00      	nop
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20000308 	.word	0x20000308
 800ba50:	20000238 	.word	0x20000238
 800ba54:	2000319c 	.word	0x2000319c
 800ba58:	200000f0 	.word	0x200000f0
 800ba5c:	20000228 	.word	0x20000228
 800ba60:	2000004c 	.word	0x2000004c
 800ba64:	2000000c 	.word	0x2000000c

0800ba68 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba6c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bc80      	pop	{r7}
 800ba74:	4770      	bx	lr

0800ba76 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800ba76:	b480      	push	{r7}
 800ba78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800ba7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc80      	pop	{r7}
 800ba82:	4770      	bx	lr

0800ba84 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	460a      	mov	r2, r1
 800ba8e:	71fb      	strb	r3, [r7, #7]
 800ba90:	4613      	mov	r3, r2
 800ba92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800ba94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bc80      	pop	{r7}
 800ba9e:	4770      	bx	lr

0800baa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	4603      	mov	r3, r0
 800baa8:	6039      	str	r1, [r7, #0]
 800baaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	2212      	movs	r2, #18
 800bab0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bab2:	4b03      	ldr	r3, [pc, #12]	; (800bac0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	bc80      	pop	{r7}
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	20000254 	.word	0x20000254

0800bac4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	6039      	str	r1, [r7, #0]
 800bace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2204      	movs	r2, #4
 800bad4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bad6:	4b03      	ldr	r3, [pc, #12]	; (800bae4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bad8:	4618      	mov	r0, r3
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	bc80      	pop	{r7}
 800bae0:	4770      	bx	lr
 800bae2:	bf00      	nop
 800bae4:	20000268 	.word	0x20000268

0800bae8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	6039      	str	r1, [r7, #0]
 800baf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800baf4:	79fb      	ldrb	r3, [r7, #7]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d105      	bne.n	800bb06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	4907      	ldr	r1, [pc, #28]	; (800bb1c <USBD_FS_ProductStrDescriptor+0x34>)
 800bafe:	4808      	ldr	r0, [pc, #32]	; (800bb20 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb00:	f7fd f805 	bl	8008b0e <USBD_GetString>
 800bb04:	e004      	b.n	800bb10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	4904      	ldr	r1, [pc, #16]	; (800bb1c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb0a:	4805      	ldr	r0, [pc, #20]	; (800bb20 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb0c:	f7fc ffff 	bl	8008b0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb10:	4b02      	ldr	r3, [pc, #8]	; (800bb1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3708      	adds	r7, #8
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20003460 	.word	0x20003460
 800bb20:	0800cc70 	.word	0x0800cc70

0800bb24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	6039      	str	r1, [r7, #0]
 800bb2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb30:	683a      	ldr	r2, [r7, #0]
 800bb32:	4904      	ldr	r1, [pc, #16]	; (800bb44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb34:	4804      	ldr	r0, [pc, #16]	; (800bb48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb36:	f7fc ffea 	bl	8008b0e <USBD_GetString>
  return USBD_StrDesc;
 800bb3a:	4b02      	ldr	r3, [pc, #8]	; (800bb44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	20003460 	.word	0x20003460
 800bb48:	0800cc94 	.word	0x0800cc94

0800bb4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	4603      	mov	r3, r0
 800bb54:	6039      	str	r1, [r7, #0]
 800bb56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	221a      	movs	r2, #26
 800bb5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb5e:	f000 f843 	bl	800bbe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bb62:	4b02      	ldr	r3, [pc, #8]	; (800bb6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	2000026c 	.word	0x2000026c

0800bb70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	6039      	str	r1, [r7, #0]
 800bb7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d105      	bne.n	800bb8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	4907      	ldr	r1, [pc, #28]	; (800bba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb86:	4808      	ldr	r0, [pc, #32]	; (800bba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb88:	f7fc ffc1 	bl	8008b0e <USBD_GetString>
 800bb8c:	e004      	b.n	800bb98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	4904      	ldr	r1, [pc, #16]	; (800bba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb92:	4805      	ldr	r0, [pc, #20]	; (800bba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb94:	f7fc ffbb 	bl	8008b0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb98:	4b02      	ldr	r3, [pc, #8]	; (800bba4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20003460 	.word	0x20003460
 800bba8:	0800cca4 	.word	0x0800cca4

0800bbac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	6039      	str	r1, [r7, #0]
 800bbb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d105      	bne.n	800bbca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	4907      	ldr	r1, [pc, #28]	; (800bbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbc2:	4808      	ldr	r0, [pc, #32]	; (800bbe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbc4:	f7fc ffa3 	bl	8008b0e <USBD_GetString>
 800bbc8:	e004      	b.n	800bbd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	4904      	ldr	r1, [pc, #16]	; (800bbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bbce:	4805      	ldr	r0, [pc, #20]	; (800bbe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bbd0:	f7fc ff9d 	bl	8008b0e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20003460 	.word	0x20003460
 800bbe4:	0800ccb8 	.word	0x0800ccb8

0800bbe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bbee:	4b0f      	ldr	r3, [pc, #60]	; (800bc2c <Get_SerialNum+0x44>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <Get_SerialNum+0x48>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	; (800bc34 <Get_SerialNum+0x4c>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4413      	add	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d009      	beq.n	800bc22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc0e:	2208      	movs	r2, #8
 800bc10:	4909      	ldr	r1, [pc, #36]	; (800bc38 <Get_SerialNum+0x50>)
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 f814 	bl	800bc40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc18:	2204      	movs	r2, #4
 800bc1a:	4908      	ldr	r1, [pc, #32]	; (800bc3c <Get_SerialNum+0x54>)
 800bc1c:	68b8      	ldr	r0, [r7, #8]
 800bc1e:	f000 f80f 	bl	800bc40 <IntToUnicode>
  }
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	1ffff7e8 	.word	0x1ffff7e8
 800bc30:	1ffff7ec 	.word	0x1ffff7ec
 800bc34:	1ffff7f0 	.word	0x1ffff7f0
 800bc38:	2000026e 	.word	0x2000026e
 800bc3c:	2000027e 	.word	0x2000027e

0800bc40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc52:	2300      	movs	r3, #0
 800bc54:	75fb      	strb	r3, [r7, #23]
 800bc56:	e027      	b.n	800bca8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	0f1b      	lsrs	r3, r3, #28
 800bc5c:	2b09      	cmp	r3, #9
 800bc5e:	d80b      	bhi.n	800bc78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bc60:	7dfb      	ldrb	r3, [r7, #23]
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	461a      	mov	r2, r3
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	0f12      	lsrs	r2, r2, #28
 800bc6e:	b2d2      	uxtb	r2, r2
 800bc70:	3230      	adds	r2, #48	; 0x30
 800bc72:	b2d2      	uxtb	r2, r2
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	e00a      	b.n	800bc8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	005b      	lsls	r3, r3, #1
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	4413      	add	r3, r2
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	0f12      	lsrs	r2, r2, #28
 800bc86:	b2d2      	uxtb	r2, r2
 800bc88:	3237      	adds	r2, #55	; 0x37
 800bc8a:	b2d2      	uxtb	r2, r2
 800bc8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	011b      	lsls	r3, r3, #4
 800bc92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	3301      	adds	r3, #1
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bca2:	7dfb      	ldrb	r3, [r7, #23]
 800bca4:	3301      	adds	r3, #1
 800bca6:	75fb      	strb	r3, [r7, #23]
 800bca8:	7dfa      	ldrb	r2, [r7, #23]
 800bcaa:	79fb      	ldrb	r3, [r7, #7]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d3d3      	bcc.n	800bc58 <IntToUnicode+0x18>
  }
}
 800bcb0:	bf00      	nop
 800bcb2:	371c      	adds	r7, #28
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bc80      	pop	{r7}
 800bcb8:	4770      	bx	lr
	...

0800bcbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a0d      	ldr	r2, [pc, #52]	; (800bd00 <HAL_PCD_MspInit+0x44>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d113      	bne.n	800bcf6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bcce:	4a0d      	ldr	r2, [pc, #52]	; (800bd04 <HAL_PCD_MspInit+0x48>)
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <HAL_PCD_MspInit+0x48>)
 800bcd2:	69db      	ldr	r3, [r3, #28]
 800bcd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bcd8:	61d3      	str	r3, [r2, #28]
 800bcda:	4b0a      	ldr	r3, [pc, #40]	; (800bd04 <HAL_PCD_MspInit+0x48>)
 800bcdc:	69db      	ldr	r3, [r3, #28]
 800bcde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800bce6:	2200      	movs	r2, #0
 800bce8:	2105      	movs	r1, #5
 800bcea:	2014      	movs	r0, #20
 800bcec:	f7f5 f863 	bl	8000db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bcf0:	2014      	movs	r0, #20
 800bcf2:	f7f5 f87c 	bl	8000dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	40005c00 	.word	0x40005c00
 800bd04:	40021000 	.word	0x40021000

0800bd08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fb ffd2 	bl	8007cc8 <USBD_LL_SetupStage>
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bd3e:	78fa      	ldrb	r2, [r7, #3]
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	440b      	add	r3, r1
 800bd4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	78fb      	ldrb	r3, [r7, #3]
 800bd54:	4619      	mov	r1, r3
 800bd56:	f7fc f802 	bl	8007d5e <USBD_LL_DataOutStage>
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}

0800bd62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd62:	b580      	push	{r7, lr}
 800bd64:	b082      	sub	sp, #8
 800bd66:	af00      	add	r7, sp, #0
 800bd68:	6078      	str	r0, [r7, #4]
 800bd6a:	460b      	mov	r3, r1
 800bd6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800bd74:	78fa      	ldrb	r2, [r7, #3]
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	440b      	add	r3, r1
 800bd82:	333c      	adds	r3, #60	; 0x3c
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	f7fc f859 	bl	8007e40 <USBD_LL_DataInStage>
}
 800bd8e:	bf00      	nop
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b082      	sub	sp, #8
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fc f969 	bl	800807c <USBD_LL_SOF>
}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}

0800bdb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb2:	b580      	push	{r7, lr}
 800bdb4:	b084      	sub	sp, #16
 800bdb6:	af00      	add	r7, sp, #0
 800bdb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	689b      	ldr	r3, [r3, #8]
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d001      	beq.n	800bdca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bdc6:	f7f4 fcc5 	bl	8000754 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bdd0:	7bfa      	ldrb	r2, [r7, #15]
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fc f919 	bl	800800c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fc f8d2 	bl	8007f8a <USBD_LL_Reset>
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
	...

0800bdf0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fc f913 	bl	800802a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d005      	beq.n	800be18 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be0c:	4a04      	ldr	r2, [pc, #16]	; (800be20 <HAL_PCD_SuspendCallback+0x30>)
 800be0e:	4b04      	ldr	r3, [pc, #16]	; (800be20 <HAL_PCD_SuspendCallback+0x30>)
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	f043 0306 	orr.w	r3, r3, #6
 800be16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	e000ed00 	.word	0xe000ed00

0800be24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800be32:	4618      	mov	r0, r3
 800be34:	f7fc f90d 	bl	8008052 <USBD_LL_Resume>
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800be48:	4a23      	ldr	r2, [pc, #140]	; (800bed8 <USBD_LL_Init+0x98>)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4a21      	ldr	r2, [pc, #132]	; (800bed8 <USBD_LL_Init+0x98>)
 800be54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800be58:	4b1f      	ldr	r3, [pc, #124]	; (800bed8 <USBD_LL_Init+0x98>)
 800be5a:	4a20      	ldr	r2, [pc, #128]	; (800bedc <USBD_LL_Init+0x9c>)
 800be5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800be5e:	4b1e      	ldr	r3, [pc, #120]	; (800bed8 <USBD_LL_Init+0x98>)
 800be60:	2208      	movs	r2, #8
 800be62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800be64:	4b1c      	ldr	r3, [pc, #112]	; (800bed8 <USBD_LL_Init+0x98>)
 800be66:	2202      	movs	r2, #2
 800be68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800be6a:	4b1b      	ldr	r3, [pc, #108]	; (800bed8 <USBD_LL_Init+0x98>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800be70:	4b19      	ldr	r3, [pc, #100]	; (800bed8 <USBD_LL_Init+0x98>)
 800be72:	2200      	movs	r2, #0
 800be74:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800be76:	4b18      	ldr	r3, [pc, #96]	; (800bed8 <USBD_LL_Init+0x98>)
 800be78:	2200      	movs	r2, #0
 800be7a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800be7c:	4816      	ldr	r0, [pc, #88]	; (800bed8 <USBD_LL_Init+0x98>)
 800be7e:	f7f5 f93b 	bl	80010f8 <HAL_PCD_Init>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800be88:	f7f4 fc64 	bl	8000754 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be92:	2318      	movs	r3, #24
 800be94:	2200      	movs	r2, #0
 800be96:	2100      	movs	r1, #0
 800be98:	f7f6 fdfb 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bea2:	2358      	movs	r3, #88	; 0x58
 800bea4:	2200      	movs	r2, #0
 800bea6:	2180      	movs	r1, #128	; 0x80
 800bea8:	f7f6 fdf3 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800beb2:	2398      	movs	r3, #152	; 0x98
 800beb4:	2200      	movs	r2, #0
 800beb6:	2181      	movs	r1, #129	; 0x81
 800beb8:	f7f6 fdeb 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bec2:	23d8      	movs	r3, #216	; 0xd8
 800bec4:	2200      	movs	r2, #0
 800bec6:	2101      	movs	r1, #1
 800bec8:	f7f6 fde3 	bl	8002a92 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3708      	adds	r7, #8
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	20003660 	.word	0x20003660
 800bedc:	40005c00 	.word	0x40005c00

0800bee0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f5 fa09 	bl	800130e <HAL_PCD_Start>
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f000 f96e 	bl	800c1e4 <USBD_Get_USB_Status>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	461a      	mov	r2, r3
 800bf24:	4603      	mov	r3, r0
 800bf26:	70fb      	strb	r3, [r7, #3]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	70bb      	strb	r3, [r7, #2]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bf3e:	78bb      	ldrb	r3, [r7, #2]
 800bf40:	883a      	ldrh	r2, [r7, #0]
 800bf42:	78f9      	ldrb	r1, [r7, #3]
 800bf44:	f7f5 fb83 	bl	800164e <HAL_PCD_EP_Open>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f948 	bl	800c1e4 <USBD_Get_USB_Status>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf7c:	78fa      	ldrb	r2, [r7, #3]
 800bf7e:	4611      	mov	r1, r2
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7f5 fbca 	bl	800171a <HAL_PCD_EP_Close>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f929 	bl	800c1e4 <USBD_Get_USB_Status>
 800bf92:	4603      	mov	r3, r0
 800bf94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfba:	78fa      	ldrb	r2, [r7, #3]
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7f5 fd3e 	bl	8001a40 <HAL_PCD_EP_Flush>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc8:	7bfb      	ldrb	r3, [r7, #15]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 f90a 	bl	800c1e4 <USBD_Get_USB_Status>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff8:	78fa      	ldrb	r2, [r7, #3]
 800bffa:	4611      	mov	r1, r2
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f5 fc6b 	bl	80018d8 <HAL_PCD_EP_SetStall>
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c006:	7bfb      	ldrb	r3, [r7, #15]
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 f8eb 	bl	800c1e4 <USBD_Get_USB_Status>
 800c00e:	4603      	mov	r3, r0
 800c010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c012:	7bbb      	ldrb	r3, [r7, #14]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c028:	2300      	movs	r3, #0
 800c02a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c036:	78fa      	ldrb	r2, [r7, #3]
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f5 fcac 	bl	8001998 <HAL_PCD_EP_ClrStall>
 800c040:	4603      	mov	r3, r0
 800c042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c044:	7bfb      	ldrb	r3, [r7, #15]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 f8cc 	bl	800c1e4 <USBD_Get_USB_Status>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c050:	7bbb      	ldrb	r3, [r7, #14]
}
 800c052:	4618      	mov	r0, r3
 800c054:	3710      	adds	r7, #16
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}

0800c05a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b085      	sub	sp, #20
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c06c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c06e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c072:	2b00      	cmp	r3, #0
 800c074:	da0c      	bge.n	800c090 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c076:	78fb      	ldrb	r3, [r7, #3]
 800c078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c07c:	68f9      	ldr	r1, [r7, #12]
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	4613      	mov	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	4413      	add	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	440b      	add	r3, r1
 800c08a:	3302      	adds	r3, #2
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	e00b      	b.n	800c0a8 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c096:	68f9      	ldr	r1, [r7, #12]
 800c098:	4613      	mov	r3, r2
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	440b      	add	r3, r1
 800c0a2:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c0a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bc80      	pop	{r7}
 800c0b0:	4770      	bx	lr

0800c0b2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f5 fa97 	bl	8001604 <HAL_PCD_SetAddress>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 f881 	bl	800c1e4 <USBD_Get_USB_Status>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	607a      	str	r2, [r7, #4]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	72fb      	strb	r3, [r7, #11]
 800c100:	4613      	mov	r3, r2
 800c102:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c104:	2300      	movs	r3, #0
 800c106:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c112:	893b      	ldrh	r3, [r7, #8]
 800c114:	7af9      	ldrb	r1, [r7, #11]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	f7f5 fb9b 	bl	8001852 <HAL_PCD_EP_Transmit>
 800c11c:	4603      	mov	r3, r0
 800c11e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f85e 	bl	800c1e4 <USBD_Get_USB_Status>
 800c128:	4603      	mov	r3, r0
 800c12a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c12c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3718      	adds	r7, #24
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b086      	sub	sp, #24
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	461a      	mov	r2, r3
 800c142:	460b      	mov	r3, r1
 800c144:	72fb      	strb	r3, [r7, #11]
 800c146:	4613      	mov	r3, r2
 800c148:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c158:	893b      	ldrh	r3, [r7, #8]
 800c15a:	7af9      	ldrb	r1, [r7, #11]
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	f7f5 fb24 	bl	80017aa <HAL_PCD_EP_Receive>
 800c162:	4603      	mov	r3, r0
 800c164:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c166:	7dfb      	ldrb	r3, [r7, #23]
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 f83b 	bl	800c1e4 <USBD_Get_USB_Status>
 800c16e:	4603      	mov	r3, r0
 800c170:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c172:	7dbb      	ldrb	r3, [r7, #22]
}
 800c174:	4618      	mov	r0, r3
 800c176:	3718      	adds	r7, #24
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c18e:	78fa      	ldrb	r2, [r7, #3]
 800c190:	4611      	mov	r1, r2
 800c192:	4618      	mov	r0, r3
 800c194:	f7f5 fb46 	bl	8001824 <HAL_PCD_EP_GetRxCount>
 800c198:	4603      	mov	r3, r0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3708      	adds	r7, #8
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
	...

0800c1a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800c1ac:	4b02      	ldr	r3, [pc, #8]	; (800c1b8 <USBD_static_malloc+0x14>)
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	370c      	adds	r7, #12
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bc80      	pop	{r7}
 800c1b6:	4770      	bx	lr
 800c1b8:	20001bbc 	.word	0x20001bbc

0800c1bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]

}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bc80      	pop	{r7}
 800c1cc:	4770      	bx	lr

0800c1ce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1ce:	b480      	push	{r7}
 800c1d0:	b083      	sub	sp, #12
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c1da:	bf00      	nop
 800c1dc:	370c      	adds	r7, #12
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bc80      	pop	{r7}
 800c1e2:	4770      	bx	lr

0800c1e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1f2:	79fb      	ldrb	r3, [r7, #7]
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d817      	bhi.n	800c228 <USBD_Get_USB_Status+0x44>
 800c1f8:	a201      	add	r2, pc, #4	; (adr r2, 800c200 <USBD_Get_USB_Status+0x1c>)
 800c1fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fe:	bf00      	nop
 800c200:	0800c211 	.word	0x0800c211
 800c204:	0800c217 	.word	0x0800c217
 800c208:	0800c21d 	.word	0x0800c21d
 800c20c:	0800c223 	.word	0x0800c223
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c210:	2300      	movs	r3, #0
 800c212:	73fb      	strb	r3, [r7, #15]
    break;
 800c214:	e00b      	b.n	800c22e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c216:	2302      	movs	r3, #2
 800c218:	73fb      	strb	r3, [r7, #15]
    break;
 800c21a:	e008      	b.n	800c22e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c21c:	2301      	movs	r3, #1
 800c21e:	73fb      	strb	r3, [r7, #15]
    break;
 800c220:	e005      	b.n	800c22e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c222:	2302      	movs	r3, #2
 800c224:	73fb      	strb	r3, [r7, #15]
    break;
 800c226:	e002      	b.n	800c22e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c228:	2302      	movs	r3, #2
 800c22a:	73fb      	strb	r3, [r7, #15]
    break;
 800c22c:	bf00      	nop
  }
  return usb_status;
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	bc80      	pop	{r7}
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop

0800c23c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800c23c:	480c      	ldr	r0, [pc, #48]	; (800c270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800c23e:	490d      	ldr	r1, [pc, #52]	; (800c274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800c240:	4a0d      	ldr	r2, [pc, #52]	; (800c278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800c242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800c244:	e002      	b.n	800c24c <LoopCopyDataInit>

0800c246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800c246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800c248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800c24a:	3304      	adds	r3, #4

0800c24c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800c24c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800c24e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800c250:	d3f9      	bcc.n	800c246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800c252:	4a0a      	ldr	r2, [pc, #40]	; (800c27c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800c254:	4c0a      	ldr	r4, [pc, #40]	; (800c280 <LoopFillZerobss+0x22>)
  movs r3, #0
 800c256:	2300      	movs	r3, #0
  b LoopFillZerobss
 800c258:	e001      	b.n	800c25e <LoopFillZerobss>

0800c25a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800c25a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800c25c:	3204      	adds	r2, #4

0800c25e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800c25e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800c260:	d3fb      	bcc.n	800c25a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800c262:	f7f4 fcbd 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c266:	f000 f815 	bl	800c294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800c26a:	f7f4 f9f3 	bl	8000654 <main>
  bx lr
 800c26e:	4770      	bx	lr
  ldr r0, =_sdata
 800c270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800c274:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 800c278:	0800cd60 	.word	0x0800cd60
  ldr r2, =_sbss
 800c27c:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 800c280:	20003950 	.word	0x20003950

0800c284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800c284:	e7fe      	b.n	800c284 <ADC1_2_IRQHandler>
	...

0800c288 <__errno>:
 800c288:	4b01      	ldr	r3, [pc, #4]	; (800c290 <__errno+0x8>)
 800c28a:	6818      	ldr	r0, [r3, #0]
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	20000288 	.word	0x20000288

0800c294 <__libc_init_array>:
 800c294:	b570      	push	{r4, r5, r6, lr}
 800c296:	2500      	movs	r5, #0
 800c298:	4e0c      	ldr	r6, [pc, #48]	; (800c2cc <__libc_init_array+0x38>)
 800c29a:	4c0d      	ldr	r4, [pc, #52]	; (800c2d0 <__libc_init_array+0x3c>)
 800c29c:	1ba4      	subs	r4, r4, r6
 800c29e:	10a4      	asrs	r4, r4, #2
 800c2a0:	42a5      	cmp	r5, r4
 800c2a2:	d109      	bne.n	800c2b8 <__libc_init_array+0x24>
 800c2a4:	f000 fc4e 	bl	800cb44 <_init>
 800c2a8:	2500      	movs	r5, #0
 800c2aa:	4e0a      	ldr	r6, [pc, #40]	; (800c2d4 <__libc_init_array+0x40>)
 800c2ac:	4c0a      	ldr	r4, [pc, #40]	; (800c2d8 <__libc_init_array+0x44>)
 800c2ae:	1ba4      	subs	r4, r4, r6
 800c2b0:	10a4      	asrs	r4, r4, #2
 800c2b2:	42a5      	cmp	r5, r4
 800c2b4:	d105      	bne.n	800c2c2 <__libc_init_array+0x2e>
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c2bc:	4798      	blx	r3
 800c2be:	3501      	adds	r5, #1
 800c2c0:	e7ee      	b.n	800c2a0 <__libc_init_array+0xc>
 800c2c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c2c6:	4798      	blx	r3
 800c2c8:	3501      	adds	r5, #1
 800c2ca:	e7f2      	b.n	800c2b2 <__libc_init_array+0x1e>
 800c2cc:	0800cd58 	.word	0x0800cd58
 800c2d0:	0800cd58 	.word	0x0800cd58
 800c2d4:	0800cd58 	.word	0x0800cd58
 800c2d8:	0800cd5c 	.word	0x0800cd5c

0800c2dc <memcpy>:
 800c2dc:	b510      	push	{r4, lr}
 800c2de:	1e43      	subs	r3, r0, #1
 800c2e0:	440a      	add	r2, r1
 800c2e2:	4291      	cmp	r1, r2
 800c2e4:	d100      	bne.n	800c2e8 <memcpy+0xc>
 800c2e6:	bd10      	pop	{r4, pc}
 800c2e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2f0:	e7f7      	b.n	800c2e2 <memcpy+0x6>

0800c2f2 <memset>:
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	4402      	add	r2, r0
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d100      	bne.n	800c2fc <memset+0xa>
 800c2fa:	4770      	bx	lr
 800c2fc:	f803 1b01 	strb.w	r1, [r3], #1
 800c300:	e7f9      	b.n	800c2f6 <memset+0x4>
	...

0800c304 <siprintf>:
 800c304:	b40e      	push	{r1, r2, r3}
 800c306:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c30a:	b500      	push	{lr}
 800c30c:	b09c      	sub	sp, #112	; 0x70
 800c30e:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c312:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c316:	9104      	str	r1, [sp, #16]
 800c318:	9107      	str	r1, [sp, #28]
 800c31a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c31e:	ab1d      	add	r3, sp, #116	; 0x74
 800c320:	9002      	str	r0, [sp, #8]
 800c322:	9006      	str	r0, [sp, #24]
 800c324:	4808      	ldr	r0, [pc, #32]	; (800c348 <siprintf+0x44>)
 800c326:	f853 2b04 	ldr.w	r2, [r3], #4
 800c32a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c32e:	6800      	ldr	r0, [r0, #0]
 800c330:	a902      	add	r1, sp, #8
 800c332:	9301      	str	r3, [sp, #4]
 800c334:	f000 f866 	bl	800c404 <_svfiprintf_r>
 800c338:	2200      	movs	r2, #0
 800c33a:	9b02      	ldr	r3, [sp, #8]
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	b01c      	add	sp, #112	; 0x70
 800c340:	f85d eb04 	ldr.w	lr, [sp], #4
 800c344:	b003      	add	sp, #12
 800c346:	4770      	bx	lr
 800c348:	20000288 	.word	0x20000288

0800c34c <__ssputs_r>:
 800c34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c350:	688e      	ldr	r6, [r1, #8]
 800c352:	4682      	mov	sl, r0
 800c354:	429e      	cmp	r6, r3
 800c356:	460c      	mov	r4, r1
 800c358:	4691      	mov	r9, r2
 800c35a:	4698      	mov	r8, r3
 800c35c:	d835      	bhi.n	800c3ca <__ssputs_r+0x7e>
 800c35e:	898a      	ldrh	r2, [r1, #12]
 800c360:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c364:	d031      	beq.n	800c3ca <__ssputs_r+0x7e>
 800c366:	2302      	movs	r3, #2
 800c368:	6825      	ldr	r5, [r4, #0]
 800c36a:	6909      	ldr	r1, [r1, #16]
 800c36c:	1a6f      	subs	r7, r5, r1
 800c36e:	6965      	ldr	r5, [r4, #20]
 800c370:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c374:	fb95 f5f3 	sdiv	r5, r5, r3
 800c378:	f108 0301 	add.w	r3, r8, #1
 800c37c:	443b      	add	r3, r7
 800c37e:	429d      	cmp	r5, r3
 800c380:	bf38      	it	cc
 800c382:	461d      	movcc	r5, r3
 800c384:	0553      	lsls	r3, r2, #21
 800c386:	d531      	bpl.n	800c3ec <__ssputs_r+0xa0>
 800c388:	4629      	mov	r1, r5
 800c38a:	f000 fb3b 	bl	800ca04 <_malloc_r>
 800c38e:	4606      	mov	r6, r0
 800c390:	b950      	cbnz	r0, 800c3a8 <__ssputs_r+0x5c>
 800c392:	230c      	movs	r3, #12
 800c394:	f8ca 3000 	str.w	r3, [sl]
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	f04f 30ff 	mov.w	r0, #4294967295
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3a8:	463a      	mov	r2, r7
 800c3aa:	6921      	ldr	r1, [r4, #16]
 800c3ac:	f7ff ff96 	bl	800c2dc <memcpy>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ba:	81a3      	strh	r3, [r4, #12]
 800c3bc:	6126      	str	r6, [r4, #16]
 800c3be:	443e      	add	r6, r7
 800c3c0:	6026      	str	r6, [r4, #0]
 800c3c2:	4646      	mov	r6, r8
 800c3c4:	6165      	str	r5, [r4, #20]
 800c3c6:	1bed      	subs	r5, r5, r7
 800c3c8:	60a5      	str	r5, [r4, #8]
 800c3ca:	4546      	cmp	r6, r8
 800c3cc:	bf28      	it	cs
 800c3ce:	4646      	movcs	r6, r8
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	4632      	mov	r2, r6
 800c3d4:	6820      	ldr	r0, [r4, #0]
 800c3d6:	f000 faaf 	bl	800c938 <memmove>
 800c3da:	68a3      	ldr	r3, [r4, #8]
 800c3dc:	2000      	movs	r0, #0
 800c3de:	1b9b      	subs	r3, r3, r6
 800c3e0:	60a3      	str	r3, [r4, #8]
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	441e      	add	r6, r3
 800c3e6:	6026      	str	r6, [r4, #0]
 800c3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	f000 fb67 	bl	800cac0 <_realloc_r>
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1e1      	bne.n	800c3bc <__ssputs_r+0x70>
 800c3f8:	6921      	ldr	r1, [r4, #16]
 800c3fa:	4650      	mov	r0, sl
 800c3fc:	f000 fab6 	bl	800c96c <_free_r>
 800c400:	e7c7      	b.n	800c392 <__ssputs_r+0x46>
	...

0800c404 <_svfiprintf_r>:
 800c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c408:	b09d      	sub	sp, #116	; 0x74
 800c40a:	9303      	str	r3, [sp, #12]
 800c40c:	898b      	ldrh	r3, [r1, #12]
 800c40e:	4680      	mov	r8, r0
 800c410:	061c      	lsls	r4, r3, #24
 800c412:	460d      	mov	r5, r1
 800c414:	4616      	mov	r6, r2
 800c416:	d50f      	bpl.n	800c438 <_svfiprintf_r+0x34>
 800c418:	690b      	ldr	r3, [r1, #16]
 800c41a:	b96b      	cbnz	r3, 800c438 <_svfiprintf_r+0x34>
 800c41c:	2140      	movs	r1, #64	; 0x40
 800c41e:	f000 faf1 	bl	800ca04 <_malloc_r>
 800c422:	6028      	str	r0, [r5, #0]
 800c424:	6128      	str	r0, [r5, #16]
 800c426:	b928      	cbnz	r0, 800c434 <_svfiprintf_r+0x30>
 800c428:	230c      	movs	r3, #12
 800c42a:	f8c8 3000 	str.w	r3, [r8]
 800c42e:	f04f 30ff 	mov.w	r0, #4294967295
 800c432:	e0c4      	b.n	800c5be <_svfiprintf_r+0x1ba>
 800c434:	2340      	movs	r3, #64	; 0x40
 800c436:	616b      	str	r3, [r5, #20]
 800c438:	2300      	movs	r3, #0
 800c43a:	9309      	str	r3, [sp, #36]	; 0x24
 800c43c:	2320      	movs	r3, #32
 800c43e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c442:	2330      	movs	r3, #48	; 0x30
 800c444:	f04f 0b01 	mov.w	fp, #1
 800c448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c44c:	4637      	mov	r7, r6
 800c44e:	463c      	mov	r4, r7
 800c450:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c454:	2b00      	cmp	r3, #0
 800c456:	d13c      	bne.n	800c4d2 <_svfiprintf_r+0xce>
 800c458:	ebb7 0a06 	subs.w	sl, r7, r6
 800c45c:	d00b      	beq.n	800c476 <_svfiprintf_r+0x72>
 800c45e:	4653      	mov	r3, sl
 800c460:	4632      	mov	r2, r6
 800c462:	4629      	mov	r1, r5
 800c464:	4640      	mov	r0, r8
 800c466:	f7ff ff71 	bl	800c34c <__ssputs_r>
 800c46a:	3001      	adds	r0, #1
 800c46c:	f000 80a2 	beq.w	800c5b4 <_svfiprintf_r+0x1b0>
 800c470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c472:	4453      	add	r3, sl
 800c474:	9309      	str	r3, [sp, #36]	; 0x24
 800c476:	783b      	ldrb	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f000 809b 	beq.w	800c5b4 <_svfiprintf_r+0x1b0>
 800c47e:	2300      	movs	r3, #0
 800c480:	f04f 32ff 	mov.w	r2, #4294967295
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	9307      	str	r3, [sp, #28]
 800c488:	9205      	str	r2, [sp, #20]
 800c48a:	9306      	str	r3, [sp, #24]
 800c48c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c490:	931a      	str	r3, [sp, #104]	; 0x68
 800c492:	2205      	movs	r2, #5
 800c494:	7821      	ldrb	r1, [r4, #0]
 800c496:	4850      	ldr	r0, [pc, #320]	; (800c5d8 <_svfiprintf_r+0x1d4>)
 800c498:	f000 fa40 	bl	800c91c <memchr>
 800c49c:	1c67      	adds	r7, r4, #1
 800c49e:	9b04      	ldr	r3, [sp, #16]
 800c4a0:	b9d8      	cbnz	r0, 800c4da <_svfiprintf_r+0xd6>
 800c4a2:	06d9      	lsls	r1, r3, #27
 800c4a4:	bf44      	itt	mi
 800c4a6:	2220      	movmi	r2, #32
 800c4a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c4ac:	071a      	lsls	r2, r3, #28
 800c4ae:	bf44      	itt	mi
 800c4b0:	222b      	movmi	r2, #43	; 0x2b
 800c4b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c4b6:	7822      	ldrb	r2, [r4, #0]
 800c4b8:	2a2a      	cmp	r2, #42	; 0x2a
 800c4ba:	d016      	beq.n	800c4ea <_svfiprintf_r+0xe6>
 800c4bc:	2100      	movs	r1, #0
 800c4be:	200a      	movs	r0, #10
 800c4c0:	9a07      	ldr	r2, [sp, #28]
 800c4c2:	4627      	mov	r7, r4
 800c4c4:	783b      	ldrb	r3, [r7, #0]
 800c4c6:	3401      	adds	r4, #1
 800c4c8:	3b30      	subs	r3, #48	; 0x30
 800c4ca:	2b09      	cmp	r3, #9
 800c4cc:	d950      	bls.n	800c570 <_svfiprintf_r+0x16c>
 800c4ce:	b1c9      	cbz	r1, 800c504 <_svfiprintf_r+0x100>
 800c4d0:	e011      	b.n	800c4f6 <_svfiprintf_r+0xf2>
 800c4d2:	2b25      	cmp	r3, #37	; 0x25
 800c4d4:	d0c0      	beq.n	800c458 <_svfiprintf_r+0x54>
 800c4d6:	4627      	mov	r7, r4
 800c4d8:	e7b9      	b.n	800c44e <_svfiprintf_r+0x4a>
 800c4da:	4a3f      	ldr	r2, [pc, #252]	; (800c5d8 <_svfiprintf_r+0x1d4>)
 800c4dc:	463c      	mov	r4, r7
 800c4de:	1a80      	subs	r0, r0, r2
 800c4e0:	fa0b f000 	lsl.w	r0, fp, r0
 800c4e4:	4318      	orrs	r0, r3
 800c4e6:	9004      	str	r0, [sp, #16]
 800c4e8:	e7d3      	b.n	800c492 <_svfiprintf_r+0x8e>
 800c4ea:	9a03      	ldr	r2, [sp, #12]
 800c4ec:	1d11      	adds	r1, r2, #4
 800c4ee:	6812      	ldr	r2, [r2, #0]
 800c4f0:	9103      	str	r1, [sp, #12]
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	db01      	blt.n	800c4fa <_svfiprintf_r+0xf6>
 800c4f6:	9207      	str	r2, [sp, #28]
 800c4f8:	e004      	b.n	800c504 <_svfiprintf_r+0x100>
 800c4fa:	4252      	negs	r2, r2
 800c4fc:	f043 0302 	orr.w	r3, r3, #2
 800c500:	9207      	str	r2, [sp, #28]
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	783b      	ldrb	r3, [r7, #0]
 800c506:	2b2e      	cmp	r3, #46	; 0x2e
 800c508:	d10d      	bne.n	800c526 <_svfiprintf_r+0x122>
 800c50a:	787b      	ldrb	r3, [r7, #1]
 800c50c:	1c79      	adds	r1, r7, #1
 800c50e:	2b2a      	cmp	r3, #42	; 0x2a
 800c510:	d132      	bne.n	800c578 <_svfiprintf_r+0x174>
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	3702      	adds	r7, #2
 800c516:	1d1a      	adds	r2, r3, #4
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	9203      	str	r2, [sp, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	bfb8      	it	lt
 800c520:	f04f 33ff 	movlt.w	r3, #4294967295
 800c524:	9305      	str	r3, [sp, #20]
 800c526:	4c2d      	ldr	r4, [pc, #180]	; (800c5dc <_svfiprintf_r+0x1d8>)
 800c528:	2203      	movs	r2, #3
 800c52a:	7839      	ldrb	r1, [r7, #0]
 800c52c:	4620      	mov	r0, r4
 800c52e:	f000 f9f5 	bl	800c91c <memchr>
 800c532:	b138      	cbz	r0, 800c544 <_svfiprintf_r+0x140>
 800c534:	2340      	movs	r3, #64	; 0x40
 800c536:	1b00      	subs	r0, r0, r4
 800c538:	fa03 f000 	lsl.w	r0, r3, r0
 800c53c:	9b04      	ldr	r3, [sp, #16]
 800c53e:	3701      	adds	r7, #1
 800c540:	4303      	orrs	r3, r0
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	7839      	ldrb	r1, [r7, #0]
 800c546:	2206      	movs	r2, #6
 800c548:	4825      	ldr	r0, [pc, #148]	; (800c5e0 <_svfiprintf_r+0x1dc>)
 800c54a:	1c7e      	adds	r6, r7, #1
 800c54c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c550:	f000 f9e4 	bl	800c91c <memchr>
 800c554:	2800      	cmp	r0, #0
 800c556:	d035      	beq.n	800c5c4 <_svfiprintf_r+0x1c0>
 800c558:	4b22      	ldr	r3, [pc, #136]	; (800c5e4 <_svfiprintf_r+0x1e0>)
 800c55a:	b9fb      	cbnz	r3, 800c59c <_svfiprintf_r+0x198>
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	3307      	adds	r3, #7
 800c560:	f023 0307 	bic.w	r3, r3, #7
 800c564:	3308      	adds	r3, #8
 800c566:	9303      	str	r3, [sp, #12]
 800c568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56a:	444b      	add	r3, r9
 800c56c:	9309      	str	r3, [sp, #36]	; 0x24
 800c56e:	e76d      	b.n	800c44c <_svfiprintf_r+0x48>
 800c570:	fb00 3202 	mla	r2, r0, r2, r3
 800c574:	2101      	movs	r1, #1
 800c576:	e7a4      	b.n	800c4c2 <_svfiprintf_r+0xbe>
 800c578:	2300      	movs	r3, #0
 800c57a:	240a      	movs	r4, #10
 800c57c:	4618      	mov	r0, r3
 800c57e:	9305      	str	r3, [sp, #20]
 800c580:	460f      	mov	r7, r1
 800c582:	783a      	ldrb	r2, [r7, #0]
 800c584:	3101      	adds	r1, #1
 800c586:	3a30      	subs	r2, #48	; 0x30
 800c588:	2a09      	cmp	r2, #9
 800c58a:	d903      	bls.n	800c594 <_svfiprintf_r+0x190>
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d0ca      	beq.n	800c526 <_svfiprintf_r+0x122>
 800c590:	9005      	str	r0, [sp, #20]
 800c592:	e7c8      	b.n	800c526 <_svfiprintf_r+0x122>
 800c594:	fb04 2000 	mla	r0, r4, r0, r2
 800c598:	2301      	movs	r3, #1
 800c59a:	e7f1      	b.n	800c580 <_svfiprintf_r+0x17c>
 800c59c:	ab03      	add	r3, sp, #12
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	462a      	mov	r2, r5
 800c5a2:	4b11      	ldr	r3, [pc, #68]	; (800c5e8 <_svfiprintf_r+0x1e4>)
 800c5a4:	a904      	add	r1, sp, #16
 800c5a6:	4640      	mov	r0, r8
 800c5a8:	f3af 8000 	nop.w
 800c5ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c5b0:	4681      	mov	r9, r0
 800c5b2:	d1d9      	bne.n	800c568 <_svfiprintf_r+0x164>
 800c5b4:	89ab      	ldrh	r3, [r5, #12]
 800c5b6:	065b      	lsls	r3, r3, #25
 800c5b8:	f53f af39 	bmi.w	800c42e <_svfiprintf_r+0x2a>
 800c5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5be:	b01d      	add	sp, #116	; 0x74
 800c5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c4:	ab03      	add	r3, sp, #12
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	462a      	mov	r2, r5
 800c5ca:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <_svfiprintf_r+0x1e4>)
 800c5cc:	a904      	add	r1, sp, #16
 800c5ce:	4640      	mov	r0, r8
 800c5d0:	f000 f884 	bl	800c6dc <_printf_i>
 800c5d4:	e7ea      	b.n	800c5ac <_svfiprintf_r+0x1a8>
 800c5d6:	bf00      	nop
 800c5d8:	0800cd24 	.word	0x0800cd24
 800c5dc:	0800cd2a 	.word	0x0800cd2a
 800c5e0:	0800cd2e 	.word	0x0800cd2e
 800c5e4:	00000000 	.word	0x00000000
 800c5e8:	0800c34d 	.word	0x0800c34d

0800c5ec <_printf_common>:
 800c5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f0:	4691      	mov	r9, r2
 800c5f2:	461f      	mov	r7, r3
 800c5f4:	688a      	ldr	r2, [r1, #8]
 800c5f6:	690b      	ldr	r3, [r1, #16]
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	bfb8      	it	lt
 800c5fe:	4613      	movlt	r3, r2
 800c600:	f8c9 3000 	str.w	r3, [r9]
 800c604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c608:	460c      	mov	r4, r1
 800c60a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c60e:	b112      	cbz	r2, 800c616 <_printf_common+0x2a>
 800c610:	3301      	adds	r3, #1
 800c612:	f8c9 3000 	str.w	r3, [r9]
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	0699      	lsls	r1, r3, #26
 800c61a:	bf42      	ittt	mi
 800c61c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c620:	3302      	addmi	r3, #2
 800c622:	f8c9 3000 	strmi.w	r3, [r9]
 800c626:	6825      	ldr	r5, [r4, #0]
 800c628:	f015 0506 	ands.w	r5, r5, #6
 800c62c:	d107      	bne.n	800c63e <_printf_common+0x52>
 800c62e:	f104 0a19 	add.w	sl, r4, #25
 800c632:	68e3      	ldr	r3, [r4, #12]
 800c634:	f8d9 2000 	ldr.w	r2, [r9]
 800c638:	1a9b      	subs	r3, r3, r2
 800c63a:	429d      	cmp	r5, r3
 800c63c:	db2a      	blt.n	800c694 <_printf_common+0xa8>
 800c63e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c642:	6822      	ldr	r2, [r4, #0]
 800c644:	3300      	adds	r3, #0
 800c646:	bf18      	it	ne
 800c648:	2301      	movne	r3, #1
 800c64a:	0692      	lsls	r2, r2, #26
 800c64c:	d42f      	bmi.n	800c6ae <_printf_common+0xc2>
 800c64e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c652:	4639      	mov	r1, r7
 800c654:	4630      	mov	r0, r6
 800c656:	47c0      	blx	r8
 800c658:	3001      	adds	r0, #1
 800c65a:	d022      	beq.n	800c6a2 <_printf_common+0xb6>
 800c65c:	6823      	ldr	r3, [r4, #0]
 800c65e:	68e5      	ldr	r5, [r4, #12]
 800c660:	f003 0306 	and.w	r3, r3, #6
 800c664:	2b04      	cmp	r3, #4
 800c666:	bf18      	it	ne
 800c668:	2500      	movne	r5, #0
 800c66a:	f8d9 2000 	ldr.w	r2, [r9]
 800c66e:	f04f 0900 	mov.w	r9, #0
 800c672:	bf08      	it	eq
 800c674:	1aad      	subeq	r5, r5, r2
 800c676:	68a3      	ldr	r3, [r4, #8]
 800c678:	6922      	ldr	r2, [r4, #16]
 800c67a:	bf08      	it	eq
 800c67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c680:	4293      	cmp	r3, r2
 800c682:	bfc4      	itt	gt
 800c684:	1a9b      	subgt	r3, r3, r2
 800c686:	18ed      	addgt	r5, r5, r3
 800c688:	341a      	adds	r4, #26
 800c68a:	454d      	cmp	r5, r9
 800c68c:	d11b      	bne.n	800c6c6 <_printf_common+0xda>
 800c68e:	2000      	movs	r0, #0
 800c690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c694:	2301      	movs	r3, #1
 800c696:	4652      	mov	r2, sl
 800c698:	4639      	mov	r1, r7
 800c69a:	4630      	mov	r0, r6
 800c69c:	47c0      	blx	r8
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d103      	bne.n	800c6aa <_printf_common+0xbe>
 800c6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6aa:	3501      	adds	r5, #1
 800c6ac:	e7c1      	b.n	800c632 <_printf_common+0x46>
 800c6ae:	2030      	movs	r0, #48	; 0x30
 800c6b0:	18e1      	adds	r1, r4, r3
 800c6b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6b6:	1c5a      	adds	r2, r3, #1
 800c6b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6bc:	4422      	add	r2, r4
 800c6be:	3302      	adds	r3, #2
 800c6c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6c4:	e7c3      	b.n	800c64e <_printf_common+0x62>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	47c0      	blx	r8
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	d0e6      	beq.n	800c6a2 <_printf_common+0xb6>
 800c6d4:	f109 0901 	add.w	r9, r9, #1
 800c6d8:	e7d7      	b.n	800c68a <_printf_common+0x9e>
	...

0800c6dc <_printf_i>:
 800c6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6e0:	4617      	mov	r7, r2
 800c6e2:	7e0a      	ldrb	r2, [r1, #24]
 800c6e4:	b085      	sub	sp, #20
 800c6e6:	2a6e      	cmp	r2, #110	; 0x6e
 800c6e8:	4698      	mov	r8, r3
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460c      	mov	r4, r1
 800c6ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6f0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c6f4:	f000 80bc 	beq.w	800c870 <_printf_i+0x194>
 800c6f8:	d81a      	bhi.n	800c730 <_printf_i+0x54>
 800c6fa:	2a63      	cmp	r2, #99	; 0x63
 800c6fc:	d02e      	beq.n	800c75c <_printf_i+0x80>
 800c6fe:	d80a      	bhi.n	800c716 <_printf_i+0x3a>
 800c700:	2a00      	cmp	r2, #0
 800c702:	f000 80c8 	beq.w	800c896 <_printf_i+0x1ba>
 800c706:	2a58      	cmp	r2, #88	; 0x58
 800c708:	f000 808a 	beq.w	800c820 <_printf_i+0x144>
 800c70c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c710:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c714:	e02a      	b.n	800c76c <_printf_i+0x90>
 800c716:	2a64      	cmp	r2, #100	; 0x64
 800c718:	d001      	beq.n	800c71e <_printf_i+0x42>
 800c71a:	2a69      	cmp	r2, #105	; 0x69
 800c71c:	d1f6      	bne.n	800c70c <_printf_i+0x30>
 800c71e:	6821      	ldr	r1, [r4, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c726:	d023      	beq.n	800c770 <_printf_i+0x94>
 800c728:	1d11      	adds	r1, r2, #4
 800c72a:	6019      	str	r1, [r3, #0]
 800c72c:	6813      	ldr	r3, [r2, #0]
 800c72e:	e027      	b.n	800c780 <_printf_i+0xa4>
 800c730:	2a73      	cmp	r2, #115	; 0x73
 800c732:	f000 80b4 	beq.w	800c89e <_printf_i+0x1c2>
 800c736:	d808      	bhi.n	800c74a <_printf_i+0x6e>
 800c738:	2a6f      	cmp	r2, #111	; 0x6f
 800c73a:	d02a      	beq.n	800c792 <_printf_i+0xb6>
 800c73c:	2a70      	cmp	r2, #112	; 0x70
 800c73e:	d1e5      	bne.n	800c70c <_printf_i+0x30>
 800c740:	680a      	ldr	r2, [r1, #0]
 800c742:	f042 0220 	orr.w	r2, r2, #32
 800c746:	600a      	str	r2, [r1, #0]
 800c748:	e003      	b.n	800c752 <_printf_i+0x76>
 800c74a:	2a75      	cmp	r2, #117	; 0x75
 800c74c:	d021      	beq.n	800c792 <_printf_i+0xb6>
 800c74e:	2a78      	cmp	r2, #120	; 0x78
 800c750:	d1dc      	bne.n	800c70c <_printf_i+0x30>
 800c752:	2278      	movs	r2, #120	; 0x78
 800c754:	496f      	ldr	r1, [pc, #444]	; (800c914 <_printf_i+0x238>)
 800c756:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c75a:	e064      	b.n	800c826 <_printf_i+0x14a>
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c762:	1d11      	adds	r1, r2, #4
 800c764:	6019      	str	r1, [r3, #0]
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c76c:	2301      	movs	r3, #1
 800c76e:	e0a3      	b.n	800c8b8 <_printf_i+0x1dc>
 800c770:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c774:	f102 0104 	add.w	r1, r2, #4
 800c778:	6019      	str	r1, [r3, #0]
 800c77a:	d0d7      	beq.n	800c72c <_printf_i+0x50>
 800c77c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c780:	2b00      	cmp	r3, #0
 800c782:	da03      	bge.n	800c78c <_printf_i+0xb0>
 800c784:	222d      	movs	r2, #45	; 0x2d
 800c786:	425b      	negs	r3, r3
 800c788:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c78c:	4962      	ldr	r1, [pc, #392]	; (800c918 <_printf_i+0x23c>)
 800c78e:	220a      	movs	r2, #10
 800c790:	e017      	b.n	800c7c2 <_printf_i+0xe6>
 800c792:	6820      	ldr	r0, [r4, #0]
 800c794:	6819      	ldr	r1, [r3, #0]
 800c796:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c79a:	d003      	beq.n	800c7a4 <_printf_i+0xc8>
 800c79c:	1d08      	adds	r0, r1, #4
 800c79e:	6018      	str	r0, [r3, #0]
 800c7a0:	680b      	ldr	r3, [r1, #0]
 800c7a2:	e006      	b.n	800c7b2 <_printf_i+0xd6>
 800c7a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7a8:	f101 0004 	add.w	r0, r1, #4
 800c7ac:	6018      	str	r0, [r3, #0]
 800c7ae:	d0f7      	beq.n	800c7a0 <_printf_i+0xc4>
 800c7b0:	880b      	ldrh	r3, [r1, #0]
 800c7b2:	2a6f      	cmp	r2, #111	; 0x6f
 800c7b4:	bf14      	ite	ne
 800c7b6:	220a      	movne	r2, #10
 800c7b8:	2208      	moveq	r2, #8
 800c7ba:	4957      	ldr	r1, [pc, #348]	; (800c918 <_printf_i+0x23c>)
 800c7bc:	2000      	movs	r0, #0
 800c7be:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c7c2:	6865      	ldr	r5, [r4, #4]
 800c7c4:	2d00      	cmp	r5, #0
 800c7c6:	60a5      	str	r5, [r4, #8]
 800c7c8:	f2c0 809c 	blt.w	800c904 <_printf_i+0x228>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	f020 0004 	bic.w	r0, r0, #4
 800c7d2:	6020      	str	r0, [r4, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d13f      	bne.n	800c858 <_printf_i+0x17c>
 800c7d8:	2d00      	cmp	r5, #0
 800c7da:	f040 8095 	bne.w	800c908 <_printf_i+0x22c>
 800c7de:	4675      	mov	r5, lr
 800c7e0:	2a08      	cmp	r2, #8
 800c7e2:	d10b      	bne.n	800c7fc <_printf_i+0x120>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	07da      	lsls	r2, r3, #31
 800c7e8:	d508      	bpl.n	800c7fc <_printf_i+0x120>
 800c7ea:	6923      	ldr	r3, [r4, #16]
 800c7ec:	6862      	ldr	r2, [r4, #4]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	bfde      	ittt	le
 800c7f2:	2330      	movle	r3, #48	; 0x30
 800c7f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7fc:	ebae 0305 	sub.w	r3, lr, r5
 800c800:	6123      	str	r3, [r4, #16]
 800c802:	f8cd 8000 	str.w	r8, [sp]
 800c806:	463b      	mov	r3, r7
 800c808:	aa03      	add	r2, sp, #12
 800c80a:	4621      	mov	r1, r4
 800c80c:	4630      	mov	r0, r6
 800c80e:	f7ff feed 	bl	800c5ec <_printf_common>
 800c812:	3001      	adds	r0, #1
 800c814:	d155      	bne.n	800c8c2 <_printf_i+0x1e6>
 800c816:	f04f 30ff 	mov.w	r0, #4294967295
 800c81a:	b005      	add	sp, #20
 800c81c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c820:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c824:	493c      	ldr	r1, [pc, #240]	; (800c918 <_printf_i+0x23c>)
 800c826:	6822      	ldr	r2, [r4, #0]
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c82e:	f100 0504 	add.w	r5, r0, #4
 800c832:	601d      	str	r5, [r3, #0]
 800c834:	d001      	beq.n	800c83a <_printf_i+0x15e>
 800c836:	6803      	ldr	r3, [r0, #0]
 800c838:	e002      	b.n	800c840 <_printf_i+0x164>
 800c83a:	0655      	lsls	r5, r2, #25
 800c83c:	d5fb      	bpl.n	800c836 <_printf_i+0x15a>
 800c83e:	8803      	ldrh	r3, [r0, #0]
 800c840:	07d0      	lsls	r0, r2, #31
 800c842:	bf44      	itt	mi
 800c844:	f042 0220 	orrmi.w	r2, r2, #32
 800c848:	6022      	strmi	r2, [r4, #0]
 800c84a:	b91b      	cbnz	r3, 800c854 <_printf_i+0x178>
 800c84c:	6822      	ldr	r2, [r4, #0]
 800c84e:	f022 0220 	bic.w	r2, r2, #32
 800c852:	6022      	str	r2, [r4, #0]
 800c854:	2210      	movs	r2, #16
 800c856:	e7b1      	b.n	800c7bc <_printf_i+0xe0>
 800c858:	4675      	mov	r5, lr
 800c85a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c85e:	fb02 3310 	mls	r3, r2, r0, r3
 800c862:	5ccb      	ldrb	r3, [r1, r3]
 800c864:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c868:	4603      	mov	r3, r0
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d1f5      	bne.n	800c85a <_printf_i+0x17e>
 800c86e:	e7b7      	b.n	800c7e0 <_printf_i+0x104>
 800c870:	6808      	ldr	r0, [r1, #0]
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c878:	6949      	ldr	r1, [r1, #20]
 800c87a:	d004      	beq.n	800c886 <_printf_i+0x1aa>
 800c87c:	1d10      	adds	r0, r2, #4
 800c87e:	6018      	str	r0, [r3, #0]
 800c880:	6813      	ldr	r3, [r2, #0]
 800c882:	6019      	str	r1, [r3, #0]
 800c884:	e007      	b.n	800c896 <_printf_i+0x1ba>
 800c886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c88a:	f102 0004 	add.w	r0, r2, #4
 800c88e:	6018      	str	r0, [r3, #0]
 800c890:	6813      	ldr	r3, [r2, #0]
 800c892:	d0f6      	beq.n	800c882 <_printf_i+0x1a6>
 800c894:	8019      	strh	r1, [r3, #0]
 800c896:	2300      	movs	r3, #0
 800c898:	4675      	mov	r5, lr
 800c89a:	6123      	str	r3, [r4, #16]
 800c89c:	e7b1      	b.n	800c802 <_printf_i+0x126>
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	1d11      	adds	r1, r2, #4
 800c8a2:	6019      	str	r1, [r3, #0]
 800c8a4:	6815      	ldr	r5, [r2, #0]
 800c8a6:	2100      	movs	r1, #0
 800c8a8:	6862      	ldr	r2, [r4, #4]
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	f000 f836 	bl	800c91c <memchr>
 800c8b0:	b108      	cbz	r0, 800c8b6 <_printf_i+0x1da>
 800c8b2:	1b40      	subs	r0, r0, r5
 800c8b4:	6060      	str	r0, [r4, #4]
 800c8b6:	6863      	ldr	r3, [r4, #4]
 800c8b8:	6123      	str	r3, [r4, #16]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8c0:	e79f      	b.n	800c802 <_printf_i+0x126>
 800c8c2:	6923      	ldr	r3, [r4, #16]
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	47c0      	blx	r8
 800c8cc:	3001      	adds	r0, #1
 800c8ce:	d0a2      	beq.n	800c816 <_printf_i+0x13a>
 800c8d0:	6823      	ldr	r3, [r4, #0]
 800c8d2:	079b      	lsls	r3, r3, #30
 800c8d4:	d507      	bpl.n	800c8e6 <_printf_i+0x20a>
 800c8d6:	2500      	movs	r5, #0
 800c8d8:	f104 0919 	add.w	r9, r4, #25
 800c8dc:	68e3      	ldr	r3, [r4, #12]
 800c8de:	9a03      	ldr	r2, [sp, #12]
 800c8e0:	1a9b      	subs	r3, r3, r2
 800c8e2:	429d      	cmp	r5, r3
 800c8e4:	db05      	blt.n	800c8f2 <_printf_i+0x216>
 800c8e6:	68e0      	ldr	r0, [r4, #12]
 800c8e8:	9b03      	ldr	r3, [sp, #12]
 800c8ea:	4298      	cmp	r0, r3
 800c8ec:	bfb8      	it	lt
 800c8ee:	4618      	movlt	r0, r3
 800c8f0:	e793      	b.n	800c81a <_printf_i+0x13e>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	464a      	mov	r2, r9
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	47c0      	blx	r8
 800c8fc:	3001      	adds	r0, #1
 800c8fe:	d08a      	beq.n	800c816 <_printf_i+0x13a>
 800c900:	3501      	adds	r5, #1
 800c902:	e7eb      	b.n	800c8dc <_printf_i+0x200>
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1a7      	bne.n	800c858 <_printf_i+0x17c>
 800c908:	780b      	ldrb	r3, [r1, #0]
 800c90a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c90e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c912:	e765      	b.n	800c7e0 <_printf_i+0x104>
 800c914:	0800cd46 	.word	0x0800cd46
 800c918:	0800cd35 	.word	0x0800cd35

0800c91c <memchr>:
 800c91c:	b510      	push	{r4, lr}
 800c91e:	b2c9      	uxtb	r1, r1
 800c920:	4402      	add	r2, r0
 800c922:	4290      	cmp	r0, r2
 800c924:	4603      	mov	r3, r0
 800c926:	d101      	bne.n	800c92c <memchr+0x10>
 800c928:	2000      	movs	r0, #0
 800c92a:	bd10      	pop	{r4, pc}
 800c92c:	781c      	ldrb	r4, [r3, #0]
 800c92e:	3001      	adds	r0, #1
 800c930:	428c      	cmp	r4, r1
 800c932:	d1f6      	bne.n	800c922 <memchr+0x6>
 800c934:	4618      	mov	r0, r3
 800c936:	bd10      	pop	{r4, pc}

0800c938 <memmove>:
 800c938:	4288      	cmp	r0, r1
 800c93a:	b510      	push	{r4, lr}
 800c93c:	eb01 0302 	add.w	r3, r1, r2
 800c940:	d803      	bhi.n	800c94a <memmove+0x12>
 800c942:	1e42      	subs	r2, r0, #1
 800c944:	4299      	cmp	r1, r3
 800c946:	d10c      	bne.n	800c962 <memmove+0x2a>
 800c948:	bd10      	pop	{r4, pc}
 800c94a:	4298      	cmp	r0, r3
 800c94c:	d2f9      	bcs.n	800c942 <memmove+0xa>
 800c94e:	1881      	adds	r1, r0, r2
 800c950:	1ad2      	subs	r2, r2, r3
 800c952:	42d3      	cmn	r3, r2
 800c954:	d100      	bne.n	800c958 <memmove+0x20>
 800c956:	bd10      	pop	{r4, pc}
 800c958:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c95c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c960:	e7f7      	b.n	800c952 <memmove+0x1a>
 800c962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c966:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c96a:	e7eb      	b.n	800c944 <memmove+0xc>

0800c96c <_free_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4605      	mov	r5, r0
 800c970:	2900      	cmp	r1, #0
 800c972:	d043      	beq.n	800c9fc <_free_r+0x90>
 800c974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c978:	1f0c      	subs	r4, r1, #4
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	bfb8      	it	lt
 800c97e:	18e4      	addlt	r4, r4, r3
 800c980:	f000 f8d4 	bl	800cb2c <__malloc_lock>
 800c984:	4a1e      	ldr	r2, [pc, #120]	; (800ca00 <_free_r+0x94>)
 800c986:	6813      	ldr	r3, [r2, #0]
 800c988:	4610      	mov	r0, r2
 800c98a:	b933      	cbnz	r3, 800c99a <_free_r+0x2e>
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	6014      	str	r4, [r2, #0]
 800c990:	4628      	mov	r0, r5
 800c992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c996:	f000 b8ca 	b.w	800cb2e <__malloc_unlock>
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	d90b      	bls.n	800c9b6 <_free_r+0x4a>
 800c99e:	6821      	ldr	r1, [r4, #0]
 800c9a0:	1862      	adds	r2, r4, r1
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	bf01      	itttt	eq
 800c9a6:	681a      	ldreq	r2, [r3, #0]
 800c9a8:	685b      	ldreq	r3, [r3, #4]
 800c9aa:	1852      	addeq	r2, r2, r1
 800c9ac:	6022      	streq	r2, [r4, #0]
 800c9ae:	6063      	str	r3, [r4, #4]
 800c9b0:	6004      	str	r4, [r0, #0]
 800c9b2:	e7ed      	b.n	800c990 <_free_r+0x24>
 800c9b4:	4613      	mov	r3, r2
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	b10a      	cbz	r2, 800c9be <_free_r+0x52>
 800c9ba:	42a2      	cmp	r2, r4
 800c9bc:	d9fa      	bls.n	800c9b4 <_free_r+0x48>
 800c9be:	6819      	ldr	r1, [r3, #0]
 800c9c0:	1858      	adds	r0, r3, r1
 800c9c2:	42a0      	cmp	r0, r4
 800c9c4:	d10b      	bne.n	800c9de <_free_r+0x72>
 800c9c6:	6820      	ldr	r0, [r4, #0]
 800c9c8:	4401      	add	r1, r0
 800c9ca:	1858      	adds	r0, r3, r1
 800c9cc:	4282      	cmp	r2, r0
 800c9ce:	6019      	str	r1, [r3, #0]
 800c9d0:	d1de      	bne.n	800c990 <_free_r+0x24>
 800c9d2:	6810      	ldr	r0, [r2, #0]
 800c9d4:	6852      	ldr	r2, [r2, #4]
 800c9d6:	4401      	add	r1, r0
 800c9d8:	6019      	str	r1, [r3, #0]
 800c9da:	605a      	str	r2, [r3, #4]
 800c9dc:	e7d8      	b.n	800c990 <_free_r+0x24>
 800c9de:	d902      	bls.n	800c9e6 <_free_r+0x7a>
 800c9e0:	230c      	movs	r3, #12
 800c9e2:	602b      	str	r3, [r5, #0]
 800c9e4:	e7d4      	b.n	800c990 <_free_r+0x24>
 800c9e6:	6820      	ldr	r0, [r4, #0]
 800c9e8:	1821      	adds	r1, r4, r0
 800c9ea:	428a      	cmp	r2, r1
 800c9ec:	bf01      	itttt	eq
 800c9ee:	6811      	ldreq	r1, [r2, #0]
 800c9f0:	6852      	ldreq	r2, [r2, #4]
 800c9f2:	1809      	addeq	r1, r1, r0
 800c9f4:	6021      	streq	r1, [r4, #0]
 800c9f6:	6062      	str	r2, [r4, #4]
 800c9f8:	605c      	str	r4, [r3, #4]
 800c9fa:	e7c9      	b.n	800c990 <_free_r+0x24>
 800c9fc:	bd38      	pop	{r3, r4, r5, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001bd8 	.word	0x20001bd8

0800ca04 <_malloc_r>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	1ccd      	adds	r5, r1, #3
 800ca08:	f025 0503 	bic.w	r5, r5, #3
 800ca0c:	3508      	adds	r5, #8
 800ca0e:	2d0c      	cmp	r5, #12
 800ca10:	bf38      	it	cc
 800ca12:	250c      	movcc	r5, #12
 800ca14:	2d00      	cmp	r5, #0
 800ca16:	4606      	mov	r6, r0
 800ca18:	db01      	blt.n	800ca1e <_malloc_r+0x1a>
 800ca1a:	42a9      	cmp	r1, r5
 800ca1c:	d903      	bls.n	800ca26 <_malloc_r+0x22>
 800ca1e:	230c      	movs	r3, #12
 800ca20:	6033      	str	r3, [r6, #0]
 800ca22:	2000      	movs	r0, #0
 800ca24:	bd70      	pop	{r4, r5, r6, pc}
 800ca26:	f000 f881 	bl	800cb2c <__malloc_lock>
 800ca2a:	4a23      	ldr	r2, [pc, #140]	; (800cab8 <_malloc_r+0xb4>)
 800ca2c:	6814      	ldr	r4, [r2, #0]
 800ca2e:	4621      	mov	r1, r4
 800ca30:	b991      	cbnz	r1, 800ca58 <_malloc_r+0x54>
 800ca32:	4c22      	ldr	r4, [pc, #136]	; (800cabc <_malloc_r+0xb8>)
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	b91b      	cbnz	r3, 800ca40 <_malloc_r+0x3c>
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f000 f867 	bl	800cb0c <_sbrk_r>
 800ca3e:	6020      	str	r0, [r4, #0]
 800ca40:	4629      	mov	r1, r5
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 f862 	bl	800cb0c <_sbrk_r>
 800ca48:	1c43      	adds	r3, r0, #1
 800ca4a:	d126      	bne.n	800ca9a <_malloc_r+0x96>
 800ca4c:	230c      	movs	r3, #12
 800ca4e:	4630      	mov	r0, r6
 800ca50:	6033      	str	r3, [r6, #0]
 800ca52:	f000 f86c 	bl	800cb2e <__malloc_unlock>
 800ca56:	e7e4      	b.n	800ca22 <_malloc_r+0x1e>
 800ca58:	680b      	ldr	r3, [r1, #0]
 800ca5a:	1b5b      	subs	r3, r3, r5
 800ca5c:	d41a      	bmi.n	800ca94 <_malloc_r+0x90>
 800ca5e:	2b0b      	cmp	r3, #11
 800ca60:	d90f      	bls.n	800ca82 <_malloc_r+0x7e>
 800ca62:	600b      	str	r3, [r1, #0]
 800ca64:	18cc      	adds	r4, r1, r3
 800ca66:	50cd      	str	r5, [r1, r3]
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f860 	bl	800cb2e <__malloc_unlock>
 800ca6e:	f104 000b 	add.w	r0, r4, #11
 800ca72:	1d23      	adds	r3, r4, #4
 800ca74:	f020 0007 	bic.w	r0, r0, #7
 800ca78:	1ac3      	subs	r3, r0, r3
 800ca7a:	d01b      	beq.n	800cab4 <_malloc_r+0xb0>
 800ca7c:	425a      	negs	r2, r3
 800ca7e:	50e2      	str	r2, [r4, r3]
 800ca80:	bd70      	pop	{r4, r5, r6, pc}
 800ca82:	428c      	cmp	r4, r1
 800ca84:	bf0b      	itete	eq
 800ca86:	6863      	ldreq	r3, [r4, #4]
 800ca88:	684b      	ldrne	r3, [r1, #4]
 800ca8a:	6013      	streq	r3, [r2, #0]
 800ca8c:	6063      	strne	r3, [r4, #4]
 800ca8e:	bf18      	it	ne
 800ca90:	460c      	movne	r4, r1
 800ca92:	e7e9      	b.n	800ca68 <_malloc_r+0x64>
 800ca94:	460c      	mov	r4, r1
 800ca96:	6849      	ldr	r1, [r1, #4]
 800ca98:	e7ca      	b.n	800ca30 <_malloc_r+0x2c>
 800ca9a:	1cc4      	adds	r4, r0, #3
 800ca9c:	f024 0403 	bic.w	r4, r4, #3
 800caa0:	42a0      	cmp	r0, r4
 800caa2:	d005      	beq.n	800cab0 <_malloc_r+0xac>
 800caa4:	1a21      	subs	r1, r4, r0
 800caa6:	4630      	mov	r0, r6
 800caa8:	f000 f830 	bl	800cb0c <_sbrk_r>
 800caac:	3001      	adds	r0, #1
 800caae:	d0cd      	beq.n	800ca4c <_malloc_r+0x48>
 800cab0:	6025      	str	r5, [r4, #0]
 800cab2:	e7d9      	b.n	800ca68 <_malloc_r+0x64>
 800cab4:	bd70      	pop	{r4, r5, r6, pc}
 800cab6:	bf00      	nop
 800cab8:	20001bd8 	.word	0x20001bd8
 800cabc:	20001bdc 	.word	0x20001bdc

0800cac0 <_realloc_r>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	4607      	mov	r7, r0
 800cac4:	4614      	mov	r4, r2
 800cac6:	460e      	mov	r6, r1
 800cac8:	b921      	cbnz	r1, 800cad4 <_realloc_r+0x14>
 800caca:	4611      	mov	r1, r2
 800cacc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cad0:	f7ff bf98 	b.w	800ca04 <_malloc_r>
 800cad4:	b922      	cbnz	r2, 800cae0 <_realloc_r+0x20>
 800cad6:	f7ff ff49 	bl	800c96c <_free_r>
 800cada:	4625      	mov	r5, r4
 800cadc:	4628      	mov	r0, r5
 800cade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae0:	f000 f826 	bl	800cb30 <_malloc_usable_size_r>
 800cae4:	4284      	cmp	r4, r0
 800cae6:	d90f      	bls.n	800cb08 <_realloc_r+0x48>
 800cae8:	4621      	mov	r1, r4
 800caea:	4638      	mov	r0, r7
 800caec:	f7ff ff8a 	bl	800ca04 <_malloc_r>
 800caf0:	4605      	mov	r5, r0
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d0f2      	beq.n	800cadc <_realloc_r+0x1c>
 800caf6:	4631      	mov	r1, r6
 800caf8:	4622      	mov	r2, r4
 800cafa:	f7ff fbef 	bl	800c2dc <memcpy>
 800cafe:	4631      	mov	r1, r6
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7ff ff33 	bl	800c96c <_free_r>
 800cb06:	e7e9      	b.n	800cadc <_realloc_r+0x1c>
 800cb08:	4635      	mov	r5, r6
 800cb0a:	e7e7      	b.n	800cadc <_realloc_r+0x1c>

0800cb0c <_sbrk_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	2300      	movs	r3, #0
 800cb10:	4c05      	ldr	r4, [pc, #20]	; (800cb28 <_sbrk_r+0x1c>)
 800cb12:	4605      	mov	r5, r0
 800cb14:	4608      	mov	r0, r1
 800cb16:	6023      	str	r3, [r4, #0]
 800cb18:	f7f3 feda 	bl	80008d0 <_sbrk>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_sbrk_r+0x1a>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_sbrk_r+0x1a>
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	2000394c 	.word	0x2000394c

0800cb2c <__malloc_lock>:
 800cb2c:	4770      	bx	lr

0800cb2e <__malloc_unlock>:
 800cb2e:	4770      	bx	lr

0800cb30 <_malloc_usable_size_r>:
 800cb30:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800cb34:	2800      	cmp	r0, #0
 800cb36:	f1a0 0004 	sub.w	r0, r0, #4
 800cb3a:	bfbc      	itt	lt
 800cb3c:	580b      	ldrlt	r3, [r1, r0]
 800cb3e:	18c0      	addlt	r0, r0, r3
 800cb40:	4770      	bx	lr
	...

0800cb44 <_init>:
 800cb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb46:	bf00      	nop
 800cb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb4a:	bc08      	pop	{r3}
 800cb4c:	469e      	mov	lr, r3
 800cb4e:	4770      	bx	lr

0800cb50 <_fini>:
 800cb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb52:	bf00      	nop
 800cb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb56:	bc08      	pop	{r3}
 800cb58:	469e      	mov	lr, r3
 800cb5a:	4770      	bx	lr
