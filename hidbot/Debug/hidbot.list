
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d7c4  0800d7c4  0001d7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d7c8  0800d7c8  0001d7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000388  20000000  0800d7cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000036f0  20000388  0800db54  00020388  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20003a78  0800db54  00023a78  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020388  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a520  00000000  00000000  000203b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006190  00000000  00000000  0004a8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b48  00000000  00000000  00050a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001840  00000000  00000000  000525b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f88e  00000000  00000000  00053df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000086aa  00000000  00000000  0006367e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006bd28  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006c18  00000000  00000000  0006bda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000388 	.word	0x20000388
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d5e4 	.word	0x0800d5e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000038c 	.word	0x2000038c
 800014c:	0800d5e4 	.word	0x0800d5e4

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f001 f959 	bl	8001412 <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 fcf5 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001c8c 	.word	0x20001c8c
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	200003a8 	.word	0x200003a8
 80001e0:	200003fc 	.word	0x200003fc

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	200005fc 	.word	0x200005fc
 8000214:	20000650 	.word	0x20000650

08000218 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
const uint32_t test1 = 12345;
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0c4      	sub	sp, #272	; 0x110
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800022e:	4618      	mov	r0, r3
 8000230:	f009 fbb0 	bl	8009994 <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b99      	ldr	r3, [pc, #612]	; (800049c <MX_FREERTOS_Init+0x284>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b99      	ldr	r3, [pc, #612]	; (80004a0 <MX_FREERTOS_Init+0x288>)
 800023c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f009 fb26 	bl	80098a0 <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b93      	ldr	r3, [pc, #588]	; (80004a4 <MX_FREERTOS_Init+0x28c>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b93      	ldr	r3, [pc, #588]	; (80004a8 <MX_FREERTOS_Init+0x290>)
 800025c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f009 fb16 	bl	80098a0 <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b8d      	ldr	r3, [pc, #564]	; (80004ac <MX_FREERTOS_Init+0x294>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

	/*buttons off oneshot time def.*/
	osTimerDef(buttons_off_tmr, Buttons_Off_Callback);
 800027a:	4b8d      	ldr	r3, [pc, #564]	; (80004b0 <MX_FREERTOS_Init+0x298>)
 800027c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	Buttons_Off_Tmr_Handle = osTimerCreate(osTimer(buttons_off_tmr), osTimerOnce,
 8000286:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800028a:	2200      	movs	r2, #0
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f009 fb06 	bl	80098a0 <osTimerCreate>
 8000294:	4602      	mov	r2, r0
 8000296:	4b87      	ldr	r3, [pc, #540]	; (80004b4 <MX_FREERTOS_Init+0x29c>)
 8000298:	601a      	str	r2, [r3, #0]
	NULL);
//NF_20211115_HID_COMMAND=======================================================

	osTimerDef(left_ctrl_off_tmr, Modifier_Off_Tmr_Callback);
 800029a:	4b87      	ldr	r3, [pc, #540]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 800029c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80002a0:	2300      	movs	r3, #0
 80002a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	Left_Ctrl_Off_Tmr_Handle = osTimerCreate(osTimer(left_ctrl_off_tmr), osTimerOnce,
 80002a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80002aa:	2201      	movs	r2, #1
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f009 faf6 	bl	80098a0 <osTimerCreate>
 80002b4:	4602      	mov	r2, r0
 80002b6:	4b81      	ldr	r3, [pc, #516]	; (80004bc <MX_FREERTOS_Init+0x2a4>)
 80002b8:	601a      	str	r2, [r3, #0]
			(void *)USB_HID_MODIFIER_LEFT_CTRL);
	osTimerDef(left_shift_off_tmr, Modifier_Off_Tmr_Callback);
 80002ba:	4b7f      	ldr	r3, [pc, #508]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 80002bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	Left_Shift_Off_Tmr_Handle = osTimerCreate(osTimer(left_shift_off_tmr),
 80002c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80002ca:	4a7d      	ldr	r2, [pc, #500]	; (80004c0 <MX_FREERTOS_Init+0x2a8>)
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f009 fae6 	bl	80098a0 <osTimerCreate>
 80002d4:	4602      	mov	r2, r0
 80002d6:	4b7b      	ldr	r3, [pc, #492]	; (80004c4 <MX_FREERTOS_Init+0x2ac>)
 80002d8:	601a      	str	r2, [r3, #0]
			osTimerOnce,(void*) &test1 /*USB_HID_MODIFIER_LEFT_SHIFT*/);


	osTimerDef(left_alt_off_tmr, Modifier_Off_Tmr_Callback);
 80002da:	4b77      	ldr	r3, [pc, #476]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 80002dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80002e0:	2300      	movs	r3, #0
 80002e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	Left_Alt_Off_Tmr_handle = osTimerCreate(osTimer(left_alt_off_tmr), osTimerOnce,
 80002e6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80002ea:	2204      	movs	r2, #4
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f009 fad6 	bl	80098a0 <osTimerCreate>
 80002f4:	4602      	mov	r2, r0
 80002f6:	4b74      	ldr	r3, [pc, #464]	; (80004c8 <MX_FREERTOS_Init+0x2b0>)
 80002f8:	601a      	str	r2, [r3, #0]
			(void *)USB_HID_MODIFIER_LEFT_ALT);
	osTimerDef(left_gui_off_tmr, Modifier_Off_Tmr_Callback);
 80002fa:	4b6f      	ldr	r3, [pc, #444]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 80002fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000300:	2300      	movs	r3, #0
 8000302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	Left_Gui_Off_Tmr_Handle = osTimerCreate(osTimer(left_gui_off_tmr), osTimerOnce,
 8000306:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800030a:	2208      	movs	r2, #8
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f009 fac6 	bl	80098a0 <osTimerCreate>
 8000314:	4602      	mov	r2, r0
 8000316:	4b6d      	ldr	r3, [pc, #436]	; (80004cc <MX_FREERTOS_Init+0x2b4>)
 8000318:	601a      	str	r2, [r3, #0]
			(void *)USB_HID_MODIFIER_LEFT_GUI);
	osTimerDef(	right_ctrl_off_tmr, Modifier_Off_Tmr_Callback);
 800031a:	4b67      	ldr	r3, [pc, #412]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 800031c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000320:	2300      	movs	r3, #0
 8000322:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	right_ctrl_off_tmrhandle = osTimerCreate(osTimer(right_ctrl_off_tmr), osTimerOnce,
 8000326:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800032a:	2210      	movs	r2, #16
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f009 fab6 	bl	80098a0 <osTimerCreate>
 8000334:	4602      	mov	r2, r0
 8000336:	4b66      	ldr	r3, [pc, #408]	; (80004d0 <MX_FREERTOS_Init+0x2b8>)
 8000338:	601a      	str	r2, [r3, #0]
			(void *)USB_HID_MODIFIER_RIGHT_CTRL);
	osTimerDef(right_shift_off_tmr, Modifier_Off_Tmr_Callback);
 800033a:	4b5f      	ldr	r3, [pc, #380]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 800033c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	right_shift_off_tmrhandle = osTimerCreate(osTimer(right_shift_off_tmr), osTimerOnce,
 8000346:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800034a:	2220      	movs	r2, #32
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f009 faa6 	bl	80098a0 <osTimerCreate>
 8000354:	4602      	mov	r2, r0
 8000356:	4b5f      	ldr	r3, [pc, #380]	; (80004d4 <MX_FREERTOS_Init+0x2bc>)
 8000358:	601a      	str	r2, [r3, #0]
			(void *)USB_HID_MODIFIER_RIGHT_SHIFT);
	osTimerDef(right_alt_off_tmr, Modifier_Off_Tmr_Callback);
 800035a:	4b57      	ldr	r3, [pc, #348]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 800035c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000360:	2300      	movs	r3, #0
 8000362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	right_alt_off_tmrhandle = osTimerCreate(osTimer(right_alt_off_tmr), osTimerOnce,
 8000366:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800036a:	2240      	movs	r2, #64	; 0x40
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f009 fa96 	bl	80098a0 <osTimerCreate>
 8000374:	4602      	mov	r2, r0
 8000376:	4b58      	ldr	r3, [pc, #352]	; (80004d8 <MX_FREERTOS_Init+0x2c0>)
 8000378:	601a      	str	r2, [r3, #0]
			(void *)USB_HID_MODIFIER_RIGHT_ALT);
	osTimerDef(right_gui_off_tmr, Modifier_Off_Tmr_Callback);
 800037a:	4b4f      	ldr	r3, [pc, #316]	; (80004b8 <MX_FREERTOS_Init+0x2a0>)
 800037c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000380:	2300      	movs	r3, #0
 8000382:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	right_gui_off_tmrhandle = osTimerCreate(osTimer(right_gui_off_tmr), osTimerOnce,
 8000386:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800038a:	2280      	movs	r2, #128	; 0x80
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f009 fa86 	bl	80098a0 <osTimerCreate>
 8000394:	4602      	mov	r2, r0
 8000396:	4b51      	ldr	r3, [pc, #324]	; (80004dc <MX_FREERTOS_Init+0x2c4>)
 8000398:	601a      	str	r2, [r3, #0]
//NF_20211115_HID_COMMAND==============================================Е========

	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 800039a:	4b51      	ldr	r3, [pc, #324]	; (80004e0 <MX_FREERTOS_Init+0x2c8>)
 800039c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80003a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 80003a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f009 fb8d 	bl	8009acc <osMessageCreate>
 80003b2:	4602      	mov	r2, r0
 80003b4:	4b4b      	ldr	r3, [pc, #300]	; (80004e4 <MX_FREERTOS_Init+0x2cc>)
 80003b6:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 80003b8:	4b49      	ldr	r3, [pc, #292]	; (80004e0 <MX_FREERTOS_Init+0x2c8>)
 80003ba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80003be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 80003c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f009 fb7e 	bl	8009acc <osMessageCreate>
 80003d0:	4602      	mov	r2, r0
 80003d2:	4b45      	ldr	r3, [pc, #276]	; (80004e8 <MX_FREERTOS_Init+0x2d0>)
 80003d4:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003d6:	4b45      	ldr	r3, [pc, #276]	; (80004ec <MX_FREERTOS_Init+0x2d4>)
 80003d8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80003dc:	461d      	mov	r5, r3
 80003de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80003ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80003ee:	2100      	movs	r1, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f009 f9f5 	bl	80097e0 <osThreadCreate>
 80003f6:	4602      	mov	r2, r0
 80003f8:	4b3d      	ldr	r3, [pc, #244]	; (80004f0 <MX_FREERTOS_Init+0x2d8>)
 80003fa:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 80003fc:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <MX_FREERTOS_Init+0x2dc>)
 80003fe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000402:	461d      	mov	r5, r3
 8000404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800040c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 8000410:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f009 f9e2 	bl	80097e0 <osThreadCreate>
 800041c:	4602      	mov	r2, r0
 800041e:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <MX_FREERTOS_Init+0x2e0>)
 8000420:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000422:	4b36      	ldr	r3, [pc, #216]	; (80004fc <MX_FREERTOS_Init+0x2e4>)
 8000424:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000428:	461d      	mov	r5, r3
 800042a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800042c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 8000436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800043a:	2100      	movs	r1, #0
 800043c:	4618      	mov	r0, r3
 800043e:	f009 f9cf 	bl	80097e0 <osThreadCreate>
 8000442:	4602      	mov	r2, r0
 8000444:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <MX_FREERTOS_Init+0x2e8>)
 8000446:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 8000448:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <MX_FREERTOS_Init+0x2ec>)
 800044a:	f107 0420 	add.w	r4, r7, #32
 800044e:	461d      	mov	r5, r3
 8000450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000454:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000458:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 800045c:	f107 0320 	add.w	r3, r7, #32
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f009 f9bc 	bl	80097e0 <osThreadCreate>
 8000468:	4602      	mov	r2, r0
 800046a:	4b27      	ldr	r3, [pc, #156]	; (8000508 <MX_FREERTOS_Init+0x2f0>)
 800046c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4a26      	ldr	r2, [pc, #152]	; (800050c <MX_FREERTOS_Init+0x2f4>)
 8000472:	461c      	mov	r4, r3
 8000474:	4615      	mov	r5, r2
 8000476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800047e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f009 f9aa 	bl	80097e0 <osThreadCreate>
 800048c:	4602      	mov	r2, r0
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_FREERTOS_Init+0x2f8>)
 8000490:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

}
 8000492:	bf00      	nop
 8000494:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000498:	46bd      	mov	sp, r7
 800049a:	bdb0      	pop	{r4, r5, r7, pc}
 800049c:	20001cc0 	.word	0x20001cc0
 80004a0:	0800063d 	.word	0x0800063d
 80004a4:	20001cb0 	.word	0x20001cb0
 80004a8:	08000685 	.word	0x08000685
 80004ac:	20001c98 	.word	0x20001c98
 80004b0:	080006f5 	.word	0x080006f5
 80004b4:	20001cb8 	.word	0x20001cb8
 80004b8:	0800071d 	.word	0x0800071d
 80004bc:	20001d38 	.word	0x20001d38
 80004c0:	0800d76c 	.word	0x0800d76c
 80004c4:	20001cb4 	.word	0x20001cb4
 80004c8:	20001d34 	.word	0x20001d34
 80004cc:	20001d44 	.word	0x20001d44
 80004d0:	20001ca8 	.word	0x20001ca8
 80004d4:	20001cac 	.word	0x20001cac
 80004d8:	20001d40 	.word	0x20001d40
 80004dc:	20001c9c 	.word	0x20001c9c
 80004e0:	0800d5fc 	.word	0x0800d5fc
 80004e4:	20001d3c 	.word	0x20001d3c
 80004e8:	20001ca0 	.word	0x20001ca0
 80004ec:	0800d618 	.word	0x0800d618
 80004f0:	20001c94 	.word	0x20001c94
 80004f4:	0800d640 	.word	0x0800d640
 80004f8:	20001cc8 	.word	0x20001cc8
 80004fc:	0800d668 	.word	0x0800d668
 8000500:	20001cc4 	.word	0x20001cc4
 8000504:	0800d690 	.word	0x0800d690
 8000508:	20001ca4 	.word	0x20001ca4
 800050c:	0800d6bc 	.word	0x0800d6bc
 8000510:	20001cbc 	.word	0x20001cbc

08000514 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 800051c:	f00c fbba 	bl	800cc94 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1; //HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000520:	4b2c      	ldr	r3, [pc, #176]	; (80005d4 <StartDefaultTask+0xc0>)
 8000522:	2201      	movs	r2, #1
 8000524:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 8000526:	f00c fbb5 	bl	800cc94 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	73bb      	strb	r3, [r7, #14]

	init_hid();
 8000532:	f000 fa3b 	bl	80009ac <init_hid>

	for (;;) {
		if (tst1) {
 8000536:	7bbb      	ldrb	r3, [r7, #14]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d02a      	beq.n	8000592 <StartDefaultTask+0x7e>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	737b      	strb	r3, [r7, #13]
 8000540:	e022      	b.n	8000588 <StartDefaultTask+0x74>
				keys[i].type = KEYBOARD_TYPE;
 8000542:	7b7b      	ldrb	r3, [r7, #13]
 8000544:	4a24      	ldr	r2, [pc, #144]	; (80005d8 <StartDefaultTask+0xc4>)
 8000546:	210f      	movs	r1, #15
 8000548:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
				keys[i].name = 'a' + i;
 800054c:	7b7b      	ldrb	r3, [r7, #13]
 800054e:	7b7a      	ldrb	r2, [r7, #13]
 8000550:	3261      	adds	r2, #97	; 0x61
 8000552:	b2d1      	uxtb	r1, r2
 8000554:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <StartDefaultTask+0xc4>)
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	460a      	mov	r2, r1
 800055c:	705a      	strb	r2, [r3, #1]

				for (uint8_t j = 0; j < STATES_LEN; j++)
 800055e:	2300      	movs	r3, #0
 8000560:	733b      	strb	r3, [r7, #12]
 8000562:	e00b      	b.n	800057c <StartDefaultTask+0x68>
					keys[i].states[j] = (i & 1) ? (0xFF) : (0xFF);
 8000564:	7b7a      	ldrb	r2, [r7, #13]
 8000566:	7b3b      	ldrb	r3, [r7, #12]
 8000568:	491b      	ldr	r1, [pc, #108]	; (80005d8 <StartDefaultTask+0xc4>)
 800056a:	0092      	lsls	r2, r2, #2
 800056c:	440a      	add	r2, r1
 800056e:	4413      	add	r3, r2
 8000570:	3302      	adds	r3, #2
 8000572:	22ff      	movs	r2, #255	; 0xff
 8000574:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < STATES_LEN; j++)
 8000576:	7b3b      	ldrb	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	733b      	strb	r3, [r7, #12]
 800057c:	7b3b      	ldrb	r3, [r7, #12]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d9f0      	bls.n	8000564 <StartDefaultTask+0x50>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 8000582:	7b7b      	ldrb	r3, [r7, #13]
 8000584:	3301      	adds	r3, #1
 8000586:	737b      	strb	r3, [r7, #13]
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	2b19      	cmp	r3, #25
 800058c:	d9d9      	bls.n	8000542 <StartDefaultTask+0x2e>

			}

			tst1 = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	73bb      	strb	r3, [r7, #14]
		}

		if (tst) {
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d015      	beq.n	80005c4 <StartDefaultTask+0xb0>
			for (uint32_t i = 0; i < 255; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	e00d      	b.n	80005ba <StartDefaultTask+0xa6>
				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80005a4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80005a8:	7819      	ldrb	r1, [r3, #0]
 80005aa:	4a0c      	ldr	r2, [pc, #48]	; (80005dc <StartDefaultTask+0xc8>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	4413      	add	r3, r2
 80005b0:	460a      	mov	r2, r1
 80005b2:	701a      	strb	r2, [r3, #0]
			for (uint32_t i = 0; i < 255; i++) {
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	2bfe      	cmp	r3, #254	; 0xfe
 80005be:	d9ee      	bls.n	800059e <StartDefaultTask+0x8a>

			}
			tst = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f009 f957 	bl	8009878 <osDelay>
		vTaskSuspend(NULL);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f00b f8b8 	bl	800b740 <vTaskSuspend>
		if (tst1) {
 80005d0:	e7b1      	b.n	8000536 <StartDefaultTask+0x22>
 80005d2:	bf00      	nop
 80005d4:	200003a4 	.word	0x200003a4
 80005d8:	20001ccc 	.word	0x20001ccc
 80005dc:	20001dfc 	.word	0x20001dfc

080005e0 <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f009 f945 	bl	8009878 <osDelay>
		if (hid_usb_init == 1)
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <Start_Ram_MSD_Task+0x50>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d102      	bne.n	80005fe <Start_Ram_MSD_Task+0x1e>
			vTaskSuspend(NULL); //if we are his we dont need it.
 80005f8:	2000      	movs	r0, #0
 80005fa:	f00b f8a1 	bl	800b740 <vTaskSuspend>

		if (st_info.eof_flg == 1) {
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <Start_Ram_MSD_Task+0x54>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b01      	cmp	r3, #1
 8000606:	d1ef      	bne.n	80005e8 <Start_Ram_MSD_Task+0x8>
			st_info.eof_flg = 0;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <Start_Ram_MSD_Task+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
			osMutexWait(Ram_MSD_MutexHandle, osWaitForever);
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <Start_Ram_MSD_Task+0x58>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f04f 31ff 	mov.w	r1, #4294967295
 8000616:	4618      	mov	r0, r3
 8000618:	f009 f9d4 	bl	80099c4 <osMutexWait>
			ve_operate(&st_info);
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <Start_Ram_MSD_Task+0x54>)
 800061e:	f000 fdd3 	bl	80011c8 <ve_operate>
			osMutexRelease(Ram_MSD_MutexHandle);
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <Start_Ram_MSD_Task+0x58>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fa1a 	bl	8009a60 <osMutexRelease>
		osDelay(1);
 800062c:	e7dc      	b.n	80005e8 <Start_Ram_MSD_Task+0x8>
 800062e:	bf00      	nop
 8000630:	200003a4 	.word	0x200003a4
 8000634:	20000a54 	.word	0x20000a54
 8000638:	20001cc0 	.word	0x20001cc0

0800063c <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <delay_click_event_tmr_Callback+0x3c>)
 8000646:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 8000648:	2300      	movs	r3, #0
 800064a:	81fb      	strh	r3, [r7, #14]
 800064c:	e007      	b.n	800065e <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 800064e:	89fb      	ldrh	r3, [r7, #14]
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	4413      	add	r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 8000658:	89fb      	ldrh	r3, [r7, #14]
 800065a:	3301      	adds	r3, #1
 800065c:	81fb      	strh	r3, [r7, #14]
 800065e:	89fb      	ldrh	r3, [r7, #14]
 8000660:	2b19      	cmp	r3, #25
 8000662:	d9f4      	bls.n	800064e <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 8000664:	221c      	movs	r2, #28
 8000666:	4905      	ldr	r1, [pc, #20]	; (800067c <delay_click_event_tmr_Callback+0x40>)
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <delay_click_event_tmr_Callback+0x44>)
 800066a:	f007 fedb 	bl	8008424 <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20001d4a 	.word	0x20001d4a
 800067c:	20001d48 	.word	0x20001d48
 8000680:	200032c8 	.word	0x200032c8

08000684 <periodic_click_event_Callback>:
//test1
#define TEST_STR_LEN 12
char test_str[TEST_STR_LEN] = "osalexandeko";

/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
//		i = 1;
//		hid_state.mouseHID.x=-100;
//	}
///////////////////////////////////////////////////////////////////////////////////////
	static uint16_t i = 0;
	hid_state.curr_hid_type = KEYBOARD_TYPE;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <periodic_click_event_Callback+0x5c>)
 800068e:	220f      	movs	r2, #15
 8000690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hid_state.keyboardHID.k_a = test_str[i++] - 0x5D;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <periodic_click_event_Callback+0x60>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	b291      	uxth	r1, r2
 800069c:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <periodic_click_event_Callback+0x60>)
 800069e:	8011      	strh	r1, [r2, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <periodic_click_event_Callback+0x64>)
 80006a4:	5c9b      	ldrb	r3, [r3, r2]
 80006a6:	3b5d      	subs	r3, #93	; 0x5d
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <periodic_click_event_Callback+0x5c>)
 80006ac:	709a      	strb	r2, [r3, #2]
	hid_state.keyboardHID.modifiers = USB_HID_MODIFIER_LEFT_SHIFT;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <periodic_click_event_Callback+0x5c>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	705a      	strb	r2, [r3, #1]
	if (TEST_STR_LEN <= i) {
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <periodic_click_event_Callback+0x60>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b0b      	cmp	r3, #11
 80006ba:	d902      	bls.n	80006c2 <periodic_click_event_Callback+0x3e>
		i = 0;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <periodic_click_event_Callback+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	801a      	strh	r2, [r3, #0]
	}
	//hid_state.keyboardHID.k_b = USB_HID_KEY_B;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 80006c2:	221c      	movs	r2, #28
 80006c4:	4906      	ldr	r1, [pc, #24]	; (80006e0 <periodic_click_event_Callback+0x5c>)
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <periodic_click_event_Callback+0x68>)
 80006c8:	f007 feac 	bl	8008424 <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));

	osTimerStart(Buttons_Off_Tmr_Handle, 100);
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <periodic_click_event_Callback+0x6c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2164      	movs	r1, #100	; 0x64
 80006d2:	4618      	mov	r0, r3
 80006d4:	f009 f918 	bl	8009908 <osTimerStart>

}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20001d48 	.word	0x20001d48
 80006e4:	20000a50 	.word	0x20000a50
 80006e8:	20000100 	.word	0x20000100
 80006ec:	200032c8 	.word	0x200032c8
 80006f0:	20001cb8 	.word	0x20001cb8

080006f4 <Buttons_Off_Callback>:

/**
 * Callback to switch buttons off.
 * @param argument
 */
void Buttons_Off_Callback(void const * argument) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	//hid_state.curr_hid_type = KEYBOARD_TYPE;
	hid_state.keyboardHID.k_a = 0;
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <Buttons_Off_Callback+0x20>)
 80006fe:	2200      	movs	r2, #0
 8000700:	709a      	strb	r2, [r3, #2]
	//hid_state.keyboardHID.k_b = 0;
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000702:	221c      	movs	r2, #28
 8000704:	4903      	ldr	r1, [pc, #12]	; (8000714 <Buttons_Off_Callback+0x20>)
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <Buttons_Off_Callback+0x24>)
 8000708:	f007 fe8c 	bl	8008424 <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20001d48 	.word	0x20001d48
 8000718:	200032c8 	.word	0x200032c8

0800071c <Modifier_Off_Tmr_Callback>:
/*******************************************************************************
 * NF_20211115_HID_COMMAND
 * Callback to switch modifiers off.
 * @param argument
 ******************************************************************************/
void Modifier_Off_Tmr_Callback(void const * argument){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	uint32_t* mod_type_p = (uint8_t*)pvTimerGetTimerID((TimerHandle_t)argument);
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f00c fa95 	bl	800cc54 <pvTimerGetTimerID>
 800072a:	60f8      	str	r0, [r7, #12]
	uint32_t  mod_type = *mod_type_p;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60bb      	str	r3, [r7, #8]
	hid_state.keyboardHID.modifiers &=~mod_type;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <Modifier_Off_Tmr_Callback+0x34>)
 8000734:	785a      	ldrb	r2, [r3, #1]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4013      	ands	r3, r2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b03      	ldr	r3, [pc, #12]	; (8000750 <Modifier_Off_Tmr_Callback+0x34>)
 8000744:	705a      	strb	r2, [r3, #1]
}
 8000746:	bf00      	nop
 8000748:	3710      	adds	r7, #16
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20001d48 	.word	0x20001d48

08000754 <Start_Hid_Task>:



/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	//uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
	//static uint8_t bit_select = 0x01;

	//osTimerStart(Left_Shift_Off_Tmr_Handle, 1000);

	osDelay(100);
 800075c:	2064      	movs	r0, #100	; 0x64
 800075e:	f009 f88b 	bl	8009878 <osDelay>
	/* Infinite loop */
	for (;;) {
		//test1
		osDelay(3000);
 8000762:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000766:	f009 f887 	bl	8009878 <osDelay>
		osTimerStart(Left_Shift_Off_Tmr_Handle, 1000);
 800076a:	4b3a      	ldr	r3, [pc, #232]	; (8000854 <Start_Hid_Task+0x100>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000772:	4618      	mov	r0, r3
 8000774:	f009 f8c8 	bl	8009908 <osTimerStart>

//NF_20211115_HID_COMMAND=======================================================
		if (hid_usb_init == 1) {
 8000778:	4b37      	ldr	r3, [pc, #220]	; (8000858 <Start_Hid_Task+0x104>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b01      	cmp	r3, #1
 8000780:	d1ef      	bne.n	8000762 <Start_Hid_Task+0xe>
			uint8_t cmd_type = memory_simulator[mSimCrntImd];
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <Start_Hid_Task+0x108>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <Start_Hid_Task+0x10c>)
 800078a:	5c9b      	ldrb	r3, [r3, r2]
 800078c:	73fb      	strb	r3, [r7, #15]
			//uint8_t cmd_len  = 0;
			//uint8_t * str_p  = NULL;

			switch (cmd_type) {
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	3b01      	subs	r3, #1
 8000792:	2b04      	cmp	r3, #4
 8000794:	d858      	bhi.n	8000848 <Start_Hid_Task+0xf4>
 8000796:	a201      	add	r2, pc, #4	; (adr r2, 800079c <Start_Hid_Task+0x48>)
 8000798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079c:	080007b1 	.word	0x080007b1
 80007a0:	08000851 	.word	0x08000851
 80007a4:	08000851 	.word	0x08000851
 80007a8:	08000851 	.word	0x08000851
 80007ac:	08000851 	.word	0x08000851

			case HID_MODIFIER: {
				uint8_t mod_type = memory_simulator[mSimCrntImd + 1];
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <Start_Hid_Task+0x108>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <Start_Hid_Task+0x10c>)
 80007b8:	5cd3      	ldrb	r3, [r2, r3]
 80007ba:	73bb      	strb	r3, [r7, #14]
				uint32_t mod_period = (memory_simulator[mSimCrntImd + 1] << 24)
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <Start_Hid_Task+0x108>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	3301      	adds	r3, #1
 80007c2:	4a27      	ldr	r2, [pc, #156]	; (8000860 <Start_Hid_Task+0x10c>)
 80007c4:	5cd3      	ldrb	r3, [r2, r3]
 80007c6:	061a      	lsls	r2, r3, #24
						| (memory_simulator[mSimCrntImd + 2] << 16)
 80007c8:	4b24      	ldr	r3, [pc, #144]	; (800085c <Start_Hid_Task+0x108>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	4924      	ldr	r1, [pc, #144]	; (8000860 <Start_Hid_Task+0x10c>)
 80007d0:	5ccb      	ldrb	r3, [r1, r3]
 80007d2:	041b      	lsls	r3, r3, #16
 80007d4:	431a      	orrs	r2, r3
						| (memory_simulator[mSimCrntImd + 3] << 8)
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <Start_Hid_Task+0x108>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	3303      	adds	r3, #3
 80007dc:	4920      	ldr	r1, [pc, #128]	; (8000860 <Start_Hid_Task+0x10c>)
 80007de:	5ccb      	ldrb	r3, [r1, r3]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	4313      	orrs	r3, r2
				        | memory_simulator[mSimCrntImd + 4] ;
 80007e4:	4a1d      	ldr	r2, [pc, #116]	; (800085c <Start_Hid_Task+0x108>)
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	3204      	adds	r2, #4
 80007ea:	491d      	ldr	r1, [pc, #116]	; (8000860 <Start_Hid_Task+0x10c>)
 80007ec:	5c8a      	ldrb	r2, [r1, r2]
 80007ee:	4313      	orrs	r3, r2
				uint32_t mod_period = (memory_simulator[mSimCrntImd + 1] << 24)
 80007f0:	60bb      	str	r3, [r7, #8]

				switch (mod_type){
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	2b08      	cmp	r3, #8
 80007f6:	d017      	beq.n	8000828 <Start_Hid_Task+0xd4>
 80007f8:	2b08      	cmp	r3, #8
 80007fa:	dc06      	bgt.n	800080a <Start_Hid_Task+0xb6>
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d015      	beq.n	800082c <Start_Hid_Task+0xd8>
 8000800:	2b04      	cmp	r3, #4
 8000802:	d015      	beq.n	8000830 <Start_Hid_Task+0xdc>
 8000804:	2b01      	cmp	r3, #1
 8000806:	d015      	beq.n	8000834 <Start_Hid_Task+0xe0>
 8000808:	e00a      	b.n	8000820 <Start_Hid_Task+0xcc>
 800080a:	2b20      	cmp	r3, #32
 800080c:	d014      	beq.n	8000838 <Start_Hid_Task+0xe4>
 800080e:	2b20      	cmp	r3, #32
 8000810:	dc02      	bgt.n	8000818 <Start_Hid_Task+0xc4>
 8000812:	2b10      	cmp	r3, #16
 8000814:	d012      	beq.n	800083c <Start_Hid_Task+0xe8>
 8000816:	e003      	b.n	8000820 <Start_Hid_Task+0xcc>
 8000818:	2b40      	cmp	r3, #64	; 0x40
 800081a:	d011      	beq.n	8000840 <Start_Hid_Task+0xec>
 800081c:	2b80      	cmp	r3, #128	; 0x80
 800081e:	d011      	beq.n	8000844 <Start_Hid_Task+0xf0>
					case USB_HID_MODIFIER_RIGHT_GUI: {
						break;
					}

					default: {
						osDelay(1);
 8000820:	2001      	movs	r0, #1
 8000822:	f009 f829 	bl	8009878 <osDelay>
						break;
 8000826:	e00e      	b.n	8000846 <Start_Hid_Task+0xf2>
						break;
 8000828:	bf00      	nop
 800082a:	e012      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 800082c:	bf00      	nop
 800082e:	e010      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 8000830:	bf00      	nop
 8000832:	e00e      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 8000834:	bf00      	nop
 8000836:	e00c      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 8000838:	bf00      	nop
 800083a:	e00a      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 800083c:	bf00      	nop
 800083e:	e008      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 8000840:	bf00      	nop
 8000842:	e006      	b.n	8000852 <Start_Hid_Task+0xfe>
						break;
 8000844:	bf00      	nop
					}

				}

				break;
 8000846:	e004      	b.n	8000852 <Start_Hid_Task+0xfe>
			case HID_CMD_PAUSE: {
				break;
			}

			default: {
				osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f009 f815 	bl	8009878 <osDelay>
				break;
 800084e:	e000      	b.n	8000852 <Start_Hid_Task+0xfe>
				break;
 8000850:	bf00      	nop
		osDelay(3000);
 8000852:	e786      	b.n	8000762 <Start_Hid_Task+0xe>
 8000854:	20001cb4 	.word	0x20001cb4
 8000858:	200003a4 	.word	0x200003a4
 800085c:	200003a5 	.word	0x200003a5
 8000860:	20000000 	.word	0x20000000

08000864 <Start_Usb_Task>:
	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f009 f803 	bl	8009878 <osDelay>
		vTaskSuspend(NULL);
 8000872:	2000      	movs	r0, #0
 8000874:	f00a ff64 	bl	800b740 <vTaskSuspend>
		osDelay(1);
 8000878:	e7f8      	b.n	800086c <Start_Usb_Task+0x8>
	...

0800087c <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 8000884:	2000      	movs	r0, #0
 8000886:	f00a ff5b 	bl	800b740 <vTaskSuspend>
	osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f008 fff4 	bl	8009878 <osDelay>
		event = osMessageGet(Hid_QueueHandle, osWaitForever);
 8000890:	4b41      	ldr	r3, [pc, #260]	; (8000998 <Start_Mouse_Task+0x11c>)
 8000892:	6819      	ldr	r1, [r3, #0]
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	4618      	mov	r0, r3
 800089e:	f009 f93f 	bl	8009b20 <osMessageGet>
		if (event.status == osEventMessage)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b10      	cmp	r3, #16
 80008a6:	d159      	bne.n	800095c <Start_Mouse_Task+0xe0>
			switch (event.value.v) {
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	2b0f      	cmp	r3, #15
 80008ac:	d856      	bhi.n	800095c <Start_Mouse_Task+0xe0>
 80008ae:	a201      	add	r2, pc, #4	; (adr r2, 80008b4 <Start_Mouse_Task+0x38>)
 80008b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b4:	080008f5 	.word	0x080008f5
 80008b8:	08000905 	.word	0x08000905
 80008bc:	08000915 	.word	0x08000915
 80008c0:	0800095d 	.word	0x0800095d
 80008c4:	08000925 	.word	0x08000925
 80008c8:	0800095d 	.word	0x0800095d
 80008cc:	0800095d 	.word	0x0800095d
 80008d0:	0800095d 	.word	0x0800095d
 80008d4:	0800095d 	.word	0x0800095d
 80008d8:	0800095d 	.word	0x0800095d
 80008dc:	0800095d 	.word	0x0800095d
 80008e0:	08000935 	.word	0x08000935
 80008e4:	0800093f 	.word	0x0800093f
 80008e8:	08000949 	.word	0x08000949
 80008ec:	0800095d 	.word	0x0800095d
 80008f0:	08000953 	.word	0x08000953
			case M_BUTTON_NOP: {
				hid_state.mouseHID.buttons = M_BUTTON_NOP;
 80008f4:	4b29      	ldr	r3, [pc, #164]	; (800099c <Start_Mouse_Task+0x120>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <Start_Mouse_Task+0x120>)
 80008fc:	220e      	movs	r2, #14
 80008fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000902:	e02b      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case M_BUTTON_1: {
				hid_state.mouseHID.buttons = M_BUTTON_1;
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <Start_Mouse_Task+0x120>)
 8000906:	2201      	movs	r2, #1
 8000908:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <Start_Mouse_Task+0x120>)
 800090c:	220e      	movs	r2, #14
 800090e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000912:	e023      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case M_BUTTON_2: {
				hid_state.mouseHID.buttons = M_BUTTON_2;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <Start_Mouse_Task+0x120>)
 8000916:	2202      	movs	r2, #2
 8000918:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <Start_Mouse_Task+0x120>)
 800091c:	220e      	movs	r2, #14
 800091e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000922:	e01b      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case M_BUTTON_3: {
				hid_state.mouseHID.buttons = M_BUTTON_3;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <Start_Mouse_Task+0x120>)
 8000926:	2204      	movs	r2, #4
 8000928:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <Start_Mouse_Task+0x120>)
 800092c:	220e      	movs	r2, #14
 800092e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000932:	e013      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case WHEEL: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <Start_Mouse_Task+0x120>)
 8000936:	220e      	movs	r2, #14
 8000938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800093c:	e00e      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case M_X: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <Start_Mouse_Task+0x120>)
 8000940:	220e      	movs	r2, #14
 8000942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000946:	e009      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case M_Y: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <Start_Mouse_Task+0x120>)
 800094a:	220e      	movs	r2, #14
 800094c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000950:	e004      	b.n	800095c <Start_Mouse_Task+0xe0>
			}
			case KEYBOARD_TYPE: {
				hid_state.curr_hid_type = KEYBOARD_TYPE;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <Start_Mouse_Task+0x120>)
 8000954:	220f      	movs	r2, #15
 8000956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800095a:	bf00      	nop
			}
			}

		if (hid_state.curr_hid_type == MOUSE_TYPE)
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <Start_Mouse_Task+0x120>)
 800095e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000962:	2b0e      	cmp	r3, #14
 8000964:	d105      	bne.n	8000972 <Start_Mouse_Task+0xf6>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000966:	2205      	movs	r2, #5
 8000968:	490d      	ldr	r1, [pc, #52]	; (80009a0 <Start_Mouse_Task+0x124>)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <Start_Mouse_Task+0x128>)
 800096c:	f007 fd5a 	bl	8008424 <USBD_CUSTOM_HID_SendReport>
 8000970:	e78b      	b.n	800088a <Start_Mouse_Task+0xe>
					(uint8_t *) &hid_state.mouseHID, sizeof(mouseHID_t));
		else if (hid_state.curr_hid_type == KEYBOARD_TYPE) {
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <Start_Mouse_Task+0x120>)
 8000974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d186      	bne.n	800088a <Start_Mouse_Task+0xe>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 800097c:	221c      	movs	r2, #28
 800097e:	4907      	ldr	r1, [pc, #28]	; (800099c <Start_Mouse_Task+0x120>)
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <Start_Mouse_Task+0x128>)
 8000982:	f007 fd4f 	bl	8008424 <USBD_CUSTOM_HID_SendReport>
					sizeof(keyboardHID_t));
			osTimerStart(delay_click_event_tmrHandle, 500);
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <Start_Mouse_Task+0x12c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800098e:	4618      	mov	r0, r3
 8000990:	f008 ffba 	bl	8009908 <osTimerStart>
		osDelay(1);
 8000994:	e779      	b.n	800088a <Start_Mouse_Task+0xe>
 8000996:	bf00      	nop
 8000998:	20001ca0 	.word	0x20001ca0
 800099c:	20001d48 	.word	0x20001d48
 80009a0:	20001d64 	.word	0x20001d64
 80009a4:	200032c8 	.word	0x200032c8
 80009a8:	20001cb0 	.word	0x20001cb0

080009ac <init_hid>:
	(hid_state.mouseHID.buttons) ?
			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);

}

uint8_t init_hid(void) {
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <init_hid+0x20>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <init_hid+0x20>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <init_hid+0x20>)
 80009be:	2202      	movs	r2, #2
 80009c0:	771a      	strb	r2, [r3, #28]
}
 80009c2:	bf00      	nop
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20001d48 	.word	0x20001d48

080009d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <MX_GPIO_Init+0x7c>)
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_GPIO_Init+0x7c>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f043 0320 	orr.w	r3, r3, #32
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_GPIO_Init+0x7c>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0320 	and.w	r3, r3, #32
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <MX_GPIO_Init+0x7c>)
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_GPIO_Init+0x7c>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x7c>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0308 	and.w	r3, r3, #8
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <MX_GPIO_Init+0x7c>)
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_GPIO_Init+0x7c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_GPIO_Init+0x7c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0304 	and.w	r3, r3, #4
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0x80>)
 8000a40:	f000 ff04 	bl	800184c <HAL_GPIO_Init>

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010c00 	.word	0x40010c00

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f000 fbcc 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f80d 	bl	8000a7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a60:	f7ff ffb6 	bl	80009d0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a64:	f7ff fb74 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 8000a68:	f000 f932 	bl	8000cd0 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000a6c:	f006 f8de 	bl	8006c2c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000a70:	f7ff fbd2 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a74:	f008 fead 	bl	80097d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x24>

08000a7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b094      	sub	sp, #80	; 0x50
 8000a7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a84:	2228      	movs	r2, #40	; 0x28
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f00c fda2 	bl	800d5d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abc:	2302      	movs	r3, #2
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ac6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f002 fd25 	bl	8003520 <HAL_RCC_OscConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000adc:	f000 f83a 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 ff8f 	bl	8003a20 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b08:	f000 f824 	bl	8000b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b14:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 f939 	bl	8003d90 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b24:	f000 f816 	bl	8000b54 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	; 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 fb6d 	bl	8001220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40000800 	.word	0x40000800

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <Error_Handler+0x6>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_MspInit+0x68>)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_MspInit+0x68>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_MspInit+0x68>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_MspInit+0x68>)
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_MspInit+0x68>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	61d3      	str	r3, [r2, #28]
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x68>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	f06f 0001 	mvn.w	r0, #1
 8000b9a:	f000 fc10 	bl	80013be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_MspInit+0x6c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_MspInit+0x6c>)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000

08000bcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	201e      	movs	r0, #30
 8000be2:	f000 fbec 	bl	80013be <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000be6:	201e      	movs	r0, #30
 8000be8:	f000 fc05 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_InitTick+0xa0>)
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_InitTick+0xa0>)
 8000bf0:	69db      	ldr	r3, [r3, #28]
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	61d3      	str	r3, [r2, #28]
 8000bf8:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_InitTick+0xa0>)
 8000bfa:	69db      	ldr	r3, [r3, #28]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c04:	f107 0210 	add.w	r2, r7, #16
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 f870 	bl	8003cf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c14:	f003 f85a 	bl	8003ccc <HAL_RCC_GetPCLK1Freq>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c20:	4a13      	ldr	r2, [pc, #76]	; (8000c70 <HAL_InitTick+0xa4>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	0c9b      	lsrs	r3, r3, #18
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_InitTick+0xac>)
 8000c30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c38:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c3e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c4e:	f003 f955 	bl	8003efc <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d104      	bne.n	8000c62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <HAL_InitTick+0xa8>)
 8000c5a:	f003 f99f 	bl	8003f9c <HAL_TIM_Base_Start_IT>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	431bde83 	.word	0x431bde83
 8000c74:	20001d6c 	.word	0x20001d6c
 8000c78:	40000800 	.word	0x40000800

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cae:	f001 f858 	bl	8001d62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000378c 	.word	0x2000378c

08000cbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM4_IRQHandler+0x10>)
 8000cc2:	f003 f9bd 	bl	8004040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20001d6c 	.word	0x20001d6c

08000cd0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <MX_TIM1_Init+0x9c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d18:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d1a:	f003 f8ef 	bl	8003efc <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d24:	f7ff ff16 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0308 	add.w	r3, r7, #8
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d36:	f003 fa8b 	bl	8004250 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d40:	f7ff ff08 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <MX_TIM1_Init+0x98>)
 8000d52:	f003 fc51 	bl	80045f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d5c:	f7ff fefa 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20001db4 	.word	0x20001db4
 8000d6c:	40012c00 	.word	0x40012c00

08000d70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x34>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10b      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_TIM_Base_MspInit+0x38>)
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_TIM_Base_MspInit+0x38>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d8c:	6193      	str	r3, [r2, #24]
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_TIM_Base_MspInit+0x38>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40012c00 	.word	0x40012c00
 8000da8:	40021000 	.word	0x40021000

08000dac <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000db6:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ddc:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000dde:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000df4:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000e0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
	...

08000e18 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4603      	mov	r3, r0
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000e36:	89bb      	ldrh	r3, [r7, #12]
 8000e38:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	e00f      	b.n	8000e60 <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <STORAGE_Read_FS+0x60>)
 8000e48:	5cd3      	ldrb	r3, [r2, r3]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	68ba      	ldr	r2, [r7, #8]
 8000e52:	4413      	add	r3, r2
 8000e54:	7dfa      	ldrb	r2, [r7, #23]
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	89bb      	ldrh	r3, [r7, #12]
 8000e62:	025b      	lsls	r3, r3, #9
 8000e64:	461a      	mov	r2, r3
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8e9      	bhi.n	8000e40 <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000e6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20001dfc 	.word	0x20001dfc

08000e7c <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	025b      	lsls	r3, r3, #9
 8000e94:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]
 8000e9e:	e00e      	b.n	8000ebe <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	4413      	add	r3, r2
 8000eb0:	7dfa      	ldrb	r2, [r7, #23]
 8000eb2:	b2d1      	uxtb	r1, r2
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <STORAGE_Write_FS+0x64>)
 8000eb6:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	89bb      	ldrh	r3, [r7, #12]
 8000ec0:	025b      	lsls	r3, r3, #9
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d8ea      	bhi.n	8000ea0 <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f814 	bl	8000ef8 <eof_check>
	st_info.blk_len = blk_len;
 8000ed0:	89bb      	ldrh	r3, [r7, #12]
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <STORAGE_Write_FS+0x68>)
 8000ed4:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000ed6:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20001dfc 	.word	0x20001dfc
 8000ee4:	20000a54 	.word	0x20000a54

08000ee8 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000eec:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <eof_check+0x84>)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	6812      	ldr	r2, [r2, #0]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	8019      	strh	r1, [r3, #0]
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	0c12      	lsrs	r2, r2, #16
 8000f10:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e022      	b.n	8000f60 <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e017      	b.n	8000f50 <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <eof_check+0x88>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	f107 010c 	add.w	r1, r7, #12
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10e      	bne.n	8000f58 <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d803      	bhi.n	8000f48 <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	3301      	adds	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e003      	b.n	8000f50 <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <eof_check+0x8c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e011      	b.n	8000f74 <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d9e4      	bls.n	8000f20 <eof_check+0x28>
 8000f56:	e000      	b.n	8000f5a <eof_check+0x62>
				break;
 8000f58:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	4613      	mov	r3, r2
 8000f66:	01db      	lsls	r3, r3, #7
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	441a      	add	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8d2      	bhi.n	8000f1a <eof_check+0x22>
			return;
		}	
	}
	
}
 8000f74:	371c      	adds	r7, #28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	0800d6d8 	.word	0x0800d6d8
 8000f80:	20001dfc 	.word	0x20001dfc
 8000f84:	20000a54 	.word	0x20000a54

08000f88 <ve_is_pg_erased>:
/*
*@param uint32_t p_addr the address of the page
*
*/
static uint8_t  ve_is_pg_erased(uint32_t p_addr)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	__IO uint8_t c =0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	72fb      	strb	r3, [r7, #11]
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e00d      	b.n	8000fb6 <ve_is_pg_erased+0x2e>
	{
		c = *((uint8_t *)(p_addr + i));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	72fb      	strb	r3, [r7, #11]
		if( c != 0xFF )
 8000fa4:	7afb      	ldrb	r3, [r7, #11]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	d001      	beq.n	8000fb0 <ve_is_pg_erased+0x28>
		{
			return 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	e007      	b.n	8000fc0 <ve_is_pg_erased+0x38>
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fbc:	d3ed      	bcc.n	8000f9a <ve_is_pg_erased+0x12>
		}
		
	}
	
	return 1;
 8000fbe:	2301      	movs	r3, #1
	
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
	...

08000fcc <ve_pgs_prep>:
*
*@param st_info storage information
*
*/
static void ve_pgs_prep(s_usbd_st_info * p_st_info)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	__IO uint8_t pg_num = ( p_st_info->blk_len / 2) + (p_st_info->blk_len & 1);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4413      	add	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73bb      	strb	r3, [r7, #14]
	
	
	HAL_FLASH_Unlock();
 8000fee:	f000 fa9d 	bl	800152c <HAL_FLASH_Unlock>
	
	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <ve_pgs_prep+0x8c>)
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <ve_pgs_prep+0x8c>)
 8000ff6:	69db      	ldr	r3, [r3, #28]
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	61d3      	str	r3, [r2, #28]
	
	/* Get the bank */
	
	EraseInitStruct.NbPages = 1;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <ve_pgs_prep+0x90>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR;
	EraseInitStruct.Banks     = 3;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <ve_pgs_prep+0x90>)
 8001006:	2203      	movs	r2, #3
 8001008:	605a      	str	r2, [r3, #4]
	
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e017      	b.n	8001040 <ve_pgs_prep+0x74>
	{
		EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR + FLASH_PAGE_SIZE*pg_curr;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001016:	3320      	adds	r3, #32
 8001018:	029b      	lsls	r3, r3, #10
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <ve_pgs_prep+0x90>)
 800101c:	6093      	str	r3, [r2, #8]
		 
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 800101e:	4b0f      	ldr	r3, [pc, #60]	; (800105c <ve_pgs_prep+0x90>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffb0 	bl	8000f88 <ve_is_pg_erased>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <ve_pgs_prep+0x6c>
			
		
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError_t) != HAL_OK)
 800102e:	490c      	ldr	r1, [pc, #48]	; (8001060 <ve_pgs_prep+0x94>)
 8001030:	480a      	ldr	r0, [pc, #40]	; (800105c <ve_pgs_prep+0x90>)
 8001032:	f000 fb63 	bl	80016fc <HAL_FLASHEx_Erase>
 8001036:	e000      	b.n	800103a <ve_pgs_prep+0x6e>
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8001038:	bf00      	nop
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	3301      	adds	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e2      	bcc.n	8001010 <ve_pgs_prep+0x44>
			//test1 Error_Handler();
		}
	
	}
	
	HAL_FLASH_Lock();
 800104a:	f000 fa95 	bl	8001578 <HAL_FLASH_Lock>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40022000 	.word	0x40022000
 800105c:	20000a60 	.word	0x20000a60
 8001060:	20000a5c 	.word	0x20000a5c

08001064 <ve_prg_blks>:
*
*@param st_info storage information
*
*/
static void ve_prg_blks(s_usbd_st_info * p_st_info)
{
 8001064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001068:	b08f      	sub	sp, #60	; 0x3c
 800106a:	af00      	add	r7, sp, #0
 800106c:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_FLASH_Unlock();
 800106e:	f000 fa5d 	bl	800152c <HAL_FLASH_Unlock>
	
	
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
 8001076:	e094      	b.n	80011a2 <ve_prg_blks+0x13e>
//			dword_to_write  = (((uint64_t )ram_msd[j ] << 56 )|((uint64_t )ram_msd[j + 1] << 48 )|
//											  ((uint64_t )ram_msd[j + 2] << 40 )|((uint64_t )ram_msd[j + 3] << 32))|
//										  	(((uint64_t )ram_msd[j + 4] << 24 )|((uint64_t )ram_msd[j + 5] << 16)|
//											  ((uint64_t )ram_msd[j + 6] << 8  )|((uint64_t )ram_msd[j + 7]));
		
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8001078:	4a51      	ldr	r2, [pc, #324]	; (80011c0 <ve_prg_blks+0x15c>)
 800107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	f04f 0100 	mov.w	r1, #0
 8001086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <ve_prg_blks+0x15c>)
 800108c:	5c9b      	ldrb	r3, [r3, r2]
 800108e:	b2db      	uxtb	r3, r3
 8001090:	f04f 0400 	mov.w	r4, #0
 8001094:	0226      	lsls	r6, r4, #8
 8001096:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 800109a:	021d      	lsls	r5, r3, #8
 800109c:	ea40 0005 	orr.w	r0, r0, r5
 80010a0:	ea41 0106 	orr.w	r1, r1, r6
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 80010a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a6:	1c9a      	adds	r2, r3, #2
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <ve_prg_blks+0x15c>)
 80010aa:	5c9b      	ldrb	r3, [r3, r2]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f04f 0400 	mov.w	r4, #0
 80010b2:	ea4f 4904 	mov.w	r9, r4, lsl #16
 80010b6:	ea49 4913 	orr.w	r9, r9, r3, lsr #16
 80010ba:	ea4f 4803 	mov.w	r8, r3, lsl #16
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 80010be:	ea40 0008 	orr.w	r0, r0, r8
 80010c2:	ea41 0109 	orr.w	r1, r1, r9
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 80010c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c8:	1cda      	adds	r2, r3, #3
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <ve_prg_blks+0x15c>)
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f04f 0400 	mov.w	r4, #0
 80010d4:	0a1a      	lsrs	r2, r3, #8
 80010d6:	627a      	str	r2, [r7, #36]	; 0x24
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	623b      	str	r3, [r7, #32]
 80010dc:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80010e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80010e4:	ea4b 0b01 	orr.w	fp, fp, r1
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 80010e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ea:	1d1a      	adds	r2, r3, #4
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <ve_prg_blks+0x15c>)
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f04f 0400 	mov.w	r4, #0
 80010f6:	001b      	movs	r3, r3
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	1d5a      	adds	r2, r3, #5
 8001102:	4b2f      	ldr	r3, [pc, #188]	; (80011c0 <ve_prg_blks+0x15c>)
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f04f 0400 	mov.w	r4, #0
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001118:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800111c:	ea40 0003 	orr.w	r0, r0, r3
 8001120:	ea41 0104 	orr.w	r1, r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	1d9a      	adds	r2, r3, #6
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <ve_prg_blks+0x15c>)
 800112a:	5c9b      	ldrb	r3, [r3, r2]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f04f 0400 	mov.w	r4, #0
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 800113a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800113e:	ea43 0300 	orr.w	r3, r3, r0
 8001142:	ea44 0401 	orr.w	r4, r4, r1
 8001146:	4618      	mov	r0, r3
 8001148:	4621      	mov	r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 800114a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800114c:	1dda      	adds	r2, r3, #7
 800114e:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <ve_prg_blks+0x15c>)
 8001150:	5c9b      	ldrb	r3, [r3, r2]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	f04f 0400 	mov.w	r4, #0
 8001158:	061b      	lsls	r3, r3, #24
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	2300      	movs	r3, #0
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	e897 0018 	ldmia.w	r7, {r3, r4}
 8001164:	ea43 0300 	orr.w	r3, r3, r0
 8001168:	ea44 0401 	orr.w	r4, r4, r1
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 800116c:	ea43 030a 	orr.w	r3, r3, sl
 8001170:	ea44 040b 	orr.w	r4, r4, fp
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <ve_prg_blks+0x160>)
 8001176:	e882 0018 	stmia.w	r2, {r3, r4}
		
		if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, VIRT_EEPROM_ADDR+j,  dword_to_write) != HAL_OK)
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8001180:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <ve_prg_blks+0x160>)
 8001186:	cb18      	ldmia	r3, {r3, r4}
 8001188:	461a      	mov	r2, r3
 800118a:	4623      	mov	r3, r4
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f95d 	bl	800144c <HAL_FLASH_Program>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <ve_prg_blks+0x138>
		{
			Error_Handler();
 8001198:	f7ff fcdc 	bl	8000b54 <Error_Handler>
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 800119c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800119e:	3308      	adds	r3, #8
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	025a      	lsls	r2, r3, #9
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	429a      	cmp	r2, r3
 80011ac:	f63f af64 	bhi.w	8001078 <ve_prg_blks+0x14>
		}
	}
	
	HAL_FLASH_Lock();
 80011b0:	f000 f9e2 	bl	8001578 <HAL_FLASH_Lock>
}
 80011b4:	bf00      	nop
 80011b6:	373c      	adds	r7, #60	; 0x3c
 80011b8:	46bd      	mov	sp, r7
 80011ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011be:	bf00      	nop
 80011c0:	20001dfc 	.word	0x20001dfc
 80011c4:	20000a70 	.word	0x20000a70

080011c8 <ve_operate>:



uint8_t ve_operate( s_usbd_st_info * p_st_info )
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	ve_pgs_prep(p_st_info);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fefb 	bl	8000fcc <ve_pgs_prep>
	ve_prg_blks(p_st_info);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff44 	bl	8001064 <ve_prg_blks>
	return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_Init+0x28>)
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_Init+0x28>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f8cf 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fcde 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff fca4 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x1c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x20>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_IncTick+0x20>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000134 	.word	0x20000134
 8001240:	20002dfc 	.word	0x20002dfc

08001244 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  return uwTick;
 8001248:	4b02      	ldr	r3, [pc, #8]	; (8001254 <HAL_GetTick+0x10>)
 800124a:	681b      	ldr	r3, [r3, #0]
}
 800124c:	4618      	mov	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20002dfc 	.word	0x20002dfc

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <__NVIC_EnableIRQ+0x34>)
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	095b      	lsrs	r3, r3, #5
 80012d6:	79fa      	ldrb	r2, [r7, #7]
 80012d8:	f002 021f 	and.w	r2, r2, #31
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	490d      	ldr	r1, [pc, #52]	; (8001340 <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	4909      	ldr	r1, [pc, #36]	; (8001344 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	; 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	2201      	movs	r2, #1
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	1e5a      	subs	r2, r3, #1
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	401a      	ands	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138e:	2101      	movs	r1, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	1e59      	subs	r1, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff51 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff66 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ffb4 	bl	8001348 <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff83 	bl	80012f4 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff59 	bl	80012bc <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e00e      	b.n	8001442 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	795b      	ldrb	r3, [r3, #5]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d105      	bne.n	800143a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7fe fe9f 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800144c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <HAL_FLASH_Program+0xd8>)
 8001468:	7e1b      	ldrb	r3, [r3, #24]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_FLASH_Program+0x26>
 800146e:	2302      	movs	r3, #2
 8001470:	e054      	b.n	800151c <HAL_FLASH_Program+0xd0>
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <HAL_FLASH_Program+0xd8>)
 8001474:	2201      	movs	r2, #1
 8001476:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800147c:	f000 f8a8 	bl	80015d0 <FLASH_WaitForLastOperation>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d144      	bne.n	8001514 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001490:	2301      	movs	r3, #1
 8001492:	757b      	strb	r3, [r7, #21]
 8001494:	e007      	b.n	80014a6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2b02      	cmp	r3, #2
 800149a:	d102      	bne.n	80014a2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800149c:	2302      	movs	r3, #2
 800149e:	757b      	strb	r3, [r7, #21]
 80014a0:	e001      	b.n	80014a6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80014a2:	2304      	movs	r3, #4
 80014a4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	75bb      	strb	r3, [r7, #22]
 80014aa:	e02d      	b.n	8001508 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	005a      	lsls	r2, r3, #1
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	eb02 0e03 	add.w	lr, r2, r3
 80014b6:	7dbb      	ldrb	r3, [r7, #22]
 80014b8:	0119      	lsls	r1, r3, #4
 80014ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014be:	f1c1 0620 	rsb	r6, r1, #32
 80014c2:	f1a1 0020 	sub.w	r0, r1, #32
 80014c6:	fa22 f401 	lsr.w	r4, r2, r1
 80014ca:	fa03 f606 	lsl.w	r6, r3, r6
 80014ce:	4334      	orrs	r4, r6
 80014d0:	fa23 f000 	lsr.w	r0, r3, r0
 80014d4:	4304      	orrs	r4, r0
 80014d6:	fa23 f501 	lsr.w	r5, r3, r1
 80014da:	b2a3      	uxth	r3, r4
 80014dc:	4619      	mov	r1, r3
 80014de:	4670      	mov	r0, lr
 80014e0:	f000 f85a 	bl	8001598 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e8:	f000 f872 	bl	80015d0 <FLASH_WaitForLastOperation>
 80014ec:	4603      	mov	r3, r0
 80014ee:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_FLASH_Program+0xdc>)
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_FLASH_Program+0xdc>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d107      	bne.n	8001512 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001502:	7dbb      	ldrb	r3, [r7, #22]
 8001504:	3301      	adds	r3, #1
 8001506:	75bb      	strb	r3, [r7, #22]
 8001508:	7dba      	ldrb	r2, [r7, #22]
 800150a:	7d7b      	ldrb	r3, [r7, #21]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3cd      	bcc.n	80014ac <HAL_FLASH_Program+0x60>
 8001510:	e000      	b.n	8001514 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001512:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <HAL_FLASH_Program+0xd8>)
 8001516:	2200      	movs	r2, #0
 8001518:	761a      	strb	r2, [r3, #24]

  return status;
 800151a:	7dfb      	ldrb	r3, [r7, #23]
}
 800151c:	4618      	mov	r0, r3
 800151e:	371c      	adds	r7, #28
 8001520:	46bd      	mov	sp, r7
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001524:	20002e00 	.word	0x20002e00
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_FLASH_Unlock+0x40>)
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00d      	beq.n	800155e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_FLASH_Unlock+0x40>)
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_FLASH_Unlock+0x44>)
 8001546:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_FLASH_Unlock+0x40>)
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_FLASH_Unlock+0x48>)
 800154c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_FLASH_Unlock+0x40>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800155e:	79fb      	ldrb	r3, [r7, #7]
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40022000 	.word	0x40022000
 8001570:	45670123 	.word	0x45670123
 8001574:	cdef89ab 	.word	0xcdef89ab

08001578 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800157c:	4a05      	ldr	r2, [pc, #20]	; (8001594 <HAL_FLASH_Lock+0x1c>)
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_FLASH_Lock+0x1c>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001586:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40022000 	.word	0x40022000

08001598 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <FLASH_Program_HalfWord+0x30>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80015aa:	4a08      	ldr	r2, [pc, #32]	; (80015cc <FLASH_Program_HalfWord+0x34>)
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <FLASH_Program_HalfWord+0x34>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	801a      	strh	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20002e00 	.word	0x20002e00
 80015cc:	40022000 	.word	0x40022000

080015d0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80015d8:	f7ff fe34 	bl	8001244 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80015de:	e010      	b.n	8001602 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	d00c      	beq.n	8001602 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d007      	beq.n	80015fe <FLASH_WaitForLastOperation+0x2e>
 80015ee:	f7ff fe29 	bl	8001244 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1ad2      	subs	r2, r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d901      	bls.n	8001602 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e025      	b.n	800164e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <FLASH_WaitForLastOperation+0x88>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e8      	bne.n	80015e0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <FLASH_WaitForLastOperation+0x88>)
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <FLASH_WaitForLastOperation+0x88>)
 800161c:	2220      	movs	r2, #32
 800161e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <FLASH_WaitForLastOperation+0x88>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d10b      	bne.n	8001644 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <FLASH_WaitForLastOperation+0x88>)
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <FLASH_WaitForLastOperation+0x88>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001644:	f000 f80a 	bl	800165c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40022000 	.word	0x40022000

0800165c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <FLASH_SetErrorCode+0x9c>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f043 0302 	orr.w	r3, r3, #2
 800167a:	4a1f      	ldr	r2, [pc, #124]	; (80016f8 <FLASH_SetErrorCode+0x9c>)
 800167c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f043 0310 	orr.w	r3, r3, #16
 8001684:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <FLASH_SetErrorCode+0x9c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <FLASH_SetErrorCode+0x9c>)
 800169c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00b      	beq.n	80016ca <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <FLASH_SetErrorCode+0x9c>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <FLASH_SetErrorCode+0x9c>)
 80016bc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80016be:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f240 1201 	movw	r2, #257	; 0x101
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d106      	bne.n	80016e2 <FLASH_SetErrorCode+0x86>
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	61d3      	str	r3, [r2, #28]
}  
 80016e0:	e002      	b.n	80016e8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <FLASH_SetErrorCode+0x98>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	60d3      	str	r3, [r2, #12]
}  
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40022000 	.word	0x40022000
 80016f8:	20002e00 	.word	0x20002e00

080016fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_FLASHEx_Erase+0xd0>)
 8001710:	7e1b      	ldrb	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_FLASHEx_Erase+0x1e>
 8001716:	2302      	movs	r3, #2
 8001718:	e053      	b.n	80017c2 <HAL_FLASHEx_Erase+0xc6>
 800171a:	4b2c      	ldr	r3, [pc, #176]	; (80017cc <HAL_FLASHEx_Erase+0xd0>)
 800171c:	2201      	movs	r2, #1
 800171e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d116      	bne.n	8001756 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001728:	f24c 3050 	movw	r0, #50000	; 0xc350
 800172c:	f7ff ff50 	bl	80015d0 <FLASH_WaitForLastOperation>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d141      	bne.n	80017ba <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001736:	2001      	movs	r0, #1
 8001738:	f000 f84c 	bl	80017d4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800173c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001740:	f7ff ff46 	bl	80015d0 <FLASH_WaitForLastOperation>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001748:	4a21      	ldr	r2, [pc, #132]	; (80017d0 <HAL_FLASHEx_Erase+0xd4>)
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_FLASHEx_Erase+0xd4>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f023 0304 	bic.w	r3, r3, #4
 8001752:	6113      	str	r3, [r2, #16]
 8001754:	e031      	b.n	80017ba <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001756:	f24c 3050 	movw	r0, #50000	; 0xc350
 800175a:	f7ff ff39 	bl	80015d0 <FLASH_WaitForLastOperation>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12a      	bne.n	80017ba <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f04f 32ff 	mov.w	r2, #4294967295
 800176a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	e019      	b.n	80017a8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f000 f849 	bl	800180c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800177a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800177e:	f7ff ff27 	bl	80015d0 <FLASH_WaitForLastOperation>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <HAL_FLASHEx_Erase+0xd4>)
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_FLASHEx_Erase+0xd4>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f023 0302 	bic.w	r3, r3, #2
 8001790:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	601a      	str	r2, [r3, #0]
            break;
 800179e:	e00c      	b.n	80017ba <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017a6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	029a      	lsls	r2, r3, #10
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d8dc      	bhi.n	8001774 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017ba:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_FLASHEx_Erase+0xd0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	761a      	strb	r2, [r3, #24]

  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20002e00 	.word	0x20002e00
 80017d0:	40022000 	.word	0x40022000

080017d4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <FLASH_MassErase+0x30>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <FLASH_MassErase+0x34>)
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <FLASH_MassErase+0x34>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	f043 0304 	orr.w	r3, r3, #4
 80017ec:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <FLASH_MassErase+0x34>)
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <FLASH_MassErase+0x34>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20002e00 	.word	0x20002e00
 8001808:	40022000 	.word	0x40022000

0800180c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <FLASH_PageErase+0x38>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <FLASH_PageErase+0x3c>)
 800181c:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <FLASH_PageErase+0x3c>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <FLASH_PageErase+0x3c>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800182c:	4a06      	ldr	r2, [pc, #24]	; (8001848 <FLASH_PageErase+0x3c>)
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <FLASH_PageErase+0x3c>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001836:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20002e00 	.word	0x20002e00
 8001848:	40022000 	.word	0x40022000

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185e:	e127      	b.n	8001ab0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001860:	2201      	movs	r2, #1
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	429a      	cmp	r2, r3
 800187a:	f040 8116 	bne.w	8001aaa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b12      	cmp	r3, #18
 8001884:	d034      	beq.n	80018f0 <HAL_GPIO_Init+0xa4>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d80d      	bhi.n	80018a6 <HAL_GPIO_Init+0x5a>
 800188a:	2b02      	cmp	r3, #2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x9a>
 800188e:	2b02      	cmp	r3, #2
 8001890:	d804      	bhi.n	800189c <HAL_GPIO_Init+0x50>
 8001892:	2b00      	cmp	r3, #0
 8001894:	d031      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 8001896:	2b01      	cmp	r3, #1
 8001898:	d01c      	beq.n	80018d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800189a:	e048      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800189c:	2b03      	cmp	r3, #3
 800189e:	d043      	beq.n	8001928 <HAL_GPIO_Init+0xdc>
 80018a0:	2b11      	cmp	r3, #17
 80018a2:	d01b      	beq.n	80018dc <HAL_GPIO_Init+0x90>
          break;
 80018a4:	e043      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018a6:	4a89      	ldr	r2, [pc, #548]	; (8001acc <HAL_GPIO_Init+0x280>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d026      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018ac:	4a87      	ldr	r2, [pc, #540]	; (8001acc <HAL_GPIO_Init+0x280>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d806      	bhi.n	80018c0 <HAL_GPIO_Init+0x74>
 80018b2:	4a87      	ldr	r2, [pc, #540]	; (8001ad0 <HAL_GPIO_Init+0x284>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d020      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018b8:	4a86      	ldr	r2, [pc, #536]	; (8001ad4 <HAL_GPIO_Init+0x288>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01d      	beq.n	80018fa <HAL_GPIO_Init+0xae>
          break;
 80018be:	e036      	b.n	800192e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018c0:	4a85      	ldr	r2, [pc, #532]	; (8001ad8 <HAL_GPIO_Init+0x28c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d019      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018c6:	4a85      	ldr	r2, [pc, #532]	; (8001adc <HAL_GPIO_Init+0x290>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d016      	beq.n	80018fa <HAL_GPIO_Init+0xae>
 80018cc:	4a84      	ldr	r2, [pc, #528]	; (8001ae0 <HAL_GPIO_Init+0x294>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xae>
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e028      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e023      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01e      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e019      	b.n	800192e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e012      	b.n	800192e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e008      	b.n	800192e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2bff      	cmp	r3, #255	; 0xff
 8001932:	d801      	bhi.n	8001938 <HAL_GPIO_Init+0xec>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	e001      	b.n	800193c <HAL_GPIO_Init+0xf0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d802      	bhi.n	800194a <HAL_GPIO_Init+0xfe>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x104>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3b08      	subs	r3, #8
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	210f      	movs	r1, #15
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	401a      	ands	r2, r3
 8001962:	6a39      	ldr	r1, [r7, #32]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	431a      	orrs	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8096 	beq.w	8001aaa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800197e:	4a59      	ldr	r2, [pc, #356]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001980:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6193      	str	r3, [r2, #24]
 800198a:	4b56      	ldr	r3, [pc, #344]	; (8001ae4 <HAL_GPIO_Init+0x298>)
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001996:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4b      	ldr	r2, [pc, #300]	; (8001aec <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x19e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4a      	ldr	r2, [pc, #296]	; (8001af0 <HAL_GPIO_Init+0x2a4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x19a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <HAL_GPIO_Init+0x2a8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x196>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x192>
 80019da:	2303      	movs	r3, #3
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019de:	2304      	movs	r3, #4
 80019e0:	e004      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <HAL_GPIO_Init+0x1a0>
 80019ea:	2300      	movs	r3, #0
 80019ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ee:	f002 0203 	and.w	r2, r2, #3
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	4093      	lsls	r3, r2
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019fc:	493a      	ldr	r1, [pc, #232]	; (8001ae8 <HAL_GPIO_Init+0x29c>)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	089b      	lsrs	r3, r3, #2
 8001a02:	3302      	adds	r3, #2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d006      	beq.n	8001a24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a16:	4939      	ldr	r1, [pc, #228]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a18:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
 8001a22:	e006      	b.n	8001a32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a24:	4935      	ldr	r1, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d006      	beq.n	8001a4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a3e:	492f      	ldr	r1, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
 8001a4a:	e006      	b.n	8001a5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a4c:	492b      	ldr	r1, [pc, #172]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a4e:	4b2b      	ldr	r3, [pc, #172]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4013      	ands	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
 8001a72:	e006      	b.n	8001a82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a74:	4921      	ldr	r1, [pc, #132]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a76:	4b21      	ldr	r3, [pc, #132]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	4013      	ands	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	491b      	ldr	r1, [pc, #108]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a90:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60cb      	str	r3, [r1, #12]
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a9c:	4917      	ldr	r1, [pc, #92]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_GPIO_Init+0x2b0>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f47f aed0 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	372c      	adds	r7, #44	; 0x2c
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	10210000 	.word	0x10210000
 8001ad0:	10110000 	.word	0x10110000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10310000 	.word	0x10310000
 8001adc:	10320000 	.word	0x10320000
 8001ae0:	10220000 	.word	0x10220000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40011000 	.word	0x40011000
 8001af8:	40011400 	.word	0x40011400
 8001afc:	40010400 	.word	0x40010400

08001b00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b02:	b08b      	sub	sp, #44	; 0x2c
 8001b04:	af06      	add	r7, sp, #24
 8001b06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0fd      	b.n	8001d0e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d106      	bne.n	8001b2c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f00b fa3e 	bl	800cfa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 fdf3 	bl	8004724 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	687e      	ldr	r6, [r7, #4]
 8001b46:	466d      	mov	r5, sp
 8001b48:	f106 0410 	add.w	r4, r6, #16
 8001b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	602b      	str	r3, [r5, #0]
 8001b54:	1d33      	adds	r3, r6, #4
 8001b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f002 fdbd 	bl	80046d8 <USB_CoreInit>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0ce      	b.n	8001d0e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fdee 	bl	8004758 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e04c      	b.n	8001c1c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	440b      	add	r3, r1
 8001b92:	3301      	adds	r3, #1
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3336      	adds	r3, #54	; 0x36
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bda:	7bfa      	ldrb	r2, [r7, #15]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	3338      	adds	r3, #56	; 0x38
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bee:	7bfa      	ldrb	r2, [r7, #15]
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	333c      	adds	r3, #60	; 0x3c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	3340      	adds	r3, #64	; 0x40
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3ad      	bcc.n	8001b82 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e044      	b.n	8001cb6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c42:	7bfa      	ldrb	r2, [r7, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d3b5      	bcc.n	8001c2c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	687e      	ldr	r6, [r7, #4]
 8001cc8:	466d      	mov	r5, sp
 8001cca:	f106 0410 	add.w	r4, r6, #16
 8001cce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd2:	6823      	ldr	r3, [r4, #0]
 8001cd4:	602b      	str	r3, [r5, #0]
 8001cd6:	1d33      	adds	r3, r6, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f002 fd48 	bl	8004770 <USB_DevInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00d      	b.n	8001d0e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f004 fed9 	bl	8006abe <USB_DevDisconnect>

  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_Start+0x16>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e016      	b.n	8001d5a <HAL_PCD_Start+0x44>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f002 fcdd 	bl	80046f8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f00b fbba 	bl	800d4ba <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fead 	bl	8006aaa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b088      	sub	sp, #32
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 feaf 	bl	8006ad2 <USB_ReadInterrupts>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d7e:	d102      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fb8e 	bl	80024a2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fea1 	bl	8006ad2 <USB_ReadInterrupts>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d112      	bne.n	8001dc2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dae:	b292      	uxth	r2, r2
 8001db0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f00b f972 	bl	800d09e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dba:	2100      	movs	r1, #0
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f925 	bl	800200c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 fe83 	bl	8006ad2 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dd6:	d10b      	bne.n	8001df0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001de4:	b292      	uxth	r2, r2
 8001de6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dea:	b292      	uxth	r2, r2
 8001dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f004 fe6c 	bl	8006ad2 <USB_ReadInterrupts>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e04:	d10b      	bne.n	8001e1e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001e12:	b292      	uxth	r2, r2
 8001e14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fe55 	bl	8006ad2 <USB_ReadInterrupts>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e32:	d126      	bne.n	8001e82 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001e40:	b292      	uxth	r2, r2
 8001e42:	f022 0204 	bic.w	r2, r2, #4
 8001e46:	b292      	uxth	r2, r2
 8001e48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001e58:	b292      	uxth	r2, r2
 8001e5a:	f022 0208 	bic.w	r2, r2, #8
 8001e5e:	b292      	uxth	r2, r2
 8001e60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f00b f953 	bl	800d110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001e76:	b292      	uxth	r2, r2
 8001e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fe23 	bl	8006ad2 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e96:	f040 8084 	bne.w	8001fa2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	77fb      	strb	r3, [r7, #31]
 8001e9e:	e011      	b.n	8001ec4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001ea0:	7ffb      	ldrb	r3, [r7, #31]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	7ffa      	ldrb	r2, [r7, #31]
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	440a      	add	r2, r1
 8001eae:	8812      	ldrh	r2, [r2, #0]
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	f107 0120 	add.w	r1, r7, #32
 8001eb8:	440b      	add	r3, r1
 8001eba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	77fb      	strb	r3, [r7, #31]
 8001ec4:	7ffb      	ldrb	r3, [r7, #31]
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	d9ea      	bls.n	8001ea0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001ed6:	b292      	uxth	r2, r2
 8001ed8:	f042 0201 	orr.w	r2, r2, #1
 8001edc:	b292      	uxth	r2, r2
 8001ede:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001efa:	bf00      	nop
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f6      	beq.n	8001efc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001f1a:	b292      	uxth	r2, r2
 8001f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f20:	b292      	uxth	r2, r2
 8001f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	77fb      	strb	r3, [r7, #31]
 8001f2a:	e010      	b.n	8001f4e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	7ffb      	ldrb	r3, [r7, #31]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	441a      	add	r2, r3
 8001f38:	7ffb      	ldrb	r3, [r7, #31]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f107 0120 	add.w	r1, r7, #32
 8001f40:	440b      	add	r3, r1
 8001f42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f46:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	77fb      	strb	r3, [r7, #31]
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	2b07      	cmp	r3, #7
 8001f52:	d9eb      	bls.n	8001f2c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001f60:	b292      	uxth	r2, r2
 8001f62:	f042 0208 	orr.w	r2, r2, #8
 8001f66:	b292      	uxth	r2, r2
 8001f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7e:	b292      	uxth	r2, r2
 8001f80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001f90:	b292      	uxth	r2, r2
 8001f92:	f042 0204 	orr.w	r2, r2, #4
 8001f96:	b292      	uxth	r2, r2
 8001f98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f00b f89d 	bl	800d0dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fd93 	bl	8006ad2 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fb6:	d10e      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001fc4:	b292      	uxth	r2, r2
 8001fc6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f00b f856 	bl	800d082 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 fd79 	bl	8006ad2 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fea:	d10b      	bne.n	8002004 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffe:	b292      	uxth	r2, r2
 8002000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_PCD_SetAddress+0x1a>
 8002022:	2302      	movs	r3, #2
 8002024:	e013      	b.n	800204e <HAL_PCD_SetAddress+0x42>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	4611      	mov	r1, r2
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fd20 	bl	8006a84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	4608      	mov	r0, r1
 8002060:	4611      	mov	r1, r2
 8002062:	461a      	mov	r2, r3
 8002064:	4603      	mov	r3, r0
 8002066:	70fb      	strb	r3, [r7, #3]
 8002068:	460b      	mov	r3, r1
 800206a:	803b      	strh	r3, [r7, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b00      	cmp	r3, #0
 800207a:	da0e      	bge.n	800209a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00e      	b.n	80020b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 0207 	and.w	r2, r3, #7
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020c4:	883a      	ldrh	r2, [r7, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	78ba      	ldrb	r2, [r7, #2]
 80020ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020e2:	78bb      	ldrb	r3, [r7, #2]
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d102      	bne.n	80020ee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_PCD_EP_Open+0xa6>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e00e      	b.n	800211a <HAL_PCD_EP_Open+0xc4>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68f9      	ldr	r1, [r7, #12]
 800210a:	4618      	mov	r0, r3
 800210c:	f002 fb66 	bl	80047dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002118:	7afb      	ldrb	r3, [r7, #11]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800212e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002132:	2b00      	cmp	r3, #0
 8002134:	da0e      	bge.n	8002154 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002136:	78fb      	ldrb	r3, [r7, #3]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	705a      	strb	r2, [r3, #1]
 8002152:	e00e      	b.n	8002172 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002154:	78fb      	ldrb	r3, [r7, #3]
 8002156:	f003 0207 	and.w	r2, r3, #7
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	b2da      	uxtb	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_PCD_EP_Close+0x6a>
 8002188:	2302      	movs	r3, #2
 800218a:	e00e      	b.n	80021aa <HAL_PCD_EP_Close+0x88>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fe82 	bl	8004ea4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	460b      	mov	r3, r1
 80021c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	f003 0207 	and.w	r2, r3, #7
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	2200      	movs	r2, #0
 80021ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2200      	movs	r2, #0
 80021f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021fe:	7afb      	ldrb	r3, [r7, #11]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6979      	ldr	r1, [r7, #20]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 f834 	bl	800527c <USB_EPStartXfer>
 8002214:	e005      	b.n	8002222 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6979      	ldr	r1, [r7, #20]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 f82d 	bl	800527c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	f003 0207 	and.w	r2, r3, #7
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	460b      	mov	r3, r1
 8002268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800226a:	7afb      	ldrb	r3, [r7, #11]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2201      	movs	r2, #1
 80022a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022a6:	7afb      	ldrb	r3, [r7, #11]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022b2:	7afb      	ldrb	r3, [r7, #11]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6979      	ldr	r1, [r7, #20]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 ffda 	bl	800527c <USB_EPStartXfer>
 80022c8:	e005      	b.n	80022d6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6979      	ldr	r1, [r7, #20]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 ffd3 	bl	800527c <USB_EPStartXfer>
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 0207 	and.w	r2, r3, #7
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d901      	bls.n	80022fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e04c      	b.n	8002398 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0e      	bge.n	8002324 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00c      	b.n	800233e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_PCD_EP_SetStall+0x7e>
 800235a:	2302      	movs	r3, #2
 800235c:	e01c      	b.n	8002398 <HAL_PCD_EP_SetStall+0xb8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68f9      	ldr	r1, [r7, #12]
 800236c:	4618      	mov	r0, r3
 800236e:	f004 fa8c 	bl	800688a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	2b00      	cmp	r3, #0
 800237a:	d108      	bne.n	800238e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f004 fbb1 	bl	8006af0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	f003 020f 	and.w	r2, r3, #15
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d901      	bls.n	80023be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e040      	b.n	8002440 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da0e      	bge.n	80023e4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	705a      	strb	r2, [r3, #1]
 80023e2:	e00e      	b.n	8002402 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f003 0207 	and.w	r2, r3, #7
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	b2da      	uxtb	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_PCD_EP_ClrStall+0x82>
 800241e:	2302      	movs	r3, #2
 8002420:	e00e      	b.n	8002440 <HAL_PCD_EP_ClrStall+0xa0>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68f9      	ldr	r1, [r7, #12]
 8002430:	4618      	mov	r0, r3
 8002432:	f004 fa7a 	bl	800692a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_PCD_EP_Flush+0x1a>
 800245e:	2302      	movs	r3, #2
 8002460:	e01b      	b.n	800249a <HAL_PCD_EP_Flush+0x52>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800246a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800246e:	2b00      	cmp	r3, #0
 8002470:	da09      	bge.n	8002486 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f002 f996 	bl	80047b0 <USB_FlushTxFifo>
 8002484:	e004      	b.n	8002490 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 f99b 	bl	80047c6 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b08e      	sub	sp, #56	; 0x38
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024aa:	e2ec      	b.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024b4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80024c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 8161 	bne.w	800278e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d152      	bne.n	800257c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3328      	adds	r3, #40	; 0x28
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002508:	b29b      	uxth	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	3302      	adds	r3, #2
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4413      	add	r3, r2
 800251e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	441a      	add	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800253a:	2100      	movs	r1, #0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f00a fd86 	bl	800d04e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 829b 	beq.w	8002a86 <PCD_EP_ISR_Handler+0x5e4>
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 8296 	bne.w	8002a86 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	b292      	uxth	r2, r2
 800256e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800257a:	e284      	b.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800258c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800258e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002592:	2b00      	cmp	r3, #0
 8002594:	d034      	beq.n	8002600 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	3306      	adds	r3, #6
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f004 fada 	bl	8006b8e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80025e6:	4013      	ands	r3, r2
 80025e8:	843b      	strh	r3, [r7, #32]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	8c3a      	ldrh	r2, [r7, #32]
 80025f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f4:	b292      	uxth	r2, r2
 80025f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f00a fcfb 	bl	800cff4 <HAL_PCD_SetupStageCallback>
 80025fe:	e242      	b.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002600:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002604:	2b00      	cmp	r3, #0
 8002606:	f280 823e 	bge.w	8002a86 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29a      	uxth	r2, r3
 8002612:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002616:	4013      	ands	r3, r2
 8002618:	83fb      	strh	r3, [r7, #30]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	8bfa      	ldrh	r2, [r7, #30]
 8002620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002624:	b292      	uxth	r2, r2
 8002626:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	3306      	adds	r3, #6
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <PCD_EP_ISR_Handler+0x1ee>
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	6959      	ldr	r1, [r3, #20]
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002674:	b29b      	uxth	r3, r3
 8002676:	f004 fa8a 	bl	8006b8e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	441a      	add	r2, r3
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f00a fcc4 	bl	800d018 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29b      	uxth	r3, r3
 8002698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 81f2 	bne.w	8002a86 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	4413      	add	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d112      	bne.n	80026f0 <PCD_EP_ISR_Handler+0x24e>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	801a      	strh	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	e02f      	b.n	8002750 <PCD_EP_ISR_Handler+0x2ae>
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b3e      	cmp	r3, #62	; 0x3e
 80026f6:	d813      	bhi.n	8002720 <PCD_EP_ISR_Handler+0x27e>
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d002      	beq.n	8002712 <PCD_EP_ISR_Handler+0x270>
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	3301      	adds	r3, #1
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	b29b      	uxth	r3, r3
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	b29a      	uxth	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	e017      	b.n	8002750 <PCD_EP_ISR_Handler+0x2ae>
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <PCD_EP_ISR_Handler+0x298>
 8002734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002736:	3b01      	subs	r3, #1
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
 800273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273c:	b29b      	uxth	r3, r3
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	b29b      	uxth	r3, r3
 8002742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274a:	b29a      	uxth	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	b29b      	uxth	r3, r3
 8002758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800275c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002760:	827b      	strh	r3, [r7, #18]
 8002762:	8a7b      	ldrh	r3, [r7, #18]
 8002764:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002768:	827b      	strh	r3, [r7, #18]
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002770:	827b      	strh	r3, [r7, #18]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	8a7b      	ldrh	r3, [r7, #18]
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]
 800278c:	e17b      	b.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027a0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f280 80ea 	bge.w	800297e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027c0:	4013      	ands	r3, r2
 80027c2:	823b      	strh	r3, [r7, #16]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	8a3a      	ldrh	r2, [r7, #16]
 80027d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027d8:	b292      	uxth	r2, r2
 80027da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80027dc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	7b1b      	ldrb	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d122      	bne.n	8002840 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	3306      	adds	r3, #6
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002822:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002824:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8087 	beq.w	800293a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	6959      	ldr	r1, [r3, #20]
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	88da      	ldrh	r2, [r3, #6]
 8002838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283a:	f004 f9a8 	bl	8006b8e <USB_ReadPMA>
 800283e:	e07c      	b.n	800293a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d108      	bne.n	800285a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800284a:	461a      	mov	r2, r3
 800284c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f927 	bl	8002aa2 <HAL_PCD_EP_DB_Receive>
 8002854:	4603      	mov	r3, r0
 8002856:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002858:	e06f      	b.n	800293a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002874:	81fb      	strh	r3, [r7, #14]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	441a      	add	r2, r3
 8002884:	89fb      	ldrh	r3, [r7, #14]
 8002886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800288a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800288e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002896:	b29b      	uxth	r3, r3
 8002898:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d021      	beq.n	80028f8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	3302      	adds	r3, #2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028dc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80028de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02a      	beq.n	800293a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	6959      	ldr	r1, [r3, #20]
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	891a      	ldrh	r2, [r3, #8]
 80028f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028f2:	f004 f94c 	bl	8006b8e <USB_ReadPMA>
 80028f6:	e020      	b.n	800293a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	3306      	adds	r3, #6
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002920:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002922:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	895a      	ldrh	r2, [r3, #10]
 8002934:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002936:	f004 f92a 	bl	8006b8e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002940:	441a      	add	r2, r3
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800294c:	441a      	add	r2, r3
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <PCD_EP_ISR_Handler+0x4c2>
 800295a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	429a      	cmp	r2, r3
 8002962:	d206      	bcs.n	8002972 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f00a fb54 	bl	800d018 <HAL_PCD_DataOutStageCallback>
 8002970:	e005      	b.n	800297e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002978:	4618      	mov	r0, r3
 800297a:	f002 fc7f 	bl	800527c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800297e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d07e      	beq.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002988:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	81bb      	strh	r3, [r7, #12]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	441a      	add	r2, r3
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	78db      	ldrb	r3, [r3, #3]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d00c      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x554>
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	78db      	ldrb	r3, [r3, #3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d146      	bne.n	8002a7a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80029ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d141      	bne.n	8002a7a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a1e:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	699a      	ldr	r2, [r3, #24]
 8002a24:	897b      	ldrh	r3, [r7, #10]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d906      	bls.n	8002a38 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	699a      	ldr	r2, [r3, #24]
 8002a2e:	897b      	ldrh	r3, [r7, #10]
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	619a      	str	r2, [r3, #24]
 8002a36:	e002      	b.n	8002a3e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f00a fafe 	bl	800d04e <HAL_PCD_DataInStageCallback>
 8002a52:	e018      	b.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	897b      	ldrh	r3, [r7, #10]
 8002a5a:	441a      	add	r2, r3
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	897b      	ldrh	r3, [r7, #10]
 8002a66:	441a      	add	r2, r3
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fc02 	bl	800527c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002a78:	e005      	b.n	8002a86 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f91b 	bl	8002cbc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f6ff ad0a 	blt.w	80024ac <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3738      	adds	r7, #56	; 0x38
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b088      	sub	sp, #32
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	60f8      	str	r0, [r7, #12]
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d07e      	beq.n	8002bb8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	8bfb      	ldrh	r3, [r7, #30]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d306      	bcc.n	8002afc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	8bfb      	ldrh	r3, [r7, #30]
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	619a      	str	r2, [r3, #24]
 8002afa:	e002      	b.n	8002b02 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d123      	bne.n	8002b52 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b24:	83bb      	strh	r3, [r7, #28]
 8002b26:	8bbb      	ldrh	r3, [r7, #28]
 8002b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b2c:	83bb      	strh	r3, [r7, #28]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	441a      	add	r2, r3
 8002b3c:	8bbb      	ldrh	r3, [r7, #28]
 8002b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01f      	beq.n	8002b9c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b76:	837b      	strh	r3, [r7, #26]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	441a      	add	r2, r3
 8002b86:	8b7b      	ldrh	r3, [r7, #26]
 8002b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b9c:	8bfb      	ldrh	r3, [r7, #30]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	891a      	ldrh	r2, [r3, #8]
 8002bb0:	8bfb      	ldrh	r3, [r7, #30]
 8002bb2:	f003 ffec 	bl	8006b8e <USB_ReadPMA>
 8002bb6:	e07c      	b.n	8002cb2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3306      	adds	r3, #6
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	8bfb      	ldrh	r3, [r7, #30]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d306      	bcc.n	8002bfa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	8bfb      	ldrh	r3, [r7, #30]
 8002bf2:	1ad2      	subs	r2, r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	619a      	str	r2, [r3, #24]
 8002bf8:	e002      	b.n	8002c00 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d123      	bne.n	8002c50 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	833b      	strh	r3, [r7, #24]
 8002c24:	8b3b      	ldrh	r3, [r7, #24]
 8002c26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c2a:	833b      	strh	r3, [r7, #24]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	8b3b      	ldrh	r3, [r7, #24]
 8002c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c74:	82fb      	strh	r3, [r7, #22]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	8afb      	ldrh	r3, [r7, #22]
 8002c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c9a:	8bfb      	ldrh	r3, [r7, #30]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6959      	ldr	r1, [r3, #20]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	895a      	ldrh	r2, [r3, #10]
 8002cac:	8bfb      	ldrh	r3, [r7, #30]
 8002cae:	f003 ff6e 	bl	8006b8e <USB_ReadPMA>
    }
  }

  return count;
 8002cb2:	8bfb      	ldrh	r3, [r7, #30]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0a4      	sub	sp, #144	; 0x90
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 81dd 	beq.w	8003090 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3302      	adds	r3, #2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfe:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d907      	bls.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	619a      	str	r2, [r3, #24]
 8002d1c:	e002      	b.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 80bb 	bne.w	8002ea4 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d126      	bne.n	8002d84 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	011a      	lsls	r2, r3, #4
 8002d54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d56:	4413      	add	r3, r2
 8002d58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d80:	801a      	strh	r2, [r3, #0]
 8002d82:	e01a      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d116      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	677b      	str	r3, [r7, #116]	; 0x74
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da0:	4413      	add	r3, r2
 8002da2:	677b      	str	r3, [r7, #116]	; 0x74
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	011a      	lsls	r2, r3, #4
 8002daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dac:	4413      	add	r3, r2
 8002dae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002db2:	673b      	str	r3, [r7, #112]	; 0x70
 8002db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002db6:	2200      	movs	r2, #0
 8002db8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d126      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ddc:	4413      	add	r3, r2
 8002dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	011a      	lsls	r2, r3, #4
 8002de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de8:	4413      	add	r3, r2
 8002dea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dee:	667b      	str	r3, [r7, #100]	; 0x64
 8002df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	e017      	b.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d113      	bne.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	4413      	add	r3, r2
 8002e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	011a      	lsls	r2, r3, #4
 8002e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e38:	4413      	add	r3, r2
 8002e3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e3e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e42:	2200      	movs	r2, #0
 8002e44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f00a f8fe 	bl	800d04e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 82f1 	beq.w	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e78:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	441a      	add	r2, r3
 8002e8a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	8013      	strh	r3, [r2, #0]
 8002ea2:	e2cd      	b.n	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d021      	beq.n	8002ef2 <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	f040 82a1 	bne.w	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002f06:	441a      	add	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002f14:	441a      	add	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6a1a      	ldr	r2, [r3, #32]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d30b      	bcc.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6a1a      	ldr	r2, [r3, #32]
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f36:	1ad2      	subs	r2, r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	621a      	str	r2, [r3, #32]
 8002f3c:	e017      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002f46:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f56:	e00a      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d163      	bne.n	800303e <HAL_PCD_EP_DB_Transmit+0x382>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f8a:	4413      	add	r3, r2
 8002f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	011a      	lsls	r2, r3, #4
 8002f94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f9c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d112      	bne.n	8002fcc <HAL_PCD_EP_DB_Transmit+0x310>
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e055      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002fcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd0:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd2:	d817      	bhi.n	8003004 <HAL_PCD_EP_DB_Transmit+0x348>
 8002fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fd8:	085b      	lsrs	r3, r3, #1
 8002fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x338>
 8002fea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	029b      	lsls	r3, r3, #10
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	e039      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800300e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_PCD_EP_DB_Transmit+0x368>
 800301a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800301e:	3b01      	subs	r3, #1
 8003020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003024:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003028:	b29b      	uxth	r3, r3
 800302a:	029b      	lsls	r3, r3, #10
 800302c:	b29b      	uxth	r3, r3
 800302e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003036:	b29a      	uxth	r2, r3
 8003038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303a:	801a      	strh	r2, [r3, #0]
 800303c:	e01c      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	785b      	ldrb	r3, [r3, #1]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d118      	bne.n	8003078 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	653b      	str	r3, [r7, #80]	; 0x50
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003054:	b29b      	uxth	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305a:	4413      	add	r3, r2
 800305c:	653b      	str	r3, [r7, #80]	; 0x50
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	011a      	lsls	r2, r3, #4
 8003064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003066:	4413      	add	r3, r2
 8003068:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800306c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003072:	b29a      	uxth	r2, r3
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6959      	ldr	r1, [r3, #20]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	891a      	ldrh	r2, [r3, #8]
 8003084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003088:	b29b      	uxth	r3, r3
 800308a:	f003 fd3c 	bl	8006b06 <USB_WritePMA>
 800308e:	e1d7      	b.n	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	3306      	adds	r3, #6
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030b8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	699a      	ldr	r2, [r3, #24]
 80030c0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d307      	bcc.n	80030d8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	619a      	str	r2, [r3, #24]
 80030d6:	e002      	b.n	80030de <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 80b9 	bne.w	800325a <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	785b      	ldrb	r3, [r3, #1]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d126      	bne.n	800313e <HAL_PCD_EP_DB_Transmit+0x482>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fe:	b29b      	uxth	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003104:	4413      	add	r3, r2
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	011a      	lsls	r2, r3, #4
 800310e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003110:	4413      	add	r3, r2
 8003112:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003122:	b29a      	uxth	r2, r3
 8003124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003126:	801a      	strh	r2, [r3, #0]
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003136:	b29a      	uxth	r2, r3
 8003138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	e01a      	b.n	8003174 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	785b      	ldrb	r3, [r3, #1]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d116      	bne.n	8003174 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	643b      	str	r3, [r7, #64]	; 0x40
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315a:	4413      	add	r3, r2
 800315c:	643b      	str	r3, [r7, #64]	; 0x40
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003166:	4413      	add	r3, r2
 8003168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800316c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800316e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003170:	2200      	movs	r2, #0
 8003172:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	63bb      	str	r3, [r7, #56]	; 0x38
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d126      	bne.n	80031d0 <HAL_PCD_EP_DB_Transmit+0x514>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	4413      	add	r3, r2
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	011a      	lsls	r2, r3, #4
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	4413      	add	r3, r2
 80031a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	801a      	strh	r2, [r3, #0]
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	801a      	strh	r2, [r3, #0]
 80031ce:	e017      	b.n	8003200 <HAL_PCD_EP_DB_Transmit+0x544>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d113      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x544>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e6:	4413      	add	r3, r2
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	011a      	lsls	r2, r3, #4
 80031f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f2:	4413      	add	r3, r2
 80031f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	2200      	movs	r2, #0
 80031fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f009 ff21 	bl	800d04e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 8114 	bne.w	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	441a      	add	r2, r3
 8003242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]
 8003258:	e0f2      	b.n	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11f      	bne.n	80032a4 <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	f040 80c8 	bne.w	8003440 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80032b8:	441a      	add	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80032c6:	441a      	add	r2, r3
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d30b      	bcc.n	80032f0 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6a1a      	ldr	r2, [r3, #32]
 80032e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e8:	1ad2      	subs	r2, r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	621a      	str	r2, [r3, #32]
 80032ee:	e017      	b.n	8003320 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 80032f8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80032fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003308:	e00a      	b.n	8003320 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	785b      	ldrb	r3, [r3, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d163      	bne.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x73a>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	623b      	str	r3, [r7, #32]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800333c:	b29b      	uxth	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	4413      	add	r3, r2
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	011a      	lsls	r2, r3, #4
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	4413      	add	r3, r2
 8003350:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d112      	bne.n	8003384 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003368:	b29a      	uxth	r2, r3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	801a      	strh	r2, [r3, #0]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b29b      	uxth	r3, r3
 8003374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800337c:	b29a      	uxth	r2, r3
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	e052      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0x76e>
 8003384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003388:	2b3e      	cmp	r3, #62	; 0x3e
 800338a:	d817      	bhi.n	80033bc <HAL_PCD_EP_DB_Transmit+0x700>
 800338c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003390:	085b      	lsrs	r3, r3, #1
 8003392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <HAL_PCD_EP_DB_Transmit+0x6f0>
 80033a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a6:	3301      	adds	r3, #1
 80033a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	e036      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0x76e>
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d104      	bne.n	80033dc <HAL_PCD_EP_DB_Transmit+0x720>
 80033d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033d6:	3b01      	subs	r3, #1
 80033d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	029b      	lsls	r3, r3, #10
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	801a      	strh	r2, [r3, #0]
 80033f4:	e019      	b.n	800342a <HAL_PCD_EP_DB_Transmit+0x76e>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	785b      	ldrb	r3, [r3, #1]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d115      	bne.n	800342a <HAL_PCD_EP_DB_Transmit+0x76e>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	4413      	add	r3, r2
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	011a      	lsls	r2, r3, #4
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	4413      	add	r3, r2
 800341a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003424:	b29a      	uxth	r2, r3
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6959      	ldr	r1, [r3, #20]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	895a      	ldrh	r2, [r3, #10]
 8003436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800343a:	b29b      	uxth	r3, r3
 800343c:	f003 fb63 	bl	8006b06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345a:	82fb      	strh	r3, [r7, #22]
 800345c:	8afb      	ldrh	r3, [r7, #22]
 800345e:	f083 0310 	eor.w	r3, r3, #16
 8003462:	82fb      	strh	r3, [r7, #22]
 8003464:	8afb      	ldrh	r3, [r7, #22]
 8003466:	f083 0320 	eor.w	r3, r3, #32
 800346a:	82fb      	strh	r3, [r7, #22]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348c:	b29b      	uxth	r3, r3
 800348e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3790      	adds	r7, #144	; 0x90
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800349a:	b480      	push	{r7}
 800349c:	b087      	sub	sp, #28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	817b      	strh	r3, [r7, #10]
 80034a8:	4613      	mov	r3, r2
 80034aa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034ac:	897b      	ldrh	r3, [r7, #10]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00b      	beq.n	80034d0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b8:	897b      	ldrh	r3, [r7, #10]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
 80034ce:	e009      	b.n	80034e4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034d0:	897a      	ldrh	r2, [r7, #10]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d107      	bne.n	80034fa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2200      	movs	r2, #0
 80034ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	80da      	strh	r2, [r3, #6]
 80034f8:	e00b      	b.n	8003512 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2201      	movs	r2, #1
 80034fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	b29a      	uxth	r2, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	b29a      	uxth	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
	...

08003520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e26c      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8087 	beq.w	800364e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b04      	cmp	r3, #4
 800354a:	d00c      	beq.n	8003566 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800354c:	4b8f      	ldr	r3, [pc, #572]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 030c 	and.w	r3, r3, #12
 8003554:	2b08      	cmp	r3, #8
 8003556:	d112      	bne.n	800357e <HAL_RCC_OscConfig+0x5e>
 8003558:	4b8c      	ldr	r3, [pc, #560]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003564:	d10b      	bne.n	800357e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003566:	4b89      	ldr	r3, [pc, #548]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d06c      	beq.n	800364c <HAL_RCC_OscConfig+0x12c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d168      	bne.n	800364c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e246      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x76>
 8003588:	4a80      	ldr	r2, [pc, #512]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800358a:	4b80      	ldr	r3, [pc, #512]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e02e      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x98>
 800359e:	4a7b      	ldr	r2, [pc, #492]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	4b7a      	ldr	r3, [pc, #488]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	4a78      	ldr	r2, [pc, #480]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ac:	4b77      	ldr	r3, [pc, #476]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0xbc>
 80035c2:	4a72      	ldr	r2, [pc, #456]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035c4:	4b71      	ldr	r3, [pc, #452]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4a6f      	ldr	r2, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035d0:	4b6e      	ldr	r3, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xd4>
 80035dc:	4a6b      	ldr	r2, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035de:	4b6b      	ldr	r3, [pc, #428]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4a68      	ldr	r2, [pc, #416]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ea:	4b68      	ldr	r3, [pc, #416]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fe22 	bl	8001244 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003604:	f7fd fe1e 	bl	8001244 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e1fa      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b5d      	ldr	r3, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xe4>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fd fe0e 	bl	8001244 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd fe0a 	bl	8001244 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1e6      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0x10c>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800365a:	4b4c      	ldr	r3, [pc, #304]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x18c>
 8003672:	4b46      	ldr	r3, [pc, #280]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b43      	ldr	r3, [pc, #268]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x176>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e1ba      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	493d      	ldr	r1, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003698:	4b3c      	ldr	r3, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ba:	f7fd fdc3 	bl	8001244 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fdbf 	bl	8001244 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e19b      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	492a      	ldr	r1, [pc, #168]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <HAL_RCC_OscConfig+0x270>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd fda2 	bl	8001244 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003704:	f7fd fd9e 	bl	8001244 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e17a      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b1d      	ldr	r3, [pc, #116]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d03a      	beq.n	80037a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d019      	beq.n	800376a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <HAL_RCC_OscConfig+0x274>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fd fd82 	bl	8001244 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003744:	f7fd fd7e 	bl	8001244 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e15a      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_RCC_OscConfig+0x26c>)
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003762:	2001      	movs	r0, #1
 8003764:	f000 faf6 	bl	8003d54 <RCC_Delay>
 8003768:	e01c      	b.n	80037a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376a:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <HAL_RCC_OscConfig+0x274>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003770:	f7fd fd68 	bl	8001244 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003776:	e00f      	b.n	8003798 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003778:	f7fd fd64 	bl	8001244 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d908      	bls.n	8003798 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e140      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	42420000 	.word	0x42420000
 8003794:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	4b9e      	ldr	r3, [pc, #632]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e9      	bne.n	8003778 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80a6 	beq.w	80038fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b2:	2300      	movs	r3, #0
 80037b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b6:	4b97      	ldr	r3, [pc, #604]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c2:	4a94      	ldr	r2, [pc, #592]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	4b93      	ldr	r3, [pc, #588]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	61d3      	str	r3, [r2, #28]
 80037ce:	4b91      	ldr	r3, [pc, #580]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b8e      	ldr	r3, [pc, #568]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d118      	bne.n	800381c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ea:	4a8b      	ldr	r2, [pc, #556]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	4b8a      	ldr	r3, [pc, #552]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f6:	f7fd fd25 	bl	8001244 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fe:	f7fd fd21 	bl	8001244 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b64      	cmp	r3, #100	; 0x64
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0fd      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	4b81      	ldr	r3, [pc, #516]	; (8003a18 <HAL_RCC_OscConfig+0x4f8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x312>
 8003824:	4a7b      	ldr	r2, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003826:	4b7b      	ldr	r3, [pc, #492]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	e02d      	b.n	800388e <HAL_RCC_OscConfig+0x36e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x334>
 800383a:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800383c:	4b75      	ldr	r3, [pc, #468]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	6213      	str	r3, [r2, #32]
 8003846:	4a73      	ldr	r2, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003848:	4b72      	ldr	r3, [pc, #456]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 0304 	bic.w	r3, r3, #4
 8003850:	6213      	str	r3, [r2, #32]
 8003852:	e01c      	b.n	800388e <HAL_RCC_OscConfig+0x36e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b05      	cmp	r3, #5
 800385a:	d10c      	bne.n	8003876 <HAL_RCC_OscConfig+0x356>
 800385c:	4a6d      	ldr	r2, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800385e:	4b6d      	ldr	r3, [pc, #436]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	6213      	str	r3, [r2, #32]
 8003868:	4a6a      	ldr	r2, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800386a:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6213      	str	r3, [r2, #32]
 8003874:	e00b      	b.n	800388e <HAL_RCC_OscConfig+0x36e>
 8003876:	4a67      	ldr	r2, [pc, #412]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	6213      	str	r3, [r2, #32]
 8003882:	4a64      	ldr	r2, [pc, #400]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f023 0304 	bic.w	r3, r3, #4
 800388c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d015      	beq.n	80038c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003896:	f7fd fcd5 	bl	8001244 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fd fcd1 	bl	8001244 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0ab      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b4:	4b57      	ldr	r3, [pc, #348]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ee      	beq.n	800389e <HAL_RCC_OscConfig+0x37e>
 80038c0:	e014      	b.n	80038ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c2:	f7fd fcbf 	bl	8001244 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fcbb 	bl	8001244 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e095      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e0:	4b4c      	ldr	r3, [pc, #304]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ee      	bne.n	80038ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f2:	4a48      	ldr	r2, [pc, #288]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8081 	beq.w	8003a0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003908:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b08      	cmp	r3, #8
 8003912:	d061      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d146      	bne.n	80039aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391c:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_OscConfig+0x4fc>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003922:	f7fd fc8f 	bl	8001244 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392a:	f7fd fc8b 	bl	8001244 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e067      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393c:	4b35      	ldr	r3, [pc, #212]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d108      	bne.n	8003964 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003952:	4930      	ldr	r1, [pc, #192]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003964:	482b      	ldr	r0, [pc, #172]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003966:	4b2b      	ldr	r3, [pc, #172]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a19      	ldr	r1, [r3, #32]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	430b      	orrs	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x4fc>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003982:	f7fd fc5f 	bl	8001244 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fd fc5b 	bl	8001244 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e037      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x46a>
 80039a8:	e02f      	b.n	8003a0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_RCC_OscConfig+0x4fc>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fd fc48 	bl	8001244 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fd fc44 	bl	8001244 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e020      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x498>
 80039d6:	e018      	b.n	8003a0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e013      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x4f4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d106      	bne.n	8003a06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	42420060 	.word	0x42420060

08003a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e0d0      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0207 	and.w	r2, r3, #7
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d210      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4967      	ldr	r1, [pc, #412]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a44:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 0207 	bic.w	r2, r3, #7
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0207 	and.w	r2, r3, #7
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b8      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7c:	4a59      	ldr	r2, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7e:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a94:	4a53      	ldr	r2, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4950      	ldr	r1, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d040      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d115      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ade:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d109      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e073      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afe:	4939      	ldr	r1, [pc, #228]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	4b38      	ldr	r3, [pc, #224]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f023 0203 	bic.w	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b10:	f7fd fb98 	bl	8001244 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b18:	f7fd fb94 	bl	8001244 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e053      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 020c 	and.w	r2, r3, #12
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d1eb      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b40:	4b27      	ldr	r3, [pc, #156]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0207 	and.w	r2, r3, #7
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4924      	ldr	r1, [pc, #144]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	4b23      	ldr	r3, [pc, #140]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 0207 	bic.w	r2, r3, #7
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0207 	and.w	r2, r3, #7
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e032      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4919      	ldr	r1, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b9a:	4912      	ldr	r1, [pc, #72]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bae:	f000 f821 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	5cd3      	ldrb	r3, [r2, r3]
 8003bc2:	fa21 f303 	lsr.w	r3, r1, r3
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1cc>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fc fffc 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40022000 	.word	0x40022000
 8003be4:	40021000 	.word	0x40021000
 8003be8:	0800d794 	.word	0x0800d794
 8003bec:	2000012c 	.word	0x2000012c
 8003bf0:	20000130 	.word	0x20000130

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	b490      	push	{r4, r7}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bfc:	1d3c      	adds	r4, r7, #4
 8003bfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c04:	4b28      	ldr	r3, [pc, #160]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	61fb      	str	r3, [r7, #28]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	2300      	movs	r3, #0
 8003c18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c1e:	4b23      	ldr	r3, [pc, #140]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x40>
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x46>
 8003c32:	e02d      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c34:	4b1e      	ldr	r3, [pc, #120]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c36:	623b      	str	r3, [r7, #32]
      break;
 8003c38:	e02d      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	0c9b      	lsrs	r3, r3, #18
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c46:	4413      	add	r3, r2
 8003c48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c58:	4b14      	ldr	r3, [pc, #80]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c5b      	lsrs	r3, r3, #17
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c66:	4413      	add	r3, r2
 8003c68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c72:	fb02 f203 	mul.w	r2, r2, r3
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c7e:	e004      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	623b      	str	r3, [r7, #32]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c92:	623b      	str	r3, [r7, #32]
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	6a3b      	ldr	r3, [r7, #32]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3728      	adds	r7, #40	; 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc90      	pop	{r4, r7}
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	0800d6dc 	.word	0x0800d6dc
 8003ca8:	0800d6ec 	.word	0x0800d6ec
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	007a1200 	.word	0x007a1200
 8003cb4:	003d0900 	.word	0x003d0900

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cbc:	4b02      	ldr	r3, [pc, #8]	; (8003cc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	2000012c 	.word	0x2000012c

08003ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd0:	f7ff fff2 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003cd4:	4601      	mov	r1, r0
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	4a03      	ldr	r2, [pc, #12]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce2:	5cd3      	ldrb	r3, [r2, r3]
 8003ce4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	0800d7a4 	.word	0x0800d7a4

08003cf4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	220f      	movs	r2, #15
 8003d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d04:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <HAL_RCC_GetClockConfig+0x58>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RCC_GetClockConfig+0x58>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_RCC_GetClockConfig+0x58>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_RCC_GetClockConfig+0x58>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_GetClockConfig+0x5c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0207 	and.w	r2, r3, #7
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40022000 	.word	0x40022000

08003d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <RCC_Delay+0x34>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <RCC_Delay+0x38>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0a5b      	lsrs	r3, r3, #9
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d70:	bf00      	nop
  }
  while (Delay --);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	60fa      	str	r2, [r7, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f9      	bne.n	8003d70 <RCC_Delay+0x1c>
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	2000012c 	.word	0x2000012c
 8003d8c:	10624dd3 	.word	0x10624dd3

08003d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d07d      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003dac:	2300      	movs	r3, #0
 8003dae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db0:	4b4f      	ldr	r3, [pc, #316]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dbc:	4a4c      	ldr	r2, [pc, #304]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	61d3      	str	r3, [r2, #28]
 8003dc8:	4b49      	ldr	r3, [pc, #292]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b46      	ldr	r3, [pc, #280]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d118      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003de4:	4a43      	ldr	r2, [pc, #268]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de6:	4b43      	ldr	r3, [pc, #268]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df0:	f7fd fa28 	bl	8001244 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df6:	e008      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd fa24 	bl	8001244 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e06d      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e16:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d02e      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d027      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e44:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e4a:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d014      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fd f9f3 	bl	8001244 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	e00a      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fd f9ef 	bl	8001244 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e036      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0ee      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e84:	491a      	ldr	r1, [pc, #104]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e96:	7dfb      	ldrb	r3, [r7, #23]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ed2:	4907      	ldr	r1, [pc, #28]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	42420440 	.word	0x42420440

08003efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fc ff24 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f000 fa64 	bl	8004408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d001      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e03a      	b.n	800402a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	68d2      	ldr	r2, [r2, #12]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_TIM_Base_Start_IT+0x98>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_TIM_Base_Start_IT+0xa0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800

08004040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0202 	mvn.w	r2, #2
 800406c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9a4 	bl	80043d0 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f997 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f9a6 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d122      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0204 	mvn.w	r2, #4
 80040c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2202      	movs	r2, #2
 80040c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f97a 	bl	80043d0 <HAL_TIM_IC_CaptureCallback>
 80040dc:	e005      	b.n	80040ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f96d 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f97c 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d122      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0208 	mvn.w	r2, #8
 8004114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f950 	bl	80043d0 <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f943 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f952 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2208      	movs	r2, #8
 800416e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f926 	bl	80043d0 <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f919 	bl	80043be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f928 	bl	80043e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10e      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0201 	mvn.w	r2, #1
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fcb6 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041dc:	2b80      	cmp	r3, #128	; 0x80
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa6b 	bl	80046c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8ec 	bl	80043f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b20      	cmp	r3, #32
 8004228:	d10e      	bne.n	8004248 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b20      	cmp	r3, #32
 8004236:	d107      	bne.n	8004248 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0220 	mvn.w	r2, #32
 8004240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa36 	bl	80046b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIM_ConfigClockSource+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e0a6      	b.n	80043b6 <HAL_TIM_ConfigClockSource+0x166>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004286:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d067      	beq.n	8004370 <HAL_TIM_ConfigClockSource+0x120>
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d80b      	bhi.n	80042bc <HAL_TIM_ConfigClockSource+0x6c>
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d073      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x140>
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d802      	bhi.n	80042b2 <HAL_TIM_ConfigClockSource+0x62>
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d06f      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042b0:	e078      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d06c      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x140>
 80042b6:	2b30      	cmp	r3, #48	; 0x30
 80042b8:	d06a      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80042ba:	e073      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042bc:	2b70      	cmp	r3, #112	; 0x70
 80042be:	d00d      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x8c>
 80042c0:	2b70      	cmp	r3, #112	; 0x70
 80042c2:	d804      	bhi.n	80042ce <HAL_TIM_ConfigClockSource+0x7e>
 80042c4:	2b50      	cmp	r3, #80	; 0x50
 80042c6:	d033      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xe0>
 80042c8:	2b60      	cmp	r3, #96	; 0x60
 80042ca:	d041      	beq.n	8004350 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80042cc:	e06a      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d066      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0x152>
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	d017      	beq.n	800430a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80042da:	e063      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f000 f965 	bl	80045ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042fe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
      break;
 8004308:	e04c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6899      	ldr	r1, [r3, #8]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f000 f94e 	bl	80045ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432c:	609a      	str	r2, [r3, #8]
      break;
 800432e:	e039      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6818      	ldr	r0, [r3, #0]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	6859      	ldr	r1, [r3, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	461a      	mov	r2, r3
 800433e:	f000 f8c5 	bl	80044cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2150      	movs	r1, #80	; 0x50
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f91c 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 800434e:	e029      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	461a      	mov	r2, r3
 800435e:	f000 f8e3 	bl	8004528 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2160      	movs	r1, #96	; 0x60
 8004368:	4618      	mov	r0, r3
 800436a:	f000 f90c 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 800436e:	e019      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	461a      	mov	r2, r3
 800437e:	f000 f8a5 	bl	80044cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2140      	movs	r1, #64	; 0x40
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f8fc 	bl	8004586 <TIM_ITRx_SetConfig>
      break;
 800438e:	e009      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	4610      	mov	r0, r2
 800439c:	f000 f8f3 	bl	8004586 <TIM_ITRx_SetConfig>
        break;
 80043a0:	e000      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80043a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bc80      	pop	{r7}
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
	...

08004408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a29      	ldr	r2, [pc, #164]	; (80044c0 <TIM_Base_SetConfig+0xb8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a26      	ldr	r2, [pc, #152]	; (80044c4 <TIM_Base_SetConfig+0xbc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x30>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <TIM_Base_SetConfig+0xc0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <TIM_Base_SetConfig+0xb8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d007      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a19      	ldr	r2, [pc, #100]	; (80044c4 <TIM_Base_SetConfig+0xbc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_Base_SetConfig+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <TIM_Base_SetConfig+0xc0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d108      	bne.n	800447c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4313      	orrs	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a07      	ldr	r2, [pc, #28]	; (80044c0 <TIM_Base_SetConfig+0xb8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	615a      	str	r2, [r3, #20]
}
 80044b6:	bf00      	nop
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800

080044cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 030a 	bic.w	r3, r3, #10
 8004508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	621a      	str	r2, [r3, #32]
}
 800451e:	bf00      	nop
 8004520:	371c      	adds	r7, #28
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f023 0210 	bic.w	r2, r3, #16
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004552:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	031b      	lsls	r3, r3, #12
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	621a      	str	r2, [r3, #32]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f043 0307 	orr.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc80      	pop	{r7}
 80045b8:	4770      	bx	lr

080045ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	021a      	lsls	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	431a      	orrs	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	609a      	str	r2, [r3, #8]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800460c:	2302      	movs	r3, #2
 800460e:	e046      	b.n	800469e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00e      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465c:	d009      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a12      	ldr	r2, [pc, #72]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d004      	beq.n	8004672 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10c      	bne.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004678:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	4313      	orrs	r3, r2
 8004682:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800

080046b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046d8:	b084      	sub	sp, #16
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	f107 0014 	add.w	r0, r7, #20
 80046e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr

080046f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004708:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800470c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800472c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004730:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	b29b      	uxth	r3, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	4013      	ands	r3, r2
 8004744:	b29a      	uxth	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr

08004770 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004770:	b084      	sub	sp, #16
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	f107 0014 	add.w	r0, r7, #20
 800477e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	b004      	add	sp, #16
 80047ae:	4770      	bx	lr

080047b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr

080047c6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047dc:	b480      	push	{r7}
 80047de:	b09b      	sub	sp, #108	; 0x6c
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	78db      	ldrb	r3, [r3, #3]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d81f      	bhi.n	800484e <USB_ActivateEndpoint+0x72>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <USB_ActivateEndpoint+0x38>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004825 	.word	0x08004825
 8004818:	08004841 	.word	0x08004841
 800481c:	08004857 	.word	0x08004857
 8004820:	08004833 	.word	0x08004833
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004824:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800482c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004830:	e012      	b.n	8004858 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004832:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004836:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800483a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800483e:	e00b      	b.n	8004858 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004840:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004844:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004848:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800484c:	e004      	b.n	8004858 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004854:	e000      	b.n	8004858 <USB_ActivateEndpoint+0x7c>
      break;
 8004856:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	441a      	add	r2, r3
 8004862:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004876:	b29b      	uxth	r3, r3
 8004878:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004890:	b29a      	uxth	r2, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b29b      	uxth	r3, r3
 8004898:	4313      	orrs	r3, r2
 800489a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	7b1b      	ldrb	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 8153 	bne.w	8004b70 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	785b      	ldrb	r3, [r3, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 808e 	beq.w	80049f0 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048e4:	4413      	add	r3, r2
 80048e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	011a      	lsls	r2, r3, #4
 80048ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f6:	657b      	str	r3, [r7, #84]	; 0x54
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	88db      	ldrh	r3, [r3, #6]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004906:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004918:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01d      	beq.n	8004960 <USB_ActivateEndpoint+0x184>
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	441a      	add	r2, r3
 8004948:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800494c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004958:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800495c:	b29b      	uxth	r3, r3
 800495e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	78db      	ldrb	r3, [r3, #3]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d024      	beq.n	80049b2 <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004982:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004986:	f083 0320 	eor.w	r3, r3, #32
 800498a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800499c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	8013      	strh	r3, [r2, #0]
 80049b0:	e271      	b.n	8004e96 <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	441a      	add	r2, r3
 80049d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
 80049ee:	e252      	b.n	8004e96 <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a00:	4413      	add	r3, r2
 8004a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	88db      	ldrh	r3, [r3, #6]
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a22:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a34:	4413      	add	r3, r2
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	011a      	lsls	r2, r3, #4
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a40:	4413      	add	r3, r2
 8004a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d112      	bne.n	8004a76 <USB_ActivateEndpoint+0x29a>
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a72:	801a      	strh	r2, [r3, #0]
 8004a74:	e02f      	b.n	8004ad6 <USB_ActivateEndpoint+0x2fa>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b3e      	cmp	r3, #62	; 0x3e
 8004a7c:	d813      	bhi.n	8004aa6 <USB_ActivateEndpoint+0x2ca>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	663b      	str	r3, [r7, #96]	; 0x60
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <USB_ActivateEndpoint+0x2bc>
 8004a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a94:	3301      	adds	r3, #1
 8004a96:	663b      	str	r3, [r7, #96]	; 0x60
 8004a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	e017      	b.n	8004ad6 <USB_ActivateEndpoint+0x2fa>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	095b      	lsrs	r3, r3, #5
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <USB_ActivateEndpoint+0x2e4>
 8004aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004abc:	3b01      	subs	r3, #1
 8004abe:	663b      	str	r3, [r7, #96]	; 0x60
 8004ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	029b      	lsls	r3, r3, #10
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004acc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ae4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01b      	beq.n	8004b26 <USB_ActivateEndpoint+0x34a>
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b44:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
 8004b6e:	e192      	b.n	8004e96 <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	4413      	add	r3, r2
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	011a      	lsls	r2, r3, #4
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	891b      	ldrh	r3, [r3, #8]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	801a      	strh	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	4413      	add	r3, r2
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	011a      	lsls	r2, r3, #4
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	895b      	ldrh	r3, [r3, #10]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 8091 	bne.w	8004d3c <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d01b      	beq.n	8004c6a <USB_ActivateEndpoint+0x48e>
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	843b      	strh	r3, [r7, #32]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	441a      	add	r2, r3
 8004c54:	8c3b      	ldrh	r3, [r7, #32]
 8004c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	83fb      	strh	r3, [r7, #30]
 8004c78:	8bfb      	ldrh	r3, [r7, #30]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01b      	beq.n	8004cba <USB_ActivateEndpoint+0x4de>
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c98:	83bb      	strh	r3, [r7, #28]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	441a      	add	r2, r3
 8004ca4:	8bbb      	ldrh	r3, [r7, #28]
 8004ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd0:	837b      	strh	r3, [r7, #26]
 8004cd2:	8b7b      	ldrh	r3, [r7, #26]
 8004cd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cd8:	837b      	strh	r3, [r7, #26]
 8004cda:	8b7b      	ldrh	r3, [r7, #26]
 8004cdc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ce0:	837b      	strh	r3, [r7, #26]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	8b7b      	ldrh	r3, [r7, #26]
 8004cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d18:	833b      	strh	r3, [r7, #24]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	8b3b      	ldrh	r3, [r7, #24]
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]
 8004d3a:	e0ac      	b.n	8004e96 <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	82fb      	strh	r3, [r7, #22]
 8004d4a:	8afb      	ldrh	r3, [r7, #22]
 8004d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <USB_ActivateEndpoint+0x5b0>
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	82bb      	strh	r3, [r7, #20]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	8abb      	ldrh	r3, [r7, #20]
 8004d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	827b      	strh	r3, [r7, #18]
 8004d9a:	8a7b      	ldrh	r3, [r7, #18]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <USB_ActivateEndpoint+0x600>
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	823b      	strh	r3, [r7, #16]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	8a3b      	ldrh	r3, [r7, #16]
 8004dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	78db      	ldrb	r3, [r3, #3]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d020      	beq.n	8004e26 <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dfa:	81fb      	strh	r3, [r7, #14]
 8004dfc:	89fb      	ldrh	r3, [r7, #14]
 8004dfe:	f083 0320 	eor.w	r3, r3, #32
 8004e02:	81fb      	strh	r3, [r7, #14]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8013      	strh	r3, [r2, #0]
 8004e24:	e01b      	b.n	8004e5e <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3c:	81bb      	strh	r3, [r7, #12]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	441a      	add	r2, r3
 8004e48:	89bb      	ldrh	r3, [r7, #12]
 8004e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e74:	817b      	strh	r3, [r7, #10]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	441a      	add	r2, r3
 8004e80:	897b      	ldrh	r3, [r7, #10]
 8004e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004e96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	376c      	adds	r7, #108	; 0x6c
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b08d      	sub	sp, #52	; 0x34
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	7b1b      	ldrb	r3, [r3, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 808e 	bne.w	8004fd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d044      	beq.n	8004f4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ece:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <USB_DeactivateEndpoint+0x6c>
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	441a      	add	r2, r3
 8004efa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004efc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	441a      	add	r2, r3
 8004f32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	8013      	strh	r3, [r2, #0]
 8004f48:	e192      	b.n	8005270 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d01b      	beq.n	8004f9a <USB_DeactivateEndpoint+0xf6>
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]
 8004fd2:	e14d      	b.n	8005270 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f040 80a5 	bne.w	8005128 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01b      	beq.n	800502e <USB_DeactivateEndpoint+0x18a>
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	4413      	add	r3, r2
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500c:	843b      	strh	r3, [r7, #32]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	441a      	add	r2, r3
 8005018:	8c3b      	ldrh	r3, [r7, #32]
 800501a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800502a:	b29b      	uxth	r3, r3
 800502c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	83fb      	strh	r3, [r7, #30]
 800503c:	8bfb      	ldrh	r3, [r7, #30]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <USB_DeactivateEndpoint+0x1da>
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505c:	83bb      	strh	r3, [r7, #28]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	441a      	add	r2, r3
 8005068:	8bbb      	ldrh	r3, [r7, #28]
 800506a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800506e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800507a:	b29b      	uxth	r3, r3
 800507c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005094:	837b      	strh	r3, [r7, #26]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	8b7b      	ldrh	r3, [r7, #26]
 80050a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050cc:	833b      	strh	r3, [r7, #24]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	441a      	add	r2, r3
 80050d8:	8b3b      	ldrh	r3, [r7, #24]
 80050da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	82fb      	strh	r3, [r7, #22]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	8afb      	ldrh	r3, [r7, #22]
 8005112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005122:	b29b      	uxth	r3, r3
 8005124:	8013      	strh	r3, [r2, #0]
 8005126:	e0a3      	b.n	8005270 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	82bb      	strh	r3, [r7, #20]
 8005136:	8abb      	ldrh	r3, [r7, #20]
 8005138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <USB_DeactivateEndpoint+0x2d4>
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005156:	827b      	strh	r3, [r7, #18]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	8a7b      	ldrh	r3, [r7, #18]
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	823b      	strh	r3, [r7, #16]
 8005186:	8a3b      	ldrh	r3, [r7, #16]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <USB_DeactivateEndpoint+0x324>
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	81fb      	strh	r3, [r7, #14]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	441a      	add	r2, r3
 80051b2:	89fb      	ldrh	r3, [r7, #14]
 80051b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	81bb      	strh	r3, [r7, #12]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	441a      	add	r2, r3
 80051ea:	89bb      	ldrh	r3, [r7, #12]
 80051ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005216:	817b      	strh	r3, [r7, #10]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	813b      	strh	r3, [r7, #8]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	441a      	add	r2, r3
 800525a:	893b      	ldrh	r3, [r7, #8]
 800525c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800526c:	b29b      	uxth	r3, r3
 800526e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3734      	adds	r7, #52	; 0x34
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b0ce      	sub	sp, #312	; 0x138
 8005280:	af00      	add	r7, sp, #0
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	6018      	str	r0, [r3, #0]
 8005286:	463b      	mov	r3, r7
 8005288:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800528a:	463b      	mov	r3, r7
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b01      	cmp	r3, #1
 8005292:	f040 873e 	bne.w	8006112 <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005296:	463b      	mov	r3, r7
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699a      	ldr	r2, [r3, #24]
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d905      	bls.n	80052b2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80052a6:	463b      	mov	r3, r7
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80052b0:	e004      	b.n	80052bc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80052b2:	463b      	mov	r3, r7
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	7b1b      	ldrb	r3, [r3, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d12e      	bne.n	8005324 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6959      	ldr	r1, [r3, #20]
 80052cc:	463b      	mov	r3, r7
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	88da      	ldrh	r2, [r3, #6]
 80052d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	1d38      	adds	r0, r7, #4
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	f001 fc13 	bl	8006b06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052f8:	4413      	add	r3, r2
 80052fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	011a      	lsls	r2, r3, #4
 8005306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800530a:	4413      	add	r3, r2
 800530c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005314:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005318:	b29a      	uxth	r2, r3
 800531a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800531e:	801a      	strh	r2, [r3, #0]
 8005320:	f000 bec2 	b.w	80060a8 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005324:	463b      	mov	r3, r7
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	78db      	ldrb	r3, [r3, #3]
 800532a:	2b02      	cmp	r3, #2
 800532c:	f040 836a 	bne.w	8005a04 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	463b      	mov	r3, r7
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	429a      	cmp	r2, r3
 800533e:	f240 830e 	bls.w	800595e <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005386:	463b      	mov	r3, r7
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005390:	1ad2      	subs	r2, r2, r3
 8005392:	463b      	mov	r3, r7
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	463b      	mov	r3, r7
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 817c 	beq.w	80056ac <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053bc:	463b      	mov	r3, r7
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d16f      	bne.n	80054a6 <USB_EPStartXfer+0x22a>
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053de:	4413      	add	r3, r2
 80053e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053e4:	463b      	mov	r3, r7
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	011a      	lsls	r2, r3, #4
 80053ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053f0:	4413      	add	r3, r2
 80053f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d116      	bne.n	8005430 <USB_EPStartXfer+0x1b4>
 8005402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800540e:	b29a      	uxth	r2, r3
 8005410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005426:	b29a      	uxth	r2, r3
 8005428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	e05b      	b.n	80054e8 <USB_EPStartXfer+0x26c>
 8005430:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005434:	2b3e      	cmp	r3, #62	; 0x3e
 8005436:	d818      	bhi.n	800546a <USB_EPStartXfer+0x1ee>
 8005438:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <USB_EPStartXfer+0x1dc>
 800544e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005452:	3301      	adds	r3, #1
 8005454:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005458:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800545c:	b29b      	uxth	r3, r3
 800545e:	029b      	lsls	r3, r3, #10
 8005460:	b29a      	uxth	r2, r3
 8005462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	e03e      	b.n	80054e8 <USB_EPStartXfer+0x26c>
 800546a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005474:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <USB_EPStartXfer+0x20e>
 8005480:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005484:	3b01      	subs	r3, #1
 8005486:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800548a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29b      	uxth	r3, r3
 8005494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e020      	b.n	80054e8 <USB_EPStartXfer+0x26c>
 80054a6:	463b      	mov	r3, r7
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d11b      	bne.n	80054e8 <USB_EPStartXfer+0x26c>
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054c0:	4413      	add	r3, r2
 80054c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054c6:	463b      	mov	r3, r7
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	011a      	lsls	r2, r3, #4
 80054ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054d2:	4413      	add	r3, r2
 80054d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054e8:	463b      	mov	r3, r7
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	895b      	ldrh	r3, [r3, #10]
 80054ee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f2:	463b      	mov	r3, r7
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6959      	ldr	r1, [r3, #20]
 80054f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005502:	1d38      	adds	r0, r7, #4
 8005504:	6800      	ldr	r0, [r0, #0]
 8005506:	f001 fafe 	bl	8006b06 <USB_WritePMA>
            ep->xfer_buff += len;
 800550a:	463b      	mov	r3, r7
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005514:	441a      	add	r2, r3
 8005516:	463b      	mov	r3, r7
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	463b      	mov	r3, r7
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	429a      	cmp	r2, r3
 800552a:	d909      	bls.n	8005540 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 800552c:	463b      	mov	r3, r7
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	621a      	str	r2, [r3, #32]
 800553e:	e008      	b.n	8005552 <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 8005540:	463b      	mov	r3, r7
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 800554a:	463b      	mov	r3, r7
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005552:	463b      	mov	r3, r7
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	785b      	ldrb	r3, [r3, #1]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d16f      	bne.n	800563c <USB_EPStartXfer+0x3c0>
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005564:	1d3b      	adds	r3, r7, #4
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005574:	4413      	add	r3, r2
 8005576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	011a      	lsls	r2, r3, #4
 8005582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005586:	4413      	add	r3, r2
 8005588:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800558c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005594:	2b00      	cmp	r3, #0
 8005596:	d116      	bne.n	80055c6 <USB_EPStartXfer+0x34a>
 8005598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e05f      	b.n	8005686 <USB_EPStartXfer+0x40a>
 80055c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055ca:	2b3e      	cmp	r3, #62	; 0x3e
 80055cc:	d818      	bhi.n	8005600 <USB_EPStartXfer+0x384>
 80055ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d004      	beq.n	80055ee <USB_EPStartXfer+0x372>
 80055e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e8:	3301      	adds	r3, #1
 80055ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	029b      	lsls	r3, r3, #10
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e042      	b.n	8005686 <USB_EPStartXfer+0x40a>
 8005600:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800560a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <USB_EPStartXfer+0x3a4>
 8005616:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561a:	3b01      	subs	r3, #1
 800561c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005624:	b29b      	uxth	r3, r3
 8005626:	029b      	lsls	r3, r3, #10
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e024      	b.n	8005686 <USB_EPStartXfer+0x40a>
 800563c:	463b      	mov	r3, r7
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d11f      	bne.n	8005686 <USB_EPStartXfer+0x40a>
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005656:	b29b      	uxth	r3, r3
 8005658:	461a      	mov	r2, r3
 800565a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800565e:	4413      	add	r3, r2
 8005660:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005664:	463b      	mov	r3, r7
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	011a      	lsls	r2, r3, #4
 800566c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005670:	4413      	add	r3, r2
 8005672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005676:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800567a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800567e:	b29a      	uxth	r2, r3
 8005680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005684:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005686:	463b      	mov	r3, r7
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	891b      	ldrh	r3, [r3, #8]
 800568c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005690:	463b      	mov	r3, r7
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6959      	ldr	r1, [r3, #20]
 8005696:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800569a:	b29b      	uxth	r3, r3
 800569c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80056a0:	1d38      	adds	r0, r7, #4
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	f001 fa2f 	bl	8006b06 <USB_WritePMA>
 80056a8:	f000 bcfe 	b.w	80060a8 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056ac:	463b      	mov	r3, r7
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d164      	bne.n	8005780 <USB_EPStartXfer+0x504>
 80056b6:	1d3b      	adds	r3, r7, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056bc:	1d3b      	adds	r3, r7, #4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ca:	4413      	add	r3, r2
 80056cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	011a      	lsls	r2, r3, #4
 80056d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056d8:	4413      	add	r3, r2
 80056da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056de:	67bb      	str	r3, [r7, #120]	; 0x78
 80056e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d112      	bne.n	800570e <USB_EPStartXfer+0x492>
 80056e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005706:	b29a      	uxth	r2, r3
 8005708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	e057      	b.n	80057be <USB_EPStartXfer+0x542>
 800570e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005712:	2b3e      	cmp	r3, #62	; 0x3e
 8005714:	d817      	bhi.n	8005746 <USB_EPStartXfer+0x4ca>
 8005716:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800571a:	085b      	lsrs	r3, r3, #1
 800571c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005720:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <USB_EPStartXfer+0x4ba>
 800572c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005730:	3301      	adds	r3, #1
 8005732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800573a:	b29b      	uxth	r3, r3
 800573c:	029b      	lsls	r3, r3, #10
 800573e:	b29a      	uxth	r2, r3
 8005740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	e03b      	b.n	80057be <USB_EPStartXfer+0x542>
 8005746:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005750:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005754:	f003 031f 	and.w	r3, r3, #31
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <USB_EPStartXfer+0x4ea>
 800575c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005760:	3b01      	subs	r3, #1
 8005762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800576a:	b29b      	uxth	r3, r3
 800576c:	029b      	lsls	r3, r3, #10
 800576e:	b29b      	uxth	r3, r3
 8005770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005778:	b29a      	uxth	r2, r3
 800577a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	e01e      	b.n	80057be <USB_EPStartXfer+0x542>
 8005780:	463b      	mov	r3, r7
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d119      	bne.n	80057be <USB_EPStartXfer+0x542>
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	677b      	str	r3, [r7, #116]	; 0x74
 8005790:	1d3b      	adds	r3, r7, #4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005798:	b29b      	uxth	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579e:	4413      	add	r3, r2
 80057a0:	677b      	str	r3, [r7, #116]	; 0x74
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	011a      	lsls	r2, r3, #4
 80057aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ac:	4413      	add	r3, r2
 80057ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057b2:	673b      	str	r3, [r7, #112]	; 0x70
 80057b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057be:	463b      	mov	r3, r7
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	891b      	ldrh	r3, [r3, #8]
 80057c4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c8:	463b      	mov	r3, r7
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6959      	ldr	r1, [r3, #20]
 80057ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80057d8:	1d38      	adds	r0, r7, #4
 80057da:	6800      	ldr	r0, [r0, #0]
 80057dc:	f001 f993 	bl	8006b06 <USB_WritePMA>
            ep->xfer_buff += len;
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057ea:	441a      	add	r2, r3
 80057ec:	463b      	mov	r3, r7
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d909      	bls.n	8005816 <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 8005802:	463b      	mov	r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a1a      	ldr	r2, [r3, #32]
 8005808:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800580c:	1ad2      	subs	r2, r2, r3
 800580e:	463b      	mov	r3, r7
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	621a      	str	r2, [r3, #32]
 8005814:	e008      	b.n	8005828 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8005820:	463b      	mov	r3, r7
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2200      	movs	r2, #0
 8005826:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d164      	bne.n	8005902 <USB_EPStartXfer+0x686>
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	66bb      	str	r3, [r7, #104]	; 0x68
 800583e:	1d3b      	adds	r3, r7, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005846:	b29b      	uxth	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800584c:	4413      	add	r3, r2
 800584e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	011a      	lsls	r2, r3, #4
 8005858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800585a:	4413      	add	r3, r2
 800585c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005860:	667b      	str	r3, [r7, #100]	; 0x64
 8005862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005866:	2b00      	cmp	r3, #0
 8005868:	d112      	bne.n	8005890 <USB_EPStartXfer+0x614>
 800586a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005874:	b29a      	uxth	r2, r3
 8005876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005878:	801a      	strh	r2, [r3, #0]
 800587a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005888:	b29a      	uxth	r2, r3
 800588a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	e054      	b.n	800593a <USB_EPStartXfer+0x6be>
 8005890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005894:	2b3e      	cmp	r3, #62	; 0x3e
 8005896:	d817      	bhi.n	80058c8 <USB_EPStartXfer+0x64c>
 8005898:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d004      	beq.n	80058b8 <USB_EPStartXfer+0x63c>
 80058ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058b2:	3301      	adds	r3, #1
 80058b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058bc:	b29b      	uxth	r3, r3
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e038      	b.n	800593a <USB_EPStartXfer+0x6be>
 80058c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058d6:	f003 031f 	and.w	r3, r3, #31
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d104      	bne.n	80058e8 <USB_EPStartXfer+0x66c>
 80058de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058e2:	3b01      	subs	r3, #1
 80058e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80058e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	029b      	lsls	r3, r3, #10
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	e01b      	b.n	800593a <USB_EPStartXfer+0x6be>
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b01      	cmp	r3, #1
 800590a:	d116      	bne.n	800593a <USB_EPStartXfer+0x6be>
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	4413      	add	r3, r2
 800591c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	011a      	lsls	r2, r3, #4
 8005926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005928:	4413      	add	r3, r2
 800592a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800592e:	663b      	str	r3, [r7, #96]	; 0x60
 8005930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005934:	b29a      	uxth	r2, r3
 8005936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005938:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800593a:	463b      	mov	r3, r7
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	895b      	ldrh	r3, [r3, #10]
 8005940:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005944:	463b      	mov	r3, r7
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6959      	ldr	r1, [r3, #20]
 800594a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800594e:	b29b      	uxth	r3, r3
 8005950:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005954:	1d38      	adds	r0, r7, #4
 8005956:	6800      	ldr	r0, [r0, #0]
 8005958:	f001 f8d5 	bl	8006b06 <USB_WritePMA>
 800595c:	e3a4      	b.n	80060a8 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	463b      	mov	r3, r7
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059c0:	4413      	add	r3, r2
 80059c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	011a      	lsls	r2, r3, #4
 80059cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ce:	4413      	add	r3, r2
 80059d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059d4:	657b      	str	r3, [r7, #84]	; 0x54
 80059d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059da:	b29a      	uxth	r2, r3
 80059dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	891b      	ldrh	r3, [r3, #8]
 80059e6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6959      	ldr	r1, [r3, #20]
 80059f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80059fa:	1d38      	adds	r0, r7, #4
 80059fc:	6800      	ldr	r0, [r0, #0]
 80059fe:	f001 f882 	bl	8006b06 <USB_WritePMA>
 8005a02:	e351      	b.n	80060a8 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005a04:	1d3b      	adds	r3, r7, #4
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	463b      	mov	r3, r7
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005a22:	1d3b      	adds	r3, r7, #4
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	463b      	mov	r3, r7
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005a48:	463b      	mov	r3, r7
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6a1a      	ldr	r2, [r3, #32]
 8005a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	463b      	mov	r3, r7
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a5a:	1d3b      	adds	r3, r7, #4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	463b      	mov	r3, r7
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8178 	beq.w	8005d66 <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7c:	463b      	mov	r3, r7
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d164      	bne.n	8005b50 <USB_EPStartXfer+0x8d4>
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9a:	4413      	add	r3, r2
 8005a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a9e:	463b      	mov	r3, r7
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	011a      	lsls	r2, r3, #4
 8005aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aae:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d112      	bne.n	8005ade <USB_EPStartXfer+0x862>
 8005ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ada:	801a      	strh	r2, [r3, #0]
 8005adc:	e054      	b.n	8005b88 <USB_EPStartXfer+0x90c>
 8005ade:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ae2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae4:	d817      	bhi.n	8005b16 <USB_EPStartXfer+0x89a>
 8005ae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005af0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <USB_EPStartXfer+0x88a>
 8005afc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b00:	3301      	adds	r3, #1
 8005b02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b12:	801a      	strh	r2, [r3, #0]
 8005b14:	e038      	b.n	8005b88 <USB_EPStartXfer+0x90c>
 8005b16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d104      	bne.n	8005b36 <USB_EPStartXfer+0x8ba>
 8005b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b30:	3b01      	subs	r3, #1
 8005b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	029b      	lsls	r3, r3, #10
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e01b      	b.n	8005b88 <USB_EPStartXfer+0x90c>
 8005b50:	463b      	mov	r3, r7
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d116      	bne.n	8005b88 <USB_EPStartXfer+0x90c>
 8005b5a:	1d3b      	adds	r3, r7, #4
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	4413      	add	r3, r2
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	011a      	lsls	r2, r3, #4
 8005b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b76:	4413      	add	r3, r2
 8005b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	895b      	ldrh	r3, [r3, #10]
 8005b8e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b92:	463b      	mov	r3, r7
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6959      	ldr	r1, [r3, #20]
 8005b98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005ba2:	1d38      	adds	r0, r7, #4
 8005ba4:	6800      	ldr	r0, [r0, #0]
 8005ba6:	f000 ffae 	bl	8006b06 <USB_WritePMA>
          ep->xfer_buff += len;
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bb4:	441a      	add	r2, r3
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a1a      	ldr	r2, [r3, #32]
 8005bc2:	463b      	mov	r3, r7
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d909      	bls.n	8005be0 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bd6:	1ad2      	subs	r2, r2, r3
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	621a      	str	r2, [r3, #32]
 8005bde:	e008      	b.n	8005bf2 <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a1b      	ldr	r3, [r3, #32]
 8005be6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005bea:	463b      	mov	r3, r7
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8256 	beq.w	80060a8 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005bfc:	463b      	mov	r3, r7
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	785b      	ldrb	r3, [r3, #1]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d172      	bne.n	8005cec <USB_EPStartXfer+0xa70>
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0c:	1d3b      	adds	r3, r7, #4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1a:	4413      	add	r3, r2
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c1e:	463b      	mov	r3, r7
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	011a      	lsls	r2, r3, #4
 8005c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11a      	bne.n	8005c72 <USB_EPStartXfer+0x9f6>
 8005c3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e067      	b.n	8005d42 <USB_EPStartXfer+0xac6>
 8005c72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c76:	2b3e      	cmp	r3, #62	; 0x3e
 8005c78:	d819      	bhi.n	8005cae <USB_EPStartXfer+0xa32>
 8005c7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <USB_EPStartXfer+0xa1e>
 8005c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c94:	3301      	adds	r3, #1
 8005c96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e049      	b.n	8005d42 <USB_EPStartXfer+0xac6>
 8005cae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <USB_EPStartXfer+0xa52>
 8005cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005cce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	029b      	lsls	r3, r3, #10
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	e02a      	b.n	8005d42 <USB_EPStartXfer+0xac6>
 8005cec:	463b      	mov	r3, r7
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d125      	bne.n	8005d42 <USB_EPStartXfer+0xac6>
 8005cf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005cfa:	1d3a      	adds	r2, r7, #4
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	440a      	add	r2, r1
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	011a      	lsls	r2, r3, #4
 8005d22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d42:	463b      	mov	r3, r7
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	891b      	ldrh	r3, [r3, #8]
 8005d48:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6959      	ldr	r1, [r3, #20]
 8005d52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005d5c:	1d38      	adds	r0, r7, #4
 8005d5e:	6800      	ldr	r0, [r0, #0]
 8005d60:	f000 fed1 	bl	8006b06 <USB_WritePMA>
 8005d64:	e1a0      	b.n	80060a8 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	785b      	ldrb	r3, [r3, #1]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d17a      	bne.n	8005e66 <USB_EPStartXfer+0xbea>
 8005d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d74:	1d3a      	adds	r2, r7, #4
 8005d76:	6812      	ldr	r2, [r2, #0]
 8005d78:	601a      	str	r2, [r3, #0]
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d8a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	440a      	add	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	011a      	lsls	r2, r3, #4
 8005d9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d11a      	bne.n	8005dec <USB_EPStartXfer+0xb70>
 8005db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e067      	b.n	8005ebc <USB_EPStartXfer+0xc40>
 8005dec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005df0:	2b3e      	cmp	r3, #62	; 0x3e
 8005df2:	d819      	bhi.n	8005e28 <USB_EPStartXfer+0xbac>
 8005df4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005df8:	085b      	lsrs	r3, r3, #1
 8005dfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005dfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d004      	beq.n	8005e14 <USB_EPStartXfer+0xb98>
 8005e0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e0e:	3301      	adds	r3, #1
 8005e10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e049      	b.n	8005ebc <USB_EPStartXfer+0xc40>
 8005e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e36:	f003 031f 	and.w	r3, r3, #31
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d104      	bne.n	8005e48 <USB_EPStartXfer+0xbcc>
 8005e3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e42:	3b01      	subs	r3, #1
 8005e44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	e02a      	b.n	8005ebc <USB_EPStartXfer+0xc40>
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d125      	bne.n	8005ebc <USB_EPStartXfer+0xc40>
 8005e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e74:	1d3a      	adds	r2, r7, #4
 8005e76:	6812      	ldr	r2, [r2, #0]
 8005e78:	601a      	str	r2, [r3, #0]
 8005e7a:	1d3b      	adds	r3, r7, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4619      	mov	r1, r3
 8005e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	440a      	add	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	463b      	mov	r3, r7
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	011a      	lsls	r2, r3, #4
 8005e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ea8:	f107 0320 	add.w	r3, r7, #32
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	f107 0320 	add.w	r3, r7, #32
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ebc:	463b      	mov	r3, r7
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	891b      	ldrh	r3, [r3, #8]
 8005ec2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6959      	ldr	r1, [r3, #20]
 8005ecc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005ed6:	1d38      	adds	r0, r7, #4
 8005ed8:	6800      	ldr	r0, [r0, #0]
 8005eda:	f000 fe14 	bl	8006b06 <USB_WritePMA>
          ep->xfer_buff += len;
 8005ede:	463b      	mov	r3, r7
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695a      	ldr	r2, [r3, #20]
 8005ee4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ee8:	441a      	add	r2, r3
 8005eea:	463b      	mov	r3, r7
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ef0:	463b      	mov	r3, r7
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6a1a      	ldr	r2, [r3, #32]
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d909      	bls.n	8005f14 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6a1a      	ldr	r2, [r3, #32]
 8005f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	463b      	mov	r3, r7
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	621a      	str	r2, [r3, #32]
 8005f12:	e008      	b.n	8005f26 <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005f1e:	463b      	mov	r3, r7
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2200      	movs	r2, #0
 8005f24:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005f26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80bc 	beq.w	80060a8 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f30:	f107 031c 	add.w	r3, r7, #28
 8005f34:	1d3a      	adds	r2, r7, #4
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	463b      	mov	r3, r7
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d17a      	bne.n	800603a <USB_EPStartXfer+0xdbe>
 8005f44:	f107 0318 	add.w	r3, r7, #24
 8005f48:	1d3a      	adds	r2, r7, #4
 8005f4a:	6812      	ldr	r2, [r2, #0]
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	1d3b      	adds	r3, r7, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f107 0318 	add.w	r3, r7, #24
 8005f5e:	f107 0218 	add.w	r2, r7, #24
 8005f62:	6812      	ldr	r2, [r2, #0]
 8005f64:	440a      	add	r2, r1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	463b      	mov	r3, r7
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	011a      	lsls	r2, r3, #4
 8005f70:	f107 0318 	add.w	r3, r7, #24
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4413      	add	r3, r2
 8005f78:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d11a      	bne.n	8005fc0 <USB_EPStartXfer+0xd44>
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f107 0314 	add.w	r3, r7, #20
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	f107 0314 	add.w	r3, r7, #20
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	f107 0314 	add.w	r3, r7, #20
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	801a      	strh	r2, [r3, #0]
 8005fbe:	e062      	b.n	8006086 <USB_EPStartXfer+0xe0a>
 8005fc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fc6:	d819      	bhi.n	8005ffc <USB_EPStartXfer+0xd80>
 8005fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d004      	beq.n	8005fe8 <USB_EPStartXfer+0xd6c>
 8005fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	029b      	lsls	r3, r3, #10
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	f107 0314 	add.w	r3, r7, #20
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	801a      	strh	r2, [r3, #0]
 8005ffa:	e044      	b.n	8006086 <USB_EPStartXfer+0xe0a>
 8005ffc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006006:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800600a:	f003 031f 	and.w	r3, r3, #31
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <USB_EPStartXfer+0xda0>
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006016:	3b01      	subs	r3, #1
 8006018:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800601c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006020:	b29b      	uxth	r3, r3
 8006022:	029b      	lsls	r3, r3, #10
 8006024:	b29b      	uxth	r3, r3
 8006026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602e:	b29a      	uxth	r2, r3
 8006030:	f107 0314 	add.w	r3, r7, #20
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	e025      	b.n	8006086 <USB_EPStartXfer+0xe0a>
 800603a:	463b      	mov	r3, r7
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	785b      	ldrb	r3, [r3, #1]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d120      	bne.n	8006086 <USB_EPStartXfer+0xe0a>
 8006044:	1d3b      	adds	r3, r7, #4
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800604c:	b29b      	uxth	r3, r3
 800604e:	4619      	mov	r1, r3
 8006050:	f107 031c 	add.w	r3, r7, #28
 8006054:	f107 021c 	add.w	r2, r7, #28
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	440a      	add	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	463b      	mov	r3, r7
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	011a      	lsls	r2, r3, #4
 8006066:	f107 031c 	add.w	r3, r7, #28
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4413      	add	r3, r2
 800606e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006072:	f107 0310 	add.w	r3, r7, #16
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800607c:	b29a      	uxth	r2, r3
 800607e:	f107 0310 	add.w	r3, r7, #16
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006086:	463b      	mov	r3, r7
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	895b      	ldrh	r3, [r3, #10]
 800608c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6959      	ldr	r1, [r3, #20]
 8006096:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800609a:	b29b      	uxth	r3, r3
 800609c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80060a0:	1d38      	adds	r0, r7, #4
 80060a2:	6800      	ldr	r0, [r0, #0]
 80060a4:	f000 fd2f 	bl	8006b06 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80060a8:	1d3b      	adds	r3, r7, #4
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	f107 020e 	add.w	r2, r7, #14
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060c6:	8013      	strh	r3, [r2, #0]
 80060c8:	f107 030e 	add.w	r3, r7, #14
 80060cc:	f107 020e 	add.w	r2, r7, #14
 80060d0:	8812      	ldrh	r2, [r2, #0]
 80060d2:	f082 0210 	eor.w	r2, r2, #16
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	f107 030e 	add.w	r3, r7, #14
 80060dc:	f107 020e 	add.w	r2, r7, #14
 80060e0:	8812      	ldrh	r2, [r2, #0]
 80060e2:	f082 0220 	eor.w	r2, r2, #32
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	1d3b      	adds	r3, r7, #4
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	441a      	add	r2, r3
 80060f6:	f107 030e 	add.w	r3, r7, #14
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
 8006110:	e3b5      	b.n	800687e <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006112:	463b      	mov	r3, r7
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 8090 	bne.w	800623e <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	699a      	ldr	r2, [r3, #24]
 8006124:	463b      	mov	r3, r7
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	d90e      	bls.n	800614c <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 800612e:	463b      	mov	r3, r7
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006142:	1ad2      	subs	r2, r2, r3
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	619a      	str	r2, [r3, #24]
 800614a:	e008      	b.n	800615e <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 800614c:	463b      	mov	r3, r7
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8006156:	463b      	mov	r3, r7
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2200      	movs	r2, #0
 800615c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006176:	4413      	add	r3, r2
 8006178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800617c:	463b      	mov	r3, r7
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	011a      	lsls	r2, r3, #4
 8006184:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006188:	4413      	add	r3, r2
 800618a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800618e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006192:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006196:	2b00      	cmp	r3, #0
 8006198:	d116      	bne.n	80061c8 <USB_EPStartXfer+0xf4c>
 800619a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ac:	801a      	strh	r2, [r3, #0]
 80061ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e32c      	b.n	8006822 <USB_EPStartXfer+0x15a6>
 80061c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061cc:	2b3e      	cmp	r3, #62	; 0x3e
 80061ce:	d818      	bhi.n	8006202 <USB_EPStartXfer+0xf86>
 80061d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <USB_EPStartXfer+0xf74>
 80061e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ea:	3301      	adds	r3, #1
 80061ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80061f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	029b      	lsls	r3, r3, #10
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e30f      	b.n	8006822 <USB_EPStartXfer+0x15a6>
 8006202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800620c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <USB_EPStartXfer+0xfa6>
 8006218:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800621c:	3b01      	subs	r3, #1
 800621e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006222:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e2f1      	b.n	8006822 <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	78db      	ldrb	r3, [r3, #3]
 8006244:	2b02      	cmp	r3, #2
 8006246:	f040 818f 	bne.w	8006568 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d175      	bne.n	8006340 <USB_EPStartXfer+0x10c4>
 8006254:	1d3b      	adds	r3, r7, #4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800625c:	1d3b      	adds	r3, r7, #4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006264:	b29b      	uxth	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626c:	4413      	add	r3, r2
 800626e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006272:	463b      	mov	r3, r7
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	011a      	lsls	r2, r3, #4
 800627a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800627e:	4413      	add	r3, r2
 8006280:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d116      	bne.n	80062c0 <USB_EPStartXfer+0x1044>
 8006292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e065      	b.n	800638c <USB_EPStartXfer+0x1110>
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b3e      	cmp	r3, #62	; 0x3e
 80062c8:	d81a      	bhi.n	8006300 <USB_EPStartXfer+0x1084>
 80062ca:	463b      	mov	r3, r7
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	085b      	lsrs	r3, r3, #1
 80062d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062d6:	463b      	mov	r3, r7
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d004      	beq.n	80062ee <USB_EPStartXfer+0x1072>
 80062e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e8:	3301      	adds	r3, #1
 80062ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	e045      	b.n	800638c <USB_EPStartXfer+0x1110>
 8006300:	463b      	mov	r3, r7
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <USB_EPStartXfer+0x10a8>
 800631a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800631e:	3b01      	subs	r3, #1
 8006320:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29b      	uxth	r3, r3
 800632e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006332:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006336:	b29a      	uxth	r2, r3
 8006338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800633c:	801a      	strh	r2, [r3, #0]
 800633e:	e025      	b.n	800638c <USB_EPStartXfer+0x1110>
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d120      	bne.n	800638c <USB_EPStartXfer+0x1110>
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006362:	4413      	add	r3, r2
 8006364:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	011a      	lsls	r2, r3, #4
 8006370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006374:	4413      	add	r3, r2
 8006376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800637a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	1d3b      	adds	r3, r7, #4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006394:	463b      	mov	r3, r7
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d175      	bne.n	800648a <USB_EPStartXfer+0x120e>
 800639e:	1d3b      	adds	r3, r7, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a6:	1d3b      	adds	r3, r7, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063b6:	4413      	add	r3, r2
 80063b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063bc:	463b      	mov	r3, r7
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	011a      	lsls	r2, r3, #4
 80063c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063c8:	4413      	add	r3, r2
 80063ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d116      	bne.n	800640a <USB_EPStartXfer+0x118e>
 80063dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e061      	b.n	80064ce <USB_EPStartXfer+0x1252>
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b3e      	cmp	r3, #62	; 0x3e
 8006412:	d81a      	bhi.n	800644a <USB_EPStartXfer+0x11ce>
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d004      	beq.n	8006438 <USB_EPStartXfer+0x11bc>
 800642e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006432:	3301      	adds	r3, #1
 8006434:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800643c:	b29b      	uxth	r3, r3
 800643e:	029b      	lsls	r3, r3, #10
 8006440:	b29a      	uxth	r2, r3
 8006442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006446:	801a      	strh	r2, [r3, #0]
 8006448:	e041      	b.n	80064ce <USB_EPStartXfer+0x1252>
 800644a:	463b      	mov	r3, r7
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006456:	463b      	mov	r3, r7
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2b00      	cmp	r3, #0
 8006462:	d104      	bne.n	800646e <USB_EPStartXfer+0x11f2>
 8006464:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006468:	3b01      	subs	r3, #1
 800646a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800646e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006472:	b29b      	uxth	r3, r3
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	b29b      	uxth	r3, r3
 8006478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006480:	b29a      	uxth	r2, r3
 8006482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e021      	b.n	80064ce <USB_EPStartXfer+0x1252>
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	785b      	ldrb	r3, [r3, #1]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d11c      	bne.n	80064ce <USB_EPStartXfer+0x1252>
 8006494:	1d3b      	adds	r3, r7, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800649c:	b29b      	uxth	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064a4:	4413      	add	r3, r2
 80064a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064aa:	463b      	mov	r3, r7
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	011a      	lsls	r2, r3, #4
 80064b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064b6:	4413      	add	r3, r2
 80064b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064c0:	463b      	mov	r3, r7
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80064ce:	463b      	mov	r3, r7
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 81a4 	beq.w	8006822 <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <USB_EPStartXfer+0x128a>
 80064fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10d      	bne.n	8006522 <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006506:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800650a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 8187 	bne.w	8006822 <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8180 	bne.w	8006822 <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	463b      	mov	r3, r7
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800655a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800655e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006562:	b29b      	uxth	r3, r3
 8006564:	8013      	strh	r3, [r2, #0]
 8006566:	e15c      	b.n	8006822 <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	78db      	ldrb	r3, [r3, #3]
 800656e:	2b01      	cmp	r3, #1
 8006570:	f040 8155 	bne.w	800681e <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	463b      	mov	r3, r7
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	429a      	cmp	r2, r3
 8006582:	d90e      	bls.n	80065a2 <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	463b      	mov	r3, r7
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	619a      	str	r2, [r3, #24]
 80065a0:	e008      	b.n	80065b4 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 80065ac:	463b      	mov	r3, r7
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065b4:	463b      	mov	r3, r7
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d16f      	bne.n	800669e <USB_EPStartXfer+0x1422>
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065d6:	4413      	add	r3, r2
 80065d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	011a      	lsls	r2, r3, #4
 80065e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e8:	4413      	add	r3, r2
 80065ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d116      	bne.n	8006628 <USB_EPStartXfer+0x13ac>
 80065fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	b29b      	uxth	r3, r3
 8006602:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006606:	b29a      	uxth	r2, r3
 8006608:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661e:	b29a      	uxth	r2, r3
 8006620:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006624:	801a      	strh	r2, [r3, #0]
 8006626:	e05f      	b.n	80066e8 <USB_EPStartXfer+0x146c>
 8006628:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800662c:	2b3e      	cmp	r3, #62	; 0x3e
 800662e:	d818      	bhi.n	8006662 <USB_EPStartXfer+0x13e6>
 8006630:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800663a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d004      	beq.n	8006650 <USB_EPStartXfer+0x13d4>
 8006646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664a:	3301      	adds	r3, #1
 800664c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006654:	b29b      	uxth	r3, r3
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e042      	b.n	80066e8 <USB_EPStartXfer+0x146c>
 8006662:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800666c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2b00      	cmp	r3, #0
 8006676:	d104      	bne.n	8006682 <USB_EPStartXfer+0x1406>
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667c:	3b01      	subs	r3, #1
 800667e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006686:	b29b      	uxth	r3, r3
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	b29b      	uxth	r3, r3
 800668c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006694:	b29a      	uxth	r2, r3
 8006696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e024      	b.n	80066e8 <USB_EPStartXfer+0x146c>
 800669e:	463b      	mov	r3, r7
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	785b      	ldrb	r3, [r3, #1]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d11f      	bne.n	80066e8 <USB_EPStartXfer+0x146c>
 80066a8:	1d3b      	adds	r3, r7, #4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066b0:	1d3b      	adds	r3, r7, #4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	4413      	add	r3, r2
 80066c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066c6:	463b      	mov	r3, r7
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	011a      	lsls	r2, r3, #4
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	4413      	add	r3, r2
 80066d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066e6:	801a      	strh	r2, [r3, #0]
 80066e8:	1d3b      	adds	r3, r7, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066f0:	463b      	mov	r3, r7
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d16f      	bne.n	80067da <USB_EPStartXfer+0x155e>
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800670a:	b29b      	uxth	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006712:	4413      	add	r3, r2
 8006714:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006718:	463b      	mov	r3, r7
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	011a      	lsls	r2, r3, #4
 8006720:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006724:	4413      	add	r3, r2
 8006726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800672a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800672e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006732:	2b00      	cmp	r3, #0
 8006734:	d116      	bne.n	8006764 <USB_EPStartXfer+0x14e8>
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006742:	b29a      	uxth	r2, r3
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	b29b      	uxth	r3, r3
 8006752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800675a:	b29a      	uxth	r2, r3
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	e05e      	b.n	8006822 <USB_EPStartXfer+0x15a6>
 8006764:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006768:	2b3e      	cmp	r3, #62	; 0x3e
 800676a:	d818      	bhi.n	800679e <USB_EPStartXfer+0x1522>
 800676c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006770:	085b      	lsrs	r3, r3, #1
 8006772:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006776:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <USB_EPStartXfer+0x1510>
 8006782:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006786:	3301      	adds	r3, #1
 8006788:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800678c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006790:	b29b      	uxth	r3, r3
 8006792:	029b      	lsls	r3, r3, #10
 8006794:	b29a      	uxth	r2, r3
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	801a      	strh	r2, [r3, #0]
 800679c:	e041      	b.n	8006822 <USB_EPStartXfer+0x15a6>
 800679e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <USB_EPStartXfer+0x1542>
 80067b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067b8:	3b01      	subs	r3, #1
 80067ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	029b      	lsls	r3, r3, #10
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e023      	b.n	8006822 <USB_EPStartXfer+0x15a6>
 80067da:	463b      	mov	r3, r7
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d11e      	bne.n	8006822 <USB_EPStartXfer+0x15a6>
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	461a      	mov	r2, r3
 80067f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067f4:	4413      	add	r3, r2
 80067f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	011a      	lsls	r2, r3, #4
 8006802:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006806:	4413      	add	r3, r2
 8006808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800680c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006810:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006814:	b29a      	uxth	r2, r3
 8006816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	e001      	b.n	8006822 <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e02e      	b.n	8006880 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006822:	1d3b      	adds	r3, r7, #4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006840:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006844:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006848:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800684c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006850:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006854:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006858:	1d3b      	adds	r3, r7, #4
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b2:	81fb      	strh	r3, [r7, #14]
 80068b4:	89fb      	ldrh	r3, [r7, #14]
 80068b6:	f083 0310 	eor.w	r3, r3, #16
 80068ba:	81fb      	strh	r3, [r7, #14]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	89fb      	ldrh	r3, [r7, #14]
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
 80068dc:	e01f      	b.n	800691e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	81bb      	strh	r3, [r7, #12]
 80068f6:	89bb      	ldrh	r3, [r7, #12]
 80068f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068fc:	81bb      	strh	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	89bb      	ldrh	r3, [r7, #12]
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	7b1b      	ldrb	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 809d 	bne.w	8006a78 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04c      	beq.n	80069e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	82fb      	strh	r3, [r7, #22]
 8006954:	8afb      	ldrh	r3, [r7, #22]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01b      	beq.n	8006996 <USB_EPClearStall+0x6c>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	82bb      	strh	r3, [r7, #20]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	8abb      	ldrh	r3, [r7, #20]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d06c      	beq.n	8006a78 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	827b      	strh	r3, [r7, #18]
 80069b6:	8a7b      	ldrh	r3, [r7, #18]
 80069b8:	f083 0320 	eor.w	r3, r3, #32
 80069bc:	827b      	strh	r3, [r7, #18]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	8a7b      	ldrh	r3, [r7, #18]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
 80069de:	e04b      	b.n	8006a78 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	823b      	strh	r3, [r7, #16]
 80069ee:	8a3b      	ldrh	r3, [r7, #16]
 80069f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <USB_EPClearStall+0x106>
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	81fb      	strh	r3, [r7, #14]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	89fb      	ldrh	r3, [r7, #14]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	81bb      	strh	r3, [r7, #12]
 8006a48:	89bb      	ldrh	r3, [r7, #12]
 8006a4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a4e:	81bb      	strh	r3, [r7, #12]
 8006a50:	89bb      	ldrh	r3, [r7, #12]
 8006a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a56:	81bb      	strh	r3, [r7, #12]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	89bb      	ldrh	r3, [r7, #12]
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2280      	movs	r2, #128	; 0x80
 8006a9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b08d      	sub	sp, #52	; 0x34
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	4611      	mov	r1, r2
 8006b12:	461a      	mov	r2, r3
 8006b14:	460b      	mov	r3, r1
 8006b16:	80fb      	strh	r3, [r7, #6]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b1c:	88bb      	ldrh	r3, [r7, #4]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	005a      	lsls	r2, r3, #1
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b3e:	e01e      	b.n	8006b7e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	3301      	adds	r3, #1
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	3302      	adds	r3, #2
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	3302      	adds	r3, #2
 8006b70:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	3301      	adds	r3, #1
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1dd      	bne.n	8006b40 <USB_WritePMA+0x3a>
  }
}
 8006b84:	bf00      	nop
 8006b86:	3734      	adds	r7, #52	; 0x34
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr

08006b8e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b08b      	sub	sp, #44	; 0x2c
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	80fb      	strh	r3, [r7, #6]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	005a      	lsls	r2, r3, #1
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	e01b      	b.n	8006c00 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	3301      	adds	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	b2da      	uxtb	r2, r3
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e0      	bne.n	8006bc8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c06:	88bb      	ldrh	r3, [r7, #4]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	701a      	strb	r2, [r3, #0]
  }
}
 8006c22:	bf00      	nop
 8006c24:	372c      	adds	r7, #44	; 0x2c
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006c30:	4904      	ldr	r1, [pc, #16]	; (8006c44 <MX_FATFS_Init+0x18>)
 8006c32:	4805      	ldr	r0, [pc, #20]	; (8006c48 <MX_FATFS_Init+0x1c>)
 8006c34:	f002 fd96 	bl	8009764 <FATFS_LinkDriver>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	4b03      	ldr	r3, [pc, #12]	; (8006c4c <MX_FATFS_Init+0x20>)
 8006c3e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006c40:	bf00      	nop
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20002e20 	.word	0x20002e20
 8006c48:	20000138 	.word	0x20000138
 8006c4c:	20002e24 	.word	0x20002e24

08006c50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <USER_initialize+0x20>)
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006c60:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <USER_initialize+0x20>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr
 8006c70:	20000135 	.word	0x20000135

08006c74 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <USER_status+0x20>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <USER_status+0x20>)
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr
 8006c94:	20000135 	.word	0x20000135

08006c98 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006ca8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006cc4:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	603a      	str	r2, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
    return res;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr

08006cf0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	7c1b      	ldrb	r3, [r3, #16]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d115      	bne.n	8006d30 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d08:	2202      	movs	r2, #2
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f006 fa78 	bl	800d202 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d1e:	2202      	movs	r2, #2
 8006d20:	2181      	movs	r1, #129	; 0x81
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f006 fa6d 	bl	800d202 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d2e:	e012      	b.n	8006d56 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	2202      	movs	r2, #2
 8006d34:	2101      	movs	r1, #1
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f006 fa63 	bl	800d202 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006d44:	2340      	movs	r3, #64	; 0x40
 8006d46:	2202      	movs	r2, #2
 8006d48:	2181      	movs	r1, #129	; 0x81
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f006 fa59 	bl	800d202 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006d56:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006d5a:	f006 fb99 	bl	800d490 <USBD_static_malloc>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006d70:	2302      	movs	r3, #2
 8006d72:	e003      	b.n	8006d7c <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f9d9 	bl	800712c <MSC_BOT_Init>

  return USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006d90:	2101      	movs	r1, #1
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f006 fa5b 	bl	800d24e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006da0:	2181      	movs	r1, #129	; 0x81
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f006 fa53 	bl	800d24e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa06 	bl	80071c0 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f006 fb6f 	bl	800d4a8 <USBD_static_free>
    pdev->pClassData  = NULL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d04d      	beq.n	8006e9e <USBD_MSC_Setup+0xc2>
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	f040 8113 	bne.w	800702e <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	785b      	ldrb	r3, [r3, #1]
 8006e0c:	2bfe      	cmp	r3, #254	; 0xfe
 8006e0e:	d002      	beq.n	8006e16 <USBD_MSC_Setup+0x3a>
 8006e10:	2bff      	cmp	r3, #255	; 0xff
 8006e12:	d024      	beq.n	8006e5e <USBD_MSC_Setup+0x82>
 8006e14:	e03b      	b.n	8006e8e <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d118      	bne.n	8006e50 <USBD_MSC_Setup+0x74>
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	88db      	ldrh	r3, [r3, #6]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d114      	bne.n	8006e50 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	da0f      	bge.n	8006e50 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	4798      	blx	r3
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	2201      	movs	r2, #1
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f002 fbbd 	bl	80095c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e4e:	e025      	b.n	8006e9c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f002 fb4e 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e58:	2302      	movs	r3, #2
 8006e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e5c:	e01e      	b.n	8006e9c <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	885b      	ldrh	r3, [r3, #2]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10c      	bne.n	8006e80 <USBD_MSC_Setup+0xa4>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	88db      	ldrh	r3, [r3, #6]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d108      	bne.n	8006e80 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	db03      	blt.n	8006e80 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f987 	bl	800718c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e7e:	e00d      	b.n	8006e9c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f002 fb36 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8c:	e006      	b.n	8006e9c <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f002 fb2f 	bl	80094f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e96:	2302      	movs	r3, #2
 8006e98:	75fb      	strb	r3, [r7, #23]
          break;
 8006e9a:	bf00      	nop
      }
      break;
 8006e9c:	e0ce      	b.n	800703c <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b0b      	cmp	r3, #11
 8006ea4:	f200 80bb 	bhi.w	800701e <USBD_MSC_Setup+0x242>
 8006ea8:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <USBD_MSC_Setup+0xd4>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ee1 	.word	0x08006ee1
 8006eb4:	08006f57 	.word	0x08006f57
 8006eb8:	0800701f 	.word	0x0800701f
 8006ebc:	0800701f 	.word	0x0800701f
 8006ec0:	0800701f 	.word	0x0800701f
 8006ec4:	0800701f 	.word	0x0800701f
 8006ec8:	0800701f 	.word	0x0800701f
 8006ecc:	0800701f 	.word	0x0800701f
 8006ed0:	0800701f 	.word	0x0800701f
 8006ed4:	0800701f 	.word	0x0800701f
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f31 	.word	0x08006f31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d107      	bne.n	8006efa <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006eea:	f107 030e 	add.w	r3, r7, #14
 8006eee:	2202      	movs	r2, #2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f002 fb68 	bl	80095c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ef8:	e098      	b.n	800702c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 faf9 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f02:	2302      	movs	r3, #2
 8006f04:	75fb      	strb	r3, [r7, #23]
          break;
 8006f06:	e091      	b.n	800702c <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d107      	bne.n	8006f22 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	3304      	adds	r3, #4
 8006f16:	2201      	movs	r2, #1
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 fb54 	bl	80095c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f20:	e084      	b.n	800702c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f002 fae5 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2e:	e07d      	b.n	800702c <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d106      	bne.n	8006f48 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	885b      	ldrh	r3, [r3, #2]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f46:	e071      	b.n	800702c <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f002 fad2 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	75fb      	strb	r3, [r7, #23]
          break;
 8006f54:	e06a      	b.n	800702c <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	889b      	ldrh	r3, [r3, #4]
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f006 f994 	bl	800d28c <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	889b      	ldrh	r3, [r3, #4]
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f006 f96e 	bl	800d24e <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	889b      	ldrh	r3, [r3, #4]
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	da23      	bge.n	8006fc4 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	889b      	ldrh	r3, [r3, #4]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 020f 	and.w	r2, r3, #15
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	3318      	adds	r3, #24
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	7c1b      	ldrb	r3, [r3, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	2181      	movs	r1, #129	; 0x81
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f006 f92a 	bl	800d202 <USBD_LL_OpenEP>
 8006fae:	e005      	b.n	8006fbc <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	2181      	movs	r1, #129	; 0x81
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f006 f923 	bl	800d202 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fc2:	e024      	b.n	800700e <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	889b      	ldrh	r3, [r3, #4]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	7c1b      	ldrb	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d107      	bne.n	8006ffa <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fee:	2202      	movs	r2, #2
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f006 f905 	bl	800d202 <USBD_LL_OpenEP>
 8006ff8:	e005      	b.n	8007006 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006ffa:	2340      	movs	r3, #64	; 0x40
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	2101      	movs	r1, #1
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f006 f8fe 	bl	800d202 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	889b      	ldrh	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa50 	bl	80074bc <MSC_BOT_CplClrFeature>
          break;
 800701c:	e006      	b.n	800702c <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f002 fa67 	bl	80094f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007026:	2302      	movs	r3, #2
 8007028:	75fb      	strb	r3, [r7, #23]
          break;
 800702a:	bf00      	nop
      }
      break;
 800702c:	e006      	b.n	800703c <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f002 fa5f 	bl	80094f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007036:	2302      	movs	r3, #2
 8007038:	75fb      	strb	r3, [r7, #23]
      break;
 800703a:	bf00      	nop
  }

  return ret;
 800703c:	7dfb      	ldrb	r3, [r7, #23]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop

08007048 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8c1 	bl	80071e0 <MSC_BOT_DataIn>

  return USBD_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8e2 	bl	8007242 <MSC_BOT_DataOut>

  return USBD_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8007096:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	bc80      	pop	{r7}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20000184 	.word	0x20000184

080070a8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2220      	movs	r2, #32
 80070b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80070b6:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	200001a4 	.word	0x200001a4

080070c8 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80070d6:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	200001c4 	.word	0x200001c4

080070e8 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	220a      	movs	r2, #10
 80070f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	200001e4 	.word	0x200001e4

08007108 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d003      	beq.n	8007120 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	bc80      	pop	{r7}
 800712a:	4770      	bx	lr

0800712c <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2000      	movs	r0, #0
 8007162:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007164:	2101      	movs	r1, #1
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f006 f890 	bl	800d28c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800716c:	2181      	movs	r1, #129	; 0x81
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f006 f88c 	bl	800d28c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800717a:	231f      	movs	r3, #31
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f006 f94f 	bl	800d422 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80071ae:	231f      	movs	r3, #31
 80071b0:	2101      	movs	r1, #1
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f006 f935 	bl	800d422 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80071b8:	bf00      	nop
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ce:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	721a      	strb	r2, [r3, #8]
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr

080071e0 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	7a1b      	ldrb	r3, [r3, #8]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d004      	beq.n	8007206 <MSC_BOT_DataIn+0x26>
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	db19      	blt.n	8007234 <MSC_BOT_DataIn+0x54>
 8007200:	2b04      	cmp	r3, #4
 8007202:	dc17      	bgt.n	8007234 <MSC_BOT_DataIn+0x54>
 8007204:	e011      	b.n	800722a <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007212:	461a      	mov	r2, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f979 	bl	800750c <SCSI_ProcessCmd>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	da0b      	bge.n	8007238 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007220:	2101      	movs	r1, #1
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f8f0 	bl	8007408 <MSC_BOT_SendCSW>
      }
      break;
 8007228:	e006      	b.n	8007238 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f8eb 	bl	8007408 <MSC_BOT_SendCSW>
      break;
 8007232:	e002      	b.n	800723a <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8007234:	bf00      	nop
 8007236:	e000      	b.n	800723a <MSC_BOT_DataIn+0x5a>
      break;
 8007238:	bf00      	nop
  }
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	7a1b      	ldrb	r3, [r3, #8]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <MSC_BOT_DataOut+0x22>
 800725e:	2b01      	cmp	r3, #1
 8007260:	d004      	beq.n	800726c <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007262:	e015      	b.n	8007290 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f817 	bl	8007298 <MSC_BOT_CBW_Decode>
      break;
 800726a:	e011      	b.n	8007290 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007278:	461a      	mov	r2, r3
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f946 	bl	800750c <SCSI_ProcessCmd>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	da03      	bge.n	800728e <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007286:	2101      	movs	r1, #1
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f8bd 	bl	8007408 <MSC_BOT_SendCSW>
      break;
 800728e:	bf00      	nop
  }
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80072c0:	2101      	movs	r1, #1
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f006 f8d0 	bl	800d468 <USBD_LL_GetRxDataSize>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b1f      	cmp	r3, #31
 80072cc:	d114      	bne.n	80072f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80072d4:	4a32      	ldr	r2, [pc, #200]	; (80073a0 <MSC_BOT_CBW_Decode+0x108>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10e      	bne.n	80072f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d809      	bhi.n	80072f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80072f4:	2b10      	cmp	r3, #16
 80072f6:	d90e      	bls.n	8007316 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80072fe:	2320      	movs	r3, #32
 8007300:	2205      	movs	r2, #5
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fc48 	bl	8007b98 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2202      	movs	r2, #2
 800730c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f8a6 	bl	8007460 <MSC_BOT_Abort>
 8007314:	e041      	b.n	800739a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007322:	461a      	mov	r2, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f8f1 	bl	800750c <SCSI_ProcessCmd>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	da0c      	bge.n	800734a <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7a1b      	ldrb	r3, [r3, #8]
 8007334:	2b05      	cmp	r3, #5
 8007336:	d104      	bne.n	8007342 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007338:	2101      	movs	r1, #1
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f864 	bl	8007408 <MSC_BOT_SendCSW>
 8007340:	e02b      	b.n	800739a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f88c 	bl	8007460 <MSC_BOT_Abort>
 8007348:	e027      	b.n	800739a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	7a1b      	ldrb	r3, [r3, #8]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d022      	beq.n	8007398 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007356:	2b01      	cmp	r3, #1
 8007358:	d01e      	beq.n	8007398 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800735e:	2b03      	cmp	r3, #3
 8007360:	d01a      	beq.n	8007398 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	895b      	ldrh	r3, [r3, #10]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f103 010c 	add.w	r1, r3, #12
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	895b      	ldrh	r3, [r3, #10]
 8007374:	461a      	mov	r2, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 f814 	bl	80073a4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800737c:	e00d      	b.n	800739a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	895b      	ldrh	r3, [r3, #10]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007386:	2100      	movs	r1, #0
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f83d 	bl	8007408 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800738e:	e004      	b.n	800739a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f865 	bl	8007460 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007396:	e000      	b.n	800739a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007398:	bf00      	nop
    }
  }
}
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	43425355 	.word	0x43425355

080073a4 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073b8:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d204      	bcs.n	80073d0 <MSC_BOT_SendData+0x2c>
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	e000      	b.n	80073d2 <MSC_BOT_SendData+0x2e>
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80073da:	88fb      	ldrh	r3, [r7, #6]
 80073dc:	1ad2      	subs	r2, r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2204      	movs	r2, #4
 80073f0:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80073f2:	8a7b      	ldrh	r3, [r7, #18]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	2181      	movs	r1, #129	; 0x81
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f005 ffef 	bl	800d3dc <USBD_LL_Transmit>
}
 80073fe:	bf00      	nop
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a0f      	ldr	r2, [pc, #60]	; (800745c <MSC_BOT_SendCSW+0x54>)
 8007420:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8007438:	230d      	movs	r3, #13
 800743a:	2181      	movs	r1, #129	; 0x81
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f005 ffcd 	bl	800d3dc <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007448:	231f      	movs	r3, #31
 800744a:	2101      	movs	r1, #1
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f005 ffe8 	bl	800d422 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	53425355 	.word	0x53425355

08007460 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10c      	bne.n	8007494 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007480:	2b00      	cmp	r3, #0
 8007482:	d007      	beq.n	8007494 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800748c:	2101      	movs	r1, #1
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f005 ff1b 	bl	800d2ca <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007494:	2181      	movs	r1, #129	; 0x81
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f005 ff17 	bl	800d2ca <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	7a5b      	ldrb	r3, [r3, #9]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d107      	bne.n	80074b4 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80074aa:	231f      	movs	r3, #31
 80074ac:	2101      	movs	r1, #1
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f005 ffb7 	bl	800d422 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 80074b4:	bf00      	nop
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	7a5b      	ldrb	r3, [r3, #9]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d107      	bne.n	80074e8 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80074d8:	2181      	movs	r1, #129	; 0x81
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f005 fef5 	bl	800d2ca <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	725a      	strb	r2, [r3, #9]
 80074e6:	e00d      	b.n	8007504 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80074e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	da08      	bge.n	8007502 <MSC_BOT_CplClrFeature+0x46>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	7a5b      	ldrb	r3, [r3, #9]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d004      	beq.n	8007502 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80074f8:	2101      	movs	r1, #1
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff84 	bl	8007408 <MSC_BOT_SendCSW>
 8007500:	e000      	b.n	8007504 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007502:	bf00      	nop
  }
}
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	460b      	mov	r3, r1
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b5a      	cmp	r3, #90	; 0x5a
 8007520:	f200 810e 	bhi.w	8007740 <SCSI_ProcessCmd+0x234>
 8007524:	a201      	add	r2, pc, #4	; (adr r2, 800752c <SCSI_ProcessCmd+0x20>)
 8007526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752a:	bf00      	nop
 800752c:	08007699 	.word	0x08007699
 8007530:	08007741 	.word	0x08007741
 8007534:	08007741 	.word	0x08007741
 8007538:	080076a7 	.word	0x080076a7
 800753c:	08007741 	.word	0x08007741
 8007540:	08007741 	.word	0x08007741
 8007544:	08007741 	.word	0x08007741
 8007548:	08007741 	.word	0x08007741
 800754c:	08007741 	.word	0x08007741
 8007550:	08007741 	.word	0x08007741
 8007554:	08007741 	.word	0x08007741
 8007558:	08007741 	.word	0x08007741
 800755c:	08007741 	.word	0x08007741
 8007560:	08007741 	.word	0x08007741
 8007564:	08007741 	.word	0x08007741
 8007568:	08007741 	.word	0x08007741
 800756c:	08007741 	.word	0x08007741
 8007570:	08007741 	.word	0x08007741
 8007574:	080076b5 	.word	0x080076b5
 8007578:	08007741 	.word	0x08007741
 800757c:	08007741 	.word	0x08007741
 8007580:	08007741 	.word	0x08007741
 8007584:	08007741 	.word	0x08007741
 8007588:	08007741 	.word	0x08007741
 800758c:	08007741 	.word	0x08007741
 8007590:	08007741 	.word	0x08007741
 8007594:	080076df 	.word	0x080076df
 8007598:	080076c3 	.word	0x080076c3
 800759c:	08007741 	.word	0x08007741
 80075a0:	08007741 	.word	0x08007741
 80075a4:	080076d1 	.word	0x080076d1
 80075a8:	08007741 	.word	0x08007741
 80075ac:	08007741 	.word	0x08007741
 80075b0:	08007741 	.word	0x08007741
 80075b4:	08007741 	.word	0x08007741
 80075b8:	080076fb 	.word	0x080076fb
 80075bc:	08007741 	.word	0x08007741
 80075c0:	08007709 	.word	0x08007709
 80075c4:	08007741 	.word	0x08007741
 80075c8:	08007741 	.word	0x08007741
 80075cc:	08007717 	.word	0x08007717
 80075d0:	08007741 	.word	0x08007741
 80075d4:	08007725 	.word	0x08007725
 80075d8:	08007741 	.word	0x08007741
 80075dc:	08007741 	.word	0x08007741
 80075e0:	08007741 	.word	0x08007741
 80075e4:	08007741 	.word	0x08007741
 80075e8:	08007733 	.word	0x08007733
 80075ec:	08007741 	.word	0x08007741
 80075f0:	08007741 	.word	0x08007741
 80075f4:	08007741 	.word	0x08007741
 80075f8:	08007741 	.word	0x08007741
 80075fc:	08007741 	.word	0x08007741
 8007600:	08007741 	.word	0x08007741
 8007604:	08007741 	.word	0x08007741
 8007608:	08007741 	.word	0x08007741
 800760c:	08007741 	.word	0x08007741
 8007610:	08007741 	.word	0x08007741
 8007614:	08007741 	.word	0x08007741
 8007618:	08007741 	.word	0x08007741
 800761c:	08007741 	.word	0x08007741
 8007620:	08007741 	.word	0x08007741
 8007624:	08007741 	.word	0x08007741
 8007628:	08007741 	.word	0x08007741
 800762c:	08007741 	.word	0x08007741
 8007630:	08007741 	.word	0x08007741
 8007634:	08007741 	.word	0x08007741
 8007638:	08007741 	.word	0x08007741
 800763c:	08007741 	.word	0x08007741
 8007640:	08007741 	.word	0x08007741
 8007644:	08007741 	.word	0x08007741
 8007648:	08007741 	.word	0x08007741
 800764c:	08007741 	.word	0x08007741
 8007650:	08007741 	.word	0x08007741
 8007654:	08007741 	.word	0x08007741
 8007658:	08007741 	.word	0x08007741
 800765c:	08007741 	.word	0x08007741
 8007660:	08007741 	.word	0x08007741
 8007664:	08007741 	.word	0x08007741
 8007668:	08007741 	.word	0x08007741
 800766c:	08007741 	.word	0x08007741
 8007670:	08007741 	.word	0x08007741
 8007674:	08007741 	.word	0x08007741
 8007678:	08007741 	.word	0x08007741
 800767c:	08007741 	.word	0x08007741
 8007680:	08007741 	.word	0x08007741
 8007684:	08007741 	.word	0x08007741
 8007688:	08007741 	.word	0x08007741
 800768c:	08007741 	.word	0x08007741
 8007690:	08007741 	.word	0x08007741
 8007694:	080076ed 	.word	0x080076ed
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	4619      	mov	r1, r3
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f85c 	bl	800775c <SCSI_TestUnitReady>
      break;
 80076a4:	e055      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 80076a6:	7afb      	ldrb	r3, [r7, #11]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4619      	mov	r1, r3
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fa09 	bl	8007ac4 <SCSI_RequestSense>
      break;
 80076b2:	e04e      	b.n	8007752 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 f888 	bl	80077d0 <SCSI_Inquiry>
      break;
 80076c0:	e047      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f000 fa9e 	bl	8007c0a <SCSI_StartStopUnit>
      break;
 80076ce:	e040      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	4619      	mov	r1, r3
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fa97 	bl	8007c0a <SCSI_StartStopUnit>
      break;
 80076dc:	e039      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4619      	mov	r1, r3
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f99d 	bl	8007a24 <SCSI_ModeSense6>
      break;
 80076ea:	e032      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 80076ec:	7afb      	ldrb	r3, [r7, #11]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4619      	mov	r1, r3
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f9be 	bl	8007a74 <SCSI_ModeSense10>
      break;
 80076f8:	e02b      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80076fa:	7afb      	ldrb	r3, [r7, #11]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4619      	mov	r1, r3
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f000 f92a 	bl	800795a <SCSI_ReadFormatCapacity>
      break;
 8007706:	e024      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4619      	mov	r1, r3
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f000 f8bc 	bl	800788c <SCSI_ReadCapacity10>
      break;
 8007714:	e01d      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	4619      	mov	r1, r3
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f000 fa88 	bl	8007c32 <SCSI_Read10>
      break;
 8007722:	e016      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	4619      	mov	r1, r3
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fb0d 	bl	8007d4a <SCSI_Write10>
      break;
 8007730:	e00f      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 8007732:	7afb      	ldrb	r3, [r7, #11]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 fbb6 	bl	8007eaa <SCSI_Verify10>
      break;
 800773e:	e008      	b.n	8007752 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007740:	7af9      	ldrb	r1, [r7, #11]
 8007742:	2320      	movs	r3, #32
 8007744:	2205      	movs	r2, #5
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fa26 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 800774c:	f04f 33ff 	mov.w	r3, #4294967295
 8007750:	e000      	b.n	8007754 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	460b      	mov	r3, r1
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007770:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007782:	2320      	movs	r3, #32
 8007784:	2205      	movs	r2, #5
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fa06 	bl	8007b98 <SCSI_SenseCode>

    return -1;
 800778c:	f04f 33ff 	mov.w	r3, #4294967295
 8007790:	e019      	b.n	80077c6 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	7afa      	ldrb	r2, [r7, #11]
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80077a6:	7af9      	ldrb	r1, [r7, #11]
 80077a8:	233a      	movs	r3, #58	; 0x3a
 80077aa:	2202      	movs	r2, #2
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f9f3 	bl	8007b98 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2205      	movs	r2, #5
 80077b6:	721a      	strb	r2, [r3, #8]

    return -1;
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295
 80077bc:	e003      	b.n	80077c6 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2200      	movs	r2, #0
 80077c2:	815a      	strh	r2, [r3, #10]

  return 0;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b089      	sub	sp, #36	; 0x24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	460b      	mov	r3, r1
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e4:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	3301      	adds	r3, #1
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d014      	beq.n	800781e <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80077f4:	2307      	movs	r3, #7
 80077f6:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	8bfa      	ldrh	r2, [r7, #30]
 80077fc:	815a      	strh	r2, [r3, #10]

    while (len)
 80077fe:	e00a      	b.n	8007816 <SCSI_Inquiry+0x46>
    {
      len--;
 8007800:	8bfb      	ldrh	r3, [r7, #30]
 8007802:	3b01      	subs	r3, #1
 8007804:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8007806:	8bfb      	ldrh	r3, [r7, #30]
 8007808:	8bfa      	ldrh	r2, [r7, #30]
 800780a:	491f      	ldr	r1, [pc, #124]	; (8007888 <SCSI_Inquiry+0xb8>)
 800780c:	5c89      	ldrb	r1, [r1, r2]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4413      	add	r3, r2
 8007812:	460a      	mov	r2, r1
 8007814:	731a      	strb	r2, [r3, #12]
    while (len)
 8007816:	8bfb      	ldrh	r3, [r7, #30]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f1      	bne.n	8007800 <SCSI_Inquiry+0x30>
 800781c:	e02e      	b.n	800787c <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007824:	69d9      	ldr	r1, [r3, #28]
 8007826:	7afa      	ldrb	r2, [r7, #11]
 8007828:	4613      	mov	r3, r2
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	4413      	add	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	440b      	add	r3, r1
 8007832:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	3304      	adds	r3, #4
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b29b      	uxth	r3, r3
 800783c:	3305      	adds	r3, #5
 800783e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	8bfa      	ldrh	r2, [r7, #30]
 800784a:	429a      	cmp	r2, r3
 800784c:	d303      	bcc.n	8007856 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	3304      	adds	r3, #4
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	8bfa      	ldrh	r2, [r7, #30]
 800785a:	815a      	strh	r2, [r3, #10]

    while (len)
 800785c:	e00b      	b.n	8007876 <SCSI_Inquiry+0xa6>
    {
      len--;
 800785e:	8bfb      	ldrh	r3, [r7, #30]
 8007860:	3b01      	subs	r3, #1
 8007862:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007864:	8bfb      	ldrh	r3, [r7, #30]
 8007866:	8bfa      	ldrh	r2, [r7, #30]
 8007868:	6979      	ldr	r1, [r7, #20]
 800786a:	440a      	add	r2, r1
 800786c:	7811      	ldrb	r1, [r2, #0]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4413      	add	r3, r2
 8007872:	460a      	mov	r2, r1
 8007874:	731a      	strb	r2, [r3, #12]
    while (len)
 8007876:	8bfb      	ldrh	r3, [r7, #30]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1f0      	bne.n	800785e <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3724      	adds	r7, #36	; 0x24
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr
 8007888:	0800d7ac 	.word	0x0800d7ac

0800788c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	460b      	mov	r3, r1
 8007896:	607a      	str	r2, [r7, #4]
 8007898:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a0:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	f502 7118 	add.w	r1, r2, #608	; 0x260
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	f202 225e 	addw	r2, r2, #606	; 0x25e
 80078b6:	7af8      	ldrb	r0, [r7, #11]
 80078b8:	4798      	blx	r3
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d008      	beq.n	80078d2 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80078c0:	7af9      	ldrb	r1, [r7, #11]
 80078c2:	233a      	movs	r3, #58	; 0x3a
 80078c4:	2202      	movs	r2, #2
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f966 	bl	8007b98 <SCSI_SenseCode>
    return -1;
 80078cc:	f04f 33ff 	mov.w	r3, #4294967295
 80078d0:	e03f      	b.n	8007952 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80078d8:	3b01      	subs	r3, #1
 80078da:	0e1b      	lsrs	r3, r3, #24
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80078e8:	3b01      	subs	r3, #1
 80078ea:	0c1b      	lsrs	r3, r3, #16
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80078f8:	3b01      	subs	r3, #1
 80078fa:	0a1b      	lsrs	r3, r3, #8
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b2da      	uxtb	r2, r3
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007918:	161b      	asrs	r3, r3, #24
 800791a:	b2da      	uxtb	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007926:	141b      	asrs	r3, r3, #16
 8007928:	b2da      	uxtb	r2, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	b2da      	uxtb	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007944:	b2da      	uxtb	r2, r3
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2208      	movs	r2, #8
 800794e:	815a      	strh	r2, [r3, #10]
    return 0;
 8007950:	2300      	movs	r3, #0
  }
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b088      	sub	sp, #32
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	460b      	mov	r3, r1
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796e:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007970:	2300      	movs	r3, #0
 8007972:	83fb      	strh	r3, [r7, #30]
 8007974:	e007      	b.n	8007986 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007976:	8bfb      	ldrh	r3, [r7, #30]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4413      	add	r3, r2
 800797c:	2200      	movs	r2, #0
 800797e:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007980:	8bfb      	ldrh	r3, [r7, #30]
 8007982:	3301      	adds	r3, #1
 8007984:	83fb      	strh	r3, [r7, #30]
 8007986:	8bfb      	ldrh	r3, [r7, #30]
 8007988:	2b0b      	cmp	r3, #11
 800798a:	d9f4      	bls.n	8007976 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f107 0216 	add.w	r2, r7, #22
 8007998:	f107 0110 	add.w	r1, r7, #16
 800799c:	7af8      	ldrb	r0, [r7, #11]
 800799e:	4798      	blx	r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80079a6:	7af9      	ldrb	r1, [r7, #11]
 80079a8:	233a      	movs	r3, #58	; 0x3a
 80079aa:	2202      	movs	r2, #2
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 f8f3 	bl	8007b98 <SCSI_SenseCode>
    return -1;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	e030      	b.n	8007a1a <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2208      	movs	r2, #8
 80079bc:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	0e1b      	lsrs	r3, r3, #24
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	3b01      	subs	r3, #1
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b2da      	uxtb	r2, r3
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2202      	movs	r2, #2
 80079f2:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80079f4:	8afb      	ldrh	r3, [r7, #22]
 80079f6:	141b      	asrs	r3, r3, #16
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80079fe:	8afb      	ldrh	r3, [r7, #22]
 8007a00:	0a1b      	lsrs	r3, r3, #8
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007a0a:	8afb      	ldrh	r3, [r7, #22]
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	220c      	movs	r2, #12
 8007a16:	815a      	strh	r2, [r3, #10]
    return 0;
 8007a18:	2300      	movs	r3, #0
  }
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3720      	adds	r7, #32
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a38:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007a3a:	2308      	movs	r3, #8
 8007a3c:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	8afa      	ldrh	r2, [r7, #22]
 8007a42:	815a      	strh	r2, [r3, #10]

  while (len)
 8007a44:	e00a      	b.n	8007a5c <SCSI_ModeSense6+0x38>
  {
    len--;
 8007a46:	8afb      	ldrh	r3, [r7, #22]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007a4c:	8afb      	ldrh	r3, [r7, #22]
 8007a4e:	8afa      	ldrh	r2, [r7, #22]
 8007a50:	4907      	ldr	r1, [pc, #28]	; (8007a70 <SCSI_ModeSense6+0x4c>)
 8007a52:	5c89      	ldrb	r1, [r1, r2]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	4413      	add	r3, r2
 8007a58:	460a      	mov	r2, r1
 8007a5a:	731a      	strb	r2, [r3, #12]
  while (len)
 8007a5c:	8afb      	ldrh	r3, [r7, #22]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f1      	bne.n	8007a46 <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	0800d7b4 	.word	0x0800d7b4

08007a74 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007a82:	2308      	movs	r3, #8
 8007a84:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	8afa      	ldrh	r2, [r7, #22]
 8007a92:	815a      	strh	r2, [r3, #10]

  while (len)
 8007a94:	e00a      	b.n	8007aac <SCSI_ModeSense10+0x38>
  {
    len--;
 8007a96:	8afb      	ldrh	r3, [r7, #22]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007a9c:	8afb      	ldrh	r3, [r7, #22]
 8007a9e:	8afa      	ldrh	r2, [r7, #22]
 8007aa0:	4907      	ldr	r1, [pc, #28]	; (8007ac0 <SCSI_ModeSense10+0x4c>)
 8007aa2:	5c89      	ldrb	r1, [r1, r2]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	731a      	strb	r2, [r3, #12]
  while (len)
 8007aac:	8afb      	ldrh	r3, [r7, #22]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1f1      	bne.n	8007a96 <SCSI_ModeSense10+0x22>
  }

  return 0;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	371c      	adds	r7, #28
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	0800d7bc 	.word	0x0800d7bc

08007ac4 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	460b      	mov	r3, r1
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ad8:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007ada:	2300      	movs	r3, #0
 8007adc:	75fb      	strb	r3, [r7, #23]
 8007ade:	e007      	b.n	8007af0 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	3301      	adds	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b11      	cmp	r3, #17
 8007af4:	d9f4      	bls.n	8007ae0 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2270      	movs	r2, #112	; 0x70
 8007afa:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	220c      	movs	r2, #12
 8007b00:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d02e      	beq.n	8007b70 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	3347      	adds	r3, #71	; 0x47
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	791a      	ldrb	r2, [r3, #4]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	3347      	adds	r3, #71	; 0x47
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	4413      	add	r3, r2
 8007b34:	7a5a      	ldrb	r2, [r3, #9]
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	3347      	adds	r3, #71	; 0x47
 8007b44:	00db      	lsls	r3, r3, #3
 8007b46:	4413      	add	r3, r2
 8007b48:	7a1a      	ldrb	r2, [r3, #8]
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007b54:	3301      	adds	r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d103      	bne.n	8007b70 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2212      	movs	r2, #18
 8007b74:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3304      	adds	r3, #4
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	2b12      	cmp	r3, #18
 8007b7e:	d805      	bhi.n	8007b8c <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr

08007b98 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	70fb      	strb	r3, [r7, #3]
 8007baa:	460b      	mov	r3, r1
 8007bac:	70bb      	strb	r3, [r7, #2]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb8:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	3347      	adds	r3, #71	; 0x47
 8007bc4:	00db      	lsls	r3, r3, #3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	78ba      	ldrb	r2, [r7, #2]
 8007bca:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	3347      	adds	r3, #71	; 0x47
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4413      	add	r3, r2
 8007bda:	2200      	movs	r2, #0
 8007bdc:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007be4:	3301      	adds	r3, #1
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	d103      	bne.n	8007c00 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	460b      	mov	r3, r1
 8007c14:	607a      	str	r2, [r7, #4]
 8007c16:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1e:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2200      	movs	r2, #0
 8007c24:	815a      	strh	r2, [r3, #10]
  return 0;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	371c      	adds	r7, #28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bc80      	pop	{r7}
 8007c30:	4770      	bx	lr

08007c32 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b086      	sub	sp, #24
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c46:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	7a1b      	ldrb	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d16e      	bne.n	8007d2e <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	db0a      	blt.n	8007c72 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c62:	2320      	movs	r3, #32
 8007c64:	2205      	movs	r2, #5
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff ff96 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c70:	e067      	b.n	8007d42 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	7afa      	ldrb	r2, [r7, #11]
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	4798      	blx	r3
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d008      	beq.n	8007c98 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c86:	7af9      	ldrb	r1, [r7, #11]
 8007c88:	233a      	movs	r3, #58	; 0x3a
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f7ff ff83 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007c92:	f04f 33ff 	mov.w	r3, #4294967295
 8007c96:	e054      	b.n	8007d42 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3303      	adds	r3, #3
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ca8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3304      	adds	r3, #4
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007cb2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	3205      	adds	r2, #5
 8007cb8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007cba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3307      	adds	r3, #7
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	3208      	adds	r2, #8
 8007cce:	7812      	ldrb	r2, [r2, #0]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ce4:	7af9      	ldrb	r1, [r7, #11]
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f000 f912 	bl	8007f10 <SCSI_CheckAddressRange>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da02      	bge.n	8007cf8 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	e024      	b.n	8007d42 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d00a      	beq.n	8007d2e <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007d1e:	2320      	movs	r3, #32
 8007d20:	2205      	movs	r2, #5
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff ff38 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2c:	e009      	b.n	8007d42 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d34:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	4619      	mov	r1, r3
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f000 f90a 	bl	8007f54 <SCSI_ProcessRead>
 8007d40:	4603      	mov	r3, r0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b086      	sub	sp, #24
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	460b      	mov	r3, r1
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	7a1b      	ldrb	r3, [r3, #8]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 8096 	bne.w	8007e96 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007d70:	b25b      	sxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	da0a      	bge.n	8007d8c <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	2205      	movs	r2, #5
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f7ff ff09 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007d86:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8a:	e08a      	b.n	8007ea2 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	7afa      	ldrb	r2, [r7, #11]
 8007d96:	4610      	mov	r0, r2
 8007d98:	4798      	blx	r3
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007da0:	7af9      	ldrb	r1, [r7, #11]
 8007da2:	233a      	movs	r3, #58	; 0x3a
 8007da4:	2202      	movs	r2, #2
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f7ff fef6 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007dac:	f04f 33ff 	mov.w	r3, #4294967295
 8007db0:	e077      	b.n	8007ea2 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	7afa      	ldrb	r2, [r7, #11]
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4798      	blx	r3
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d008      	beq.n	8007dd8 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007dc6:	7af9      	ldrb	r1, [r7, #11]
 8007dc8:	2327      	movs	r3, #39	; 0x27
 8007dca:	2202      	movs	r2, #2
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fee3 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd6:	e064      	b.n	8007ea2 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3302      	adds	r3, #2
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3303      	adds	r3, #3
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007de8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3304      	adds	r3, #4
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007df2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	3205      	adds	r2, #5
 8007df8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007dfa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3307      	adds	r3, #7
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	3208      	adds	r2, #8
 8007e0e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007e10:	431a      	orrs	r2, r3
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e24:	7af9      	ldrb	r1, [r7, #11]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f872 	bl	8007f10 <SCSI_CheckAddressRange>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	da02      	bge.n	8007e38 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295
 8007e36:	e034      	b.n	8007ea2 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d00a      	beq.n	8007e6c <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007e5c:	2320      	movs	r3, #32
 8007e5e:	2205      	movs	r2, #5
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fe99 	bl	8007b98 <SCSI_SenseCode>
      return -1;
 8007e66:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6a:	e01a      	b.n	8007ea2 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e72:	bf28      	it	cs
 8007e74:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007e78:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f103 020c 	add.w	r2, r3, #12
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f005 fac8 	bl	800d422 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e005      	b.n	8007ea2 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007e96:	7afb      	ldrb	r3, [r7, #11]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f8ce 	bl	800803c <SCSI_ProcessWrite>
 8007ea0:	4603      	mov	r3, r0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	607a      	str	r2, [r7, #4]
 8007eb6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ebe:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d008      	beq.n	8007ee0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007ece:	7af9      	ldrb	r1, [r7, #11]
 8007ed0:	2324      	movs	r3, #36	; 0x24
 8007ed2:	2205      	movs	r2, #5
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff fe5f 	bl	8007b98 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007eda:	f04f 33ff 	mov.w	r3, #4294967295
 8007ede:	e013      	b.n	8007f08 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007eec:	7af9      	ldrb	r1, [r7, #11]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 f80e 	bl	8007f10 <SCSI_CheckAddressRange>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da02      	bge.n	8007f00 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007efa:	f04f 33ff 	mov.w	r3, #4294967295
 8007efe:	e003      	b.n	8007f08 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2200      	movs	r2, #0
 8007f04:	815a      	strh	r2, [r3, #10]
  return 0;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f26:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	441a      	add	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d908      	bls.n	8007f4a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007f38:	7af9      	ldrb	r1, [r7, #11]
 8007f3a:	2321      	movs	r3, #33	; 0x21
 8007f3c:	2205      	movs	r2, #5
 8007f3e:	68f8      	ldr	r0, [r7, #12]
 8007f40:	f7ff fe2a 	bl	8007b98 <SCSI_SenseCode>
    return -1;
 8007f44:	f04f 33ff 	mov.w	r3, #4294967295
 8007f48:	e000      	b.n	8007f4c <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007f54:	b590      	push	{r4, r7, lr}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007f74:	fb02 f303 	mul.w	r3, r2, r3
 8007f78:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f80:	bf28      	it	cs
 8007f82:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007f86:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f8e:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	78f8      	ldrb	r0, [r7, #3]
 8007fae:	47a0      	blx	r4
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da08      	bge.n	8007fc8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007fb6:	78f9      	ldrb	r1, [r7, #3]
 8007fb8:	2311      	movs	r3, #17
 8007fba:	2204      	movs	r2, #4
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fdeb 	bl	8007b98 <SCSI_SenseCode>
    return -1;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	e035      	b.n	8008034 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f103 020c 	add.w	r2, r3, #12
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2181      	movs	r1, #129	; 0x81
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f005 fa01 	bl	800d3dc <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fee:	441a      	add	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8008002:	4619      	mov	r1, r3
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	fbb3 f3f1 	udiv	r3, r3, r1
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	1ad2      	subs	r2, r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2203      	movs	r2, #3
 8008030:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}

0800803c <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800804e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 800805c:	fb02 f303 	mul.w	r3, r2, r3
 8008060:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008068:	bf28      	it	cs
 800806a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800806e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008076:	695c      	ldr	r4, [r3, #20]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f103 010c 	add.w	r1, r3, #12
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 800808a:	4618      	mov	r0, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008092:	b29b      	uxth	r3, r3
 8008094:	78f8      	ldrb	r0, [r7, #3]
 8008096:	47a0      	blx	r4
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	da08      	bge.n	80080b0 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800809e:	78f9      	ldrb	r1, [r7, #3]
 80080a0:	2303      	movs	r3, #3
 80080a2:	2204      	movs	r2, #4
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff fd77 	bl	8007b98 <SCSI_SenseCode>

    return -1;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	e045      	b.n	800813c <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80080bc:	4619      	mov	r1, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80080c4:	441a      	add	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80080d8:	4619      	mov	r1, r3
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80080e0:	1ad2      	subs	r2, r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	1ad2      	subs	r2, r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008102:	2100      	movs	r1, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7ff f97f 	bl	8007408 <MSC_BOT_SendCSW>
 800810a:	e016      	b.n	800813a <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8008118:	fb02 f303 	mul.w	r3, r2, r3
 800811c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008120:	bf28      	it	cs
 8008122:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008126:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f103 020c 	add.w	r2, r3, #12
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	b29b      	uxth	r3, r3
 8008132:	2101      	movs	r1, #1
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f005 f974 	bl	800d422 <USBD_LL_PrepareReceive>
  }

  return 0;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	bd90      	pop	{r4, r7, pc}

08008144 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008154:	2302      	movs	r3, #2
 8008156:	2203      	movs	r2, #3
 8008158:	2181      	movs	r1, #129	; 0x81
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f005 f851 	bl	800d202 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008166:	2302      	movs	r3, #2
 8008168:	2203      	movs	r2, #3
 800816a:	2101      	movs	r1, #1
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f005 f848 	bl	800d202 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800817a:	2018      	movs	r0, #24
 800817c:	f005 f988 	bl	800d490 <USBD_static_malloc>
 8008180:	4602      	mov	r2, r0
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d102      	bne.n	8008198 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008192:	2301      	movs	r3, #1
 8008194:	73fb      	strb	r3, [r7, #15]
 8008196:	e011      	b.n	80081bc <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800819e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	2302      	movs	r3, #2
 80081b4:	2101      	movs	r1, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f005 f933 	bl	800d422 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80081d2:	2181      	movs	r1, #129	; 0x81
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f005 f83a 	bl	800d24e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80081e0:	2101      	movs	r1, #1
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f005 f833 	bl	800d24e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800820a:	4618      	mov	r0, r3
 800820c:	f005 f94c 	bl	800d4a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008234:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800824e:	2b00      	cmp	r3, #0
 8008250:	d051      	beq.n	80082f6 <USBD_CUSTOM_HID_Setup+0xd2>
 8008252:	2b20      	cmp	r3, #32
 8008254:	f040 80d8 	bne.w	8008408 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	3b02      	subs	r3, #2
 800825e:	2b09      	cmp	r3, #9
 8008260:	d841      	bhi.n	80082e6 <USBD_CUSTOM_HID_Setup+0xc2>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <USBD_CUSTOM_HID_Setup+0x44>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082c1 	.word	0x080082c1
 800826c:	0800829f 	.word	0x0800829f
 8008270:	080082e7 	.word	0x080082e7
 8008274:	080082e7 	.word	0x080082e7
 8008278:	080082e7 	.word	0x080082e7
 800827c:	080082e7 	.word	0x080082e7
 8008280:	080082e7 	.word	0x080082e7
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082af 	.word	0x080082af
 800828c:	08008291 	.word	0x08008291
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	605a      	str	r2, [r3, #4]
          break;
 800829c:	e02a      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3304      	adds	r3, #4
 80082a2:	2201      	movs	r2, #1
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 f98e 	bl	80095c8 <USBD_CtlSendData>
          break;
 80082ac:	e022      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	609a      	str	r2, [r3, #8]
          break;
 80082be:	e019      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3308      	adds	r3, #8
 80082c4:	2201      	movs	r2, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f97d 	bl	80095c8 <USBD_CtlSendData>
          break;
 80082ce:	e011      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2201      	movs	r2, #1
 80082d4:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80082d6:	6939      	ldr	r1, [r7, #16]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	88db      	ldrh	r3, [r3, #6]
 80082dc:	461a      	mov	r2, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 f9a0 	bl	8009624 <USBD_CtlPrepareRx>
          break;
 80082e4:	e006      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f903 	bl	80094f4 <USBD_CtlError>
          ret = USBD_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	75fb      	strb	r3, [r7, #23]
          break;
 80082f2:	bf00      	nop
      }
      break;
 80082f4:	e08f      	b.n	8008416 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b0b      	cmp	r3, #11
 80082fc:	d87c      	bhi.n	80083f8 <USBD_CUSTOM_HID_Setup+0x1d4>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008335 	.word	0x08008335
 8008308:	080083f9 	.word	0x080083f9
 800830c:	080083f9 	.word	0x080083f9
 8008310:	080083f9 	.word	0x080083f9
 8008314:	080083f9 	.word	0x080083f9
 8008318:	080083f9 	.word	0x080083f9
 800831c:	0800835d 	.word	0x0800835d
 8008320:	080083f9 	.word	0x080083f9
 8008324:	080083f9 	.word	0x080083f9
 8008328:	080083f9 	.word	0x080083f9
 800832c:	080083ab 	.word	0x080083ab
 8008330:	080083d3 	.word	0x080083d3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800833a:	2b03      	cmp	r3, #3
 800833c:	d107      	bne.n	800834e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800833e:	f107 030e 	add.w	r3, r7, #14
 8008342:	2202      	movs	r2, #2
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f93e 	bl	80095c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800834c:	e05b      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f8cf 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008356:	2302      	movs	r3, #2
 8008358:	75fb      	strb	r3, [r7, #23]
          break;
 800835a:	e054      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	885b      	ldrh	r3, [r3, #2]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b22      	cmp	r3, #34	; 0x22
 8008366:	d10b      	bne.n	8008380 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	88db      	ldrh	r3, [r3, #6]
 800836c:	2b5f      	cmp	r3, #95	; 0x5f
 800836e:	bf28      	it	cs
 8008370:	235f      	movcs	r3, #95	; 0x5f
 8008372:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e00d      	b.n	800839c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	885b      	ldrh	r3, [r3, #2]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b21      	cmp	r3, #33	; 0x21
 800838a:	d107      	bne.n	800839c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800838c:	4b24      	ldr	r3, [pc, #144]	; (8008420 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800838e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b09      	cmp	r3, #9
 8008396:	bf28      	it	cs
 8008398:	2309      	movcs	r3, #9
 800839a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800839c:	8bfb      	ldrh	r3, [r7, #30]
 800839e:	461a      	mov	r2, r3
 80083a0:	69b9      	ldr	r1, [r7, #24]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f910 	bl	80095c8 <USBD_CtlSendData>
          break;
 80083a8:	e02d      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d107      	bne.n	80083c4 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	330c      	adds	r3, #12
 80083b8:	2201      	movs	r2, #1
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f903 	bl	80095c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c2:	e020      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 f894 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 80083cc:	2302      	movs	r3, #2
 80083ce:	75fb      	strb	r3, [r7, #23]
          break;
 80083d0:	e019      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d106      	bne.n	80083ea <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083e8:	e00d      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f881 	bl	80094f4 <USBD_CtlError>
            ret = USBD_FAIL;
 80083f2:	2302      	movs	r3, #2
 80083f4:	75fb      	strb	r3, [r7, #23]
          break;
 80083f6:	e006      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 f87a 	bl	80094f4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008400:	2302      	movs	r3, #2
 8008402:	75fb      	strb	r3, [r7, #23]
          break;
 8008404:	bf00      	nop
      }
      break;
 8008406:	e006      	b.n	8008416 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f872 	bl	80094f4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008410:	2302      	movs	r3, #2
 8008412:	75fb      	strb	r3, [r7, #23]
      break;
 8008414:	bf00      	nop
  }
  return ret;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	200002ac 	.word	0x200002ac

08008424 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008440:	2b03      	cmp	r3, #3
 8008442:	d10f      	bne.n	8008464 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	7d1b      	ldrb	r3, [r3, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2201      	movs	r2, #1
 8008450:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	2181      	movs	r1, #129	; 0x81
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f004 ffbf 	bl	800d3dc <USBD_LL_Transmit>
 800845e:	e001      	b.n	8008464 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	e000      	b.n	8008466 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2229      	movs	r2, #41	; 0x29
 800847c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800847e:	4b03      	ldr	r3, [pc, #12]	; (800848c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000228 	.word	0x20000228

08008490 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2229      	movs	r2, #41	; 0x29
 800849c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800849e:	4b03      	ldr	r3, [pc, #12]	; (80084ac <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc80      	pop	{r7}
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	20000254 	.word	0x20000254

080084b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2229      	movs	r2, #41	; 0x29
 80084bc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80084be:	4b03      	ldr	r3, [pc, #12]	; (80084cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000280 	.word	0x20000280

080084d0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084e2:	2200      	movs	r2, #0
 80084e4:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008504:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	7810      	ldrb	r0, [r2, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	7852      	ldrb	r2, [r2, #1]
 8008516:	4611      	mov	r1, r2
 8008518:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	2302      	movs	r3, #2
 800851e:	2101      	movs	r1, #1
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f004 ff7e 	bl	800d422 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800853e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d10c      	bne.n	8008562 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	7810      	ldrb	r0, [r2, #0]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	7852      	ldrb	r2, [r2, #1]
 8008558:	4611      	mov	r1, r2
 800855a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	220a      	movs	r2, #10
 8008578:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800857a:	4b03      	ldr	r3, [pc, #12]	; (8008588 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800857c:	4618      	mov	r0, r3
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	bc80      	pop	{r7}
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	200002b8 	.word	0x200002b8

0800858c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008596:	2302      	movs	r3, #2
 8008598:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bc80      	pop	{r7}
 80085b6:	4770      	bx	lr

080085b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	4613      	mov	r3, r2
 80085c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085cc:	2302      	movs	r3, #2
 80085ce:	e01a      	b.n	8008606 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	79fa      	ldrb	r2, [r7, #7]
 80085fc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f004 fd94 	bl	800d12c <USBD_LL_Init>

  return USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800860e:	b480      	push	{r7}
 8008610:	b085      	sub	sp, #20
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d006      	beq.n	8008630 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73fb      	strb	r3, [r7, #15]
 800862e:	e001      	b.n	8008634 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008630:	2302      	movs	r3, #2
 8008632:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f004 fdbf 	bl	800d1cc <USBD_LL_Start>

  return USBD_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr

0800866c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008678:	2302      	movs	r3, #2
 800867a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00c      	beq.n	80086a0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	78fa      	ldrb	r2, [r7, #3]
 8008690:	4611      	mov	r1, r2
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d101      	bne.n	80086a0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	4798      	blx	r3

  return USBD_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 feca 	bl	800947c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80086f6:	461a      	mov	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	2b01      	cmp	r3, #1
 800870a:	d00c      	beq.n	8008726 <USBD_LL_SetupStage+0x56>
 800870c:	2b01      	cmp	r3, #1
 800870e:	d302      	bcc.n	8008716 <USBD_LL_SetupStage+0x46>
 8008710:	2b02      	cmp	r3, #2
 8008712:	d010      	beq.n	8008736 <USBD_LL_SetupStage+0x66>
 8008714:	e017      	b.n	8008746 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f9ca 	bl	8008ab8 <USBD_StdDevReq>
      break;
 8008724:	e01a      	b.n	800875c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa2c 	bl	8008b8c <USBD_StdItfReq>
      break;
 8008734:	e012      	b.n	800875c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa6a 	bl	8008c18 <USBD_StdEPReq>
      break;
 8008744:	e00a      	b.n	800875c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800874c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008750:	b2db      	uxtb	r3, r3
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f004 fdb8 	bl	800d2ca <USBD_LL_StallEP>
      break;
 800875a:	bf00      	nop
  }

  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	460b      	mov	r3, r1
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d14b      	bne.n	8008812 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008780:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008788:	2b03      	cmp	r3, #3
 800878a:	d134      	bne.n	80087f6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	429a      	cmp	r2, r3
 8008796:	d919      	bls.n	80087cc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	68da      	ldr	r2, [r3, #12]
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	68da      	ldr	r2, [r3, #12]
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d203      	bcs.n	80087ba <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	e002      	b.n	80087c0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087be:	b29b      	uxth	r3, r3
 80087c0:	461a      	mov	r2, r3
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 ff4b 	bl	8009660 <USBD_CtlContinueRx>
 80087ca:	e038      	b.n	800883e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d105      	bne.n	80087ee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 ff48 	bl	8009684 <USBD_CtlSendStatus>
 80087f4:	e023      	b.n	800883e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d11e      	bne.n	800883e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f004 fd5d 	bl	800d2ca <USBD_LL_StallEP>
 8008810:	e015      	b.n	800883e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00d      	beq.n	800883a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008824:	2b03      	cmp	r3, #3
 8008826:	d108      	bne.n	800883a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	7afa      	ldrb	r2, [r7, #11]
 8008832:	4611      	mov	r1, r2
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	4798      	blx	r3
 8008838:	e001      	b.n	800883e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800883a:	2302      	movs	r3, #2
 800883c:	e000      	b.n	8008840 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	460b      	mov	r3, r1
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008856:	7afb      	ldrb	r3, [r7, #11]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d17f      	bne.n	800895c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3314      	adds	r3, #20
 8008860:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008868:	2b02      	cmp	r3, #2
 800886a:	d15c      	bne.n	8008926 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	429a      	cmp	r2, r3
 8008876:	d915      	bls.n	80088a4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	68da      	ldr	r2, [r3, #12]
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	1ad2      	subs	r2, r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	b29b      	uxth	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 feb5 	bl	8009600 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008896:	2300      	movs	r3, #0
 8008898:	2200      	movs	r2, #0
 800889a:	2100      	movs	r1, #0
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f004 fdc0 	bl	800d422 <USBD_LL_PrepareReceive>
 80088a2:	e04e      	b.n	8008942 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	6912      	ldr	r2, [r2, #16]
 80088ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80088b0:	fb02 f201 	mul.w	r2, r2, r1
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d11c      	bne.n	80088f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d316      	bcc.n	80088f4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d20f      	bcs.n	80088f4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088d4:	2200      	movs	r2, #0
 80088d6:	2100      	movs	r1, #0
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fe91 	bl	8009600 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088e6:	2300      	movs	r3, #0
 80088e8:	2200      	movs	r2, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f004 fd98 	bl	800d422 <USBD_LL_PrepareReceive>
 80088f2:	e026      	b.n	8008942 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008906:	2b03      	cmp	r3, #3
 8008908:	d105      	bne.n	8008916 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f004 fcd6 	bl	800d2ca <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fec3 	bl	80096aa <USBD_CtlReceiveStatus>
 8008924:	e00d      	b.n	8008942 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800892c:	2b04      	cmp	r3, #4
 800892e:	d004      	beq.n	800893a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800893a:	2180      	movs	r1, #128	; 0x80
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f004 fcc4 	bl	800d2ca <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008948:	2b01      	cmp	r3, #1
 800894a:	d11d      	bne.n	8008988 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f7ff fe83 	bl	8008658 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800895a:	e015      	b.n	8008988 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00d      	beq.n	8008984 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800896e:	2b03      	cmp	r3, #3
 8008970:	d108      	bne.n	8008984 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	7afa      	ldrb	r2, [r7, #11]
 800897c:	4611      	mov	r1, r2
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	4798      	blx	r3
 8008982:	e001      	b.n	8008988 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008984:	2302      	movs	r3, #2
 8008986:	e000      	b.n	800898a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2200      	movs	r2, #0
 800899e:	2100      	movs	r1, #0
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f004 fc2e 	bl	800d202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2240      	movs	r2, #64	; 0x40
 80089b2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089b6:	2340      	movs	r3, #64	; 0x40
 80089b8:	2200      	movs	r2, #0
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f004 fc20 	bl	800d202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2240      	movs	r2, #64	; 0x40
 80089cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d009      	beq.n	8008a0a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6852      	ldr	r2, [r2, #4]
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	4611      	mov	r1, r2
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
  }

  return USBD_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	78fa      	ldrb	r2, [r7, #3]
 8008a24:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr

08008a32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2204      	movs	r2, #4
 8008a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bc80      	pop	{r7}
 8008a58:	4770      	bx	lr

08008a5a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d105      	bne.n	8008a78 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr

08008a84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d10b      	bne.n	8008aae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d004      	beq.n	8008adc <USBD_StdDevReq+0x24>
 8008ad2:	2b40      	cmp	r3, #64	; 0x40
 8008ad4:	d002      	beq.n	8008adc <USBD_StdDevReq+0x24>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <USBD_StdDevReq+0x34>
 8008ada:	e04c      	b.n	8008b76 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	4798      	blx	r3
      break;
 8008aea:	e049      	b.n	8008b80 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	785b      	ldrb	r3, [r3, #1]
 8008af0:	2b09      	cmp	r3, #9
 8008af2:	d83a      	bhi.n	8008b6a <USBD_StdDevReq+0xb2>
 8008af4:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <USBD_StdDevReq+0x44>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008b4d 	.word	0x08008b4d
 8008b00:	08008b61 	.word	0x08008b61
 8008b04:	08008b6b 	.word	0x08008b6b
 8008b08:	08008b57 	.word	0x08008b57
 8008b0c:	08008b6b 	.word	0x08008b6b
 8008b10:	08008b2f 	.word	0x08008b2f
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b6b 	.word	0x08008b6b
 8008b1c:	08008b43 	.word	0x08008b43
 8008b20:	08008b39 	.word	0x08008b39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f9d4 	bl	8008ed4 <USBD_GetDescriptor>
          break;
 8008b2c:	e022      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fb37 	bl	80091a4 <USBD_SetAddress>
          break;
 8008b36:	e01d      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fb74 	bl	8009228 <USBD_SetConfig>
          break;
 8008b40:	e018      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fbfd 	bl	8009344 <USBD_GetConfig>
          break;
 8008b4a:	e013      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc2c 	bl	80093ac <USBD_GetStatus>
          break;
 8008b54:	e00e      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fc5a 	bl	8009412 <USBD_SetFeature>
          break;
 8008b5e:	e009      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc69 	bl	800943a <USBD_ClrFeature>
          break;
 8008b68:	e004      	b.n	8008b74 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fcc1 	bl	80094f4 <USBD_CtlError>
          break;
 8008b72:	bf00      	nop
      }
      break;
 8008b74:	e004      	b.n	8008b80 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fcbb 	bl	80094f4 <USBD_CtlError>
      break;
 8008b7e:	bf00      	nop
  }

  return ret;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3710      	adds	r7, #16
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop

08008b8c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ba2:	2b20      	cmp	r3, #32
 8008ba4:	d003      	beq.n	8008bae <USBD_StdItfReq+0x22>
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d001      	beq.n	8008bae <USBD_StdItfReq+0x22>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d12a      	bne.n	8008c04 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d81d      	bhi.n	8008bf6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d813      	bhi.n	8008bec <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	88db      	ldrh	r3, [r3, #6]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d110      	bne.n	8008c00 <USBD_StdItfReq+0x74>
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fd4d 	bl	8009684 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bea:	e009      	b.n	8008c00 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fc80 	bl	80094f4 <USBD_CtlError>
          break;
 8008bf4:	e004      	b.n	8008c00 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fc7b 	bl	80094f4 <USBD_CtlError>
          break;
 8008bfe:	e000      	b.n	8008c02 <USBD_StdItfReq+0x76>
          break;
 8008c00:	bf00      	nop
      }
      break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fc74 	bl	80094f4 <USBD_CtlError>
      break;
 8008c0c:	bf00      	nop
  }

  return USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	889b      	ldrh	r3, [r3, #4]
 8008c2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c34:	2b20      	cmp	r3, #32
 8008c36:	d004      	beq.n	8008c42 <USBD_StdEPReq+0x2a>
 8008c38:	2b40      	cmp	r3, #64	; 0x40
 8008c3a:	d002      	beq.n	8008c42 <USBD_StdEPReq+0x2a>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <USBD_StdEPReq+0x3a>
 8008c40:	e13d      	b.n	8008ebe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
      break;
 8008c50:	e13a      	b.n	8008ec8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c5a:	2b20      	cmp	r3, #32
 8008c5c:	d10a      	bne.n	8008c74 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
 8008c72:	e12a      	b.n	8008eca <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d03e      	beq.n	8008cfa <USBD_StdEPReq+0xe2>
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d002      	beq.n	8008c86 <USBD_StdEPReq+0x6e>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d070      	beq.n	8008d66 <USBD_StdEPReq+0x14e>
 8008c84:	e115      	b.n	8008eb2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d002      	beq.n	8008c96 <USBD_StdEPReq+0x7e>
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d015      	beq.n	8008cc0 <USBD_StdEPReq+0xa8>
 8008c94:	e02b      	b.n	8008cee <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00c      	beq.n	8008cb6 <USBD_StdEPReq+0x9e>
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2b80      	cmp	r3, #128	; 0x80
 8008ca0:	d009      	beq.n	8008cb6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f004 fb0f 	bl	800d2ca <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cac:	2180      	movs	r1, #128	; 0x80
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f004 fb0b 	bl	800d2ca <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cb4:	e020      	b.n	8008cf8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008cb6:	6839      	ldr	r1, [r7, #0]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fc1b 	bl	80094f4 <USBD_CtlError>
              break;
 8008cbe:	e01b      	b.n	8008cf8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	885b      	ldrh	r3, [r3, #2]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10e      	bne.n	8008ce6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <USBD_StdEPReq+0xce>
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	2b80      	cmp	r3, #128	; 0x80
 8008cd2:	d008      	beq.n	8008ce6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	88db      	ldrh	r3, [r3, #6]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f004 faf2 	bl	800d2ca <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fccc 	bl	8009684 <USBD_CtlSendStatus>

              break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fbff 	bl	80094f4 <USBD_CtlError>
              break;
 8008cf6:	bf00      	nop
          }
          break;
 8008cf8:	e0e0      	b.n	8008ebc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d002      	beq.n	8008d0a <USBD_StdEPReq+0xf2>
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d015      	beq.n	8008d34 <USBD_StdEPReq+0x11c>
 8008d08:	e026      	b.n	8008d58 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00c      	beq.n	8008d2a <USBD_StdEPReq+0x112>
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	2b80      	cmp	r3, #128	; 0x80
 8008d14:	d009      	beq.n	8008d2a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f004 fad5 	bl	800d2ca <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d20:	2180      	movs	r1, #128	; 0x80
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f004 fad1 	bl	800d2ca <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d28:	e01c      	b.n	8008d64 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fbe1 	bl	80094f4 <USBD_CtlError>
              break;
 8008d32:	e017      	b.n	8008d64 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	885b      	ldrh	r3, [r3, #2]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d112      	bne.n	8008d62 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d004      	beq.n	8008d50 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f004 fadc 	bl	800d308 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fc97 	bl	8009684 <USBD_CtlSendStatus>
              }
              break;
 8008d56:	e004      	b.n	8008d62 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fbca 	bl	80094f4 <USBD_CtlError>
              break;
 8008d60:	e000      	b.n	8008d64 <USBD_StdEPReq+0x14c>
              break;
 8008d62:	bf00      	nop
          }
          break;
 8008d64:	e0aa      	b.n	8008ebc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d002      	beq.n	8008d76 <USBD_StdEPReq+0x15e>
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d032      	beq.n	8008dda <USBD_StdEPReq+0x1c2>
 8008d74:	e097      	b.n	8008ea6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <USBD_StdEPReq+0x174>
 8008d7c:	7bbb      	ldrb	r3, [r7, #14]
 8008d7e:	2b80      	cmp	r3, #128	; 0x80
 8008d80:	d004      	beq.n	8008d8c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fbb5 	bl	80094f4 <USBD_CtlError>
                break;
 8008d8a:	e091      	b.n	8008eb0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	da0b      	bge.n	8008dac <USBD_StdEPReq+0x194>
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	3310      	adds	r3, #16
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4413      	add	r3, r2
 8008da8:	3304      	adds	r3, #4
 8008daa:	e00b      	b.n	8008dc4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	3304      	adds	r3, #4
 8008dc4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 fbf8 	bl	80095c8 <USBD_CtlSendData>
              break;
 8008dd8:	e06a      	b.n	8008eb0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	da11      	bge.n	8008e06 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3318      	adds	r3, #24
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d117      	bne.n	8008e2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008dfc:	6839      	ldr	r1, [r7, #0]
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 fb78 	bl	80094f4 <USBD_CtlError>
                  break;
 8008e04:	e054      	b.n	8008eb0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	f003 020f 	and.w	r2, r3, #15
 8008e0c:	6879      	ldr	r1, [r7, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fb65 	bl	80094f4 <USBD_CtlError>
                  break;
 8008e2a:	e041      	b.n	8008eb0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	da0b      	bge.n	8008e4c <USBD_StdEPReq+0x234>
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	3310      	adds	r3, #16
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	4413      	add	r3, r2
 8008e48:	3304      	adds	r3, #4
 8008e4a:	e00b      	b.n	8008e64 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	3304      	adds	r3, #4
 8008e64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e66:	7bbb      	ldrb	r3, [r7, #14]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d002      	beq.n	8008e72 <USBD_StdEPReq+0x25a>
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	2b80      	cmp	r3, #128	; 0x80
 8008e70:	d103      	bne.n	8008e7a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e00e      	b.n	8008e98 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f004 fa61 	bl	800d346 <USBD_LL_IsStallEP>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	601a      	str	r2, [r3, #0]
 8008e90:	e002      	b.n	8008e98 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2200      	movs	r2, #0
 8008e96:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fb92 	bl	80095c8 <USBD_CtlSendData>
              break;
 8008ea4:	e004      	b.n	8008eb0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fb23 	bl	80094f4 <USBD_CtlError>
              break;
 8008eae:	bf00      	nop
          }
          break;
 8008eb0:	e004      	b.n	8008ebc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fb1d 	bl	80094f4 <USBD_CtlError>
          break;
 8008eba:	bf00      	nop
      }
      break;
 8008ebc:	e004      	b.n	8008ec8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fb17 	bl	80094f4 <USBD_CtlError>
      break;
 8008ec6:	bf00      	nop
  }

  return ret;
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	0a1b      	lsrs	r3, r3, #8
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	2b06      	cmp	r3, #6
 8008ef6:	f200 8128 	bhi.w	800914a <USBD_GetDescriptor+0x276>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBD_GetDescriptor+0x2c>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f1d 	.word	0x08008f1d
 8008f04:	08008f35 	.word	0x08008f35
 8008f08:	08008f75 	.word	0x08008f75
 8008f0c:	0800914b 	.word	0x0800914b
 8008f10:	0800914b 	.word	0x0800914b
 8008f14:	080090eb 	.word	0x080090eb
 8008f18:	08009117 	.word	0x08009117
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
      break;
 8008f32:	e112      	b.n	800915a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	7c1b      	ldrb	r3, [r3, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10d      	bne.n	8008f58 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f44:	f107 0208 	add.w	r2, r7, #8
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3301      	adds	r3, #1
 8008f52:	2202      	movs	r2, #2
 8008f54:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f56:	e100      	b.n	800915a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	f107 0208 	add.w	r2, r7, #8
 8008f64:	4610      	mov	r0, r2
 8008f66:	4798      	blx	r3
 8008f68:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	2202      	movs	r2, #2
 8008f70:	701a      	strb	r2, [r3, #0]
      break;
 8008f72:	e0f2      	b.n	800915a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	885b      	ldrh	r3, [r3, #2]
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b05      	cmp	r3, #5
 8008f7c:	f200 80ac 	bhi.w	80090d8 <USBD_GetDescriptor+0x204>
 8008f80:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <USBD_GetDescriptor+0xb4>)
 8008f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f86:	bf00      	nop
 8008f88:	08008fa1 	.word	0x08008fa1
 8008f8c:	08008fd5 	.word	0x08008fd5
 8008f90:	08009009 	.word	0x08009009
 8008f94:	0800903d 	.word	0x0800903d
 8008f98:	08009071 	.word	0x08009071
 8008f9c:	080090a5 	.word	0x080090a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	7c12      	ldrb	r2, [r2, #16]
 8008fb8:	f107 0108 	add.w	r1, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc2:	e091      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa94 	bl	80094f4 <USBD_CtlError>
            err++;
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd2:	e089      	b.n	80090e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff6:	e077      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa7a 	bl	80094f4 <USBD_CtlError>
            err++;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	3301      	adds	r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
          break;
 8009006:	e06f      	b.n	80090e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	7c12      	ldrb	r2, [r2, #16]
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
 8009028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902a:	e05d      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa60 	bl	80094f4 <USBD_CtlError>
            err++;
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	3301      	adds	r3, #1
 8009038:	72fb      	strb	r3, [r7, #11]
          break;
 800903a:	e055      	b.n	80090e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905e:	e043      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa46 	bl	80094f4 <USBD_CtlError>
            err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
          break;
 800906e:	e03b      	b.n	80090e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	7c12      	ldrb	r2, [r2, #16]
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	4610      	mov	r0, r2
 800908e:	4798      	blx	r3
 8009090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009092:	e029      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa2c 	bl	80094f4 <USBD_CtlError>
            err++;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	3301      	adds	r3, #1
 80090a0:	72fb      	strb	r3, [r7, #11]
          break;
 80090a2:	e021      	b.n	80090e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	7c12      	ldrb	r2, [r2, #16]
 80090bc:	f107 0108 	add.w	r1, r7, #8
 80090c0:	4610      	mov	r0, r2
 80090c2:	4798      	blx	r3
 80090c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c6:	e00f      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa12 	bl	80094f4 <USBD_CtlError>
            err++;
 80090d0:	7afb      	ldrb	r3, [r7, #11]
 80090d2:	3301      	adds	r3, #1
 80090d4:	72fb      	strb	r3, [r7, #11]
          break;
 80090d6:	e007      	b.n	80090e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa0a 	bl	80094f4 <USBD_CtlError>
          err++;
 80090e0:	7afb      	ldrb	r3, [r7, #11]
 80090e2:	3301      	adds	r3, #1
 80090e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80090e6:	e038      	b.n	800915a <USBD_GetDescriptor+0x286>
 80090e8:	e037      	b.n	800915a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	7c1b      	ldrb	r3, [r3, #16]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d109      	bne.n	8009106 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090fa:	f107 0208 	add.w	r2, r7, #8
 80090fe:	4610      	mov	r0, r2
 8009100:	4798      	blx	r3
 8009102:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009104:	e029      	b.n	800915a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9f3 	bl	80094f4 <USBD_CtlError>
        err++;
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	3301      	adds	r3, #1
 8009112:	72fb      	strb	r3, [r7, #11]
      break;
 8009114:	e021      	b.n	800915a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	7c1b      	ldrb	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10d      	bne.n	800913a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009126:	f107 0208 	add.w	r2, r7, #8
 800912a:	4610      	mov	r0, r2
 800912c:	4798      	blx	r3
 800912e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	3301      	adds	r3, #1
 8009134:	2207      	movs	r2, #7
 8009136:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009138:	e00f      	b.n	800915a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 f9d9 	bl	80094f4 <USBD_CtlError>
        err++;
 8009142:	7afb      	ldrb	r3, [r7, #11]
 8009144:	3301      	adds	r3, #1
 8009146:	72fb      	strb	r3, [r7, #11]
      break;
 8009148:	e007      	b.n	800915a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9d1 	bl	80094f4 <USBD_CtlError>
      err++;
 8009152:	7afb      	ldrb	r3, [r7, #11]
 8009154:	3301      	adds	r3, #1
 8009156:	72fb      	strb	r3, [r7, #11]
      break;
 8009158:	bf00      	nop
  }

  if (err != 0U)
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11c      	bne.n	800919a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009160:	893b      	ldrh	r3, [r7, #8]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d011      	beq.n	800918a <USBD_GetDescriptor+0x2b6>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	88db      	ldrh	r3, [r3, #6]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00d      	beq.n	800918a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88da      	ldrh	r2, [r3, #6]
 8009172:	893b      	ldrh	r3, [r7, #8]
 8009174:	4293      	cmp	r3, r2
 8009176:	bf28      	it	cs
 8009178:	4613      	movcs	r3, r2
 800917a:	b29b      	uxth	r3, r3
 800917c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800917e:	893b      	ldrh	r3, [r7, #8]
 8009180:	461a      	mov	r2, r3
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fa1f 	bl	80095c8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	88db      	ldrh	r3, [r3, #6]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fa76 	bl	8009684 <USBD_CtlSendStatus>
 8009198:	e000      	b.n	800919c <USBD_GetDescriptor+0x2c8>
    return;
 800919a:	bf00      	nop
    }
  }
}
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop

080091a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	889b      	ldrh	r3, [r3, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d130      	bne.n	8009218 <USBD_SetAddress+0x74>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	88db      	ldrh	r3, [r3, #6]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d12c      	bne.n	8009218 <USBD_SetAddress+0x74>
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	2b7f      	cmp	r3, #127	; 0x7f
 80091c4:	d828      	bhi.n	8009218 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	885b      	ldrh	r3, [r3, #2]
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d8:	2b03      	cmp	r3, #3
 80091da:	d104      	bne.n	80091e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f988 	bl	80094f4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e4:	e01c      	b.n	8009220 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	7bfa      	ldrb	r2, [r7, #15]
 80091ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f004 f8d3 	bl	800d39e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fa43 	bl	8009684 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091fe:	7bfb      	ldrb	r3, [r7, #15]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920c:	e008      	b.n	8009220 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009216:	e003      	b.n	8009220 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f96a 	bl	80094f4 <USBD_CtlError>
  }
}
 8009220:	bf00      	nop
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	885b      	ldrh	r3, [r3, #2]
 8009236:	b2da      	uxtb	r2, r3
 8009238:	4b41      	ldr	r3, [pc, #260]	; (8009340 <USBD_SetConfig+0x118>)
 800923a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800923c:	4b40      	ldr	r3, [pc, #256]	; (8009340 <USBD_SetConfig+0x118>)
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d904      	bls.n	800924e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f954 	bl	80094f4 <USBD_CtlError>
 800924c:	e075      	b.n	800933a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009254:	2b02      	cmp	r3, #2
 8009256:	d002      	beq.n	800925e <USBD_SetConfig+0x36>
 8009258:	2b03      	cmp	r3, #3
 800925a:	d023      	beq.n	80092a4 <USBD_SetConfig+0x7c>
 800925c:	e062      	b.n	8009324 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800925e:	4b38      	ldr	r3, [pc, #224]	; (8009340 <USBD_SetConfig+0x118>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d01a      	beq.n	800929c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009266:	4b36      	ldr	r3, [pc, #216]	; (8009340 <USBD_SetConfig+0x118>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	461a      	mov	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2203      	movs	r2, #3
 8009274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009278:	4b31      	ldr	r3, [pc, #196]	; (8009340 <USBD_SetConfig+0x118>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff f9f4 	bl	800866c <USBD_SetClassConfig>
 8009284:	4603      	mov	r3, r0
 8009286:	2b02      	cmp	r3, #2
 8009288:	d104      	bne.n	8009294 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f931 	bl	80094f4 <USBD_CtlError>
            return;
 8009292:	e052      	b.n	800933a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f9f5 	bl	8009684 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800929a:	e04e      	b.n	800933a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f9f1 	bl	8009684 <USBD_CtlSendStatus>
        break;
 80092a2:	e04a      	b.n	800933a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80092a4:	4b26      	ldr	r3, [pc, #152]	; (8009340 <USBD_SetConfig+0x118>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d112      	bne.n	80092d2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80092b4:	4b22      	ldr	r3, [pc, #136]	; (8009340 <USBD_SetConfig+0x118>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80092be:	4b20      	ldr	r3, [pc, #128]	; (8009340 <USBD_SetConfig+0x118>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff f9f0 	bl	80086aa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f9da 	bl	8009684 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092d0:	e033      	b.n	800933a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80092d2:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <USBD_SetConfig+0x118>)
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d01d      	beq.n	800931c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff f9de 	bl	80086aa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80092ee:	4b14      	ldr	r3, [pc, #80]	; (8009340 <USBD_SetConfig+0x118>)
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	461a      	mov	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092f8:	4b11      	ldr	r3, [pc, #68]	; (8009340 <USBD_SetConfig+0x118>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff f9b4 	bl	800866c <USBD_SetClassConfig>
 8009304:	4603      	mov	r3, r0
 8009306:	2b02      	cmp	r3, #2
 8009308:	d104      	bne.n	8009314 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f8f1 	bl	80094f4 <USBD_CtlError>
            return;
 8009312:	e012      	b.n	800933a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 f9b5 	bl	8009684 <USBD_CtlSendStatus>
        break;
 800931a:	e00e      	b.n	800933a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f9b1 	bl	8009684 <USBD_CtlSendStatus>
        break;
 8009322:	e00a      	b.n	800933a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f8e4 	bl	80094f4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <USBD_SetConfig+0x118>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff f9b9 	bl	80086aa <USBD_ClrClassConfig>
        break;
 8009338:	bf00      	nop
    }
  }
}
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20000a78 	.word	0x20000a78

08009344 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	88db      	ldrh	r3, [r3, #6]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d004      	beq.n	8009360 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f8cb 	bl	80094f4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800935e:	e021      	b.n	80093a4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009366:	2b01      	cmp	r3, #1
 8009368:	db17      	blt.n	800939a <USBD_GetConfig+0x56>
 800936a:	2b02      	cmp	r3, #2
 800936c:	dd02      	ble.n	8009374 <USBD_GetConfig+0x30>
 800936e:	2b03      	cmp	r3, #3
 8009370:	d00b      	beq.n	800938a <USBD_GetConfig+0x46>
 8009372:	e012      	b.n	800939a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3308      	adds	r3, #8
 800937e:	2201      	movs	r2, #1
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f920 	bl	80095c8 <USBD_CtlSendData>
        break;
 8009388:	e00c      	b.n	80093a4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3304      	adds	r3, #4
 800938e:	2201      	movs	r2, #1
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f918 	bl	80095c8 <USBD_CtlSendData>
        break;
 8009398:	e004      	b.n	80093a4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8a9 	bl	80094f4 <USBD_CtlError>
        break;
 80093a2:	bf00      	nop
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093bc:	3b01      	subs	r3, #1
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d81e      	bhi.n	8009400 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	88db      	ldrh	r3, [r3, #6]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d004      	beq.n	80093d4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f891 	bl	80094f4 <USBD_CtlError>
        break;
 80093d2:	e01a      	b.n	800940a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d005      	beq.n	80093f0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f043 0202 	orr.w	r2, r3, #2
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	330c      	adds	r3, #12
 80093f4:	2202      	movs	r2, #2
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f8e5 	bl	80095c8 <USBD_CtlSendData>
      break;
 80093fe:	e004      	b.n	800940a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 f876 	bl	80094f4 <USBD_CtlError>
      break;
 8009408:	bf00      	nop
  }
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	885b      	ldrh	r3, [r3, #2]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d106      	bne.n	8009432 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f929 	bl	8009684 <USBD_CtlSendStatus>
  }
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944a:	3b01      	subs	r3, #1
 800944c:	2b02      	cmp	r3, #2
 800944e:	d80b      	bhi.n	8009468 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	885b      	ldrh	r3, [r3, #2]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d10c      	bne.n	8009472 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f90f 	bl	8009684 <USBD_CtlSendStatus>
      }
      break;
 8009466:	e004      	b.n	8009472 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f842 	bl	80094f4 <USBD_CtlError>
      break;
 8009470:	e000      	b.n	8009474 <USBD_ClrFeature+0x3a>
      break;
 8009472:	bf00      	nop
  }
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781a      	ldrb	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	785a      	ldrb	r2, [r3, #1]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	3302      	adds	r3, #2
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	b29a      	uxth	r2, r3
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	3303      	adds	r3, #3
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	021b      	lsls	r3, r3, #8
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	4413      	add	r3, r2
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	3304      	adds	r3, #4
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	3305      	adds	r3, #5
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	021b      	lsls	r3, r3, #8
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	4413      	add	r3, r2
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	3306      	adds	r3, #6
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	3307      	adds	r3, #7
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	021b      	lsls	r3, r3, #8
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	4413      	add	r3, r2
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	80da      	strh	r2, [r3, #6]

}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bc80      	pop	{r7}
 80094f2:	4770      	bx	lr

080094f4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80094fe:	2180      	movs	r1, #128	; 0x80
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f003 fee2 	bl	800d2ca <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009506:	2100      	movs	r1, #0
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f003 fede 	bl	800d2ca <USBD_LL_StallEP>
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b086      	sub	sp, #24
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d032      	beq.n	8009592 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 f834 	bl	800959a <USBD_GetLen>
 8009532:	4603      	mov	r3, r0
 8009534:	3301      	adds	r3, #1
 8009536:	b29b      	uxth	r3, r3
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009540:	7dfb      	ldrb	r3, [r7, #23]
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	75fa      	strb	r2, [r7, #23]
 8009546:	461a      	mov	r2, r3
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4413      	add	r3, r2
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7812      	ldrb	r2, [r2, #0]
 8009550:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	75fa      	strb	r2, [r7, #23]
 8009558:	461a      	mov	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	4413      	add	r3, r2
 800955e:	2203      	movs	r2, #3
 8009560:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009562:	e012      	b.n	800958a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	75fa      	strb	r2, [r7, #23]
 800956a:	461a      	mov	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	441a      	add	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1c59      	adds	r1, r3, #1
 8009574:	60f9      	str	r1, [r7, #12]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	75fa      	strb	r2, [r7, #23]
 8009580:	461a      	mov	r2, r3
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	4413      	add	r3, r2
 8009586:	2200      	movs	r2, #0
 8009588:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1e8      	bne.n	8009564 <USBD_GetString+0x4e>
    }
  }
}
 8009592:	bf00      	nop
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800959a:	b480      	push	{r7}
 800959c:	b085      	sub	sp, #20
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80095a6:	e005      	b.n	80095b4 <USBD_GetLen+0x1a>
  {
    len++;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	3301      	adds	r3, #1
 80095ac:	73fb      	strb	r3, [r7, #15]
    buf++;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	3301      	adds	r3, #1
 80095b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f5      	bne.n	80095a8 <USBD_GetLen+0xe>
  }

  return len;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr

080095c8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4613      	mov	r3, r2
 80095d4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2202      	movs	r2, #2
 80095da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095de:	88fa      	ldrh	r2, [r7, #6]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80095e4:	88fa      	ldrh	r2, [r7, #6]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095ea:	88fb      	ldrh	r3, [r7, #6]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	2100      	movs	r1, #0
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f003 fef3 	bl	800d3dc <USBD_LL_Transmit>

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800960e:	88fb      	ldrh	r3, [r7, #6]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	2100      	movs	r1, #0
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f003 fee1 	bl	800d3dc <USBD_LL_Transmit>

  return USBD_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	4613      	mov	r3, r2
 8009630:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2203      	movs	r2, #3
 8009636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800963a:	88fa      	ldrh	r2, [r7, #6]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800964a:	88fb      	ldrh	r3, [r7, #6]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	2100      	movs	r1, #0
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f003 fee6 	bl	800d422 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800966e:	88fb      	ldrh	r3, [r7, #6]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	2100      	movs	r1, #0
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f003 fed4 	bl	800d422 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2204      	movs	r2, #4
 8009690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009694:	2300      	movs	r3, #0
 8009696:	2200      	movs	r2, #0
 8009698:	2100      	movs	r1, #0
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f003 fe9e 	bl	800d3dc <USBD_LL_Transmit>

  return USBD_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2205      	movs	r2, #5
 80096b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ba:	2300      	movs	r3, #0
 80096bc:	2200      	movs	r2, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f003 feae 	bl	800d422 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b087      	sub	sp, #28
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	4613      	mov	r3, r2
 80096dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096de:	2301      	movs	r3, #1
 80096e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80096e6:	4b1e      	ldr	r3, [pc, #120]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 80096e8:	7a5b      	ldrb	r3, [r3, #9]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d831      	bhi.n	8009754 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096f0:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 80096f2:	7a5b      	ldrb	r3, [r3, #9]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	4b19      	ldr	r3, [pc, #100]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 80096fa:	2100      	movs	r1, #0
 80096fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80096fe:	4b18      	ldr	r3, [pc, #96]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 8009700:	7a5b      	ldrb	r3, [r3, #9]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	4a16      	ldr	r2, [pc, #88]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800970e:	4b14      	ldr	r3, [pc, #80]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 8009710:	7a5b      	ldrb	r3, [r3, #9]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	461a      	mov	r2, r3
 8009716:	4b12      	ldr	r3, [pc, #72]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 8009718:	4413      	add	r3, r2
 800971a:	79fa      	ldrb	r2, [r7, #7]
 800971c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800971e:	4b10      	ldr	r3, [pc, #64]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 8009720:	7a5b      	ldrb	r3, [r3, #9]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	b2d1      	uxtb	r1, r2
 8009728:	4a0d      	ldr	r2, [pc, #52]	; (8009760 <FATFS_LinkDriverEx+0x90>)
 800972a:	7251      	strb	r1, [r2, #9]
 800972c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800972e:	7dbb      	ldrb	r3, [r7, #22]
 8009730:	3330      	adds	r3, #48	; 0x30
 8009732:	b2da      	uxtb	r2, r3
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	3301      	adds	r3, #1
 800973c:	223a      	movs	r2, #58	; 0x3a
 800973e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	3302      	adds	r3, #2
 8009744:	222f      	movs	r2, #47	; 0x2f
 8009746:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	3303      	adds	r3, #3
 800974c:	2200      	movs	r2, #0
 800974e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009750:	2300      	movs	r3, #0
 8009752:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009754:	7dfb      	ldrb	r3, [r7, #23]
}
 8009756:	4618      	mov	r0, r3
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	bc80      	pop	{r7}
 800975e:	4770      	bx	lr
 8009760:	20000a7c 	.word	0x20000a7c

08009764 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800976e:	2200      	movs	r2, #0
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff ffac 	bl	80096d0 <FATFS_LinkDriverEx>
 8009778:	4603      	mov	r3, r0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	4603      	mov	r3, r0
 800978a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009794:	2b84      	cmp	r3, #132	; 0x84
 8009796:	d005      	beq.n	80097a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009798:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	3303      	adds	r3, #3
 80097a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bc80      	pop	{r7}
 80097ae:	4770      	bx	lr

080097b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097b6:	f3ef 8305 	mrs	r3, IPSR
 80097ba:	607b      	str	r3, [r7, #4]
  return(result);
 80097bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bf14      	ite	ne
 80097c2:	2301      	movne	r3, #1
 80097c4:	2300      	moveq	r3, #0
 80097c6:	b2db      	uxtb	r3, r3
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr

080097d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097d6:	f002 f845 	bl	800b864 <vTaskStartScheduler>
  
  return osOK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	bd80      	pop	{r7, pc}

080097e0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e2:	b089      	sub	sp, #36	; 0x24
 80097e4:	af04      	add	r7, sp, #16
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d020      	beq.n	8009834 <osThreadCreate+0x54>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01c      	beq.n	8009834 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685c      	ldr	r4, [r3, #4]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681d      	ldr	r5, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	691e      	ldr	r6, [r3, #16]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff ffb8 	bl	8009782 <makeFreeRtosPriority>
 8009812:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800981c:	9202      	str	r2, [sp, #8]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	9100      	str	r1, [sp, #0]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	4632      	mov	r2, r6
 8009826:	4629      	mov	r1, r5
 8009828:	4620      	mov	r0, r4
 800982a:	f001 fdcf 	bl	800b3cc <xTaskCreateStatic>
 800982e:	4603      	mov	r3, r0
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	e01c      	b.n	800986e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685c      	ldr	r4, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009840:	b29e      	uxth	r6, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff ff9a 	bl	8009782 <makeFreeRtosPriority>
 800984e:	4602      	mov	r2, r0
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	9301      	str	r3, [sp, #4]
 8009856:	9200      	str	r2, [sp, #0]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	4632      	mov	r2, r6
 800985c:	4629      	mov	r1, r5
 800985e:	4620      	mov	r0, r4
 8009860:	f001 fe0d 	bl	800b47e <xTaskCreate>
 8009864:	4603      	mov	r3, r0
 8009866:	2b01      	cmp	r3, #1
 8009868:	d001      	beq.n	800986e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800986a:	2300      	movs	r3, #0
 800986c:	e000      	b.n	8009870 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800986e:	68fb      	ldr	r3, [r7, #12]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009878 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <osDelay+0x16>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	e000      	b.n	8009890 <osDelay+0x18>
 800988e:	2301      	movs	r3, #1
 8009890:	4618      	mov	r0, r3
 8009892:	f001 ff21 	bl	800b6d8 <vTaskDelay>
  
  return osOK;
 8009896:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	460b      	mov	r3, r1
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d013      	beq.n	80098de <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d101      	bne.n	80098c0 <osTimerCreate+0x20>
 80098bc:	2101      	movs	r1, #1
 80098be:	e000      	b.n	80098c2 <osTimerCreate+0x22>
 80098c0:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80098ca:	9201      	str	r2, [sp, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	460a      	mov	r2, r1
 80098d2:	2101      	movs	r1, #1
 80098d4:	480b      	ldr	r0, [pc, #44]	; (8009904 <osTimerCreate+0x64>)
 80098d6:	f002 fea8 	bl	800c62a <xTimerCreateStatic>
 80098da:	4603      	mov	r3, r0
 80098dc:	e00e      	b.n	80098fc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80098de:	7afb      	ldrb	r3, [r7, #11]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d101      	bne.n	80098e8 <osTimerCreate+0x48>
 80098e4:	2201      	movs	r2, #1
 80098e6:	e000      	b.n	80098ea <osTimerCreate+0x4a>
 80098e8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2101      	movs	r1, #1
 80098f4:	4803      	ldr	r0, [pc, #12]	; (8009904 <osTimerCreate+0x64>)
 80098f6:	f002 fe77 	bl	800c5e8 <xTimerCreate>
 80098fa:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	0800d6f0 	.word	0x0800d6f0

08009908 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af02      	add	r7, sp, #8
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <osTimerStart+0x20>
    ticks = 1;
 8009924:	2301      	movs	r3, #1
 8009926:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8009928:	f7ff ff42 	bl	80097b0 <inHandlerMode>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d01b      	beq.n	800996a <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8009932:	f107 020c 	add.w	r2, r7, #12
 8009936:	2300      	movs	r3, #0
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	4613      	mov	r3, r2
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	2109      	movs	r1, #9
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f002 fedf 	bl	800c704 <xTimerGenericCommand>
 8009946:	4603      	mov	r3, r0
 8009948:	2b01      	cmp	r3, #1
 800994a:	d002      	beq.n	8009952 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 800994c:	23ff      	movs	r3, #255	; 0xff
 800994e:	617b      	str	r3, [r7, #20]
 8009950:	e018      	b.n	8009984 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d015      	beq.n	8009984 <osTimerStart+0x7c>
 8009958:	4b0d      	ldr	r3, [pc, #52]	; (8009990 <osTimerStart+0x88>)
 800995a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	e00c      	b.n	8009984 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800996a:	2300      	movs	r3, #0
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	2300      	movs	r3, #0
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	2104      	movs	r1, #4
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f002 fec5 	bl	800c704 <xTimerGenericCommand>
 800997a:	4603      	mov	r3, r0
 800997c:	2b01      	cmp	r3, #1
 800997e:	d001      	beq.n	8009984 <osTimerStart+0x7c>
      result = osErrorOS;
 8009980:	23ff      	movs	r3, #255	; 0xff
 8009982:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8009984:	697b      	ldr	r3, [r7, #20]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	e000ed04 	.word	0xe000ed04

08009994 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d007      	beq.n	80099b4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	4619      	mov	r1, r3
 80099aa:	2001      	movs	r0, #1
 80099ac:	f000 fef6 	bl	800a79c <xQueueCreateMutexStatic>
 80099b0:	4603      	mov	r3, r0
 80099b2:	e003      	b.n	80099bc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80099b4:	2001      	movs	r0, #1
 80099b6:	f000 fed9 	bl	800a76c <xQueueCreateMutex>
 80099ba:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d101      	bne.n	80099dc <osMutexWait+0x18>
    return osErrorParameter;
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	e03a      	b.n	8009a52 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099e6:	d103      	bne.n	80099f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80099e8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	e009      	b.n	8009a04 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d006      	beq.n	8009a04 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <osMutexWait+0x40>
      ticks = 1;
 8009a00:	2301      	movs	r3, #1
 8009a02:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a04:	f7ff fed4 	bl	80097b0 <inHandlerMode>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d017      	beq.n	8009a3e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a0e:	f107 0308 	add.w	r3, r7, #8
 8009a12:	461a      	mov	r2, r3
 8009a14:	2100      	movs	r1, #0
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f001 fad8 	bl	800afcc <xQueueReceiveFromISR>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d001      	beq.n	8009a26 <osMutexWait+0x62>
      return osErrorOS;
 8009a22:	23ff      	movs	r3, #255	; 0xff
 8009a24:	e015      	b.n	8009a52 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d011      	beq.n	8009a50 <osMutexWait+0x8c>
 8009a2c:	4b0b      	ldr	r3, [pc, #44]	; (8009a5c <osMutexWait+0x98>)
 8009a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	e008      	b.n	8009a50 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009a3e:	68f9      	ldr	r1, [r7, #12]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 f9bb 	bl	800adbc <xQueueSemaphoreTake>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d001      	beq.n	8009a50 <osMutexWait+0x8c>
    return osErrorOS;
 8009a4c:	23ff      	movs	r3, #255	; 0xff
 8009a4e:	e000      	b.n	8009a52 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009a70:	f7ff fe9e 	bl	80097b0 <inHandlerMode>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d016      	beq.n	8009aa8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009a7a:	f107 0308 	add.w	r3, r7, #8
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f001 f835 	bl	800aaf0 <xQueueGiveFromISR>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d001      	beq.n	8009a90 <osMutexRelease+0x30>
      return osErrorOS;
 8009a8c:	23ff      	movs	r3, #255	; 0xff
 8009a8e:	e017      	b.n	8009ac0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d013      	beq.n	8009abe <osMutexRelease+0x5e>
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <osMutexRelease+0x68>)
 8009a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	e00a      	b.n	8009abe <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2100      	movs	r1, #0
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fe90 	bl	800a7d4 <xQueueGenericSend>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d001      	beq.n	8009abe <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009aba:	23ff      	movs	r3, #255	; 0xff
 8009abc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009abe:	68fb      	ldr	r3, [r7, #12]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009acc:	b590      	push	{r4, r7, lr}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d012      	beq.n	8009b04 <osMessageCreate+0x38>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6859      	ldr	r1, [r3, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689a      	ldr	r2, [r3, #8]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68dc      	ldr	r4, [r3, #12]
 8009af6:	2300      	movs	r3, #0
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4623      	mov	r3, r4
 8009afc:	f000 fd4e 	bl	800a59c <xQueueGenericCreateStatic>
 8009b00:	4603      	mov	r3, r0
 8009b02:	e008      	b.n	8009b16 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	4619      	mov	r1, r3
 8009b10:	f000 fdb6 	bl	800a680 <xQueueGenericCreate>
 8009b14:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd90      	pop	{r4, r7, pc}
	...

08009b20 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009b20:	b590      	push	{r4, r7, lr}
 8009b22:	b08b      	sub	sp, #44	; 0x2c
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10a      	bne.n	8009b50 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009b3a:	2380      	movs	r3, #128	; 0x80
 8009b3c:	617b      	str	r3, [r7, #20]
    return event;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	461c      	mov	r4, r3
 8009b42:	f107 0314 	add.w	r3, r7, #20
 8009b46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b4e:	e054      	b.n	8009bfa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5e:	d103      	bne.n	8009b68 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009b60:	f04f 33ff 	mov.w	r3, #4294967295
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
 8009b66:	e009      	b.n	8009b7c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d006      	beq.n	8009b7c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <osMessageGet+0x5c>
      ticks = 1;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009b7c:	f7ff fe18 	bl	80097b0 <inHandlerMode>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01c      	beq.n	8009bc0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009b86:	f107 0220 	add.w	r2, r7, #32
 8009b8a:	f107 0314 	add.w	r3, r7, #20
 8009b8e:	3304      	adds	r3, #4
 8009b90:	4619      	mov	r1, r3
 8009b92:	68b8      	ldr	r0, [r7, #8]
 8009b94:	f001 fa1a 	bl	800afcc <xQueueReceiveFromISR>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d102      	bne.n	8009ba4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009b9e:	2310      	movs	r3, #16
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	e001      	b.n	8009ba8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d01d      	beq.n	8009bea <osMessageGet+0xca>
 8009bae:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <osMessageGet+0xe4>)
 8009bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	f3bf 8f4f 	dsb	sy
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	e014      	b.n	8009bea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009bc0:	f107 0314 	add.w	r3, r7, #20
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc8:	4619      	mov	r1, r3
 8009bca:	68b8      	ldr	r0, [r7, #8]
 8009bcc:	f001 f81a 	bl	800ac04 <xQueueReceive>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d102      	bne.n	8009bdc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	e006      	b.n	8009bea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <osMessageGet+0xc6>
 8009be2:	2300      	movs	r3, #0
 8009be4:	e000      	b.n	8009be8 <osMessageGet+0xc8>
 8009be6:	2340      	movs	r3, #64	; 0x40
 8009be8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	461c      	mov	r4, r3
 8009bee:	f107 0314 	add.w	r3, r7, #20
 8009bf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009bf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	372c      	adds	r7, #44	; 0x2c
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd90      	pop	{r4, r7, pc}
 8009c02:	bf00      	nop
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f103 0208 	add.w	r2, r3, #8
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f103 0208 	add.w	r2, r3, #8
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f103 0208 	add.w	r2, r3, #8
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bc80      	pop	{r7}
 8009c44:	4770      	bx	lr

08009c46 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bc80      	pop	{r7}
 8009c5c:	4770      	bx	lr

08009c5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b085      	sub	sp, #20
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	689a      	ldr	r2, [r3, #8]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
}
 8009c9a:	bf00      	nop
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bc80      	pop	{r7}
 8009ca2:	4770      	bx	lr

08009ca4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cba:	d103      	bne.n	8009cc4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	60fb      	str	r3, [r7, #12]
 8009cc2:	e00c      	b.n	8009cde <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	e002      	b.n	8009cd2 <vListInsert+0x2e>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d9f6      	bls.n	8009ccc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	601a      	str	r2, [r3, #0]
}
 8009d0a:	bf00      	nop
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr

08009d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	6892      	ldr	r2, [r2, #8]
 8009d2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	6852      	ldr	r2, [r2, #4]
 8009d34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	685a      	ldr	r2, [r3, #4]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d103      	bne.n	8009d48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	1e5a      	subs	r2, r3, #1
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
	...

08009d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3b04      	subs	r3, #4
 8009d78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f023 0201 	bic.w	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d98:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <pxPortInitialiseStack+0x54>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3b14      	subs	r3, #20
 8009da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3b20      	subs	r3, #32
 8009dae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009db0:	68fb      	ldr	r3, [r7, #12]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3714      	adds	r7, #20
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bc80      	pop	{r7}
 8009dba:	4770      	bx	lr
 8009dbc:	08009dc1 	.word	0x08009dc1

08009dc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dca:	4b10      	ldr	r3, [pc, #64]	; (8009e0c <prvTaskExitError+0x4c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd2:	d009      	beq.n	8009de8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	e7fe      	b.n	8009de6 <prvTaskExitError+0x26>
 8009de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dec:	f383 8811 	msr	BASEPRI, r3
 8009df0:	f3bf 8f6f 	isb	sy
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dfa:	bf00      	nop
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0fc      	beq.n	8009dfc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e02:	bf00      	nop
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	200002c4 	.word	0x200002c4

08009e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e10:	4b07      	ldr	r3, [pc, #28]	; (8009e30 <pxCurrentTCBConst2>)
 8009e12:	6819      	ldr	r1, [r3, #0]
 8009e14:	6808      	ldr	r0, [r1, #0]
 8009e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e1a:	f380 8809 	msr	PSP, r0
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f04f 0000 	mov.w	r0, #0
 8009e26:	f380 8811 	msr	BASEPRI, r0
 8009e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009e2e:	4770      	bx	lr

08009e30 <pxCurrentTCBConst2>:
 8009e30:	20001a48 	.word	0x20001a48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop

08009e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009e38:	4806      	ldr	r0, [pc, #24]	; (8009e54 <prvPortStartFirstTask+0x1c>)
 8009e3a:	6800      	ldr	r0, [r0, #0]
 8009e3c:	6800      	ldr	r0, [r0, #0]
 8009e3e:	f380 8808 	msr	MSP, r0
 8009e42:	b662      	cpsie	i
 8009e44:	b661      	cpsie	f
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	df00      	svc	0
 8009e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e52:	bf00      	nop
 8009e54:	e000ed08 	.word	0xe000ed08

08009e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e5e:	4b31      	ldr	r3, [pc, #196]	; (8009f24 <xPortStartScheduler+0xcc>)
 8009e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	22ff      	movs	r2, #255	; 0xff
 8009e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e78:	78fb      	ldrb	r3, [r7, #3]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <xPortStartScheduler+0xd0>)
 8009e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e86:	4b29      	ldr	r3, [pc, #164]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009e88:	2207      	movs	r2, #7
 8009e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e8c:	e009      	b.n	8009ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009e8e:	4b27      	ldr	r3, [pc, #156]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	4a25      	ldr	r2, [pc, #148]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ea2:	78fb      	ldrb	r3, [r7, #3]
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eaa:	2b80      	cmp	r3, #128	; 0x80
 8009eac:	d0ef      	beq.n	8009e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eae:	4b1f      	ldr	r3, [pc, #124]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f1c3 0307 	rsb	r3, r3, #7
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d009      	beq.n	8009ece <xPortStartScheduler+0x76>
 8009eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebe:	f383 8811 	msr	BASEPRI, r3
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	f3bf 8f4f 	dsb	sy
 8009eca:	60bb      	str	r3, [r7, #8]
 8009ecc:	e7fe      	b.n	8009ecc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ece:	4b17      	ldr	r3, [pc, #92]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009ed6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ed8:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ee0:	4a12      	ldr	r2, [pc, #72]	; (8009f2c <xPortStartScheduler+0xd4>)
 8009ee2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009eec:	4a10      	ldr	r2, [pc, #64]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009eee:	4b10      	ldr	r3, [pc, #64]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009ef8:	4a0d      	ldr	r2, [pc, #52]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009efa:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <xPortStartScheduler+0xd8>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f04:	f000 f8b0 	bl	800a068 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <xPortStartScheduler+0xdc>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f0e:	f7ff ff93 	bl	8009e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f12:	f001 fe7f 	bl	800bc14 <vTaskSwitchContext>
	prvTaskExitError();
 8009f16:	f7ff ff53 	bl	8009dc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	e000e400 	.word	0xe000e400
 8009f28:	20000a88 	.word	0x20000a88
 8009f2c:	20000a8c 	.word	0x20000a8c
 8009f30:	e000ed20 	.word	0xe000ed20
 8009f34:	200002c4 	.word	0x200002c4

08009f38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f50:	4b0e      	ldr	r3, [pc, #56]	; (8009f8c <vPortEnterCritical+0x54>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	4a0d      	ldr	r2, [pc, #52]	; (8009f8c <vPortEnterCritical+0x54>)
 8009f58:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <vPortEnterCritical+0x54>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	d10e      	bne.n	8009f80 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f62:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <vPortEnterCritical+0x58>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d009      	beq.n	8009f80 <vPortEnterCritical+0x48>
 8009f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f70:	f383 8811 	msr	BASEPRI, r3
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	603b      	str	r3, [r7, #0]
 8009f7e:	e7fe      	b.n	8009f7e <vPortEnterCritical+0x46>
	}
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bc80      	pop	{r7}
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	200002c4 	.word	0x200002c4
 8009f90:	e000ed04 	.word	0xe000ed04

08009f94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f9a:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <vPortExitCritical+0x48>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <vPortExitCritical+0x22>
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	607b      	str	r3, [r7, #4]
 8009fb4:	e7fe      	b.n	8009fb4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <vPortExitCritical+0x48>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	4a07      	ldr	r2, [pc, #28]	; (8009fdc <vPortExitCritical+0x48>)
 8009fbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <vPortExitCritical+0x48>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d104      	bne.n	8009fd2 <vPortExitCritical+0x3e>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009fd2:	bf00      	nop
 8009fd4:	370c      	adds	r7, #12
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr
 8009fdc:	200002c4 	.word	0x200002c4

08009fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fe0:	f3ef 8009 	mrs	r0, PSP
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <pxCurrentTCBConst>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009ff0:	6010      	str	r0, [r2, #0]
 8009ff2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009ff6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ffa:	f380 8811 	msr	BASEPRI, r0
 8009ffe:	f001 fe09 	bl	800bc14 <vTaskSwitchContext>
 800a002:	f04f 0000 	mov.w	r0, #0
 800a006:	f380 8811 	msr	BASEPRI, r0
 800a00a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a00e:	6819      	ldr	r1, [r3, #0]
 800a010:	6808      	ldr	r0, [r1, #0]
 800a012:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a016:	f380 8809 	msr	PSP, r0
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	4770      	bx	lr

0800a020 <pxCurrentTCBConst>:
 800a020:	20001a48 	.word	0x20001a48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a024:	bf00      	nop
 800a026:	bf00      	nop

0800a028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b082      	sub	sp, #8
 800a02c:	af00      	add	r7, sp, #0
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a040:	f001 fd2c 	bl	800ba9c <xTaskIncrementTick>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a04a:	4b06      	ldr	r3, [pc, #24]	; (800a064 <SysTick_Handler+0x3c>)
 800a04c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	2300      	movs	r3, #0
 800a054:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <vPortSetupTimerInterrupt+0x30>)
 800a06e:	2200      	movs	r2, #0
 800a070:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a072:	4b0a      	ldr	r3, [pc, #40]	; (800a09c <vPortSetupTimerInterrupt+0x34>)
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <vPortSetupTimerInterrupt+0x38>)
 800a07a:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <vPortSetupTimerInterrupt+0x3c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	490a      	ldr	r1, [pc, #40]	; (800a0a8 <vPortSetupTimerInterrupt+0x40>)
 800a080:	fba1 1303 	umull	r1, r3, r1, r3
 800a084:	099b      	lsrs	r3, r3, #6
 800a086:	3b01      	subs	r3, #1
 800a088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a08a:	4b03      	ldr	r3, [pc, #12]	; (800a098 <vPortSetupTimerInterrupt+0x30>)
 800a08c:	2207      	movs	r2, #7
 800a08e:	601a      	str	r2, [r3, #0]
}
 800a090:	bf00      	nop
 800a092:	46bd      	mov	sp, r7
 800a094:	bc80      	pop	{r7}
 800a096:	4770      	bx	lr
 800a098:	e000e010 	.word	0xe000e010
 800a09c:	e000e018 	.word	0xe000e018
 800a0a0:	e000e014 	.word	0xe000e014
 800a0a4:	2000012c 	.word	0x2000012c
 800a0a8:	10624dd3 	.word	0x10624dd3

0800a0ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0b2:	f3ef 8305 	mrs	r3, IPSR
 800a0b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b0f      	cmp	r3, #15
 800a0bc:	d913      	bls.n	800a0e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0be:	4a15      	ldr	r2, [pc, #84]	; (800a114 <vPortValidateInterruptPriority+0x68>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <vPortValidateInterruptPriority+0x6c>)
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	7afa      	ldrb	r2, [r7, #11]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d209      	bcs.n	800a0e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	607b      	str	r3, [r7, #4]
 800a0e4:	e7fe      	b.n	800a0e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0e6:	4b0d      	ldr	r3, [pc, #52]	; (800a11c <vPortValidateInterruptPriority+0x70>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <vPortValidateInterruptPriority+0x74>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d909      	bls.n	800a10a <vPortValidateInterruptPriority+0x5e>
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	e7fe      	b.n	800a108 <vPortValidateInterruptPriority+0x5c>
	}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	bc80      	pop	{r7}
 800a112:	4770      	bx	lr
 800a114:	e000e3f0 	.word	0xe000e3f0
 800a118:	20000a88 	.word	0x20000a88
 800a11c:	e000ed0c 	.word	0xe000ed0c
 800a120:	20000a8c 	.word	0x20000a8c

0800a124 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b08a      	sub	sp, #40	; 0x28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a12c:	2300      	movs	r3, #0
 800a12e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a130:	f001 fbfc 	bl	800b92c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a134:	4b57      	ldr	r3, [pc, #348]	; (800a294 <pvPortMalloc+0x170>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a13c:	f000 f90c 	bl	800a358 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a140:	4b55      	ldr	r3, [pc, #340]	; (800a298 <pvPortMalloc+0x174>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4013      	ands	r3, r2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f040 808c 	bne.w	800a266 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01c      	beq.n	800a18e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a154:	2208      	movs	r2, #8
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4413      	add	r3, r2
 800a15a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	2b00      	cmp	r3, #0
 800a164:	d013      	beq.n	800a18e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f023 0307 	bic.w	r3, r3, #7
 800a16c:	3308      	adds	r3, #8
 800a16e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <pvPortMalloc+0x6a>
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	e7fe      	b.n	800a18c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d068      	beq.n	800a266 <pvPortMalloc+0x142>
 800a194:	4b41      	ldr	r3, [pc, #260]	; (800a29c <pvPortMalloc+0x178>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d863      	bhi.n	800a266 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a19e:	4b40      	ldr	r3, [pc, #256]	; (800a2a0 <pvPortMalloc+0x17c>)
 800a1a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1a2:	4b3f      	ldr	r3, [pc, #252]	; (800a2a0 <pvPortMalloc+0x17c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1a8:	e004      	b.n	800a1b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d203      	bcs.n	800a1c6 <pvPortMalloc+0xa2>
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1f1      	bne.n	800a1aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1c6:	4b33      	ldr	r3, [pc, #204]	; (800a294 <pvPortMalloc+0x170>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d04a      	beq.n	800a266 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1d0:	6a3b      	ldr	r3, [r7, #32]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2208      	movs	r2, #8
 800a1d6:	4413      	add	r3, r2
 800a1d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	1ad2      	subs	r2, r2, r3
 800a1ea:	2308      	movs	r3, #8
 800a1ec:	005b      	lsls	r3, r3, #1
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d91e      	bls.n	800a230 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a1f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	f003 0307 	and.w	r3, r3, #7
 800a200:	2b00      	cmp	r3, #0
 800a202:	d009      	beq.n	800a218 <pvPortMalloc+0xf4>
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	613b      	str	r3, [r7, #16]
 800a216:	e7fe      	b.n	800a216 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a22a:	69b8      	ldr	r0, [r7, #24]
 800a22c:	f000 f8f6 	bl	800a41c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <pvPortMalloc+0x178>)
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	4a18      	ldr	r2, [pc, #96]	; (800a29c <pvPortMalloc+0x178>)
 800a23c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a23e:	4b17      	ldr	r3, [pc, #92]	; (800a29c <pvPortMalloc+0x178>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b18      	ldr	r3, [pc, #96]	; (800a2a4 <pvPortMalloc+0x180>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d203      	bcs.n	800a252 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a24a:	4b14      	ldr	r3, [pc, #80]	; (800a29c <pvPortMalloc+0x178>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <pvPortMalloc+0x180>)
 800a250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	4b10      	ldr	r3, [pc, #64]	; (800a298 <pvPortMalloc+0x174>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a266:	f001 fb6f 	bl	800b948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	2b00      	cmp	r3, #0
 800a272:	d009      	beq.n	800a288 <pvPortMalloc+0x164>
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60fb      	str	r3, [r7, #12]
 800a286:	e7fe      	b.n	800a286 <pvPortMalloc+0x162>
	return pvReturn;
 800a288:	69fb      	ldr	r3, [r7, #28]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3728      	adds	r7, #40	; 0x28
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001a38 	.word	0x20001a38
 800a298:	20001a44 	.word	0x20001a44
 800a29c:	20001a3c 	.word	0x20001a3c
 800a2a0:	20001a30 	.word	0x20001a30
 800a2a4:	20001a40 	.word	0x20001a40

0800a2a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d046      	beq.n	800a348 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	425b      	negs	r3, r3
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	4b20      	ldr	r3, [pc, #128]	; (800a350 <vPortFree+0xa8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d109      	bne.n	800a2ea <vPortFree+0x42>
 800a2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2da:	f383 8811 	msr	BASEPRI, r3
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f3bf 8f4f 	dsb	sy
 800a2e6:	60fb      	str	r3, [r7, #12]
 800a2e8:	e7fe      	b.n	800a2e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d009      	beq.n	800a306 <vPortFree+0x5e>
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	60bb      	str	r3, [r7, #8]
 800a304:	e7fe      	b.n	800a304 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	685a      	ldr	r2, [r3, #4]
 800a30a:	4b11      	ldr	r3, [pc, #68]	; (800a350 <vPortFree+0xa8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4013      	ands	r3, r2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d019      	beq.n	800a348 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d115      	bne.n	800a348 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <vPortFree+0xa8>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	43db      	mvns	r3, r3
 800a326:	401a      	ands	r2, r3
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a32c:	f001 fafe 	bl	800b92c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	4b07      	ldr	r3, [pc, #28]	; (800a354 <vPortFree+0xac>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4413      	add	r3, r2
 800a33a:	4a06      	ldr	r2, [pc, #24]	; (800a354 <vPortFree+0xac>)
 800a33c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a33e:	6938      	ldr	r0, [r7, #16]
 800a340:	f000 f86c 	bl	800a41c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a344:	f001 fb00 	bl	800b948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a348:	bf00      	nop
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20001a44 	.word	0x20001a44
 800a354:	20001a3c 	.word	0x20001a3c

0800a358 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a35e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a362:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a364:	4b27      	ldr	r3, [pc, #156]	; (800a404 <prvHeapInit+0xac>)
 800a366:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f003 0307 	and.w	r3, r3, #7
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00c      	beq.n	800a38c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	3307      	adds	r3, #7
 800a376:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0307 	bic.w	r3, r3, #7
 800a37e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a380:	68ba      	ldr	r2, [r7, #8]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	4a1f      	ldr	r2, [pc, #124]	; (800a404 <prvHeapInit+0xac>)
 800a388:	4413      	add	r3, r2
 800a38a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a390:	4a1d      	ldr	r2, [pc, #116]	; (800a408 <prvHeapInit+0xb0>)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a396:	4b1c      	ldr	r3, [pc, #112]	; (800a408 <prvHeapInit+0xb0>)
 800a398:	2200      	movs	r2, #0
 800a39a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3a4:	2208      	movs	r2, #8
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 0307 	bic.w	r3, r3, #7
 800a3b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4a15      	ldr	r2, [pc, #84]	; (800a40c <prvHeapInit+0xb4>)
 800a3b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	; (800a40c <prvHeapInit+0xb4>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3c2:	4b12      	ldr	r3, [pc, #72]	; (800a40c <prvHeapInit+0xb4>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <prvHeapInit+0xb4>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	4a0a      	ldr	r2, [pc, #40]	; (800a410 <prvHeapInit+0xb8>)
 800a3e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	4a09      	ldr	r2, [pc, #36]	; (800a414 <prvHeapInit+0xbc>)
 800a3ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3f0:	4b09      	ldr	r3, [pc, #36]	; (800a418 <prvHeapInit+0xc0>)
 800a3f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3f6:	601a      	str	r2, [r3, #0]
}
 800a3f8:	bf00      	nop
 800a3fa:	3714      	adds	r7, #20
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bc80      	pop	{r7}
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000a90 	.word	0x20000a90
 800a408:	20001a30 	.word	0x20001a30
 800a40c:	20001a38 	.word	0x20001a38
 800a410:	20001a40 	.word	0x20001a40
 800a414:	20001a3c 	.word	0x20001a3c
 800a418:	20001a44 	.word	0x20001a44

0800a41c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a424:	4b27      	ldr	r3, [pc, #156]	; (800a4c4 <prvInsertBlockIntoFreeList+0xa8>)
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e002      	b.n	800a430 <prvInsertBlockIntoFreeList+0x14>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	429a      	cmp	r2, r3
 800a438:	d3f7      	bcc.n	800a42a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	441a      	add	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d108      	bne.n	800a45e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	441a      	add	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d118      	bne.n	800a4a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <prvInsertBlockIntoFreeList+0xac>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d00d      	beq.n	800a49a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	441a      	add	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	e008      	b.n	800a4ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a49a:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <prvInsertBlockIntoFreeList+0xac>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	e003      	b.n	800a4ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d002      	beq.n	800a4ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4ba:	bf00      	nop
 800a4bc:	3714      	adds	r7, #20
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bc80      	pop	{r7}
 800a4c2:	4770      	bx	lr
 800a4c4:	20001a30 	.word	0x20001a30
 800a4c8:	20001a38 	.word	0x20001a38

0800a4cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d109      	bne.n	800a4f4 <xQueueGenericReset+0x28>
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	60bb      	str	r3, [r7, #8]
 800a4f2:	e7fe      	b.n	800a4f2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a4f4:	f7ff fd20 	bl	8009f38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a500:	68f9      	ldr	r1, [r7, #12]
 800a502:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a504:	fb01 f303 	mul.w	r3, r1, r3
 800a508:	441a      	add	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a524:	3b01      	subs	r3, #1
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a52a:	fb01 f303 	mul.w	r3, r1, r3
 800a52e:	441a      	add	r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	22ff      	movs	r2, #255	; 0xff
 800a538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	22ff      	movs	r2, #255	; 0xff
 800a540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d114      	bne.n	800a574 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01a      	beq.n	800a588 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3310      	adds	r3, #16
 800a556:	4618      	mov	r0, r3
 800a558:	f001 fc04 	bl	800bd64 <xTaskRemoveFromEventList>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d012      	beq.n	800a588 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a562:	4b0d      	ldr	r3, [pc, #52]	; (800a598 <xQueueGenericReset+0xcc>)
 800a564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	e009      	b.n	800a588 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	3310      	adds	r3, #16
 800a578:	4618      	mov	r0, r3
 800a57a:	f7ff fb45 	bl	8009c08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3324      	adds	r3, #36	; 0x24
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fb40 	bl	8009c08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a588:	f7ff fd04 	bl	8009f94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a58c:	2301      	movs	r3, #1
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	e000ed04 	.word	0xe000ed04

0800a59c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08e      	sub	sp, #56	; 0x38
 800a5a0:	af02      	add	r7, sp, #8
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <xQueueGenericCreateStatic+0x28>
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c2:	e7fe      	b.n	800a5c2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <xQueueGenericCreateStatic+0x42>
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
 800a5dc:	e7fe      	b.n	800a5dc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <xQueueGenericCreateStatic+0x4e>
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <xQueueGenericCreateStatic+0x52>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <xQueueGenericCreateStatic+0x54>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <xQueueGenericCreateStatic+0x6c>
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	623b      	str	r3, [r7, #32]
 800a606:	e7fe      	b.n	800a606 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d102      	bne.n	800a614 <xQueueGenericCreateStatic+0x78>
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <xQueueGenericCreateStatic+0x7c>
 800a614:	2301      	movs	r3, #1
 800a616:	e000      	b.n	800a61a <xQueueGenericCreateStatic+0x7e>
 800a618:	2300      	movs	r3, #0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d109      	bne.n	800a632 <xQueueGenericCreateStatic+0x96>
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	61fb      	str	r3, [r7, #28]
 800a630:	e7fe      	b.n	800a630 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a632:	2348      	movs	r3, #72	; 0x48
 800a634:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2b48      	cmp	r3, #72	; 0x48
 800a63a:	d009      	beq.n	800a650 <xQueueGenericCreateStatic+0xb4>
 800a63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	61bb      	str	r3, [r7, #24]
 800a64e:	e7fe      	b.n	800a64e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00d      	beq.n	800a676 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a662:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	4613      	mov	r3, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	68b9      	ldr	r1, [r7, #8]
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 f842 	bl	800a6fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a678:	4618      	mov	r0, r3
 800a67a:	3730      	adds	r7, #48	; 0x30
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08a      	sub	sp, #40	; 0x28
 800a684:	af02      	add	r7, sp, #8
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d109      	bne.n	800a6a8 <xQueueGenericCreate+0x28>
 800a694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	613b      	str	r3, [r7, #16]
 800a6a6:	e7fe      	b.n	800a6a6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61fb      	str	r3, [r7, #28]
 800a6b2:	e004      	b.n	800a6be <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	68ba      	ldr	r2, [r7, #8]
 800a6b8:	fb02 f303 	mul.w	r3, r2, r3
 800a6bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	3348      	adds	r3, #72	; 0x48
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff fd2e 	bl	800a124 <pvPortMalloc>
 800a6c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00f      	beq.n	800a6f0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	3348      	adds	r3, #72	; 0x48
 800a6d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6de:	79fa      	ldrb	r2, [r7, #7]
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	68b9      	ldr	r1, [r7, #8]
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 f805 	bl	800a6fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a6f0:	69bb      	ldr	r3, [r7, #24]
	}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
 800a706:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d103      	bne.n	800a716 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	e002      	b.n	800a71c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a71c:	69bb      	ldr	r3, [r7, #24]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a728:	2101      	movs	r1, #1
 800a72a:	69b8      	ldr	r0, [r7, #24]
 800a72c:	f7ff fece 	bl	800a4cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a730:	bf00      	nop
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00e      	beq.n	800a764 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a758:	2300      	movs	r3, #0
 800a75a:	2200      	movs	r2, #0
 800a75c:	2100      	movs	r1, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f838 	bl	800a7d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b086      	sub	sp, #24
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a776:	2301      	movs	r3, #1
 800a778:	617b      	str	r3, [r7, #20]
 800a77a:	2300      	movs	r3, #0
 800a77c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	461a      	mov	r2, r3
 800a782:	6939      	ldr	r1, [r7, #16]
 800a784:	6978      	ldr	r0, [r7, #20]
 800a786:	f7ff ff7b 	bl	800a680 <xQueueGenericCreate>
 800a78a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7ff ffd3 	bl	800a738 <prvInitialiseMutex>

		return pxNewQueue;
 800a792:	68fb      	ldr	r3, [r7, #12]
	}
 800a794:	4618      	mov	r0, r3
 800a796:	3718      	adds	r7, #24
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b088      	sub	sp, #32
 800a7a0:	af02      	add	r7, sp, #8
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	6039      	str	r1, [r7, #0]
 800a7a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	6939      	ldr	r1, [r7, #16]
 800a7ba:	6978      	ldr	r0, [r7, #20]
 800a7bc:	f7ff feee 	bl	800a59c <xQueueGenericCreateStatic>
 800a7c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff ffb8 	bl	800a738 <prvInitialiseMutex>

		return pxNewQueue;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
	}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3718      	adds	r7, #24
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <xQueueGenericSend+0x30>
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	62bb      	str	r3, [r7, #40]	; 0x28
 800a802:	e7fe      	b.n	800a802 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d103      	bne.n	800a812 <xQueueGenericSend+0x3e>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <xQueueGenericSend+0x42>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <xQueueGenericSend+0x44>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d109      	bne.n	800a830 <xQueueGenericSend+0x5c>
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	627b      	str	r3, [r7, #36]	; 0x24
 800a82e:	e7fe      	b.n	800a82e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	2b02      	cmp	r3, #2
 800a834:	d103      	bne.n	800a83e <xQueueGenericSend+0x6a>
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <xQueueGenericSend+0x6e>
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <xQueueGenericSend+0x70>
 800a842:	2300      	movs	r3, #0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d109      	bne.n	800a85c <xQueueGenericSend+0x88>
 800a848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	623b      	str	r3, [r7, #32]
 800a85a:	e7fe      	b.n	800a85a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a85c:	f001 fc3c 	bl	800c0d8 <xTaskGetSchedulerState>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <xQueueGenericSend+0x98>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d101      	bne.n	800a870 <xQueueGenericSend+0x9c>
 800a86c:	2301      	movs	r3, #1
 800a86e:	e000      	b.n	800a872 <xQueueGenericSend+0x9e>
 800a870:	2300      	movs	r3, #0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <xQueueGenericSend+0xb6>
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e7fe      	b.n	800a888 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a88a:	f7ff fb55 	bl	8009f38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a896:	429a      	cmp	r2, r3
 800a898:	d302      	bcc.n	800a8a0 <xQueueGenericSend+0xcc>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d129      	bne.n	800a8f4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	68b9      	ldr	r1, [r7, #8]
 800a8a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8a6:	f000 fc25 	bl	800b0f4 <prvCopyDataToQueue>
 800a8aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d010      	beq.n	800a8d6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	3324      	adds	r3, #36	; 0x24
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fa53 	bl	800bd64 <xTaskRemoveFromEventList>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d013      	beq.n	800a8ec <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8c4:	4b3f      	ldr	r3, [pc, #252]	; (800a9c4 <xQueueGenericSend+0x1f0>)
 800a8c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	e00a      	b.n	800a8ec <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d007      	beq.n	800a8ec <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8dc:	4b39      	ldr	r3, [pc, #228]	; (800a9c4 <xQueueGenericSend+0x1f0>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8ec:	f7ff fb52 	bl	8009f94 <vPortExitCritical>
				return pdPASS;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e063      	b.n	800a9bc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d103      	bne.n	800a902 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8fa:	f7ff fb4b 	bl	8009f94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	e05c      	b.n	800a9bc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	4618      	mov	r0, r3
 800a90e:	f001 fa8b 	bl	800be28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a912:	2301      	movs	r3, #1
 800a914:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a916:	f7ff fb3d 	bl	8009f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a91a:	f001 f807 	bl	800b92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a91e:	f7ff fb0b 	bl	8009f38 <vPortEnterCritical>
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a928:	b25b      	sxtb	r3, r3
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92e:	d103      	bne.n	800a938 <xQueueGenericSend+0x164>
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a944:	d103      	bne.n	800a94e <xQueueGenericSend+0x17a>
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a94e:	f7ff fb21 	bl	8009f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a952:	1d3a      	adds	r2, r7, #4
 800a954:	f107 0314 	add.w	r3, r7, #20
 800a958:	4611      	mov	r1, r2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fa7a 	bl	800be54 <xTaskCheckForTimeOut>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d124      	bne.n	800a9b0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a968:	f000 fcbc 	bl	800b2e4 <prvIsQueueFull>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d018      	beq.n	800a9a4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	3310      	adds	r3, #16
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 f9a4 	bl	800bcc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a982:	f000 fc47 	bl	800b214 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a986:	f000 ffdf 	bl	800b948 <xTaskResumeAll>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f47f af7c 	bne.w	800a88a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a992:	4b0c      	ldr	r3, [pc, #48]	; (800a9c4 <xQueueGenericSend+0x1f0>)
 800a994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	e772      	b.n	800a88a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9a6:	f000 fc35 	bl	800b214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9aa:	f000 ffcd 	bl	800b948 <xTaskResumeAll>
 800a9ae:	e76c      	b.n	800a88a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9b2:	f000 fc2f 	bl	800b214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9b6:	f000 ffc7 	bl	800b948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9ba:	2300      	movs	r3, #0
		}
	}
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3738      	adds	r7, #56	; 0x38
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	e000ed04 	.word	0xe000ed04

0800a9c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b08e      	sub	sp, #56	; 0x38
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d109      	bne.n	800a9f4 <xQueueGenericSendFromISR+0x2c>
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	627b      	str	r3, [r7, #36]	; 0x24
 800a9f2:	e7fe      	b.n	800a9f2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <xQueueGenericSendFromISR+0x3a>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d101      	bne.n	800aa06 <xQueueGenericSendFromISR+0x3e>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <xQueueGenericSendFromISR+0x40>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d109      	bne.n	800aa20 <xQueueGenericSendFromISR+0x58>
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	623b      	str	r3, [r7, #32]
 800aa1e:	e7fe      	b.n	800aa1e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d103      	bne.n	800aa2e <xQueueGenericSendFromISR+0x66>
 800aa26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d101      	bne.n	800aa32 <xQueueGenericSendFromISR+0x6a>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e000      	b.n	800aa34 <xQueueGenericSendFromISR+0x6c>
 800aa32:	2300      	movs	r3, #0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d109      	bne.n	800aa4c <xQueueGenericSendFromISR+0x84>
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	61fb      	str	r3, [r7, #28]
 800aa4a:	e7fe      	b.n	800aa4a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa4c:	f7ff fb2e 	bl	800a0ac <vPortValidateInterruptPriority>
	__asm volatile
 800aa50:	f3ef 8211 	mrs	r2, BASEPRI
 800aa54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	61ba      	str	r2, [r7, #24]
 800aa66:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa68:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d302      	bcc.n	800aa7e <xQueueGenericSendFromISR+0xb6>
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d12c      	bne.n	800aad8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa88:	683a      	ldr	r2, [r7, #0]
 800aa8a:	68b9      	ldr	r1, [r7, #8]
 800aa8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa8e:	f000 fb31 	bl	800b0f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa92:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d112      	bne.n	800aac2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d016      	beq.n	800aad2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	3324      	adds	r3, #36	; 0x24
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 f95b 	bl	800bd64 <xTaskRemoveFromEventList>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00e      	beq.n	800aad2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00b      	beq.n	800aad2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	e007      	b.n	800aad2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aac6:	3301      	adds	r3, #1
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	b25a      	sxtb	r2, r3
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aad2:	2301      	movs	r3, #1
 800aad4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aad6:	e001      	b.n	800aadc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	637b      	str	r3, [r7, #52]	; 0x34
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3738      	adds	r7, #56	; 0x38
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08e      	sub	sp, #56	; 0x38
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d109      	bne.n	800ab18 <xQueueGiveFromISR+0x28>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	623b      	str	r3, [r7, #32]
 800ab16:	e7fe      	b.n	800ab16 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <xQueueGiveFromISR+0x44>
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	61fb      	str	r3, [r7, #28]
 800ab32:	e7fe      	b.n	800ab32 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d103      	bne.n	800ab44 <xQueueGiveFromISR+0x54>
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <xQueueGiveFromISR+0x58>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <xQueueGiveFromISR+0x5a>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <xQueueGiveFromISR+0x72>
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	61bb      	str	r3, [r7, #24]
 800ab60:	e7fe      	b.n	800ab60 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab62:	f7ff faa3 	bl	800a0ac <vPortValidateInterruptPriority>
	__asm volatile
 800ab66:	f3ef 8211 	mrs	r2, BASEPRI
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	617a      	str	r2, [r7, #20]
 800ab7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ab7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d92b      	bls.n	800abea <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d112      	bne.n	800abd4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d016      	beq.n	800abe4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	3324      	adds	r3, #36	; 0x24
 800abba:	4618      	mov	r0, r3
 800abbc:	f001 f8d2 	bl	800bd64 <xTaskRemoveFromEventList>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00e      	beq.n	800abe4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00b      	beq.n	800abe4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2201      	movs	r2, #1
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	e007      	b.n	800abe4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abd8:	3301      	adds	r3, #1
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	b25a      	sxtb	r2, r3
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abe4:	2301      	movs	r3, #1
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
 800abe8:	e001      	b.n	800abee <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abea:	2300      	movs	r3, #0
 800abec:	637b      	str	r3, [r7, #52]	; 0x34
 800abee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3738      	adds	r7, #56	; 0x38
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b08c      	sub	sp, #48	; 0x30
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <xQueueReceive+0x2e>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	623b      	str	r3, [r7, #32]
 800ac30:	e7fe      	b.n	800ac30 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d103      	bne.n	800ac40 <xQueueReceive+0x3c>
 800ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <xQueueReceive+0x40>
 800ac40:	2301      	movs	r3, #1
 800ac42:	e000      	b.n	800ac46 <xQueueReceive+0x42>
 800ac44:	2300      	movs	r3, #0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d109      	bne.n	800ac5e <xQueueReceive+0x5a>
 800ac4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4e:	f383 8811 	msr	BASEPRI, r3
 800ac52:	f3bf 8f6f 	isb	sy
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	61fb      	str	r3, [r7, #28]
 800ac5c:	e7fe      	b.n	800ac5c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac5e:	f001 fa3b 	bl	800c0d8 <xTaskGetSchedulerState>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d102      	bne.n	800ac6e <xQueueReceive+0x6a>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <xQueueReceive+0x6e>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueReceive+0x70>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d109      	bne.n	800ac8c <xQueueReceive+0x88>
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	61bb      	str	r3, [r7, #24]
 800ac8a:	e7fe      	b.n	800ac8a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac8c:	f7ff f954 	bl	8009f38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d01f      	beq.n	800acdc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aca0:	f000 fa92 	bl	800b1c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca6:	1e5a      	subs	r2, r3, #1
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00f      	beq.n	800acd4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	3310      	adds	r3, #16
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 f853 	bl	800bd64 <xTaskRemoveFromEventList>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d007      	beq.n	800acd4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acc4:	4b3c      	ldr	r3, [pc, #240]	; (800adb8 <xQueueReceive+0x1b4>)
 800acc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acd4:	f7ff f95e 	bl	8009f94 <vPortExitCritical>
				return pdPASS;
 800acd8:	2301      	movs	r3, #1
 800acda:	e069      	b.n	800adb0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d103      	bne.n	800acea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ace2:	f7ff f957 	bl	8009f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e062      	b.n	800adb0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acf0:	f107 0310 	add.w	r3, r7, #16
 800acf4:	4618      	mov	r0, r3
 800acf6:	f001 f897 	bl	800be28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acfa:	2301      	movs	r3, #1
 800acfc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acfe:	f7ff f949 	bl	8009f94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad02:	f000 fe13 	bl	800b92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad06:	f7ff f917 	bl	8009f38 <vPortEnterCritical>
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad10:	b25b      	sxtb	r3, r3
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d103      	bne.n	800ad20 <xQueueReceive+0x11c>
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad26:	b25b      	sxtb	r3, r3
 800ad28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2c:	d103      	bne.n	800ad36 <xQueueReceive+0x132>
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	2200      	movs	r2, #0
 800ad32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad36:	f7ff f92d 	bl	8009f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad3a:	1d3a      	adds	r2, r7, #4
 800ad3c:	f107 0310 	add.w	r3, r7, #16
 800ad40:	4611      	mov	r1, r2
 800ad42:	4618      	mov	r0, r3
 800ad44:	f001 f886 	bl	800be54 <xTaskCheckForTimeOut>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d123      	bne.n	800ad96 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad50:	f000 fab2 	bl	800b2b8 <prvIsQueueEmpty>
 800ad54:	4603      	mov	r3, r0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d017      	beq.n	800ad8a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	3324      	adds	r3, #36	; 0x24
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 ffb0 	bl	800bcc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad6a:	f000 fa53 	bl	800b214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad6e:	f000 fdeb 	bl	800b948 <xTaskResumeAll>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d189      	bne.n	800ac8c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ad78:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <xQueueReceive+0x1b4>)
 800ad7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	e780      	b.n	800ac8c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8c:	f000 fa42 	bl	800b214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad90:	f000 fdda 	bl	800b948 <xTaskResumeAll>
 800ad94:	e77a      	b.n	800ac8c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad98:	f000 fa3c 	bl	800b214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad9c:	f000 fdd4 	bl	800b948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ada0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ada2:	f000 fa89 	bl	800b2b8 <prvIsQueueEmpty>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f43f af6f 	beq.w	800ac8c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3730      	adds	r7, #48	; 0x30
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08e      	sub	sp, #56	; 0x38
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800adce:	2300      	movs	r3, #0
 800add0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d109      	bne.n	800adec <xQueueSemaphoreTake+0x30>
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	623b      	str	r3, [r7, #32]
 800adea:	e7fe      	b.n	800adea <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d009      	beq.n	800ae08 <xQueueSemaphoreTake+0x4c>
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	61fb      	str	r3, [r7, #28]
 800ae06:	e7fe      	b.n	800ae06 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae08:	f001 f966 	bl	800c0d8 <xTaskGetSchedulerState>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <xQueueSemaphoreTake+0x5c>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d101      	bne.n	800ae1c <xQueueSemaphoreTake+0x60>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e000      	b.n	800ae1e <xQueueSemaphoreTake+0x62>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d109      	bne.n	800ae36 <xQueueSemaphoreTake+0x7a>
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	61bb      	str	r3, [r7, #24]
 800ae34:	e7fe      	b.n	800ae34 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae36:	f7ff f87f 	bl	8009f38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d024      	beq.n	800ae90 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae48:	1e5a      	subs	r2, r3, #1
 800ae4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ae56:	f001 fb05 	bl	800c464 <pvTaskIncrementMutexHeldCount>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00f      	beq.n	800ae88 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6a:	3310      	adds	r3, #16
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 ff79 	bl	800bd64 <xTaskRemoveFromEventList>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d007      	beq.n	800ae88 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae78:	4b53      	ldr	r3, [pc, #332]	; (800afc8 <xQueueSemaphoreTake+0x20c>)
 800ae7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae88:	f7ff f884 	bl	8009f94 <vPortExitCritical>
				return pdPASS;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e096      	b.n	800afbe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d110      	bne.n	800aeb8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d009      	beq.n	800aeb0 <xQueueSemaphoreTake+0xf4>
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e7fe      	b.n	800aeae <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aeb0:	f7ff f870 	bl	8009f94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e082      	b.n	800afbe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 ffb0 	bl	800be28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aecc:	f7ff f862 	bl	8009f94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aed0:	f000 fd2c 	bl	800b92c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aed4:	f7ff f830 	bl	8009f38 <vPortEnterCritical>
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d103      	bne.n	800aeee <xQueueSemaphoreTake+0x132>
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef4:	b25b      	sxtb	r3, r3
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d103      	bne.n	800af04 <xQueueSemaphoreTake+0x148>
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af04:	f7ff f846 	bl	8009f94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af08:	463a      	mov	r2, r7
 800af0a:	f107 030c 	add.w	r3, r7, #12
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f000 ff9f 	bl	800be54 <xTaskCheckForTimeOut>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d132      	bne.n	800af82 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af1e:	f000 f9cb 	bl	800b2b8 <prvIsQueueEmpty>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d026      	beq.n	800af76 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800af30:	f7ff f802 	bl	8009f38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	f001 f8eb 	bl	800c114 <xTaskPriorityInherit>
 800af3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af40:	f7ff f828 	bl	8009f94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	4611      	mov	r1, r2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 febb 	bl	800bcc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af54:	f000 f95e 	bl	800b214 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af58:	f000 fcf6 	bl	800b948 <xTaskResumeAll>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f47f af69 	bne.w	800ae36 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800af64:	4b18      	ldr	r3, [pc, #96]	; (800afc8 <xQueueSemaphoreTake+0x20c>)
 800af66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	e75f      	b.n	800ae36 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af78:	f000 f94c 	bl	800b214 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af7c:	f000 fce4 	bl	800b948 <xTaskResumeAll>
 800af80:	e759      	b.n	800ae36 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af84:	f000 f946 	bl	800b214 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af88:	f000 fcde 	bl	800b948 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af8e:	f000 f993 	bl	800b2b8 <prvIsQueueEmpty>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	f43f af4e 	beq.w	800ae36 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00d      	beq.n	800afbc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800afa0:	f7fe ffca 	bl	8009f38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800afa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afa6:	f000 f88e 	bl	800b0c6 <prvGetDisinheritPriorityAfterTimeout>
 800afaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 f9b8 	bl	800c328 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800afb8:	f7fe ffec 	bl	8009f94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800afbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3738      	adds	r7, #56	; 0x38
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	e000ed04 	.word	0xe000ed04

0800afcc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	; 0x38
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d109      	bne.n	800aff6 <xQueueReceiveFromISR+0x2a>
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	e7fe      	b.n	800aff4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <xQueueReceiveFromISR+0x38>
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <xQueueReceiveFromISR+0x3c>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <xQueueReceiveFromISR+0x3e>
 800b008:	2300      	movs	r3, #0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <xQueueReceiveFromISR+0x56>
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	e7fe      	b.n	800b020 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b022:	f7ff f843 	bl	800a0ac <vPortValidateInterruptPriority>
	__asm volatile
 800b026:	f3ef 8211 	mrs	r2, BASEPRI
 800b02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	61ba      	str	r2, [r7, #24]
 800b03c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b03e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b040:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d02f      	beq.n	800b0ae <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b058:	68b9      	ldr	r1, [r7, #8]
 800b05a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b05c:	f000 f8b4 	bl	800b1c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b062:	1e5a      	subs	r2, r3, #1
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b068:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b070:	d112      	bne.n	800b098 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d016      	beq.n	800b0a8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	3310      	adds	r3, #16
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 fe70 	bl	800bd64 <xTaskRemoveFromEventList>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00e      	beq.n	800b0a8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00b      	beq.n	800b0a8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]
 800b096:	e007      	b.n	800b0a8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b09c:	3301      	adds	r3, #1
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	b25a      	sxtb	r2, r3
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ac:	e001      	b.n	800b0b2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	637b      	str	r3, [r7, #52]	; 0x34
 800b0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3738      	adds	r7, #56	; 0x38
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d006      	beq.n	800b0e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f1c3 0307 	rsb	r3, r3, #7
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e001      	b.n	800b0e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
	}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3714      	adds	r7, #20
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bc80      	pop	{r7}
 800b0f2:	4770      	bx	lr

0800b0f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b100:	2300      	movs	r3, #0
 800b102:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b108:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10d      	bne.n	800b12e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d14d      	bne.n	800b1b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 f87e 	bl	800c220 <xTaskPriorityDisinherit>
 800b124:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	605a      	str	r2, [r3, #4]
 800b12c:	e043      	b.n	800b1b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d119      	bne.n	800b168 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6898      	ldr	r0, [r3, #8]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13c:	461a      	mov	r2, r3
 800b13e:	68b9      	ldr	r1, [r7, #8]
 800b140:	f002 fa3c 	bl	800d5bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	689a      	ldr	r2, [r3, #8]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14c:	441a      	add	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	689a      	ldr	r2, [r3, #8]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d32b      	bcc.n	800b1b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	609a      	str	r2, [r3, #8]
 800b166:	e026      	b.n	800b1b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	68d8      	ldr	r0, [r3, #12]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b170:	461a      	mov	r2, r3
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	f002 fa22 	bl	800d5bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	68da      	ldr	r2, [r3, #12]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	425b      	negs	r3, r3
 800b182:	441a      	add	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	68da      	ldr	r2, [r3, #12]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d207      	bcs.n	800b1a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	425b      	negs	r3, r3
 800b19e:	441a      	add	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d105      	bne.n	800b1b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b1be:	697b      	ldr	r3, [r7, #20]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d018      	beq.n	800b20c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e2:	441a      	add	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	68da      	ldr	r2, [r3, #12]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d303      	bcc.n	800b1fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68d9      	ldr	r1, [r3, #12]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b204:	461a      	mov	r2, r3
 800b206:	6838      	ldr	r0, [r7, #0]
 800b208:	f002 f9d8 	bl	800d5bc <memcpy>
	}
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}

0800b214 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b21c:	f7fe fe8c 	bl	8009f38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b226:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b228:	e011      	b.n	800b24e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d012      	beq.n	800b258 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3324      	adds	r3, #36	; 0x24
 800b236:	4618      	mov	r0, r3
 800b238:	f000 fd94 	bl	800bd64 <xTaskRemoveFromEventList>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b242:	f000 fe67 	bl	800bf14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b246:	7bfb      	ldrb	r3, [r7, #15]
 800b248:	3b01      	subs	r3, #1
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b252:	2b00      	cmp	r3, #0
 800b254:	dce9      	bgt.n	800b22a <prvUnlockQueue+0x16>
 800b256:	e000      	b.n	800b25a <prvUnlockQueue+0x46>
					break;
 800b258:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	22ff      	movs	r2, #255	; 0xff
 800b25e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b262:	f7fe fe97 	bl	8009f94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b266:	f7fe fe67 	bl	8009f38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b270:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b272:	e011      	b.n	800b298 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	691b      	ldr	r3, [r3, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d012      	beq.n	800b2a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3310      	adds	r3, #16
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fd6f 	bl	800bd64 <xTaskRemoveFromEventList>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b28c:	f000 fe42 	bl	800bf14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	3b01      	subs	r3, #1
 800b294:	b2db      	uxtb	r3, r3
 800b296:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	dce9      	bgt.n	800b274 <prvUnlockQueue+0x60>
 800b2a0:	e000      	b.n	800b2a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	22ff      	movs	r2, #255	; 0xff
 800b2a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b2ac:	f7fe fe72 	bl	8009f94 <vPortExitCritical>
}
 800b2b0:	bf00      	nop
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2c0:	f7fe fe3a 	bl	8009f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d102      	bne.n	800b2d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e001      	b.n	800b2d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2d6:	f7fe fe5d 	bl	8009f94 <vPortExitCritical>

	return xReturn;
 800b2da:	68fb      	ldr	r3, [r7, #12]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3710      	adds	r7, #16
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2ec:	f7fe fe24 	bl	8009f38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d102      	bne.n	800b302 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	e001      	b.n	800b306 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b302:	2300      	movs	r3, #0
 800b304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b306:	f7fe fe45 	bl	8009f94 <vPortExitCritical>

	return xReturn;
 800b30a:	68fb      	ldr	r3, [r7, #12]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b31e:	2300      	movs	r3, #0
 800b320:	60fb      	str	r3, [r7, #12]
 800b322:	e014      	b.n	800b34e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b324:	4a0e      	ldr	r2, [pc, #56]	; (800b360 <vQueueAddToRegistry+0x4c>)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b330:	490b      	ldr	r1, [pc, #44]	; (800b360 <vQueueAddToRegistry+0x4c>)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b33a:	4a09      	ldr	r2, [pc, #36]	; (800b360 <vQueueAddToRegistry+0x4c>)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	4413      	add	r3, r2
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b346:	e005      	b.n	800b354 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3301      	adds	r3, #1
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b07      	cmp	r3, #7
 800b352:	d9e7      	bls.n	800b324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b354:	bf00      	nop
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	bc80      	pop	{r7}
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	20003288 	.word	0x20003288

0800b364 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b374:	f7fe fde0 	bl	8009f38 <vPortEnterCritical>
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b37e:	b25b      	sxtb	r3, r3
 800b380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b384:	d103      	bne.n	800b38e <vQueueWaitForMessageRestricted+0x2a>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b394:	b25b      	sxtb	r3, r3
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d103      	bne.n	800b3a4 <vQueueWaitForMessageRestricted+0x40>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a4:	f7fe fdf6 	bl	8009f94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d106      	bne.n	800b3be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	3324      	adds	r3, #36	; 0x24
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	68b9      	ldr	r1, [r7, #8]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 fca9 	bl	800bd10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3be:	6978      	ldr	r0, [r7, #20]
 800b3c0:	f7ff ff28 	bl	800b214 <prvUnlockQueue>
	}
 800b3c4:	bf00      	nop
 800b3c6:	3718      	adds	r7, #24
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b08e      	sub	sp, #56	; 0x38
 800b3d0:	af04      	add	r7, sp, #16
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
 800b3d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d109      	bne.n	800b3f4 <xTaskCreateStatic+0x28>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	623b      	str	r3, [r7, #32]
 800b3f2:	e7fe      	b.n	800b3f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d109      	bne.n	800b40e <xTaskCreateStatic+0x42>
 800b3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	e7fe      	b.n	800b40c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b40e:	2354      	movs	r3, #84	; 0x54
 800b410:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2b54      	cmp	r3, #84	; 0x54
 800b416:	d009      	beq.n	800b42c <xTaskCreateStatic+0x60>
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	61bb      	str	r3, [r7, #24]
 800b42a:	e7fe      	b.n	800b42a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d01e      	beq.n	800b470 <xTaskCreateStatic+0xa4>
 800b432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b434:	2b00      	cmp	r3, #0
 800b436:	d01b      	beq.n	800b470 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b440:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b444:	2202      	movs	r2, #2
 800b446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b44a:	2300      	movs	r3, #0
 800b44c:	9303      	str	r3, [sp, #12]
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	9302      	str	r3, [sp, #8]
 800b452:	f107 0314 	add.w	r3, r7, #20
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	68b9      	ldr	r1, [r7, #8]
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 f850 	bl	800b508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b46a:	f000 f8cb 	bl	800b604 <prvAddNewTaskToReadyList>
 800b46e:	e001      	b.n	800b474 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b474:	697b      	ldr	r3, [r7, #20]
	}
 800b476:	4618      	mov	r0, r3
 800b478:	3728      	adds	r7, #40	; 0x28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b08c      	sub	sp, #48	; 0x30
 800b482:	af04      	add	r7, sp, #16
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	603b      	str	r3, [r7, #0]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fe46 	bl	800a124 <pvPortMalloc>
 800b498:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00e      	beq.n	800b4be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b4a0:	2054      	movs	r0, #84	; 0x54
 800b4a2:	f7fe fe3f 	bl	800a124 <pvPortMalloc>
 800b4a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	631a      	str	r2, [r3, #48]	; 0x30
 800b4b4:	e005      	b.n	800b4c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4b6:	6978      	ldr	r0, [r7, #20]
 800b4b8:	f7fe fef6 	bl	800a2a8 <vPortFree>
 800b4bc:	e001      	b.n	800b4c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4c2:	69fb      	ldr	r3, [r7, #28]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d017      	beq.n	800b4f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4d0:	88fa      	ldrh	r2, [r7, #6]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	9303      	str	r3, [sp, #12]
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	68b9      	ldr	r1, [r7, #8]
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 f80e 	bl	800b508 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ec:	69f8      	ldr	r0, [r7, #28]
 800b4ee:	f000 f889 	bl	800b604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	61bb      	str	r3, [r7, #24]
 800b4f6:	e002      	b.n	800b4fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b088      	sub	sp, #32
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b520:	3b01      	subs	r3, #1
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	f023 0307 	bic.w	r3, r3, #7
 800b52e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	f003 0307 	and.w	r3, r3, #7
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <prvInitialiseNewTask+0x46>
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	e7fe      	b.n	800b54c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b54e:	2300      	movs	r3, #0
 800b550:	61fb      	str	r3, [r7, #28]
 800b552:	e012      	b.n	800b57a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	4413      	add	r3, r2
 800b55a:	7819      	ldrb	r1, [r3, #0]
 800b55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	4413      	add	r3, r2
 800b562:	3334      	adds	r3, #52	; 0x34
 800b564:	460a      	mov	r2, r1
 800b566:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d006      	beq.n	800b582 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	3301      	adds	r3, #1
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	2b0f      	cmp	r3, #15
 800b57e:	d9e9      	bls.n	800b554 <prvInitialiseNewTask+0x4c>
 800b580:	e000      	b.n	800b584 <prvInitialiseNewTask+0x7c>
		{
			break;
 800b582:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	2200      	movs	r2, #0
 800b588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	2b06      	cmp	r3, #6
 800b590:	d901      	bls.n	800b596 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b592:	2306      	movs	r3, #6
 800b594:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b59a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5aa:	3304      	adds	r3, #4
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f7fe fb4a 	bl	8009c46 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b4:	3318      	adds	r3, #24
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fe fb45 	bl	8009c46 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	f1c3 0207 	rsb	r2, r3, #7
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5e0:	683a      	ldr	r2, [r7, #0]
 800b5e2:	68f9      	ldr	r1, [r7, #12]
 800b5e4:	69b8      	ldr	r0, [r7, #24]
 800b5e6:	f7fe fbbf 	bl	8009d68 <pxPortInitialiseStack>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d002      	beq.n	800b5fc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5fc:	bf00      	nop
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b60c:	f7fe fc94 	bl	8009f38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b610:	4b2a      	ldr	r3, [pc, #168]	; (800b6bc <prvAddNewTaskToReadyList+0xb8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3301      	adds	r3, #1
 800b616:	4a29      	ldr	r2, [pc, #164]	; (800b6bc <prvAddNewTaskToReadyList+0xb8>)
 800b618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b61a:	4b29      	ldr	r3, [pc, #164]	; (800b6c0 <prvAddNewTaskToReadyList+0xbc>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d109      	bne.n	800b636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b622:	4a27      	ldr	r2, [pc, #156]	; (800b6c0 <prvAddNewTaskToReadyList+0xbc>)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b628:	4b24      	ldr	r3, [pc, #144]	; (800b6bc <prvAddNewTaskToReadyList+0xb8>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d110      	bne.n	800b652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b630:	f000 fc94 	bl	800bf5c <prvInitialiseTaskLists>
 800b634:	e00d      	b.n	800b652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b636:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <prvAddNewTaskToReadyList+0xc0>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d109      	bne.n	800b652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b63e:	4b20      	ldr	r3, [pc, #128]	; (800b6c0 <prvAddNewTaskToReadyList+0xbc>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	429a      	cmp	r2, r3
 800b64a:	d802      	bhi.n	800b652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b64c:	4a1c      	ldr	r2, [pc, #112]	; (800b6c0 <prvAddNewTaskToReadyList+0xbc>)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b652:	4b1d      	ldr	r3, [pc, #116]	; (800b6c8 <prvAddNewTaskToReadyList+0xc4>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	3301      	adds	r3, #1
 800b658:	4a1b      	ldr	r2, [pc, #108]	; (800b6c8 <prvAddNewTaskToReadyList+0xc4>)
 800b65a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	2201      	movs	r2, #1
 800b662:	409a      	lsls	r2, r3
 800b664:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <prvAddNewTaskToReadyList+0xc8>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4313      	orrs	r3, r2
 800b66a:	4a18      	ldr	r2, [pc, #96]	; (800b6cc <prvAddNewTaskToReadyList+0xc8>)
 800b66c:	6013      	str	r3, [r2, #0]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <prvAddNewTaskToReadyList+0xcc>)
 800b67c:	441a      	add	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3304      	adds	r3, #4
 800b682:	4619      	mov	r1, r3
 800b684:	4610      	mov	r0, r2
 800b686:	f7fe faea 	bl	8009c5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b68a:	f7fe fc83 	bl	8009f94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b68e:	4b0d      	ldr	r3, [pc, #52]	; (800b6c4 <prvAddNewTaskToReadyList+0xc0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00e      	beq.n	800b6b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b696:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <prvAddNewTaskToReadyList+0xbc>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d207      	bcs.n	800b6b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6a4:	4b0b      	ldr	r3, [pc, #44]	; (800b6d4 <prvAddNewTaskToReadyList+0xd0>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20001b48 	.word	0x20001b48
 800b6c0:	20001a48 	.word	0x20001a48
 800b6c4:	20001b54 	.word	0x20001b54
 800b6c8:	20001b64 	.word	0x20001b64
 800b6cc:	20001b50 	.word	0x20001b50
 800b6d0:	20001a4c 	.word	0x20001a4c
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d016      	beq.n	800b718 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6ea:	4b13      	ldr	r3, [pc, #76]	; (800b738 <vTaskDelay+0x60>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d009      	beq.n	800b706 <vTaskDelay+0x2e>
 800b6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f6:	f383 8811 	msr	BASEPRI, r3
 800b6fa:	f3bf 8f6f 	isb	sy
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	60bb      	str	r3, [r7, #8]
 800b704:	e7fe      	b.n	800b704 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b706:	f000 f911 	bl	800b92c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b70a:	2100      	movs	r1, #0
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 febd 	bl	800c48c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b712:	f000 f919 	bl	800b948 <xTaskResumeAll>
 800b716:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d107      	bne.n	800b72e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b71e:	4b07      	ldr	r3, [pc, #28]	; (800b73c <vTaskDelay+0x64>)
 800b720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b72e:	bf00      	nop
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20001b70 	.word	0x20001b70
 800b73c:	e000ed04 	.word	0xe000ed04

0800b740 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b748:	f7fe fbf6 	bl	8009f38 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d102      	bne.n	800b758 <vTaskSuspend+0x18>
 800b752:	4b3c      	ldr	r3, [pc, #240]	; (800b844 <vTaskSuspend+0x104>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	e000      	b.n	800b75a <vTaskSuspend+0x1a>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	3304      	adds	r3, #4
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe fad7 	bl	8009d14 <uxListRemove>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d115      	bne.n	800b798 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b770:	4935      	ldr	r1, [pc, #212]	; (800b848 <vTaskSuspend+0x108>)
 800b772:	4613      	mov	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4413      	add	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	440b      	add	r3, r1
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <vTaskSuspend+0x58>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	2201      	movs	r2, #1
 800b788:	fa02 f303 	lsl.w	r3, r2, r3
 800b78c:	43da      	mvns	r2, r3
 800b78e:	4b2f      	ldr	r3, [pc, #188]	; (800b84c <vTaskSuspend+0x10c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4013      	ands	r3, r2
 800b794:	4a2d      	ldr	r2, [pc, #180]	; (800b84c <vTaskSuspend+0x10c>)
 800b796:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d004      	beq.n	800b7aa <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	3318      	adds	r3, #24
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fab5 	bl	8009d14 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	3304      	adds	r3, #4
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	4827      	ldr	r0, [pc, #156]	; (800b850 <vTaskSuspend+0x110>)
 800b7b2:	f7fe fa54 	bl	8009c5e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d103      	bne.n	800b7ca <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b7ca:	f7fe fbe3 	bl	8009f94 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b7ce:	4b21      	ldr	r3, [pc, #132]	; (800b854 <vTaskSuspend+0x114>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d005      	beq.n	800b7e2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b7d6:	f7fe fbaf 	bl	8009f38 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b7da:	f000 fc59 	bl	800c090 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b7de:	f7fe fbd9 	bl	8009f94 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b7e2:	4b18      	ldr	r3, [pc, #96]	; (800b844 <vTaskSuspend+0x104>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d126      	bne.n	800b83a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800b7ec:	4b19      	ldr	r3, [pc, #100]	; (800b854 <vTaskSuspend+0x114>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d016      	beq.n	800b822 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b7f4:	4b18      	ldr	r3, [pc, #96]	; (800b858 <vTaskSuspend+0x118>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <vTaskSuspend+0xd0>
 800b7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	60bb      	str	r3, [r7, #8]
 800b80e:	e7fe      	b.n	800b80e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800b810:	4b12      	ldr	r3, [pc, #72]	; (800b85c <vTaskSuspend+0x11c>)
 800b812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b820:	e00b      	b.n	800b83a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <vTaskSuspend+0x110>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	4b0e      	ldr	r3, [pc, #56]	; (800b860 <vTaskSuspend+0x120>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d103      	bne.n	800b836 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800b82e:	4b05      	ldr	r3, [pc, #20]	; (800b844 <vTaskSuspend+0x104>)
 800b830:	2200      	movs	r2, #0
 800b832:	601a      	str	r2, [r3, #0]
	}
 800b834:	e001      	b.n	800b83a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800b836:	f000 f9ed 	bl	800bc14 <vTaskSwitchContext>
	}
 800b83a:	bf00      	nop
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20001a48 	.word	0x20001a48
 800b848:	20001a4c 	.word	0x20001a4c
 800b84c:	20001b50 	.word	0x20001b50
 800b850:	20001b34 	.word	0x20001b34
 800b854:	20001b54 	.word	0x20001b54
 800b858:	20001b70 	.word	0x20001b70
 800b85c:	e000ed04 	.word	0xe000ed04
 800b860:	20001b48 	.word	0x20001b48

0800b864 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b86e:	2300      	movs	r3, #0
 800b870:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b872:	463a      	mov	r2, r7
 800b874:	1d39      	adds	r1, r7, #4
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f4 fc9a 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	9202      	str	r2, [sp, #8]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	2300      	movs	r3, #0
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	2300      	movs	r3, #0
 800b890:	460a      	mov	r2, r1
 800b892:	4920      	ldr	r1, [pc, #128]	; (800b914 <vTaskStartScheduler+0xb0>)
 800b894:	4820      	ldr	r0, [pc, #128]	; (800b918 <vTaskStartScheduler+0xb4>)
 800b896:	f7ff fd99 	bl	800b3cc <xTaskCreateStatic>
 800b89a:	4602      	mov	r2, r0
 800b89c:	4b1f      	ldr	r3, [pc, #124]	; (800b91c <vTaskStartScheduler+0xb8>)
 800b89e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8a0:	4b1e      	ldr	r3, [pc, #120]	; (800b91c <vTaskStartScheduler+0xb8>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	e001      	b.n	800b8b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d102      	bne.n	800b8be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8b8:	f000 fe4e 	bl	800c558 <xTimerCreateTimerTask>
 800b8bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d115      	bne.n	800b8f0 <vTaskStartScheduler+0x8c>
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b8d6:	4b12      	ldr	r3, [pc, #72]	; (800b920 <vTaskStartScheduler+0xbc>)
 800b8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b8de:	4b11      	ldr	r3, [pc, #68]	; (800b924 <vTaskStartScheduler+0xc0>)
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b8e4:	4b10      	ldr	r3, [pc, #64]	; (800b928 <vTaskStartScheduler+0xc4>)
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8ea:	f7fe fab5 	bl	8009e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8ee:	e00d      	b.n	800b90c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f6:	d109      	bne.n	800b90c <vTaskStartScheduler+0xa8>
 800b8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fc:	f383 8811 	msr	BASEPRI, r3
 800b900:	f3bf 8f6f 	isb	sy
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	e7fe      	b.n	800b90a <vTaskStartScheduler+0xa6>
}
 800b90c:	bf00      	nop
 800b90e:	3718      	adds	r7, #24
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	0800d6f4 	.word	0x0800d6f4
 800b918:	0800bf2d 	.word	0x0800bf2d
 800b91c:	20001b6c 	.word	0x20001b6c
 800b920:	20001b68 	.word	0x20001b68
 800b924:	20001b54 	.word	0x20001b54
 800b928:	20001b4c 	.word	0x20001b4c

0800b92c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b92c:	b480      	push	{r7}
 800b92e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b930:	4b04      	ldr	r3, [pc, #16]	; (800b944 <vTaskSuspendAll+0x18>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	3301      	adds	r3, #1
 800b936:	4a03      	ldr	r2, [pc, #12]	; (800b944 <vTaskSuspendAll+0x18>)
 800b938:	6013      	str	r3, [r2, #0]
}
 800b93a:	bf00      	nop
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bc80      	pop	{r7}
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20001b70 	.word	0x20001b70

0800b948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b952:	2300      	movs	r3, #0
 800b954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b956:	4b41      	ldr	r3, [pc, #260]	; (800ba5c <xTaskResumeAll+0x114>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d109      	bne.n	800b972 <xTaskResumeAll+0x2a>
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	e7fe      	b.n	800b970 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b972:	f7fe fae1 	bl	8009f38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b976:	4b39      	ldr	r3, [pc, #228]	; (800ba5c <xTaskResumeAll+0x114>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3b01      	subs	r3, #1
 800b97c:	4a37      	ldr	r2, [pc, #220]	; (800ba5c <xTaskResumeAll+0x114>)
 800b97e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b980:	4b36      	ldr	r3, [pc, #216]	; (800ba5c <xTaskResumeAll+0x114>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d161      	bne.n	800ba4c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b988:	4b35      	ldr	r3, [pc, #212]	; (800ba60 <xTaskResumeAll+0x118>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d05d      	beq.n	800ba4c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b990:	e02e      	b.n	800b9f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b992:	4b34      	ldr	r3, [pc, #208]	; (800ba64 <xTaskResumeAll+0x11c>)
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3318      	adds	r3, #24
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fe f9b8 	bl	8009d14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f7fe f9b3 	bl	8009d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	409a      	lsls	r2, r3
 800b9b6:	4b2c      	ldr	r3, [pc, #176]	; (800ba68 <xTaskResumeAll+0x120>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	4a2a      	ldr	r2, [pc, #168]	; (800ba68 <xTaskResumeAll+0x120>)
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4413      	add	r3, r2
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4a27      	ldr	r2, [pc, #156]	; (800ba6c <xTaskResumeAll+0x124>)
 800b9ce:	441a      	add	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	3304      	adds	r3, #4
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	f7fe f941 	bl	8009c5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9e0:	4b23      	ldr	r3, [pc, #140]	; (800ba70 <xTaskResumeAll+0x128>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d302      	bcc.n	800b9f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b9ea:	4b22      	ldr	r3, [pc, #136]	; (800ba74 <xTaskResumeAll+0x12c>)
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9f0:	4b1c      	ldr	r3, [pc, #112]	; (800ba64 <xTaskResumeAll+0x11c>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1cc      	bne.n	800b992 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d001      	beq.n	800ba02 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9fe:	f000 fb47 	bl	800c090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba02:	4b1d      	ldr	r3, [pc, #116]	; (800ba78 <xTaskResumeAll+0x130>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d010      	beq.n	800ba30 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba0e:	f000 f845 	bl	800ba9c <xTaskIncrementTick>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800ba18:	4b16      	ldr	r3, [pc, #88]	; (800ba74 <xTaskResumeAll+0x12c>)
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3b01      	subs	r3, #1
 800ba22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1f1      	bne.n	800ba0e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800ba2a:	4b13      	ldr	r3, [pc, #76]	; (800ba78 <xTaskResumeAll+0x130>)
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba30:	4b10      	ldr	r3, [pc, #64]	; (800ba74 <xTaskResumeAll+0x12c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d009      	beq.n	800ba4c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba3c:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <xTaskResumeAll+0x134>)
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba4c:	f7fe faa2 	bl	8009f94 <vPortExitCritical>

	return xAlreadyYielded;
 800ba50:	68bb      	ldr	r3, [r7, #8]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20001b70 	.word	0x20001b70
 800ba60:	20001b48 	.word	0x20001b48
 800ba64:	20001b08 	.word	0x20001b08
 800ba68:	20001b50 	.word	0x20001b50
 800ba6c:	20001a4c 	.word	0x20001a4c
 800ba70:	20001a48 	.word	0x20001a48
 800ba74:	20001b5c 	.word	0x20001b5c
 800ba78:	20001b58 	.word	0x20001b58
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba86:	4b04      	ldr	r3, [pc, #16]	; (800ba98 <xTaskGetTickCount+0x18>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba8c:	687b      	ldr	r3, [r7, #4]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bc80      	pop	{r7}
 800ba96:	4770      	bx	lr
 800ba98:	20001b4c 	.word	0x20001b4c

0800ba9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baa6:	4b50      	ldr	r3, [pc, #320]	; (800bbe8 <xTaskIncrementTick+0x14c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f040 808c 	bne.w	800bbc8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bab0:	4b4e      	ldr	r3, [pc, #312]	; (800bbec <xTaskIncrementTick+0x150>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bab8:	4a4c      	ldr	r2, [pc, #304]	; (800bbec <xTaskIncrementTick+0x150>)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d11f      	bne.n	800bb04 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bac4:	4b4a      	ldr	r3, [pc, #296]	; (800bbf0 <xTaskIncrementTick+0x154>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d009      	beq.n	800bae2 <xTaskIncrementTick+0x46>
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	603b      	str	r3, [r7, #0]
 800bae0:	e7fe      	b.n	800bae0 <xTaskIncrementTick+0x44>
 800bae2:	4b43      	ldr	r3, [pc, #268]	; (800bbf0 <xTaskIncrementTick+0x154>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	4b42      	ldr	r3, [pc, #264]	; (800bbf4 <xTaskIncrementTick+0x158>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a40      	ldr	r2, [pc, #256]	; (800bbf0 <xTaskIncrementTick+0x154>)
 800baee:	6013      	str	r3, [r2, #0]
 800baf0:	4a40      	ldr	r2, [pc, #256]	; (800bbf4 <xTaskIncrementTick+0x158>)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	4b40      	ldr	r3, [pc, #256]	; (800bbf8 <xTaskIncrementTick+0x15c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3301      	adds	r3, #1
 800bafc:	4a3e      	ldr	r2, [pc, #248]	; (800bbf8 <xTaskIncrementTick+0x15c>)
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	f000 fac6 	bl	800c090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb04:	4b3d      	ldr	r3, [pc, #244]	; (800bbfc <xTaskIncrementTick+0x160>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d34d      	bcc.n	800bbaa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb0e:	4b38      	ldr	r3, [pc, #224]	; (800bbf0 <xTaskIncrementTick+0x154>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d101      	bne.n	800bb1c <xTaskIncrementTick+0x80>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e000      	b.n	800bb1e <xTaskIncrementTick+0x82>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d004      	beq.n	800bb2c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb22:	4b36      	ldr	r3, [pc, #216]	; (800bbfc <xTaskIncrementTick+0x160>)
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	601a      	str	r2, [r3, #0]
					break;
 800bb2a:	e03e      	b.n	800bbaa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bb2c:	4b30      	ldr	r3, [pc, #192]	; (800bbf0 <xTaskIncrementTick+0x154>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d203      	bcs.n	800bb4c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb44:	4a2d      	ldr	r2, [pc, #180]	; (800bbfc <xTaskIncrementTick+0x160>)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6013      	str	r3, [r2, #0]
						break;
 800bb4a:	e02e      	b.n	800bbaa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7fe f8df 	bl	8009d14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	3318      	adds	r3, #24
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe f8d6 	bl	8009d14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	409a      	lsls	r2, r3
 800bb70:	4b23      	ldr	r3, [pc, #140]	; (800bc00 <xTaskIncrementTick+0x164>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4313      	orrs	r3, r2
 800bb76:	4a22      	ldr	r2, [pc, #136]	; (800bc00 <xTaskIncrementTick+0x164>)
 800bb78:	6013      	str	r3, [r2, #0]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7e:	4613      	mov	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4a1f      	ldr	r2, [pc, #124]	; (800bc04 <xTaskIncrementTick+0x168>)
 800bb88:	441a      	add	r2, r3
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f7fe f864 	bl	8009c5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb9a:	4b1b      	ldr	r3, [pc, #108]	; (800bc08 <xTaskIncrementTick+0x16c>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3b4      	bcc.n	800bb0e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bba4:	2301      	movs	r3, #1
 800bba6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bba8:	e7b1      	b.n	800bb0e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbaa:	4b17      	ldr	r3, [pc, #92]	; (800bc08 <xTaskIncrementTick+0x16c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb0:	4914      	ldr	r1, [pc, #80]	; (800bc04 <xTaskIncrementTick+0x168>)
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	440b      	add	r3, r1
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d907      	bls.n	800bbd2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	617b      	str	r3, [r7, #20]
 800bbc6:	e004      	b.n	800bbd2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bbc8:	4b10      	ldr	r3, [pc, #64]	; (800bc0c <xTaskIncrementTick+0x170>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	4a0f      	ldr	r2, [pc, #60]	; (800bc0c <xTaskIncrementTick+0x170>)
 800bbd0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bbd2:	4b0f      	ldr	r3, [pc, #60]	; (800bc10 <xTaskIncrementTick+0x174>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20001b70 	.word	0x20001b70
 800bbec:	20001b4c 	.word	0x20001b4c
 800bbf0:	20001b00 	.word	0x20001b00
 800bbf4:	20001b04 	.word	0x20001b04
 800bbf8:	20001b60 	.word	0x20001b60
 800bbfc:	20001b68 	.word	0x20001b68
 800bc00:	20001b50 	.word	0x20001b50
 800bc04:	20001a4c 	.word	0x20001a4c
 800bc08:	20001a48 	.word	0x20001a48
 800bc0c:	20001b58 	.word	0x20001b58
 800bc10:	20001b5c 	.word	0x20001b5c

0800bc14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc1a:	4b26      	ldr	r3, [pc, #152]	; (800bcb4 <vTaskSwitchContext+0xa0>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc22:	4b25      	ldr	r3, [pc, #148]	; (800bcb8 <vTaskSwitchContext+0xa4>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc28:	e03e      	b.n	800bca8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800bc2a:	4b23      	ldr	r3, [pc, #140]	; (800bcb8 <vTaskSwitchContext+0xa4>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800bc30:	4b22      	ldr	r3, [pc, #136]	; (800bcbc <vTaskSwitchContext+0xa8>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	fab3 f383 	clz	r3, r3
 800bc3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc3e:	7afb      	ldrb	r3, [r7, #11]
 800bc40:	f1c3 031f 	rsb	r3, r3, #31
 800bc44:	617b      	str	r3, [r7, #20]
 800bc46:	491e      	ldr	r1, [pc, #120]	; (800bcc0 <vTaskSwitchContext+0xac>)
 800bc48:	697a      	ldr	r2, [r7, #20]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	440b      	add	r3, r1
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d109      	bne.n	800bc6e <vTaskSwitchContext+0x5a>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	607b      	str	r3, [r7, #4]
 800bc6c:	e7fe      	b.n	800bc6c <vTaskSwitchContext+0x58>
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	4613      	mov	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4413      	add	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4a11      	ldr	r2, [pc, #68]	; (800bcc0 <vTaskSwitchContext+0xac>)
 800bc7a:	4413      	add	r3, r2
 800bc7c:	613b      	str	r3, [r7, #16]
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	605a      	str	r2, [r3, #4]
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3308      	adds	r3, #8
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d104      	bne.n	800bc9e <vTaskSwitchContext+0x8a>
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	685a      	ldr	r2, [r3, #4]
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	605a      	str	r2, [r3, #4]
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	4a07      	ldr	r2, [pc, #28]	; (800bcc4 <vTaskSwitchContext+0xb0>)
 800bca6:	6013      	str	r3, [r2, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	371c      	adds	r7, #28
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bc80      	pop	{r7}
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20001b70 	.word	0x20001b70
 800bcb8:	20001b5c 	.word	0x20001b5c
 800bcbc:	20001b50 	.word	0x20001b50
 800bcc0:	20001a4c 	.word	0x20001a4c
 800bcc4:	20001a48 	.word	0x20001a48

0800bcc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d109      	bne.n	800bcec <vTaskPlaceOnEventList+0x24>
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	e7fe      	b.n	800bcea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcec:	4b07      	ldr	r3, [pc, #28]	; (800bd0c <vTaskPlaceOnEventList+0x44>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	3318      	adds	r3, #24
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f7fd ffd5 	bl	8009ca4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	6838      	ldr	r0, [r7, #0]
 800bcfe:	f000 fbc5 	bl	800c48c <prvAddCurrentTaskToDelayedList>
}
 800bd02:	bf00      	nop
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20001a48 	.word	0x20001a48

0800bd10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d109      	bne.n	800bd36 <vTaskPlaceOnEventListRestricted+0x26>
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	e7fe      	b.n	800bd34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd36:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <vTaskPlaceOnEventListRestricted+0x50>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3318      	adds	r3, #24
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f7fd ff8d 	bl	8009c5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d002      	beq.n	800bd50 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	68b8      	ldr	r0, [r7, #8]
 800bd54:	f000 fb9a 	bl	800c48c <prvAddCurrentTaskToDelayedList>
	}
 800bd58:	bf00      	nop
 800bd5a:	3718      	adds	r7, #24
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20001a48 	.word	0x20001a48

0800bd64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <xTaskRemoveFromEventList+0x2a>
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	e7fe      	b.n	800bd8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	3318      	adds	r3, #24
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fd ffbe 	bl	8009d14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd98:	4b1d      	ldr	r3, [pc, #116]	; (800be10 <xTaskRemoveFromEventList+0xac>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d11c      	bne.n	800bdda <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3304      	adds	r3, #4
 800bda4:	4618      	mov	r0, r3
 800bda6:	f7fd ffb5 	bl	8009d14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdae:	2201      	movs	r2, #1
 800bdb0:	409a      	lsls	r2, r3
 800bdb2:	4b18      	ldr	r3, [pc, #96]	; (800be14 <xTaskRemoveFromEventList+0xb0>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	4a16      	ldr	r2, [pc, #88]	; (800be14 <xTaskRemoveFromEventList+0xb0>)
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4a13      	ldr	r2, [pc, #76]	; (800be18 <xTaskRemoveFromEventList+0xb4>)
 800bdca:	441a      	add	r2, r3
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7fd ff43 	bl	8009c5e <vListInsertEnd>
 800bdd8:	e005      	b.n	800bde6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	3318      	adds	r3, #24
 800bdde:	4619      	mov	r1, r3
 800bde0:	480e      	ldr	r0, [pc, #56]	; (800be1c <xTaskRemoveFromEventList+0xb8>)
 800bde2:	f7fd ff3c 	bl	8009c5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <xTaskRemoveFromEventList+0xbc>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d905      	bls.n	800be00 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <xTaskRemoveFromEventList+0xc0>)
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	e001      	b.n	800be04 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800be00:	2300      	movs	r3, #0
 800be02:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800be04:	697b      	ldr	r3, [r7, #20]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3718      	adds	r7, #24
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	20001b70 	.word	0x20001b70
 800be14:	20001b50 	.word	0x20001b50
 800be18:	20001a4c 	.word	0x20001a4c
 800be1c:	20001b08 	.word	0x20001b08
 800be20:	20001a48 	.word	0x20001a48
 800be24:	20001b5c 	.word	0x20001b5c

0800be28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be30:	4b06      	ldr	r3, [pc, #24]	; (800be4c <vTaskInternalSetTimeOutState+0x24>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be38:	4b05      	ldr	r3, [pc, #20]	; (800be50 <vTaskInternalSetTimeOutState+0x28>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	605a      	str	r2, [r3, #4]
}
 800be40:	bf00      	nop
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	bc80      	pop	{r7}
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20001b60 	.word	0x20001b60
 800be50:	20001b4c 	.word	0x20001b4c

0800be54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b088      	sub	sp, #32
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d109      	bne.n	800be78 <xTaskCheckForTimeOut+0x24>
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	613b      	str	r3, [r7, #16]
 800be76:	e7fe      	b.n	800be76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <xTaskCheckForTimeOut+0x3e>
 800be7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be82:	f383 8811 	msr	BASEPRI, r3
 800be86:	f3bf 8f6f 	isb	sy
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	e7fe      	b.n	800be90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800be92:	f7fe f851 	bl	8009f38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be96:	4b1d      	ldr	r3, [pc, #116]	; (800bf0c <xTaskCheckForTimeOut+0xb8>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	69ba      	ldr	r2, [r7, #24]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d102      	bne.n	800beb6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800beb0:	2300      	movs	r3, #0
 800beb2:	61fb      	str	r3, [r7, #28]
 800beb4:	e023      	b.n	800befe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	4b15      	ldr	r3, [pc, #84]	; (800bf10 <xTaskCheckForTimeOut+0xbc>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d007      	beq.n	800bed2 <xTaskCheckForTimeOut+0x7e>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d802      	bhi.n	800bed2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800becc:	2301      	movs	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
 800bed0:	e015      	b.n	800befe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d90b      	bls.n	800bef4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	1ad2      	subs	r2, r2, r3
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff ff9d 	bl	800be28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800beee:	2300      	movs	r3, #0
 800bef0:	61fb      	str	r3, [r7, #28]
 800bef2:	e004      	b.n	800befe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2200      	movs	r2, #0
 800bef8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800befa:	2301      	movs	r3, #1
 800befc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800befe:	f7fe f849 	bl	8009f94 <vPortExitCritical>

	return xReturn;
 800bf02:	69fb      	ldr	r3, [r7, #28]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3720      	adds	r7, #32
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20001b4c 	.word	0x20001b4c
 800bf10:	20001b60 	.word	0x20001b60

0800bf14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf18:	4b03      	ldr	r3, [pc, #12]	; (800bf28 <vTaskMissedYield+0x14>)
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	601a      	str	r2, [r3, #0]
}
 800bf1e:	bf00      	nop
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bc80      	pop	{r7}
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	20001b5c 	.word	0x20001b5c

0800bf2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf34:	f000 f852 	bl	800bfdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf38:	4b06      	ldr	r3, [pc, #24]	; (800bf54 <prvIdleTask+0x28>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d9f9      	bls.n	800bf34 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf40:	4b05      	ldr	r3, [pc, #20]	; (800bf58 <prvIdleTask+0x2c>)
 800bf42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	f3bf 8f4f 	dsb	sy
 800bf4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf50:	e7f0      	b.n	800bf34 <prvIdleTask+0x8>
 800bf52:	bf00      	nop
 800bf54:	20001a4c 	.word	0x20001a4c
 800bf58:	e000ed04 	.word	0xe000ed04

0800bf5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf62:	2300      	movs	r3, #0
 800bf64:	607b      	str	r3, [r7, #4]
 800bf66:	e00c      	b.n	800bf82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4a12      	ldr	r2, [pc, #72]	; (800bfbc <prvInitialiseTaskLists+0x60>)
 800bf74:	4413      	add	r3, r2
 800bf76:	4618      	mov	r0, r3
 800bf78:	f7fd fe46 	bl	8009c08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	607b      	str	r3, [r7, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b06      	cmp	r3, #6
 800bf86:	d9ef      	bls.n	800bf68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf88:	480d      	ldr	r0, [pc, #52]	; (800bfc0 <prvInitialiseTaskLists+0x64>)
 800bf8a:	f7fd fe3d 	bl	8009c08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf8e:	480d      	ldr	r0, [pc, #52]	; (800bfc4 <prvInitialiseTaskLists+0x68>)
 800bf90:	f7fd fe3a 	bl	8009c08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf94:	480c      	ldr	r0, [pc, #48]	; (800bfc8 <prvInitialiseTaskLists+0x6c>)
 800bf96:	f7fd fe37 	bl	8009c08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf9a:	480c      	ldr	r0, [pc, #48]	; (800bfcc <prvInitialiseTaskLists+0x70>)
 800bf9c:	f7fd fe34 	bl	8009c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bfa0:	480b      	ldr	r0, [pc, #44]	; (800bfd0 <prvInitialiseTaskLists+0x74>)
 800bfa2:	f7fd fe31 	bl	8009c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	; (800bfd4 <prvInitialiseTaskLists+0x78>)
 800bfa8:	4a05      	ldr	r2, [pc, #20]	; (800bfc0 <prvInitialiseTaskLists+0x64>)
 800bfaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bfac:	4b0a      	ldr	r3, [pc, #40]	; (800bfd8 <prvInitialiseTaskLists+0x7c>)
 800bfae:	4a05      	ldr	r2, [pc, #20]	; (800bfc4 <prvInitialiseTaskLists+0x68>)
 800bfb0:	601a      	str	r2, [r3, #0]
}
 800bfb2:	bf00      	nop
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	20001a4c 	.word	0x20001a4c
 800bfc0:	20001ad8 	.word	0x20001ad8
 800bfc4:	20001aec 	.word	0x20001aec
 800bfc8:	20001b08 	.word	0x20001b08
 800bfcc:	20001b1c 	.word	0x20001b1c
 800bfd0:	20001b34 	.word	0x20001b34
 800bfd4:	20001b00 	.word	0x20001b00
 800bfd8:	20001b04 	.word	0x20001b04

0800bfdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfe2:	e019      	b.n	800c018 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfe4:	f7fd ffa8 	bl	8009f38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bfe8:	4b0f      	ldr	r3, [pc, #60]	; (800c028 <prvCheckTasksWaitingTermination+0x4c>)
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	3304      	adds	r3, #4
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fd fe8d 	bl	8009d14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bffa:	4b0c      	ldr	r3, [pc, #48]	; (800c02c <prvCheckTasksWaitingTermination+0x50>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3b01      	subs	r3, #1
 800c000:	4a0a      	ldr	r2, [pc, #40]	; (800c02c <prvCheckTasksWaitingTermination+0x50>)
 800c002:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c004:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <prvCheckTasksWaitingTermination+0x54>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3b01      	subs	r3, #1
 800c00a:	4a09      	ldr	r2, [pc, #36]	; (800c030 <prvCheckTasksWaitingTermination+0x54>)
 800c00c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c00e:	f7fd ffc1 	bl	8009f94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f80e 	bl	800c034 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <prvCheckTasksWaitingTermination+0x54>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1e1      	bne.n	800bfe4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c020:	bf00      	nop
 800c022:	3708      	adds	r7, #8
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	20001b1c 	.word	0x20001b1c
 800c02c:	20001b48 	.word	0x20001b48
 800c030:	20001b30 	.word	0x20001b30

0800c034 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c042:	2b00      	cmp	r3, #0
 800c044:	d108      	bne.n	800c058 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe f92c 	bl	800a2a8 <vPortFree>
				vPortFree( pxTCB );
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7fe f929 	bl	800a2a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c056:	e017      	b.n	800c088 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c05e:	2b01      	cmp	r3, #1
 800c060:	d103      	bne.n	800c06a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7fe f920 	bl	800a2a8 <vPortFree>
	}
 800c068:	e00e      	b.n	800c088 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c070:	2b02      	cmp	r3, #2
 800c072:	d009      	beq.n	800c088 <prvDeleteTCB+0x54>
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	60fb      	str	r3, [r7, #12]
 800c086:	e7fe      	b.n	800c086 <prvDeleteTCB+0x52>
	}
 800c088:	bf00      	nop
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c096:	4b0e      	ldr	r3, [pc, #56]	; (800c0d0 <prvResetNextTaskUnblockTime+0x40>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d101      	bne.n	800c0a4 <prvResetNextTaskUnblockTime+0x14>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e000      	b.n	800c0a6 <prvResetNextTaskUnblockTime+0x16>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d004      	beq.n	800c0b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0aa:	4b0a      	ldr	r3, [pc, #40]	; (800c0d4 <prvResetNextTaskUnblockTime+0x44>)
 800c0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c0b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c0b2:	e008      	b.n	800c0c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800c0b4:	4b06      	ldr	r3, [pc, #24]	; (800c0d0 <prvResetNextTaskUnblockTime+0x40>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	4a04      	ldr	r2, [pc, #16]	; (800c0d4 <prvResetNextTaskUnblockTime+0x44>)
 800c0c4:	6013      	str	r3, [r2, #0]
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bc80      	pop	{r7}
 800c0ce:	4770      	bx	lr
 800c0d0:	20001b00 	.word	0x20001b00
 800c0d4:	20001b68 	.word	0x20001b68

0800c0d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0de:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <xTaskGetSchedulerState+0x34>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	607b      	str	r3, [r7, #4]
 800c0ea:	e008      	b.n	800c0fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ec:	4b08      	ldr	r3, [pc, #32]	; (800c110 <xTaskGetSchedulerState+0x38>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	607b      	str	r3, [r7, #4]
 800c0f8:	e001      	b.n	800c0fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0fe:	687b      	ldr	r3, [r7, #4]
	}
 800c100:	4618      	mov	r0, r3
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20001b54 	.word	0x20001b54
 800c110:	20001b70 	.word	0x20001b70

0800c114 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c120:	2300      	movs	r3, #0
 800c122:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d06e      	beq.n	800c208 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c12e:	4b39      	ldr	r3, [pc, #228]	; (800c214 <xTaskPriorityInherit+0x100>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	429a      	cmp	r2, r3
 800c136:	d25e      	bcs.n	800c1f6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	db06      	blt.n	800c14e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c140:	4b34      	ldr	r3, [pc, #208]	; (800c214 <xTaskPriorityInherit+0x100>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c146:	f1c3 0207 	rsb	r2, r3, #7
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	6959      	ldr	r1, [r3, #20]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c156:	4613      	mov	r3, r2
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4a2e      	ldr	r2, [pc, #184]	; (800c218 <xTaskPriorityInherit+0x104>)
 800c160:	4413      	add	r3, r2
 800c162:	4299      	cmp	r1, r3
 800c164:	d101      	bne.n	800c16a <xTaskPriorityInherit+0x56>
 800c166:	2301      	movs	r3, #1
 800c168:	e000      	b.n	800c16c <xTaskPriorityInherit+0x58>
 800c16a:	2300      	movs	r3, #0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d03a      	beq.n	800c1e6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	3304      	adds	r3, #4
 800c174:	4618      	mov	r0, r3
 800c176:	f7fd fdcd 	bl	8009d14 <uxListRemove>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d115      	bne.n	800c1ac <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c184:	4924      	ldr	r1, [pc, #144]	; (800c218 <xTaskPriorityInherit+0x104>)
 800c186:	4613      	mov	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	440b      	add	r3, r1
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10a      	bne.n	800c1ac <xTaskPriorityInherit+0x98>
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19a:	2201      	movs	r2, #1
 800c19c:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a0:	43da      	mvns	r2, r3
 800c1a2:	4b1e      	ldr	r3, [pc, #120]	; (800c21c <xTaskPriorityInherit+0x108>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	4a1c      	ldr	r2, [pc, #112]	; (800c21c <xTaskPriorityInherit+0x108>)
 800c1aa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1ac:	4b19      	ldr	r3, [pc, #100]	; (800c214 <xTaskPriorityInherit+0x100>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	409a      	lsls	r2, r3
 800c1be:	4b17      	ldr	r3, [pc, #92]	; (800c21c <xTaskPriorityInherit+0x108>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	4a15      	ldr	r2, [pc, #84]	; (800c21c <xTaskPriorityInherit+0x108>)
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4a10      	ldr	r2, [pc, #64]	; (800c218 <xTaskPriorityInherit+0x104>)
 800c1d6:	441a      	add	r2, r3
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	f7fd fd3d 	bl	8009c5e <vListInsertEnd>
 800c1e4:	e004      	b.n	800c1f0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c1e6:	4b0b      	ldr	r3, [pc, #44]	; (800c214 <xTaskPriorityInherit+0x100>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e008      	b.n	800c208 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1fa:	4b06      	ldr	r3, [pc, #24]	; (800c214 <xTaskPriorityInherit+0x100>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	429a      	cmp	r2, r3
 800c202:	d201      	bcs.n	800c208 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c208:	68fb      	ldr	r3, [r7, #12]
	}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	20001a48 	.word	0x20001a48
 800c218:	20001a4c 	.word	0x20001a4c
 800c21c:	20001b50 	.word	0x20001b50

0800c220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c22c:	2300      	movs	r3, #0
 800c22e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d06c      	beq.n	800c310 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c236:	4b39      	ldr	r3, [pc, #228]	; (800c31c <xTaskPriorityDisinherit+0xfc>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d009      	beq.n	800c254 <xTaskPriorityDisinherit+0x34>
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	e7fe      	b.n	800c252 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d109      	bne.n	800c270 <xTaskPriorityDisinherit+0x50>
 800c25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c260:	f383 8811 	msr	BASEPRI, r3
 800c264:	f3bf 8f6f 	isb	sy
 800c268:	f3bf 8f4f 	dsb	sy
 800c26c:	60bb      	str	r3, [r7, #8]
 800c26e:	e7fe      	b.n	800c26e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c274:	1e5a      	subs	r2, r3, #1
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c282:	429a      	cmp	r2, r3
 800c284:	d044      	beq.n	800c310 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d140      	bne.n	800c310 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	3304      	adds	r3, #4
 800c292:	4618      	mov	r0, r3
 800c294:	f7fd fd3e 	bl	8009d14 <uxListRemove>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d115      	bne.n	800c2ca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a2:	491f      	ldr	r1, [pc, #124]	; (800c320 <xTaskPriorityDisinherit+0x100>)
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4413      	add	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	440b      	add	r3, r1
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <xTaskPriorityDisinherit+0xaa>
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	43da      	mvns	r2, r3
 800c2c0:	4b18      	ldr	r3, [pc, #96]	; (800c324 <xTaskPriorityDisinherit+0x104>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	4a17      	ldr	r2, [pc, #92]	; (800c324 <xTaskPriorityDisinherit+0x104>)
 800c2c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d6:	f1c3 0207 	rsb	r2, r3, #7
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	409a      	lsls	r2, r3
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <xTaskPriorityDisinherit+0x104>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	4a0d      	ldr	r2, [pc, #52]	; (800c324 <xTaskPriorityDisinherit+0x104>)
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	4413      	add	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4a08      	ldr	r2, [pc, #32]	; (800c320 <xTaskPriorityDisinherit+0x100>)
 800c2fe:	441a      	add	r2, r3
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	3304      	adds	r3, #4
 800c304:	4619      	mov	r1, r3
 800c306:	4610      	mov	r0, r2
 800c308:	f7fd fca9 	bl	8009c5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c30c:	2301      	movs	r3, #1
 800c30e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c310:	697b      	ldr	r3, [r7, #20]
	}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20001a48 	.word	0x20001a48
 800c320:	20001a4c 	.word	0x20001a4c
 800c324:	20001b50 	.word	0x20001b50

0800c328 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b088      	sub	sp, #32
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c336:	2301      	movs	r3, #1
 800c338:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 8086 	beq.w	800c44e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c346:	2b00      	cmp	r3, #0
 800c348:	d109      	bne.n	800c35e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	60fb      	str	r3, [r7, #12]
 800c35c:	e7fe      	b.n	800c35c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d202      	bcs.n	800c36e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	61fb      	str	r3, [r7, #28]
 800c36c:	e002      	b.n	800c374 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d067      	beq.n	800c44e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	429a      	cmp	r2, r3
 800c386:	d162      	bne.n	800c44e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c388:	4b33      	ldr	r3, [pc, #204]	; (800c458 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	69ba      	ldr	r2, [r7, #24]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d109      	bne.n	800c3a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	60bb      	str	r3, [r7, #8]
 800c3a4:	e7fe      	b.n	800c3a4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3aa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	69fa      	ldr	r2, [r7, #28]
 800c3b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	db04      	blt.n	800c3c4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	f1c3 0207 	rsb	r2, r3, #7
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	6959      	ldr	r1, [r3, #20]
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4a22      	ldr	r2, [pc, #136]	; (800c45c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c3d4:	4413      	add	r3, r2
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	d101      	bne.n	800c3de <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e000      	b.n	800c3e0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d034      	beq.n	800c44e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3e4:	69bb      	ldr	r3, [r7, #24]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fd fc93 	bl	8009d14 <uxListRemove>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d115      	bne.n	800c420 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f8:	4918      	ldr	r1, [pc, #96]	; (800c45c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	009b      	lsls	r3, r3, #2
 800c3fe:	4413      	add	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	440b      	add	r3, r1
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d10a      	bne.n	800c420 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40e:	2201      	movs	r2, #1
 800c410:	fa02 f303 	lsl.w	r3, r2, r3
 800c414:	43da      	mvns	r2, r3
 800c416:	4b12      	ldr	r3, [pc, #72]	; (800c460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4013      	ands	r3, r2
 800c41c:	4a10      	ldr	r2, [pc, #64]	; (800c460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c41e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c424:	2201      	movs	r2, #1
 800c426:	409a      	lsls	r2, r3
 800c428:	4b0d      	ldr	r3, [pc, #52]	; (800c460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	4a0c      	ldr	r2, [pc, #48]	; (800c460 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c430:	6013      	str	r3, [r2, #0]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c436:	4613      	mov	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4a07      	ldr	r2, [pc, #28]	; (800c45c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c440:	441a      	add	r2, r3
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	3304      	adds	r3, #4
 800c446:	4619      	mov	r1, r3
 800c448:	4610      	mov	r0, r2
 800c44a:	f7fd fc08 	bl	8009c5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c44e:	bf00      	nop
 800c450:	3720      	adds	r7, #32
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	20001a48 	.word	0x20001a48
 800c45c:	20001a4c 	.word	0x20001a4c
 800c460:	20001b50 	.word	0x20001b50

0800c464 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c464:	b480      	push	{r7}
 800c466:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c468:	4b07      	ldr	r3, [pc, #28]	; (800c488 <pvTaskIncrementMutexHeldCount+0x24>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c470:	4b05      	ldr	r3, [pc, #20]	; (800c488 <pvTaskIncrementMutexHeldCount+0x24>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c476:	3201      	adds	r2, #1
 800c478:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c47a:	4b03      	ldr	r3, [pc, #12]	; (800c488 <pvTaskIncrementMutexHeldCount+0x24>)
 800c47c:	681b      	ldr	r3, [r3, #0]
	}
 800c47e:	4618      	mov	r0, r3
 800c480:	46bd      	mov	sp, r7
 800c482:	bc80      	pop	{r7}
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	20001a48 	.word	0x20001a48

0800c48c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c496:	4b29      	ldr	r3, [pc, #164]	; (800c53c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c49c:	4b28      	ldr	r3, [pc, #160]	; (800c540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fd fc36 	bl	8009d14 <uxListRemove>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10b      	bne.n	800c4c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c4ae:	4b24      	ldr	r3, [pc, #144]	; (800c540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	43da      	mvns	r2, r3
 800c4bc:	4b21      	ldr	r3, [pc, #132]	; (800c544 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	4a20      	ldr	r2, [pc, #128]	; (800c544 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c4c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4cc:	d10a      	bne.n	800c4e4 <prvAddCurrentTaskToDelayedList+0x58>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d007      	beq.n	800c4e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4d4:	4b1a      	ldr	r3, [pc, #104]	; (800c540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3304      	adds	r3, #4
 800c4da:	4619      	mov	r1, r3
 800c4dc:	481a      	ldr	r0, [pc, #104]	; (800c548 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c4de:	f7fd fbbe 	bl	8009c5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4e2:	e026      	b.n	800c532 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4ec:	4b14      	ldr	r3, [pc, #80]	; (800c540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d209      	bcs.n	800c510 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4fc:	4b13      	ldr	r3, [pc, #76]	; (800c54c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	4b0f      	ldr	r3, [pc, #60]	; (800c540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3304      	adds	r3, #4
 800c506:	4619      	mov	r1, r3
 800c508:	4610      	mov	r0, r2
 800c50a:	f7fd fbcb 	bl	8009ca4 <vListInsert>
}
 800c50e:	e010      	b.n	800c532 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c510:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3304      	adds	r3, #4
 800c51a:	4619      	mov	r1, r3
 800c51c:	4610      	mov	r0, r2
 800c51e:	f7fd fbc1 	bl	8009ca4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c522:	4b0c      	ldr	r3, [pc, #48]	; (800c554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d202      	bcs.n	800c532 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c52c:	4a09      	ldr	r2, [pc, #36]	; (800c554 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	6013      	str	r3, [r2, #0]
}
 800c532:	bf00      	nop
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20001b4c 	.word	0x20001b4c
 800c540:	20001a48 	.word	0x20001a48
 800c544:	20001b50 	.word	0x20001b50
 800c548:	20001b34 	.word	0x20001b34
 800c54c:	20001b04 	.word	0x20001b04
 800c550:	20001b00 	.word	0x20001b00
 800c554:	20001b68 	.word	0x20001b68

0800c558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b08a      	sub	sp, #40	; 0x28
 800c55c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c55e:	2300      	movs	r3, #0
 800c560:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c562:	f000 fb37 	bl	800cbd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c566:	4b1c      	ldr	r3, [pc, #112]	; (800c5d8 <xTimerCreateTimerTask+0x80>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d021      	beq.n	800c5b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c576:	1d3a      	adds	r2, r7, #4
 800c578:	f107 0108 	add.w	r1, r7, #8
 800c57c:	f107 030c 	add.w	r3, r7, #12
 800c580:	4618      	mov	r0, r3
 800c582:	f7f3 fe2f 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c586:	6879      	ldr	r1, [r7, #4]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	9202      	str	r2, [sp, #8]
 800c58e:	9301      	str	r3, [sp, #4]
 800c590:	2302      	movs	r3, #2
 800c592:	9300      	str	r3, [sp, #0]
 800c594:	2300      	movs	r3, #0
 800c596:	460a      	mov	r2, r1
 800c598:	4910      	ldr	r1, [pc, #64]	; (800c5dc <xTimerCreateTimerTask+0x84>)
 800c59a:	4811      	ldr	r0, [pc, #68]	; (800c5e0 <xTimerCreateTimerTask+0x88>)
 800c59c:	f7fe ff16 	bl	800b3cc <xTaskCreateStatic>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	4b10      	ldr	r3, [pc, #64]	; (800c5e4 <xTimerCreateTimerTask+0x8c>)
 800c5a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c5a6:	4b0f      	ldr	r3, [pc, #60]	; (800c5e4 <xTimerCreateTimerTask+0x8c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d109      	bne.n	800c5cc <xTimerCreateTimerTask+0x74>
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	613b      	str	r3, [r7, #16]
 800c5ca:	e7fe      	b.n	800c5ca <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c5cc:	697b      	ldr	r3, [r7, #20]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20001ba4 	.word	0x20001ba4
 800c5dc:	0800d6fc 	.word	0x0800d6fc
 800c5e0:	0800c81d 	.word	0x0800c81d
 800c5e4:	20001ba8 	.word	0x20001ba8

0800c5e8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af02      	add	r7, sp, #8
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c5f6:	202c      	movs	r0, #44	; 0x2c
 800c5f8:	f7fd fd94 	bl	800a124 <pvPortMalloc>
 800c5fc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00d      	beq.n	800c620 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 f844 	bl	800c6a0 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c620:	697b      	ldr	r3, [r7, #20]
	}
 800c622:	4618      	mov	r0, r3
 800c624:	3718      	adds	r7, #24
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b08a      	sub	sp, #40	; 0x28
 800c62e:	af02      	add	r7, sp, #8
 800c630:	60f8      	str	r0, [r7, #12]
 800c632:	60b9      	str	r1, [r7, #8]
 800c634:	607a      	str	r2, [r7, #4]
 800c636:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c638:	232c      	movs	r3, #44	; 0x2c
 800c63a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2b2c      	cmp	r3, #44	; 0x2c
 800c640:	d009      	beq.n	800c656 <xTimerCreateStatic+0x2c>
 800c642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c646:	f383 8811 	msr	BASEPRI, r3
 800c64a:	f3bf 8f6f 	isb	sy
 800c64e:	f3bf 8f4f 	dsb	sy
 800c652:	61bb      	str	r3, [r7, #24]
 800c654:	e7fe      	b.n	800c654 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d109      	bne.n	800c670 <xTimerCreateStatic+0x46>
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	617b      	str	r3, [r7, #20]
 800c66e:	e7fe      	b.n	800c66e <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00d      	beq.n	800c696 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c67a:	69fb      	ldr	r3, [r7, #28]
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c680:	9300      	str	r3, [sp, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	68f8      	ldr	r0, [r7, #12]
 800c68a:	f000 f809 	bl	800c6a0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c68e:	69fb      	ldr	r3, [r7, #28]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c696:	69fb      	ldr	r3, [r7, #28]
	}
 800c698:	4618      	mov	r0, r3
 800c69a:	3720      	adds	r7, #32
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b086      	sub	sp, #24
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
 800c6ac:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d109      	bne.n	800c6c8 <prvInitialiseNewTimer+0x28>
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	617b      	str	r3, [r7, #20]
 800c6c6:	e7fe      	b.n	800c6c6 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d015      	beq.n	800c6fa <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c6ce:	f000 fa81 	bl	800cbd4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	683a      	ldr	r2, [r7, #0]
 800c6e8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	6a3a      	ldr	r2, [r7, #32]
 800c6ee:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fd faa6 	bl	8009c46 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c6fa:	bf00      	nop
 800c6fc:	3718      	adds	r7, #24
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	; 0x28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
 800c710:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c712:	2300      	movs	r3, #0
 800c714:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d109      	bne.n	800c730 <xTimerGenericCommand+0x2c>
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	623b      	str	r3, [r7, #32]
 800c72e:	e7fe      	b.n	800c72e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c730:	4b19      	ldr	r3, [pc, #100]	; (800c798 <xTimerGenericCommand+0x94>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d02a      	beq.n	800c78e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	2b05      	cmp	r3, #5
 800c748:	dc18      	bgt.n	800c77c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c74a:	f7ff fcc5 	bl	800c0d8 <xTaskGetSchedulerState>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b02      	cmp	r3, #2
 800c752:	d109      	bne.n	800c768 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c754:	4b10      	ldr	r3, [pc, #64]	; (800c798 <xTimerGenericCommand+0x94>)
 800c756:	6818      	ldr	r0, [r3, #0]
 800c758:	f107 0114 	add.w	r1, r7, #20
 800c75c:	2300      	movs	r3, #0
 800c75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c760:	f7fe f838 	bl	800a7d4 <xQueueGenericSend>
 800c764:	6278      	str	r0, [r7, #36]	; 0x24
 800c766:	e012      	b.n	800c78e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c768:	4b0b      	ldr	r3, [pc, #44]	; (800c798 <xTimerGenericCommand+0x94>)
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	f107 0114 	add.w	r1, r7, #20
 800c770:	2300      	movs	r3, #0
 800c772:	2200      	movs	r2, #0
 800c774:	f7fe f82e 	bl	800a7d4 <xQueueGenericSend>
 800c778:	6278      	str	r0, [r7, #36]	; 0x24
 800c77a:	e008      	b.n	800c78e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c77c:	4b06      	ldr	r3, [pc, #24]	; (800c798 <xTimerGenericCommand+0x94>)
 800c77e:	6818      	ldr	r0, [r3, #0]
 800c780:	f107 0114 	add.w	r1, r7, #20
 800c784:	2300      	movs	r3, #0
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	f7fe f91e 	bl	800a9c8 <xQueueGenericSendFromISR>
 800c78c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c790:	4618      	mov	r0, r3
 800c792:	3728      	adds	r7, #40	; 0x28
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	20001ba4 	.word	0x20001ba4

0800c79c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7a6:	4b1c      	ldr	r3, [pc, #112]	; (800c818 <prvProcessExpiredTimer+0x7c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd faad 	bl	8009d14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	69db      	ldr	r3, [r3, #28]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d121      	bne.n	800c806 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	699a      	ldr	r2, [r3, #24]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	18d1      	adds	r1, r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	6978      	ldr	r0, [r7, #20]
 800c7d0:	f000 f8c8 	bl	800c964 <prvInsertTimerInActiveList>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d015      	beq.n	800c806 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7da:	2300      	movs	r3, #0
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	2300      	movs	r3, #0
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	2100      	movs	r1, #0
 800c7e4:	6978      	ldr	r0, [r7, #20]
 800c7e6:	f7ff ff8d 	bl	800c704 <xTimerGenericCommand>
 800c7ea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d109      	bne.n	800c806 <prvProcessExpiredTimer+0x6a>
 800c7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e7fe      	b.n	800c804 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	6978      	ldr	r0, [r7, #20]
 800c80c:	4798      	blx	r3
}
 800c80e:	bf00      	nop
 800c810:	3718      	adds	r7, #24
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20001b9c 	.word	0x20001b9c

0800c81c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c824:	f107 0308 	add.w	r3, r7, #8
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 f857 	bl	800c8dc <prvGetNextExpireTime>
 800c82e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	4619      	mov	r1, r3
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f000 f803 	bl	800c840 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c83a:	f000 f8d5 	bl	800c9e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c83e:	e7f1      	b.n	800c824 <prvTimerTask+0x8>

0800c840 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c84a:	f7ff f86f 	bl	800b92c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c84e:	f107 0308 	add.w	r3, r7, #8
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f866 	bl	800c924 <prvSampleTimeNow>
 800c858:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d130      	bne.n	800c8c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d10a      	bne.n	800c87c <prvProcessTimerOrBlockTask+0x3c>
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d806      	bhi.n	800c87c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c86e:	f7ff f86b 	bl	800b948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c872:	68f9      	ldr	r1, [r7, #12]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff ff91 	bl	800c79c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c87a:	e024      	b.n	800c8c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d008      	beq.n	800c894 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c882:	4b13      	ldr	r3, [pc, #76]	; (800c8d0 <prvProcessTimerOrBlockTask+0x90>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	bf0c      	ite	eq
 800c88c:	2301      	moveq	r3, #1
 800c88e:	2300      	movne	r3, #0
 800c890:	b2db      	uxtb	r3, r3
 800c892:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c894:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <prvProcessTimerOrBlockTask+0x94>)
 800c896:	6818      	ldr	r0, [r3, #0]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	1ad3      	subs	r3, r2, r3
 800c89e:	683a      	ldr	r2, [r7, #0]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f7fe fd5f 	bl	800b364 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c8a6:	f7ff f84f 	bl	800b948 <xTaskResumeAll>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10a      	bne.n	800c8c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c8b0:	4b09      	ldr	r3, [pc, #36]	; (800c8d8 <prvProcessTimerOrBlockTask+0x98>)
 800c8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b6:	601a      	str	r2, [r3, #0]
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	f3bf 8f6f 	isb	sy
}
 800c8c0:	e001      	b.n	800c8c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c8c2:	f7ff f841 	bl	800b948 <xTaskResumeAll>
}
 800c8c6:	bf00      	nop
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	20001ba0 	.word	0x20001ba0
 800c8d4:	20001ba4 	.word	0x20001ba4
 800c8d8:	e000ed04 	.word	0xe000ed04

0800c8dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c8e4:	4b0e      	ldr	r3, [pc, #56]	; (800c920 <prvGetNextExpireTime+0x44>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	bf0c      	ite	eq
 800c8ee:	2301      	moveq	r3, #1
 800c8f0:	2300      	movne	r3, #0
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	461a      	mov	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d105      	bne.n	800c90e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c902:	4b07      	ldr	r3, [pc, #28]	; (800c920 <prvGetNextExpireTime+0x44>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	e001      	b.n	800c912 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c912:	68fb      	ldr	r3, [r7, #12]
}
 800c914:	4618      	mov	r0, r3
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	bc80      	pop	{r7}
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20001b9c 	.word	0x20001b9c

0800c924 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c92c:	f7ff f8a8 	bl	800ba80 <xTaskGetTickCount>
 800c930:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c932:	4b0b      	ldr	r3, [pc, #44]	; (800c960 <prvSampleTimeNow+0x3c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d205      	bcs.n	800c948 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c93c:	f000 f8ea 	bl	800cb14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2201      	movs	r2, #1
 800c944:	601a      	str	r2, [r3, #0]
 800c946:	e002      	b.n	800c94e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSampleTimeNow+0x3c>)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c954:	68fb      	ldr	r3, [r7, #12]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	20001bac 	.word	0x20001bac

0800c964 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	429a      	cmp	r2, r3
 800c988:	d812      	bhi.n	800c9b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	1ad2      	subs	r2, r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	429a      	cmp	r2, r3
 800c996:	d302      	bcc.n	800c99e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c998:	2301      	movs	r3, #1
 800c99a:	617b      	str	r3, [r7, #20]
 800c99c:	e01b      	b.n	800c9d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c99e:	4b10      	ldr	r3, [pc, #64]	; (800c9e0 <prvInsertTimerInActiveList+0x7c>)
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	f7fd f97b 	bl	8009ca4 <vListInsert>
 800c9ae:	e012      	b.n	800c9d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d206      	bcs.n	800c9c6 <prvInsertTimerInActiveList+0x62>
 800c9b8:	68ba      	ldr	r2, [r7, #8]
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d302      	bcc.n	800c9c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	e007      	b.n	800c9d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9c6:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <prvInsertTimerInActiveList+0x80>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	f7fd f967 	bl	8009ca4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c9d6:	697b      	ldr	r3, [r7, #20]
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20001ba0 	.word	0x20001ba0
 800c9e4:	20001b9c 	.word	0x20001b9c

0800c9e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b08c      	sub	sp, #48	; 0x30
 800c9ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9ee:	e07f      	b.n	800caf0 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	db7c      	blt.n	800caf0 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	695b      	ldr	r3, [r3, #20]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d004      	beq.n	800ca0c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	3304      	adds	r3, #4
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7fd f984 	bl	8009d14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca0c:	1d3b      	adds	r3, r7, #4
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff ff88 	bl	800c924 <prvSampleTimeNow>
 800ca14:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	d868      	bhi.n	800caee <prvProcessReceivedCommands+0x106>
 800ca1c:	a201      	add	r2, pc, #4	; (adr r2, 800ca24 <prvProcessReceivedCommands+0x3c>)
 800ca1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca22:	bf00      	nop
 800ca24:	0800ca4d 	.word	0x0800ca4d
 800ca28:	0800ca4d 	.word	0x0800ca4d
 800ca2c:	0800ca4d 	.word	0x0800ca4d
 800ca30:	0800caf1 	.word	0x0800caf1
 800ca34:	0800caa7 	.word	0x0800caa7
 800ca38:	0800cadd 	.word	0x0800cadd
 800ca3c:	0800ca4d 	.word	0x0800ca4d
 800ca40:	0800ca4d 	.word	0x0800ca4d
 800ca44:	0800caf1 	.word	0x0800caf1
 800ca48:	0800caa7 	.word	0x0800caa7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	18d1      	adds	r1, r2, r3
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6a3a      	ldr	r2, [r7, #32]
 800ca58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca5a:	f7ff ff83 	bl	800c964 <prvInsertTimerInActiveList>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d045      	beq.n	800caf0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca6a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	69db      	ldr	r3, [r3, #28]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d13d      	bne.n	800caf0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	441a      	add	r2, r3
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	2300      	movs	r3, #0
 800ca82:	2100      	movs	r1, #0
 800ca84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca86:	f7ff fe3d 	bl	800c704 <xTimerGenericCommand>
 800ca8a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d12e      	bne.n	800caf0 <prvProcessReceivedCommands+0x108>
 800ca92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	61bb      	str	r3, [r7, #24]
 800caa4:	e7fe      	b.n	800caa4 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800caa6:	68fa      	ldr	r2, [r7, #12]
 800caa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d109      	bne.n	800cac8 <prvProcessReceivedCommands+0xe0>
 800cab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	617b      	str	r3, [r7, #20]
 800cac6:	e7fe      	b.n	800cac6 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	699a      	ldr	r2, [r3, #24]
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	18d1      	adds	r1, r2, r3
 800cad0:	6a3b      	ldr	r3, [r7, #32]
 800cad2:	6a3a      	ldr	r2, [r7, #32]
 800cad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cad6:	f7ff ff45 	bl	800c964 <prvInsertTimerInActiveList>
					break;
 800cada:	e009      	b.n	800caf0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d104      	bne.n	800caf0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800cae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cae8:	f7fd fbde 	bl	800a2a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800caec:	e000      	b.n	800caf0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800caee:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800caf0:	4b07      	ldr	r3, [pc, #28]	; (800cb10 <prvProcessReceivedCommands+0x128>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f107 0108 	add.w	r1, r7, #8
 800caf8:	2200      	movs	r2, #0
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe f882 	bl	800ac04 <xQueueReceive>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f47f af74 	bne.w	800c9f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cb08:	bf00      	nop
 800cb0a:	3728      	adds	r7, #40	; 0x28
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	20001ba4 	.word	0x20001ba4

0800cb14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb1a:	e044      	b.n	800cba6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb1c:	4b2b      	ldr	r3, [pc, #172]	; (800cbcc <prvSwitchTimerLists+0xb8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb26:	4b29      	ldr	r3, [pc, #164]	; (800cbcc <prvSwitchTimerLists+0xb8>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	3304      	adds	r3, #4
 800cb34:	4618      	mov	r0, r3
 800cb36:	f7fd f8ed 	bl	8009d14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb3e:	6938      	ldr	r0, [r7, #16]
 800cb40:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	69db      	ldr	r3, [r3, #28]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d12d      	bne.n	800cba6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	699a      	ldr	r2, [r3, #24]
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	4413      	add	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d90e      	bls.n	800cb7a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	68fa      	ldr	r2, [r7, #12]
 800cb60:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb68:	4b18      	ldr	r3, [pc, #96]	; (800cbcc <prvSwitchTimerLists+0xb8>)
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	3304      	adds	r3, #4
 800cb70:	4619      	mov	r1, r3
 800cb72:	4610      	mov	r0, r2
 800cb74:	f7fd f896 	bl	8009ca4 <vListInsert>
 800cb78:	e015      	b.n	800cba6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	2300      	movs	r3, #0
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	2100      	movs	r1, #0
 800cb84:	6938      	ldr	r0, [r7, #16]
 800cb86:	f7ff fdbd 	bl	800c704 <xTimerGenericCommand>
 800cb8a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d109      	bne.n	800cba6 <prvSwitchTimerLists+0x92>
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	e7fe      	b.n	800cba4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cba6:	4b09      	ldr	r3, [pc, #36]	; (800cbcc <prvSwitchTimerLists+0xb8>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1b5      	bne.n	800cb1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbb0:	4b06      	ldr	r3, [pc, #24]	; (800cbcc <prvSwitchTimerLists+0xb8>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbb6:	4b06      	ldr	r3, [pc, #24]	; (800cbd0 <prvSwitchTimerLists+0xbc>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a04      	ldr	r2, [pc, #16]	; (800cbcc <prvSwitchTimerLists+0xb8>)
 800cbbc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbbe:	4a04      	ldr	r2, [pc, #16]	; (800cbd0 <prvSwitchTimerLists+0xbc>)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6013      	str	r3, [r2, #0]
}
 800cbc4:	bf00      	nop
 800cbc6:	3718      	adds	r7, #24
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	20001b9c 	.word	0x20001b9c
 800cbd0:	20001ba0 	.word	0x20001ba0

0800cbd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cbda:	f7fd f9ad 	bl	8009f38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cbde:	4b15      	ldr	r3, [pc, #84]	; (800cc34 <prvCheckForValidListAndQueue+0x60>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d120      	bne.n	800cc28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cbe6:	4814      	ldr	r0, [pc, #80]	; (800cc38 <prvCheckForValidListAndQueue+0x64>)
 800cbe8:	f7fd f80e 	bl	8009c08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cbec:	4813      	ldr	r0, [pc, #76]	; (800cc3c <prvCheckForValidListAndQueue+0x68>)
 800cbee:	f7fd f80b 	bl	8009c08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cbf2:	4b13      	ldr	r3, [pc, #76]	; (800cc40 <prvCheckForValidListAndQueue+0x6c>)
 800cbf4:	4a10      	ldr	r2, [pc, #64]	; (800cc38 <prvCheckForValidListAndQueue+0x64>)
 800cbf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbf8:	4b12      	ldr	r3, [pc, #72]	; (800cc44 <prvCheckForValidListAndQueue+0x70>)
 800cbfa:	4a10      	ldr	r2, [pc, #64]	; (800cc3c <prvCheckForValidListAndQueue+0x68>)
 800cbfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbfe:	2300      	movs	r3, #0
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	4b11      	ldr	r3, [pc, #68]	; (800cc48 <prvCheckForValidListAndQueue+0x74>)
 800cc04:	4a11      	ldr	r2, [pc, #68]	; (800cc4c <prvCheckForValidListAndQueue+0x78>)
 800cc06:	210c      	movs	r1, #12
 800cc08:	200a      	movs	r0, #10
 800cc0a:	f7fd fcc7 	bl	800a59c <xQueueGenericCreateStatic>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	4b08      	ldr	r3, [pc, #32]	; (800cc34 <prvCheckForValidListAndQueue+0x60>)
 800cc12:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc14:	4b07      	ldr	r3, [pc, #28]	; (800cc34 <prvCheckForValidListAndQueue+0x60>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d005      	beq.n	800cc28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc1c:	4b05      	ldr	r3, [pc, #20]	; (800cc34 <prvCheckForValidListAndQueue+0x60>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	490b      	ldr	r1, [pc, #44]	; (800cc50 <prvCheckForValidListAndQueue+0x7c>)
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fb76 	bl	800b314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc28:	f7fd f9b4 	bl	8009f94 <vPortExitCritical>
}
 800cc2c:	bf00      	nop
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001ba4 	.word	0x20001ba4
 800cc38:	20001b74 	.word	0x20001b74
 800cc3c:	20001b88 	.word	0x20001b88
 800cc40:	20001b9c 	.word	0x20001b9c
 800cc44:	20001ba0 	.word	0x20001ba0
 800cc48:	20001c28 	.word	0x20001c28
 800cc4c:	20001bb0 	.word	0x20001bb0
 800cc50:	0800d704 	.word	0x0800d704

0800cc54 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d109      	bne.n	800cc7a <pvTimerGetTimerID+0x26>
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	e7fe      	b.n	800cc78 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 800cc7a:	f7fd f95d 	bl	8009f38 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800cc84:	f7fd f986 	bl	8009f94 <vPortExitCritical>

	return pvReturn;
 800cc88:	693b      	ldr	r3, [r7, #16]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
	...

0800cc94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800cc98:	4b27      	ldr	r3, [pc, #156]	; (800cd38 <MX_USB_DEVICE_Init+0xa4>)
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d124      	bne.n	800ccec <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cca2:	2200      	movs	r2, #0
 800cca4:	4925      	ldr	r1, [pc, #148]	; (800cd3c <MX_USB_DEVICE_Init+0xa8>)
 800cca6:	4826      	ldr	r0, [pc, #152]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800cca8:	f7fb fc86 	bl	80085b8 <USBD_Init>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d001      	beq.n	800ccb6 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800ccb2:	f7f3 ff4f 	bl	8000b54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800ccb6:	4923      	ldr	r1, [pc, #140]	; (800cd44 <MX_USB_DEVICE_Init+0xb0>)
 800ccb8:	4821      	ldr	r0, [pc, #132]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800ccba:	f7fb fca8 	bl	800860e <USBD_RegisterClass>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800ccc4:	f7f3 ff46 	bl	8000b54 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800ccc8:	491f      	ldr	r1, [pc, #124]	; (800cd48 <MX_USB_DEVICE_Init+0xb4>)
 800ccca:	481d      	ldr	r0, [pc, #116]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800cccc:	f7fb fc5e 	bl	800858c <USBD_CUSTOM_HID_RegisterInterface>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800ccd6:	f7f3 ff3d 	bl	8000b54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ccda:	4819      	ldr	r0, [pc, #100]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800ccdc:	f7fb fcb0 	bl	8008640 <USBD_Start>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d01e      	beq.n	800cd24 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800cce6:	f7f3 ff35 	bl	8000b54 <Error_Handler>
 800ccea:	e01b      	b.n	800cd24 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ccec:	2200      	movs	r2, #0
 800ccee:	4913      	ldr	r1, [pc, #76]	; (800cd3c <MX_USB_DEVICE_Init+0xa8>)
 800ccf0:	4813      	ldr	r0, [pc, #76]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800ccf2:	f7fb fc61 	bl	80085b8 <USBD_Init>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800ccfc:	f7f3 ff2a 	bl	8000b54 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800cd00:	4912      	ldr	r1, [pc, #72]	; (800cd4c <MX_USB_DEVICE_Init+0xb8>)
 800cd02:	480f      	ldr	r0, [pc, #60]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800cd04:	f7fb fc83 	bl	800860e <USBD_RegisterClass>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800cd0e:	f7f3 ff21 	bl	8000b54 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800cd12:	490f      	ldr	r1, [pc, #60]	; (800cd50 <MX_USB_DEVICE_Init+0xbc>)
 800cd14:	480a      	ldr	r0, [pc, #40]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800cd16:	f7fa f9f7 	bl	8007108 <USBD_MSC_RegisterStorage>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d001      	beq.n	800cd24 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800cd20:	f7f3 ff18 	bl	8000b54 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cd24:	4806      	ldr	r0, [pc, #24]	; (800cd40 <MX_USB_DEVICE_Init+0xac>)
 800cd26:	f7fb fc8b 	bl	8008640 <USBD_Start>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800cd30:	f7f3 ff10 	bl	8000b54 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd34:	bf00      	nop
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	200003a4 	.word	0x200003a4
 800cd3c:	20000338 	.word	0x20000338
 800cd40:	200032c8 	.word	0x200032c8
 800cd44:	200001f0 	.word	0x200001f0
 800cd48:	20000328 	.word	0x20000328
 800cd4c:	2000014c 	.word	0x2000014c
 800cd50:	2000010c 	.word	0x2000010c

0800cd54 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bc80      	pop	{r7}
 800cd60:	4770      	bx	lr

0800cd62 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cd62:	b480      	push	{r7}
 800cd64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cd66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bc80      	pop	{r7}
 800cd6e:	4770      	bx	lr

0800cd70 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	460a      	mov	r2, r1
 800cd7a:	71fb      	strb	r3, [r7, #7]
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cd80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bc80      	pop	{r7}
 800cd8a:	4770      	bx	lr

0800cd8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2212      	movs	r2, #18
 800cd9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd9e:	4b03      	ldr	r3, [pc, #12]	; (800cdac <USBD_FS_DeviceDescriptor+0x20>)
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bc80      	pop	{r7}
 800cda8:	4770      	bx	lr
 800cdaa:	bf00      	nop
 800cdac:	20000354 	.word	0x20000354

0800cdb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	6039      	str	r1, [r7, #0]
 800cdba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2204      	movs	r2, #4
 800cdc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdc2:	4b03      	ldr	r3, [pc, #12]	; (800cdd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bc80      	pop	{r7}
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	20000368 	.word	0x20000368

0800cdd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	6039      	str	r1, [r7, #0]
 800cdde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cde0:	79fb      	ldrb	r3, [r7, #7]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d105      	bne.n	800cdf2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	4907      	ldr	r1, [pc, #28]	; (800ce08 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdea:	4808      	ldr	r0, [pc, #32]	; (800ce0c <USBD_FS_ProductStrDescriptor+0x38>)
 800cdec:	f7fc fb93 	bl	8009516 <USBD_GetString>
 800cdf0:	e004      	b.n	800cdfc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	4904      	ldr	r1, [pc, #16]	; (800ce08 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdf6:	4805      	ldr	r0, [pc, #20]	; (800ce0c <USBD_FS_ProductStrDescriptor+0x38>)
 800cdf8:	f7fc fb8d 	bl	8009516 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdfc:	4b02      	ldr	r3, [pc, #8]	; (800ce08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	2000358c 	.word	0x2000358c
 800ce0c:	0800d70c 	.word	0x0800d70c

0800ce10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	4603      	mov	r3, r0
 800ce18:	6039      	str	r1, [r7, #0]
 800ce1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	4904      	ldr	r1, [pc, #16]	; (800ce30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce20:	4804      	ldr	r0, [pc, #16]	; (800ce34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce22:	f7fc fb78 	bl	8009516 <USBD_GetString>
  return USBD_StrDesc;
 800ce26:	4b02      	ldr	r3, [pc, #8]	; (800ce30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	2000358c 	.word	0x2000358c
 800ce34:	0800d730 	.word	0x0800d730

0800ce38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	4603      	mov	r3, r0
 800ce40:	6039      	str	r1, [r7, #0]
 800ce42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	221a      	movs	r2, #26
 800ce48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce4a:	f000 f843 	bl	800ced4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce4e:	4b02      	ldr	r3, [pc, #8]	; (800ce58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	2000036c 	.word	0x2000036c

0800ce5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce68:	79fb      	ldrb	r3, [r7, #7]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d105      	bne.n	800ce7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce6e:	683a      	ldr	r2, [r7, #0]
 800ce70:	4907      	ldr	r1, [pc, #28]	; (800ce90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce72:	4808      	ldr	r0, [pc, #32]	; (800ce94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce74:	f7fc fb4f 	bl	8009516 <USBD_GetString>
 800ce78:	e004      	b.n	800ce84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	4904      	ldr	r1, [pc, #16]	; (800ce90 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce7e:	4805      	ldr	r0, [pc, #20]	; (800ce94 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce80:	f7fc fb49 	bl	8009516 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce84:	4b02      	ldr	r3, [pc, #8]	; (800ce90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	2000358c 	.word	0x2000358c
 800ce94:	0800d740 	.word	0x0800d740

0800ce98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	6039      	str	r1, [r7, #0]
 800cea2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d105      	bne.n	800ceb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	4907      	ldr	r1, [pc, #28]	; (800cecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceae:	4808      	ldr	r0, [pc, #32]	; (800ced0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ceb0:	f7fc fb31 	bl	8009516 <USBD_GetString>
 800ceb4:	e004      	b.n	800cec0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	4904      	ldr	r1, [pc, #16]	; (800cecc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceba:	4805      	ldr	r0, [pc, #20]	; (800ced0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cebc:	f7fc fb2b 	bl	8009516 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cec0:	4b02      	ldr	r3, [pc, #8]	; (800cecc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3708      	adds	r7, #8
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	2000358c 	.word	0x2000358c
 800ced0:	0800d754 	.word	0x0800d754

0800ced4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceda:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <Get_SerialNum+0x44>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cee0:	4b0e      	ldr	r3, [pc, #56]	; (800cf1c <Get_SerialNum+0x48>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cee6:	4b0e      	ldr	r3, [pc, #56]	; (800cf20 <Get_SerialNum+0x4c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	4413      	add	r3, r2
 800cef2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d009      	beq.n	800cf0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cefa:	2208      	movs	r2, #8
 800cefc:	4909      	ldr	r1, [pc, #36]	; (800cf24 <Get_SerialNum+0x50>)
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f000 f814 	bl	800cf2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf04:	2204      	movs	r2, #4
 800cf06:	4908      	ldr	r1, [pc, #32]	; (800cf28 <Get_SerialNum+0x54>)
 800cf08:	68b8      	ldr	r0, [r7, #8]
 800cf0a:	f000 f80f 	bl	800cf2c <IntToUnicode>
  }
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	1ffff7e8 	.word	0x1ffff7e8
 800cf1c:	1ffff7ec 	.word	0x1ffff7ec
 800cf20:	1ffff7f0 	.word	0x1ffff7f0
 800cf24:	2000036e 	.word	0x2000036e
 800cf28:	2000037e 	.word	0x2000037e

0800cf2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b087      	sub	sp, #28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	4613      	mov	r3, r2
 800cf38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf3e:	2300      	movs	r3, #0
 800cf40:	75fb      	strb	r3, [r7, #23]
 800cf42:	e027      	b.n	800cf94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	0f1b      	lsrs	r3, r3, #28
 800cf48:	2b09      	cmp	r3, #9
 800cf4a:	d80b      	bhi.n	800cf64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	461a      	mov	r2, r3
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	4413      	add	r3, r2
 800cf56:	68fa      	ldr	r2, [r7, #12]
 800cf58:	0f12      	lsrs	r2, r2, #28
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	3230      	adds	r2, #48	; 0x30
 800cf5e:	b2d2      	uxtb	r2, r2
 800cf60:	701a      	strb	r2, [r3, #0]
 800cf62:	e00a      	b.n	800cf7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	461a      	mov	r2, r3
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	0f12      	lsrs	r2, r2, #28
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	3237      	adds	r2, #55	; 0x37
 800cf76:	b2d2      	uxtb	r2, r2
 800cf78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	011b      	lsls	r3, r3, #4
 800cf7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	3301      	adds	r3, #1
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	4413      	add	r3, r2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf8e:	7dfb      	ldrb	r3, [r7, #23]
 800cf90:	3301      	adds	r3, #1
 800cf92:	75fb      	strb	r3, [r7, #23]
 800cf94:	7dfa      	ldrb	r2, [r7, #23]
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d3d3      	bcc.n	800cf44 <IntToUnicode+0x18>
  }
}
 800cf9c:	bf00      	nop
 800cf9e:	371c      	adds	r7, #28
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bc80      	pop	{r7}
 800cfa4:	4770      	bx	lr
	...

0800cfa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a0d      	ldr	r2, [pc, #52]	; (800cfec <HAL_PCD_MspInit+0x44>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d113      	bne.n	800cfe2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cfba:	4a0d      	ldr	r2, [pc, #52]	; (800cff0 <HAL_PCD_MspInit+0x48>)
 800cfbc:	4b0c      	ldr	r3, [pc, #48]	; (800cff0 <HAL_PCD_MspInit+0x48>)
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfc4:	61d3      	str	r3, [r2, #28]
 800cfc6:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <HAL_PCD_MspInit+0x48>)
 800cfc8:	69db      	ldr	r3, [r3, #28]
 800cfca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2105      	movs	r1, #5
 800cfd6:	2014      	movs	r0, #20
 800cfd8:	f7f4 f9f1 	bl	80013be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cfdc:	2014      	movs	r0, #20
 800cfde:	f7f4 fa0a 	bl	80013f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cfe2:	bf00      	nop
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	40005c00 	.word	0x40005c00
 800cff0:	40021000 	.word	0x40021000

0800cff4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d008:	4619      	mov	r1, r3
 800d00a:	4610      	mov	r0, r2
 800d00c:	f7fb fb60 	bl	80086d0 <USBD_LL_SetupStage>
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	460b      	mov	r3, r1
 800d022:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d02a:	78fa      	ldrb	r2, [r7, #3]
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	4613      	mov	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	00db      	lsls	r3, r3, #3
 800d036:	440b      	add	r3, r1
 800d038:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	4619      	mov	r1, r3
 800d042:	f7fb fb90 	bl	8008766 <USBD_LL_DataOutStage>
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b082      	sub	sp, #8
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	460b      	mov	r3, r1
 800d058:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800d060:	78fa      	ldrb	r2, [r7, #3]
 800d062:	6879      	ldr	r1, [r7, #4]
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	00db      	lsls	r3, r3, #3
 800d06c:	440b      	add	r3, r1
 800d06e:	333c      	adds	r3, #60	; 0x3c
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	4619      	mov	r1, r3
 800d076:	f7fb fbe7 	bl	8008848 <USBD_LL_DataInStage>
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b082      	sub	sp, #8
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d090:	4618      	mov	r0, r3
 800d092:	f7fb fcf7 	bl	8008a84 <USBD_LL_SOF>
}
 800d096:	bf00      	nop
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d001      	beq.n	800d0b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d0b2:	f7f3 fd4f 	bl	8000b54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0bc:	7bfa      	ldrb	r2, [r7, #15]
 800d0be:	4611      	mov	r1, r2
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7fb fca7 	bl	8008a14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7fb fc60 	bl	8008992 <USBD_LL_Reset>
}
 800d0d2:	bf00      	nop
 800d0d4:	3710      	adds	r7, #16
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
	...

0800d0dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fb fca1 	bl	8008a32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	699b      	ldr	r3, [r3, #24]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d005      	beq.n	800d104 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0f8:	4a04      	ldr	r2, [pc, #16]	; (800d10c <HAL_PCD_SuspendCallback+0x30>)
 800d0fa:	4b04      	ldr	r3, [pc, #16]	; (800d10c <HAL_PCD_SuspendCallback+0x30>)
 800d0fc:	691b      	ldr	r3, [r3, #16]
 800d0fe:	f043 0306 	orr.w	r3, r3, #6
 800d102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	e000ed00 	.word	0xe000ed00

0800d110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fb fc9b 	bl	8008a5a <USBD_LL_Resume>
}
 800d124:	bf00      	nop
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d134:	4a23      	ldr	r2, [pc, #140]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	4a21      	ldr	r2, [pc, #132]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d140:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d144:	4b1f      	ldr	r3, [pc, #124]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d146:	4a20      	ldr	r2, [pc, #128]	; (800d1c8 <USBD_LL_Init+0x9c>)
 800d148:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d14a:	4b1e      	ldr	r3, [pc, #120]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d14c:	2208      	movs	r2, #8
 800d14e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d150:	4b1c      	ldr	r3, [pc, #112]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d152:	2202      	movs	r2, #2
 800d154:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d156:	4b1b      	ldr	r3, [pc, #108]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d158:	2200      	movs	r2, #0
 800d15a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d15c:	4b19      	ldr	r3, [pc, #100]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d15e:	2200      	movs	r2, #0
 800d160:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d162:	4b18      	ldr	r3, [pc, #96]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d164:	2200      	movs	r2, #0
 800d166:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d168:	4816      	ldr	r0, [pc, #88]	; (800d1c4 <USBD_LL_Init+0x98>)
 800d16a:	f7f4 fcc9 	bl	8001b00 <HAL_PCD_Init>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d174:	f7f3 fcee 	bl	8000b54 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d17e:	2318      	movs	r3, #24
 800d180:	2200      	movs	r2, #0
 800d182:	2100      	movs	r1, #0
 800d184:	f7f6 f989 	bl	800349a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d18e:	2358      	movs	r3, #88	; 0x58
 800d190:	2200      	movs	r2, #0
 800d192:	2180      	movs	r1, #128	; 0x80
 800d194:	f7f6 f981 	bl	800349a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d19e:	2398      	movs	r3, #152	; 0x98
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2181      	movs	r1, #129	; 0x81
 800d1a4:	f7f6 f979 	bl	800349a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1ae:	23d8      	movs	r3, #216	; 0xd8
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	f7f6 f971 	bl	800349a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	2000378c 	.word	0x2000378c
 800d1c8:	40005c00 	.word	0x40005c00

0800d1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f4 fd97 	bl	8001d16 <HAL_PCD_Start>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 f96e 	bl	800d4d0 <USBD_Get_USB_Status>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b084      	sub	sp, #16
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	4608      	mov	r0, r1
 800d20c:	4611      	mov	r1, r2
 800d20e:	461a      	mov	r2, r3
 800d210:	4603      	mov	r3, r0
 800d212:	70fb      	strb	r3, [r7, #3]
 800d214:	460b      	mov	r3, r1
 800d216:	70bb      	strb	r3, [r7, #2]
 800d218:	4613      	mov	r3, r2
 800d21a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d22a:	78bb      	ldrb	r3, [r7, #2]
 800d22c:	883a      	ldrh	r2, [r7, #0]
 800d22e:	78f9      	ldrb	r1, [r7, #3]
 800d230:	f7f4 ff11 	bl	8002056 <HAL_PCD_EP_Open>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d238:	7bfb      	ldrb	r3, [r7, #15]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 f948 	bl	800d4d0 <USBD_Get_USB_Status>
 800d240:	4603      	mov	r3, r0
 800d242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d244:	7bbb      	ldrb	r3, [r7, #14]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	460b      	mov	r3, r1
 800d258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25e:	2300      	movs	r3, #0
 800d260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	4611      	mov	r1, r2
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7f4 ff58 	bl	8002122 <HAL_PCD_EP_Close>
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f929 	bl	800d4d0 <USBD_Get_USB_Status>
 800d27e:	4603      	mov	r3, r0
 800d280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d282:	7bbb      	ldrb	r3, [r7, #14]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2a6:	78fa      	ldrb	r2, [r7, #3]
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f5 f8cc 	bl	8002448 <HAL_PCD_EP_Flush>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 f90a 	bl	800d4d0 <USBD_Get_USB_Status>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2e4:	78fa      	ldrb	r2, [r7, #3]
 800d2e6:	4611      	mov	r1, r2
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7f4 fff9 	bl	80022e0 <HAL_PCD_EP_SetStall>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f000 f8eb 	bl	800d4d0 <USBD_Get_USB_Status>
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d318:	2300      	movs	r3, #0
 800d31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d322:	78fa      	ldrb	r2, [r7, #3]
 800d324:	4611      	mov	r1, r2
 800d326:	4618      	mov	r0, r3
 800d328:	f7f5 f83a 	bl	80023a0 <HAL_PCD_EP_ClrStall>
 800d32c:	4603      	mov	r3, r0
 800d32e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	4618      	mov	r0, r3
 800d334:	f000 f8cc 	bl	800d4d0 <USBD_Get_USB_Status>
 800d338:	4603      	mov	r3, r0
 800d33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d346:	b480      	push	{r7}
 800d348:	b085      	sub	sp, #20
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d358:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d35a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	da0c      	bge.n	800d37c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d362:	78fb      	ldrb	r3, [r7, #3]
 800d364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d368:	68f9      	ldr	r1, [r7, #12]
 800d36a:	1c5a      	adds	r2, r3, #1
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	440b      	add	r3, r1
 800d376:	3302      	adds	r3, #2
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	e00b      	b.n	800d394 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	00db      	lsls	r3, r3, #3
 800d38c:	440b      	add	r3, r1
 800d38e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d392:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d394:	4618      	mov	r0, r3
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	bc80      	pop	{r7}
 800d39c:	4770      	bx	lr

0800d39e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b084      	sub	sp, #16
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3b8:	78fa      	ldrb	r2, [r7, #3]
 800d3ba:	4611      	mov	r1, r2
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7f4 fe25 	bl	800200c <HAL_PCD_SetAddress>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c6:	7bfb      	ldrb	r3, [r7, #15]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 f881 	bl	800d4d0 <USBD_Get_USB_Status>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	607a      	str	r2, [r7, #4]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	72fb      	strb	r3, [r7, #11]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d3fe:	893b      	ldrh	r3, [r7, #8]
 800d400:	7af9      	ldrb	r1, [r7, #11]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	f7f4 ff29 	bl	800225a <HAL_PCD_EP_Transmit>
 800d408:	4603      	mov	r3, r0
 800d40a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 f85e 	bl	800d4d0 <USBD_Get_USB_Status>
 800d414:	4603      	mov	r3, r0
 800d416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d418:	7dbb      	ldrb	r3, [r7, #22]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3718      	adds	r7, #24
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b086      	sub	sp, #24
 800d426:	af00      	add	r7, sp, #0
 800d428:	60f8      	str	r0, [r7, #12]
 800d42a:	607a      	str	r2, [r7, #4]
 800d42c:	461a      	mov	r2, r3
 800d42e:	460b      	mov	r3, r1
 800d430:	72fb      	strb	r3, [r7, #11]
 800d432:	4613      	mov	r3, r2
 800d434:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d444:	893b      	ldrh	r3, [r7, #8]
 800d446:	7af9      	ldrb	r1, [r7, #11]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	f7f4 feb2 	bl	80021b2 <HAL_PCD_EP_Receive>
 800d44e:	4603      	mov	r3, r0
 800d450:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f83b 	bl	800d4d0 <USBD_Get_USB_Status>
 800d45a:	4603      	mov	r3, r0
 800d45c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d45e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d47a:	78fa      	ldrb	r2, [r7, #3]
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f4 fed4 	bl	800222c <HAL_PCD_EP_GetRxCount>
 800d484:	4603      	mov	r3, r0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
	...

0800d490 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d498:	4b02      	ldr	r3, [pc, #8]	; (800d4a4 <USBD_static_malloc+0x14>)
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	370c      	adds	r7, #12
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bc80      	pop	{r7}
 800d4a2:	4770      	bx	lr
 800d4a4:	20001c70 	.word	0x20001c70

0800d4a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]

}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bc80      	pop	{r7}
 800d4b8:	4770      	bx	lr

0800d4ba <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bc80      	pop	{r7}
 800d4ce:	4770      	bx	lr

0800d4d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b085      	sub	sp, #20
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	2b03      	cmp	r3, #3
 800d4e2:	d817      	bhi.n	800d514 <USBD_Get_USB_Status+0x44>
 800d4e4:	a201      	add	r2, pc, #4	; (adr r2, 800d4ec <USBD_Get_USB_Status+0x1c>)
 800d4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ea:	bf00      	nop
 800d4ec:	0800d4fd 	.word	0x0800d4fd
 800d4f0:	0800d503 	.word	0x0800d503
 800d4f4:	0800d509 	.word	0x0800d509
 800d4f8:	0800d50f 	.word	0x0800d50f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d500:	e00b      	b.n	800d51a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d502:	2302      	movs	r3, #2
 800d504:	73fb      	strb	r3, [r7, #15]
    break;
 800d506:	e008      	b.n	800d51a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d508:	2301      	movs	r3, #1
 800d50a:	73fb      	strb	r3, [r7, #15]
    break;
 800d50c:	e005      	b.n	800d51a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d50e:	2302      	movs	r3, #2
 800d510:	73fb      	strb	r3, [r7, #15]
    break;
 800d512:	e002      	b.n	800d51a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d514:	2302      	movs	r3, #2
 800d516:	73fb      	strb	r3, [r7, #15]
    break;
 800d518:	bf00      	nop
  }
  return usb_status;
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	bc80      	pop	{r7}
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop

0800d528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d528:	480c      	ldr	r0, [pc, #48]	; (800d55c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d52a:	490d      	ldr	r1, [pc, #52]	; (800d560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d52c:	4a0d      	ldr	r2, [pc, #52]	; (800d564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d52e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d530:	e002      	b.n	800d538 <LoopCopyDataInit>

0800d532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d536:	3304      	adds	r3, #4

0800d538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d53a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d53c:	d3f9      	bcc.n	800d532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d53e:	4a0a      	ldr	r2, [pc, #40]	; (800d568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d540:	4c0a      	ldr	r4, [pc, #40]	; (800d56c <LoopFillZerobss+0x22>)
  movs r3, #0
 800d542:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d544:	e001      	b.n	800d54a <LoopFillZerobss>

0800d546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d548:	3204      	adds	r2, #4

0800d54a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d54a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d54c:	d3fb      	bcc.n	800d546 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d54e:	f7f3 fe4a 	bl	80011e6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d552:	f000 f80f 	bl	800d574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d556:	f7f3 fa7d 	bl	8000a54 <main>
  bx lr
 800d55a:	4770      	bx	lr
  ldr r0, =_sdata
 800d55c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d560:	20000388 	.word	0x20000388
  ldr r2, =_sidata
 800d564:	0800d7cc 	.word	0x0800d7cc
  ldr r2, =_sbss
 800d568:	20000388 	.word	0x20000388
  ldr r4, =_ebss
 800d56c:	20003a78 	.word	0x20003a78

0800d570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d570:	e7fe      	b.n	800d570 <ADC1_2_IRQHandler>
	...

0800d574 <__libc_init_array>:
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	2500      	movs	r5, #0
 800d578:	4e0c      	ldr	r6, [pc, #48]	; (800d5ac <__libc_init_array+0x38>)
 800d57a:	4c0d      	ldr	r4, [pc, #52]	; (800d5b0 <__libc_init_array+0x3c>)
 800d57c:	1ba4      	subs	r4, r4, r6
 800d57e:	10a4      	asrs	r4, r4, #2
 800d580:	42a5      	cmp	r5, r4
 800d582:	d109      	bne.n	800d598 <__libc_init_array+0x24>
 800d584:	f000 f82e 	bl	800d5e4 <_init>
 800d588:	2500      	movs	r5, #0
 800d58a:	4e0a      	ldr	r6, [pc, #40]	; (800d5b4 <__libc_init_array+0x40>)
 800d58c:	4c0a      	ldr	r4, [pc, #40]	; (800d5b8 <__libc_init_array+0x44>)
 800d58e:	1ba4      	subs	r4, r4, r6
 800d590:	10a4      	asrs	r4, r4, #2
 800d592:	42a5      	cmp	r5, r4
 800d594:	d105      	bne.n	800d5a2 <__libc_init_array+0x2e>
 800d596:	bd70      	pop	{r4, r5, r6, pc}
 800d598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d59c:	4798      	blx	r3
 800d59e:	3501      	adds	r5, #1
 800d5a0:	e7ee      	b.n	800d580 <__libc_init_array+0xc>
 800d5a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d5a6:	4798      	blx	r3
 800d5a8:	3501      	adds	r5, #1
 800d5aa:	e7f2      	b.n	800d592 <__libc_init_array+0x1e>
 800d5ac:	0800d7c4 	.word	0x0800d7c4
 800d5b0:	0800d7c4 	.word	0x0800d7c4
 800d5b4:	0800d7c4 	.word	0x0800d7c4
 800d5b8:	0800d7c8 	.word	0x0800d7c8

0800d5bc <memcpy>:
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	1e43      	subs	r3, r0, #1
 800d5c0:	440a      	add	r2, r1
 800d5c2:	4291      	cmp	r1, r2
 800d5c4:	d100      	bne.n	800d5c8 <memcpy+0xc>
 800d5c6:	bd10      	pop	{r4, pc}
 800d5c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5d0:	e7f7      	b.n	800d5c2 <memcpy+0x6>

0800d5d2 <memset>:
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	4402      	add	r2, r0
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d100      	bne.n	800d5dc <memset+0xa>
 800d5da:	4770      	bx	lr
 800d5dc:	f803 1b01 	strb.w	r1, [r3], #1
 800d5e0:	e7f9      	b.n	800d5d6 <memset+0x4>
	...

0800d5e4 <_init>:
 800d5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5e6:	bf00      	nop
 800d5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ea:	bc08      	pop	{r3}
 800d5ec:	469e      	mov	lr, r3
 800d5ee:	4770      	bx	lr

0800d5f0 <_fini>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	bf00      	nop
 800d5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5f6:	bc08      	pop	{r3}
 800d5f8:	469e      	mov	lr, r3
 800d5fa:	4770      	bx	lr
