
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d26c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d540  0800d540  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d544  0800d544  0001d544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000027c  20000000  0800d548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000036d0  20000280  0800d7c4  00020280  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20003950  0800d7c4  00023950  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a332  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000619d  00000000  00000000  0004a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b40  00000000  00000000  00050778  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001838  00000000  00000000  000522b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f838  00000000  00000000  00053af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000848f  00000000  00000000  00063328  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006b7b7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006bf4  00000000  00000000  0006b834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000280 	.word	0x20000280
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d364 	.word	0x0800d364

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000284 	.word	0x20000284
 800014c:	0800d364 	.word	0x0800d364

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f001 f833 	bl	80011c6 <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 fbcf 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001b84 	.word	0x20001b84
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	200002a0 	.word	0x200002a0
 80001e0:	200002f4 	.word	0x200002f4

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	200004f4 	.word	0x200004f4
 8000214:	20000548 	.word	0x20000548

08000218 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0b4      	sub	sp, #208	; 0xd0
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800022e:	4618      	mov	r0, r3
 8000230:	f009 fa8a 	bl	8009748 <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b58      	ldr	r3, [pc, #352]	; (8000398 <MX_FREERTOS_Init+0x180>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b58      	ldr	r3, [pc, #352]	; (800039c <MX_FREERTOS_Init+0x184>)
 800023c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f009 fa00 	bl	8009654 <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b52      	ldr	r3, [pc, #328]	; (80003a0 <MX_FREERTOS_Init+0x188>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b52      	ldr	r3, [pc, #328]	; (80003a4 <MX_FREERTOS_Init+0x18c>)
 800025c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f009 f9f0 	bl	8009654 <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b4c      	ldr	r3, [pc, #304]	; (80003a8 <MX_FREERTOS_Init+0x190>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

	/*buttons off oneshot time def.*/
	osTimerDef(buttons_off_tmr, Buttons_Off_Callback);
 800027a:	4b4c      	ldr	r3, [pc, #304]	; (80003ac <MX_FREERTOS_Init+0x194>)
 800027c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	Buttons_Off_tmrHandle = osTimerCreate(osTimer(buttons_off_tmr), osTimerOnce,
 8000286:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800028a:	2200      	movs	r2, #0
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f009 f9e0 	bl	8009654 <osTimerCreate>
 8000294:	4602      	mov	r2, r0
 8000296:	4b46      	ldr	r3, [pc, #280]	; (80003b0 <MX_FREERTOS_Init+0x198>)
 8000298:	601a      	str	r2, [r3, #0]
			NULL);

	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 800029a:	4b46      	ldr	r3, [pc, #280]	; (80003b4 <MX_FREERTOS_Init+0x19c>)
 800029c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 80002a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f009 fae7 	bl	8009880 <osMessageCreate>
 80002b2:	4602      	mov	r2, r0
 80002b4:	4b40      	ldr	r3, [pc, #256]	; (80003b8 <MX_FREERTOS_Init+0x1a0>)
 80002b6:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 80002b8:	4b3e      	ldr	r3, [pc, #248]	; (80003b4 <MX_FREERTOS_Init+0x19c>)
 80002ba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80002be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 80002c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f009 fad8 	bl	8009880 <osMessageCreate>
 80002d0:	4602      	mov	r2, r0
 80002d2:	4b3a      	ldr	r3, [pc, #232]	; (80003bc <MX_FREERTOS_Init+0x1a4>)
 80002d4:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002d6:	4b3a      	ldr	r3, [pc, #232]	; (80003c0 <MX_FREERTOS_Init+0x1a8>)
 80002d8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80002dc:	461d      	mov	r5, r3
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f009 f94f 	bl	8009594 <osThreadCreate>
 80002f6:	4602      	mov	r2, r0
 80002f8:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <MX_FREERTOS_Init+0x1ac>)
 80002fa:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 80002fc:	4b32      	ldr	r3, [pc, #200]	; (80003c8 <MX_FREERTOS_Init+0x1b0>)
 80002fe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000302:	461d      	mov	r5, r3
 8000304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 8000310:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f009 f93c 	bl	8009594 <osThreadCreate>
 800031c:	4602      	mov	r2, r0
 800031e:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <MX_FREERTOS_Init+0x1b4>)
 8000320:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000322:	4b2b      	ldr	r3, [pc, #172]	; (80003d0 <MX_FREERTOS_Init+0x1b8>)
 8000324:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000328:	461d      	mov	r5, r3
 800032a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800032e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 8000336:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f009 f929 	bl	8009594 <osThreadCreate>
 8000342:	4602      	mov	r2, r0
 8000344:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <MX_FREERTOS_Init+0x1bc>)
 8000346:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_FREERTOS_Init+0x1c0>)
 800034a:	f107 0420 	add.w	r4, r7, #32
 800034e:	461d      	mov	r5, r3
 8000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 800035c:	f107 0320 	add.w	r3, r7, #32
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f009 f916 	bl	8009594 <osThreadCreate>
 8000368:	4602      	mov	r2, r0
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_FREERTOS_Init+0x1c4>)
 800036c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <MX_FREERTOS_Init+0x1c8>)
 8000370:	1d3c      	adds	r4, r7, #4
 8000372:	461d      	mov	r5, r3
 8000374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800037c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f009 f905 	bl	8009594 <osThreadCreate>
 800038a:	4602      	mov	r2, r0
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_FREERTOS_Init+0x1cc>)
 800038e:	601a      	str	r2, [r3, #0]

	/* USER CODE END RTOS_THREADS */

}
 8000390:	bf00      	nop
 8000392:	37d0      	adds	r7, #208	; 0xd0
 8000394:	46bd      	mov	sp, r7
 8000396:	bdb0      	pop	{r4, r5, r7, pc}
 8000398:	20001ba4 	.word	0x20001ba4
 800039c:	08000511 	.word	0x08000511
 80003a0:	20001b9c 	.word	0x20001b9c
 80003a4:	08000559 	.word	0x08000559
 80003a8:	20001b90 	.word	0x20001b90
 80003ac:	080005a1 	.word	0x080005a1
 80003b0:	20001ba8 	.word	0x20001ba8
 80003b4:	0800d37c 	.word	0x0800d37c
 80003b8:	20001c1c 	.word	0x20001c1c
 80003bc:	20001b94 	.word	0x20001b94
 80003c0:	0800d398 	.word	0x0800d398
 80003c4:	20001b8c 	.word	0x20001b8c
 80003c8:	0800d3c0 	.word	0x0800d3c0
 80003cc:	20001bb0 	.word	0x20001bb0
 80003d0:	0800d3e8 	.word	0x0800d3e8
 80003d4:	20001bac 	.word	0x20001bac
 80003d8:	0800d410 	.word	0x0800d410
 80003dc:	20001b98 	.word	0x20001b98
 80003e0:	0800d43c 	.word	0x0800d43c
 80003e4:	20001ba0 	.word	0x20001ba0

080003e8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80003f0:	f00c fb10 	bl	800ca14 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1; //HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80003f4:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <StartDefaultTask+0xc0>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 80003fa:	f00c fb0b 	bl	800ca14 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 8000402:	2301      	movs	r3, #1
 8000404:	73bb      	strb	r3, [r7, #14]

	init_hid();
 8000406:	f000 f9ab 	bl	8000760 <init_hid>

	for (;;) {
		if (tst1) {
 800040a:	7bbb      	ldrb	r3, [r7, #14]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d02a      	beq.n	8000466 <StartDefaultTask+0x7e>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 8000410:	2300      	movs	r3, #0
 8000412:	737b      	strb	r3, [r7, #13]
 8000414:	e022      	b.n	800045c <StartDefaultTask+0x74>
				keys[i].type = KEYBOARD_TYPE;
 8000416:	7b7b      	ldrb	r3, [r7, #13]
 8000418:	4a24      	ldr	r2, [pc, #144]	; (80004ac <StartDefaultTask+0xc4>)
 800041a:	210f      	movs	r1, #15
 800041c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
				keys[i].name = 'a' + i;
 8000420:	7b7b      	ldrb	r3, [r7, #13]
 8000422:	7b7a      	ldrb	r2, [r7, #13]
 8000424:	3261      	adds	r2, #97	; 0x61
 8000426:	b2d1      	uxtb	r1, r2
 8000428:	4a20      	ldr	r2, [pc, #128]	; (80004ac <StartDefaultTask+0xc4>)
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	4413      	add	r3, r2
 800042e:	460a      	mov	r2, r1
 8000430:	705a      	strb	r2, [r3, #1]

				for (uint8_t j = 0; j < STATES_LEN; j++)
 8000432:	2300      	movs	r3, #0
 8000434:	733b      	strb	r3, [r7, #12]
 8000436:	e00b      	b.n	8000450 <StartDefaultTask+0x68>
					keys[i].states[j] = (i & 1) ? (0xFF) : (0xFF);
 8000438:	7b7a      	ldrb	r2, [r7, #13]
 800043a:	7b3b      	ldrb	r3, [r7, #12]
 800043c:	491b      	ldr	r1, [pc, #108]	; (80004ac <StartDefaultTask+0xc4>)
 800043e:	0092      	lsls	r2, r2, #2
 8000440:	440a      	add	r2, r1
 8000442:	4413      	add	r3, r2
 8000444:	3302      	adds	r3, #2
 8000446:	22ff      	movs	r2, #255	; 0xff
 8000448:	701a      	strb	r2, [r3, #0]
				for (uint8_t j = 0; j < STATES_LEN; j++)
 800044a:	7b3b      	ldrb	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	733b      	strb	r3, [r7, #12]
 8000450:	7b3b      	ldrb	r3, [r7, #12]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d9f0      	bls.n	8000438 <StartDefaultTask+0x50>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 8000456:	7b7b      	ldrb	r3, [r7, #13]
 8000458:	3301      	adds	r3, #1
 800045a:	737b      	strb	r3, [r7, #13]
 800045c:	7b7b      	ldrb	r3, [r7, #13]
 800045e:	2b19      	cmp	r3, #25
 8000460:	d9d9      	bls.n	8000416 <StartDefaultTask+0x2e>

			}

			tst1 = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	73bb      	strb	r3, [r7, #14]
		}

		if (tst) {
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d015      	beq.n	8000498 <StartDefaultTask+0xb0>
			for (uint32_t i = 0; i < 255; i++) {
 800046c:	2300      	movs	r3, #0
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	e00d      	b.n	800048e <StartDefaultTask+0xa6>
				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000478:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800047c:	7819      	ldrb	r1, [r3, #0]
 800047e:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <StartDefaultTask+0xc8>)
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	4413      	add	r3, r2
 8000484:	460a      	mov	r2, r1
 8000486:	701a      	strb	r2, [r3, #0]
			for (uint32_t i = 0; i < 255; i++) {
 8000488:	68bb      	ldr	r3, [r7, #8]
 800048a:	3301      	adds	r3, #1
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	2bfe      	cmp	r3, #254	; 0xfe
 8000492:	d9ee      	bls.n	8000472 <StartDefaultTask+0x8a>

			}
			tst = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f009 f8c7 	bl	800962c <osDelay>
		vTaskSuspend(NULL);
 800049e:	2000      	movs	r0, #0
 80004a0:	f00b f82e 	bl	800b500 <vTaskSuspend>
		if (tst1) {
 80004a4:	e7b1      	b.n	800040a <StartDefaultTask+0x22>
 80004a6:	bf00      	nop
 80004a8:	2000029c 	.word	0x2000029c
 80004ac:	20001bb4 	.word	0x20001bb4
 80004b0:	20001cd4 	.word	0x20001cd4

080004b4 <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f009 f8b5 	bl	800962c <osDelay>
		if (hid_usb_init == 1)
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <Start_Ram_MSD_Task+0x50>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d102      	bne.n	80004d2 <Start_Ram_MSD_Task+0x1e>
			vTaskSuspend(NULL); //if we are his we dont need it.
 80004cc:	2000      	movs	r0, #0
 80004ce:	f00b f817 	bl	800b500 <vTaskSuspend>

		if (st_info.eof_flg == 1) {
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <Start_Ram_MSD_Task+0x54>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d1ef      	bne.n	80004bc <Start_Ram_MSD_Task+0x8>
			st_info.eof_flg = 0;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <Start_Ram_MSD_Task+0x54>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
			osMutexWait(Ram_MSD_MutexHandle, osWaitForever);
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <Start_Ram_MSD_Task+0x58>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f04f 31ff 	mov.w	r1, #4294967295
 80004ea:	4618      	mov	r0, r3
 80004ec:	f009 f944 	bl	8009778 <osMutexWait>
			ve_operate(&st_info);
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <Start_Ram_MSD_Task+0x54>)
 80004f2:	f000 fd43 	bl	8000f7c <ve_operate>
			osMutexRelease(Ram_MSD_MutexHandle);
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <Start_Ram_MSD_Task+0x58>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f009 f98a 	bl	8009814 <osMutexRelease>
		osDelay(1);
 8000500:	e7dc      	b.n	80004bc <Start_Ram_MSD_Task+0x8>
 8000502:	bf00      	nop
 8000504:	2000029c 	.word	0x2000029c
 8000508:	20000948 	.word	0x20000948
 800050c:	20001ba4 	.word	0x20001ba4

08000510 <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <delay_click_event_tmr_Callback+0x3c>)
 800051a:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 800051c:	2300      	movs	r3, #0
 800051e:	81fb      	strh	r3, [r7, #14]
 8000520:	e007      	b.n	8000532 <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 8000522:	89fb      	ldrh	r3, [r7, #14]
 8000524:	68ba      	ldr	r2, [r7, #8]
 8000526:	4413      	add	r3, r2
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 800052c:	89fb      	ldrh	r3, [r7, #14]
 800052e:	3301      	adds	r3, #1
 8000530:	81fb      	strh	r3, [r7, #14]
 8000532:	89fb      	ldrh	r3, [r7, #14]
 8000534:	2b19      	cmp	r3, #25
 8000536:	d9f4      	bls.n	8000522 <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 8000538:	221c      	movs	r2, #28
 800053a:	4905      	ldr	r1, [pc, #20]	; (8000550 <delay_click_event_tmr_Callback+0x40>)
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <delay_click_event_tmr_Callback+0x44>)
 800053e:	f007 fe4b 	bl	80081d8 <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20001c22 	.word	0x20001c22
 8000550:	20001c20 	.word	0x20001c20
 8000554:	200031a0 	.word	0x200031a0

08000558 <periodic_click_event_Callback>:

/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
//	}else{
//		i = 1;
//		hid_state.mouseHID.x=-100;
//	}
///////////////////////////////////////////////////////////////////////////////////////
	hid_state.curr_hid_type = KEYBOARD_TYPE;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <periodic_click_event_Callback+0x3c>)
 8000562:	220f      	movs	r2, #15
 8000564:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hid_state.keyboardHID.k_a = USB_HID_KEY_A;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <periodic_click_event_Callback+0x3c>)
 800056a:	2204      	movs	r2, #4
 800056c:	709a      	strb	r2, [r3, #2]
	hid_state.keyboardHID.k_b = USB_HID_KEY_B;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <periodic_click_event_Callback+0x3c>)
 8000570:	2205      	movs	r2, #5
 8000572:	70da      	strb	r2, [r3, #3]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000574:	221c      	movs	r2, #28
 8000576:	4907      	ldr	r1, [pc, #28]	; (8000594 <periodic_click_event_Callback+0x3c>)
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <periodic_click_event_Callback+0x40>)
 800057a:	f007 fe2d 	bl	80081d8 <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));

	osTimerStart(Buttons_Off_tmrHandle, 100);
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <periodic_click_event_Callback+0x44>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2164      	movs	r1, #100	; 0x64
 8000584:	4618      	mov	r0, r3
 8000586:	f009 f899 	bl	80096bc <osTimerStart>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20001c20 	.word	0x20001c20
 8000598:	200031a0 	.word	0x200031a0
 800059c:	20001ba8 	.word	0x20001ba8

080005a0 <Buttons_Off_Callback>:

/**
 * Callback to switch buttons off.
 * @param argument
 */
void Buttons_Off_Callback(void const * argument) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	hid_state.curr_hid_type = KEYBOARD_TYPE;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <Buttons_Off_Callback+0x30>)
 80005aa:	220f      	movs	r2, #15
 80005ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	hid_state.keyboardHID.k_a = 0;
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <Buttons_Off_Callback+0x30>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	709a      	strb	r2, [r3, #2]
	hid_state.keyboardHID.k_b = 0;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <Buttons_Off_Callback+0x30>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	70da      	strb	r2, [r3, #3]
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 80005bc:	221c      	movs	r2, #28
 80005be:	4904      	ldr	r1, [pc, #16]	; (80005d0 <Buttons_Off_Callback+0x30>)
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <Buttons_Off_Callback+0x34>)
 80005c2:	f007 fe09 	bl	80081d8 <USBD_CUSTOM_HID_SendReport>
			(uint8_t *) &hid_state.keyboardHID, sizeof(keyboardHID_t));
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20001c20 	.word	0x20001c20
 80005d4:	200031a0 	.word	0x200031a0

080005d8 <Start_Hid_Task>:

/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <Start_Hid_Task+0x34>)
 80005e2:	60fb      	str	r3, [r7, #12]
	static uint8_t bit_select = 0x01;
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f009 f821 	bl	800962c <osDelay>

		if (hid_usb_init == 1) {
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <Start_Hid_Task+0x38>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1f7      	bne.n	80005e4 <Start_Hid_Task+0xc>
			//osTimerStart(periodic_click_event_tmrHandle, 100000);
			osTimerStart(periodic_click_event_tmrHandle, 1000); //test1
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <Start_Hid_Task+0x3c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005fc:	4618      	mov	r0, r3
 80005fe:	f009 f85d 	bl	80096bc <osTimerStart>
			vTaskSuspend(NULL);
 8000602:	2000      	movs	r0, #0
 8000604:	f00a ff7c 	bl	800b500 <vTaskSuspend>
		osDelay(100);
 8000608:	e7ec      	b.n	80005e4 <Start_Hid_Task+0xc>
 800060a:	bf00      	nop
 800060c:	20001c22 	.word	0x20001c22
 8000610:	2000029c 	.word	0x2000029c
 8000614:	20001b90 	.word	0x20001b90

08000618 <Start_Usb_Task>:
	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f009 f803 	bl	800962c <osDelay>
		vTaskSuspend(NULL);
 8000626:	2000      	movs	r0, #0
 8000628:	f00a ff6a 	bl	800b500 <vTaskSuspend>
		osDelay(1);
 800062c:	e7f8      	b.n	8000620 <Start_Usb_Task+0x8>
	...

08000630 <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 8000638:	2000      	movs	r0, #0
 800063a:	f00a ff61 	bl	800b500 <vTaskSuspend>
	osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800063e:	2001      	movs	r0, #1
 8000640:	f008 fff4 	bl	800962c <osDelay>
		event = osMessageGet(Hid_QueueHandle, osWaitForever);
 8000644:	4b41      	ldr	r3, [pc, #260]	; (800074c <Start_Mouse_Task+0x11c>)
 8000646:	6819      	ldr	r1, [r3, #0]
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	f04f 32ff 	mov.w	r2, #4294967295
 8000650:	4618      	mov	r0, r3
 8000652:	f009 f93f 	bl	80098d4 <osMessageGet>
		if (event.status == osEventMessage)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	2b10      	cmp	r3, #16
 800065a:	d159      	bne.n	8000710 <Start_Mouse_Task+0xe0>
			switch (event.value.v) {
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	2b0f      	cmp	r3, #15
 8000660:	d856      	bhi.n	8000710 <Start_Mouse_Task+0xe0>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <Start_Mouse_Task+0x38>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	080006a9 	.word	0x080006a9
 800066c:	080006b9 	.word	0x080006b9
 8000670:	080006c9 	.word	0x080006c9
 8000674:	08000711 	.word	0x08000711
 8000678:	080006d9 	.word	0x080006d9
 800067c:	08000711 	.word	0x08000711
 8000680:	08000711 	.word	0x08000711
 8000684:	08000711 	.word	0x08000711
 8000688:	08000711 	.word	0x08000711
 800068c:	08000711 	.word	0x08000711
 8000690:	08000711 	.word	0x08000711
 8000694:	080006e9 	.word	0x080006e9
 8000698:	080006f3 	.word	0x080006f3
 800069c:	080006fd 	.word	0x080006fd
 80006a0:	08000711 	.word	0x08000711
 80006a4:	08000707 	.word	0x08000707
			case M_BUTTON_NOP: {
				hid_state.mouseHID.buttons = M_BUTTON_NOP;
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <Start_Mouse_Task+0x120>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006ae:	4b28      	ldr	r3, [pc, #160]	; (8000750 <Start_Mouse_Task+0x120>)
 80006b0:	220e      	movs	r2, #14
 80006b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006b6:	e02b      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case M_BUTTON_1: {
				hid_state.mouseHID.buttons = M_BUTTON_1;
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <Start_Mouse_Task+0x120>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <Start_Mouse_Task+0x120>)
 80006c0:	220e      	movs	r2, #14
 80006c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006c6:	e023      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case M_BUTTON_2: {
				hid_state.mouseHID.buttons = M_BUTTON_2;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <Start_Mouse_Task+0x120>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <Start_Mouse_Task+0x120>)
 80006d0:	220e      	movs	r2, #14
 80006d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006d6:	e01b      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case M_BUTTON_3: {
				hid_state.mouseHID.buttons = M_BUTTON_3;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <Start_Mouse_Task+0x120>)
 80006da:	2204      	movs	r2, #4
 80006dc:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <Start_Mouse_Task+0x120>)
 80006e0:	220e      	movs	r2, #14
 80006e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006e6:	e013      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case WHEEL: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <Start_Mouse_Task+0x120>)
 80006ea:	220e      	movs	r2, #14
 80006ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006f0:	e00e      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case M_X: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <Start_Mouse_Task+0x120>)
 80006f4:	220e      	movs	r2, #14
 80006f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006fa:	e009      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case M_Y: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <Start_Mouse_Task+0x120>)
 80006fe:	220e      	movs	r2, #14
 8000700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000704:	e004      	b.n	8000710 <Start_Mouse_Task+0xe0>
			}
			case KEYBOARD_TYPE: {
				hid_state.curr_hid_type = KEYBOARD_TYPE;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <Start_Mouse_Task+0x120>)
 8000708:	220f      	movs	r2, #15
 800070a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800070e:	bf00      	nop
			}
			}

		if (hid_state.curr_hid_type == MOUSE_TYPE)
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <Start_Mouse_Task+0x120>)
 8000712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000716:	2b0e      	cmp	r3, #14
 8000718:	d105      	bne.n	8000726 <Start_Mouse_Task+0xf6>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 800071a:	2205      	movs	r2, #5
 800071c:	490d      	ldr	r1, [pc, #52]	; (8000754 <Start_Mouse_Task+0x124>)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <Start_Mouse_Task+0x128>)
 8000720:	f007 fd5a 	bl	80081d8 <USBD_CUSTOM_HID_SendReport>
 8000724:	e78b      	b.n	800063e <Start_Mouse_Task+0xe>
					(uint8_t *) &hid_state.mouseHID, sizeof(mouseHID_t));
		else if (hid_state.curr_hid_type == KEYBOARD_TYPE) {
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <Start_Mouse_Task+0x120>)
 8000728:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d186      	bne.n	800063e <Start_Mouse_Task+0xe>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 8000730:	221c      	movs	r2, #28
 8000732:	4907      	ldr	r1, [pc, #28]	; (8000750 <Start_Mouse_Task+0x120>)
 8000734:	4808      	ldr	r0, [pc, #32]	; (8000758 <Start_Mouse_Task+0x128>)
 8000736:	f007 fd4f 	bl	80081d8 <USBD_CUSTOM_HID_SendReport>
					sizeof(keyboardHID_t));
			osTimerStart(delay_click_event_tmrHandle, 500);
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <Start_Mouse_Task+0x12c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000742:	4618      	mov	r0, r3
 8000744:	f008 ffba 	bl	80096bc <osTimerStart>
		osDelay(1);
 8000748:	e779      	b.n	800063e <Start_Mouse_Task+0xe>
 800074a:	bf00      	nop
 800074c:	20001b94 	.word	0x20001b94
 8000750:	20001c20 	.word	0x20001c20
 8000754:	20001c3c 	.word	0x20001c3c
 8000758:	200031a0 	.word	0x200031a0
 800075c:	20001b9c 	.word	0x20001b9c

08000760 <init_hid>:
	(hid_state.mouseHID.buttons) ?
			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);

}

uint8_t init_hid(void) {
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <init_hid+0x20>)
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <init_hid+0x20>)
 800076c:	2200      	movs	r2, #0
 800076e:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 8000770:	4b03      	ldr	r3, [pc, #12]	; (8000780 <init_hid+0x20>)
 8000772:	2202      	movs	r2, #2
 8000774:	771a      	strb	r2, [r3, #28]
}
 8000776:	bf00      	nop
 8000778:	4618      	mov	r0, r3
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20001c20 	.word	0x20001c20

08000784 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <MX_GPIO_Init+0x7c>)
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_GPIO_Init+0x7c>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f043 0320 	orr.w	r3, r3, #32
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0320 	and.w	r3, r3, #32
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4a13      	ldr	r2, [pc, #76]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_GPIO_Init+0x7c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007e0:	2302      	movs	r3, #2
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0x80>)
 80007f4:	f000 ff04 	bl	8001600 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	40010c00 	.word	0x40010c00

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fbcc 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f80d 	bl	800082e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f7ff ffb6 	bl	8000784 <MX_GPIO_Init>
  MX_CRC_Init();
 8000818:	f7ff fc9a 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 800081c:	f000 f932 	bl	8000a84 <MX_TIM1_Init>
  MX_FATFS_Init();
 8000820:	f006 f8de 	bl	80069e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000824:	f7ff fcf8 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000828:	f008 fead 	bl	8009586 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	e7fe      	b.n	800082c <main+0x24>

0800082e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b094      	sub	sp, #80	; 0x50
 8000832:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000838:	2228      	movs	r2, #40	; 0x28
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f00c fd88 	bl	800d352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085e:	2301      	movs	r3, #1
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800086c:	2301      	movs	r3, #1
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800087a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fd25 	bl	80032d4 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000890:	f000 f83a 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2101      	movs	r1, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 ff8f 	bl	80037d4 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008bc:	f000 f824 	bl	8000908 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008c0:	2310      	movs	r3, #16
 80008c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80008c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f939 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008d8:	f000 f816 	bl	8000908 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f6:	f000 fb6d 	bl	8000fd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40000800 	.word	0x40000800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090e:	e7fe      	b.n	800090e <Error_Handler+0x6>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000916:	4a18      	ldr	r2, [pc, #96]	; (8000978 <HAL_MspInit+0x68>)
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_MspInit+0x68>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6193      	str	r3, [r2, #24]
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_MspInit+0x68>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <HAL_MspInit+0x68>)
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_MspInit+0x68>)
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	61d3      	str	r3, [r2, #28]
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x68>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fc10 	bl	8001172 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <HAL_MspInit+0x6c>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_MspInit+0x6c>)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40021000 	.word	0x40021000
 800097c:	40010000 	.word	0x40010000

08000980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	201e      	movs	r0, #30
 8000996:	f000 fbec 	bl	8001172 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800099a:	201e      	movs	r0, #30
 800099c:	f000 fc05 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009a0:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_InitTick+0xa0>)
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <HAL_InitTick+0xa0>)
 80009a4:	69db      	ldr	r3, [r3, #28]
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	61d3      	str	r3, [r2, #28]
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_InitTick+0xa0>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f003 0304 	and.w	r3, r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 f870 	bl	8003aa8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009c8:	f003 f85a 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80009cc:	4603      	mov	r3, r0
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_InitTick+0xa4>)
 80009d6:	fba2 2303 	umull	r2, r3, r2, r3
 80009da:	0c9b      	lsrs	r3, r3, #18
 80009dc:	3b01      	subs	r3, #1
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_InitTick+0xa8>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_InitTick+0xac>)
 80009e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_InitTick+0xa8>)
 80009e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009ec:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_InitTick+0xa8>)
 80009f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_InitTick+0xa8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_InitTick+0xa8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <HAL_InitTick+0xa8>)
 8000a02:	f003 f955 	bl	8003cb0 <HAL_TIM_Base_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d104      	bne.n	8000a16 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000a0c:	4806      	ldr	r0, [pc, #24]	; (8000a28 <HAL_InitTick+0xa8>)
 8000a0e:	f003 f99f 	bl	8003d50 <HAL_TIM_Base_Start_IT>
 8000a12:	4603      	mov	r3, r0
 8000a14:	e000      	b.n	8000a18 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	20001c44 	.word	0x20001c44
 8000a2c:	40000800 	.word	0x40000800

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a62:	f001 f858 	bl	8001b16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20003664 	.word	0x20003664

08000a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM4_IRQHandler+0x10>)
 8000a76:	f003 f9bd 	bl	8003df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20001c44 	.word	0x20001c44

08000a84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <MX_TIM1_Init+0x9c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000acc:	4813      	ldr	r0, [pc, #76]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000ace:	f003 f8ef 	bl	8003cb0 <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ad8:	f7ff ff16 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480c      	ldr	r0, [pc, #48]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000aea:	f003 fa8b 	bl	8004004 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000af4:	f7ff ff08 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_TIM1_Init+0x98>)
 8000b06:	f003 fc51 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b10:	f7ff fefa 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20001c8c 	.word	0x20001c8c
 8000b20:	40012c00 	.word	0x40012c00

08000b24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <HAL_TIM_Base_MspInit+0x34>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d10b      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <HAL_TIM_Base_MspInit+0x38>)
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_TIM_Base_MspInit+0x38>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b40:	6193      	str	r3, [r2, #24]
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_TIM_Base_MspInit+0x38>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000b6a:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b085      	sub	sp, #20
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2208      	movs	r2, #8
 8000b88:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b90:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000b92:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000ba8:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000bbe:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
	...

08000bcc <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	025b      	lsls	r3, r3, #9
 8000be4:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000bea:	89bb      	ldrh	r3, [r7, #12]
 8000bec:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	e00f      	b.n	8000c14 <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000bf4:	69fa      	ldr	r2, [r7, #28]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <STORAGE_Read_FS+0x60>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	4413      	add	r3, r2
 8000c08:	7dfa      	ldrb	r2, [r7, #23]
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	89bb      	ldrh	r3, [r7, #12]
 8000c16:	025b      	lsls	r3, r3, #9
 8000c18:	461a      	mov	r2, r3
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8e9      	bhi.n	8000bf4 <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000c20:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	; 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20001cd4 	.word	0x20001cd4

08000c30 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	4613      	mov	r3, r2
 8000c42:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	025b      	lsls	r3, r3, #9
 8000c48:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
 8000c52:	e00e      	b.n	8000c72 <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	4413      	add	r3, r2
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	4413      	add	r3, r2
 8000c64:	7dfa      	ldrb	r2, [r7, #23]
 8000c66:	b2d1      	uxtb	r1, r2
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <STORAGE_Write_FS+0x64>)
 8000c6a:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	89bb      	ldrh	r3, [r7, #12]
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	461a      	mov	r2, r3
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d8ea      	bhi.n	8000c54 <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f814 	bl	8000cac <eof_check>
	st_info.blk_len = blk_len;
 8000c84:	89bb      	ldrh	r3, [r7, #12]
 8000c86:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <STORAGE_Write_FS+0x68>)
 8000c88:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000c8a:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20001cd4 	.word	0x20001cd4
 8000c98:	20000948 	.word	0x20000948

08000c9c <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000ca0:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
	...

08000cac <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000cb4:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <eof_check+0x84>)
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	6812      	ldr	r2, [r2, #0]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	0c12      	lsrs	r2, r2, #16
 8000cc4:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	e022      	b.n	8000d14 <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	e017      	b.n	8000d04 <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000cd4:	697a      	ldr	r2, [r7, #20]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <eof_check+0x88>)
 8000cdc:	5cd3      	ldrb	r3, [r2, r3]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	f107 010c 	add.w	r1, r7, #12
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	440b      	add	r3, r1
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d10e      	bne.n	8000d0c <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d803      	bhi.n	8000cfc <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e003      	b.n	8000d04 <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <eof_check+0x8c>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e011      	b.n	8000d28 <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d9e4      	bls.n	8000cd4 <eof_check+0x28>
 8000d0a:	e000      	b.n	8000d0e <eof_check+0x62>
				break;
 8000d0c:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	1c5a      	adds	r2, r3, #1
 8000d18:	4613      	mov	r3, r2
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	441a      	add	r2, r3
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8d2      	bhi.n	8000cce <eof_check+0x22>
			return;
		}	
	}
	
}
 8000d28:	371c      	adds	r7, #28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	0800d458 	.word	0x0800d458
 8000d34:	20001cd4 	.word	0x20001cd4
 8000d38:	20000948 	.word	0x20000948

08000d3c <ve_is_pg_erased>:
/*
*@param uint32_t p_addr the address of the page
*
*/
static uint8_t  ve_is_pg_erased(uint32_t p_addr)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	__IO uint8_t c =0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	72fb      	strb	r3, [r7, #11]
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	e00d      	b.n	8000d6a <ve_is_pg_erased+0x2e>
	{
		c = *((uint8_t *)(p_addr + i));
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	72fb      	strb	r3, [r7, #11]
		if( c != 0xFF )
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2bff      	cmp	r3, #255	; 0xff
 8000d5e:	d001      	beq.n	8000d64 <ve_is_pg_erased+0x28>
		{
			return 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e007      	b.n	8000d74 <ve_is_pg_erased+0x38>
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	3301      	adds	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d70:	d3ed      	bcc.n	8000d4e <ve_is_pg_erased+0x12>
		}
		
	}
	
	return 1;
 8000d72:	2301      	movs	r3, #1
	
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
	...

08000d80 <ve_pgs_prep>:
*
*@param st_info storage information
*
*/
static void ve_pgs_prep(s_usbd_st_info * p_st_info)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	__IO uint8_t pg_num = ( p_st_info->blk_len / 2) + (p_st_info->blk_len & 1);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	085b      	lsrs	r3, r3, #1
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73bb      	strb	r3, [r7, #14]
	
	
	HAL_FLASH_Unlock();
 8000da2:	f000 fa9d 	bl	80012e0 <HAL_FLASH_Unlock>
	
	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <ve_pgs_prep+0x8c>)
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <ve_pgs_prep+0x8c>)
 8000daa:	69db      	ldr	r3, [r3, #28]
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	61d3      	str	r3, [r2, #28]
	
	/* Get the bank */
	
	EraseInitStruct.NbPages = 1;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <ve_pgs_prep+0x90>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR;
	EraseInitStruct.Banks     = 3;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <ve_pgs_prep+0x90>)
 8000dba:	2203      	movs	r2, #3
 8000dbc:	605a      	str	r2, [r3, #4]
	
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e017      	b.n	8000df4 <ve_pgs_prep+0x74>
	{
		EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR + FLASH_PAGE_SIZE*pg_curr;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000dca:	3320      	adds	r3, #32
 8000dcc:	029b      	lsls	r3, r3, #10
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <ve_pgs_prep+0x90>)
 8000dd0:	6093      	str	r3, [r2, #8]
		 
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <ve_pgs_prep+0x90>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ffb0 	bl	8000d3c <ve_is_pg_erased>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d104      	bne.n	8000dec <ve_pgs_prep+0x6c>
			
		
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError_t) != HAL_OK)
 8000de2:	490c      	ldr	r1, [pc, #48]	; (8000e14 <ve_pgs_prep+0x94>)
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <ve_pgs_prep+0x90>)
 8000de6:	f000 fb63 	bl	80014b0 <HAL_FLASHEx_Erase>
 8000dea:	e000      	b.n	8000dee <ve_pgs_prep+0x6e>
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8000dec:	bf00      	nop
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	3301      	adds	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d3e2      	bcc.n	8000dc4 <ve_pgs_prep+0x44>
			//test1 Error_Handler();
		}
	
	}
	
	HAL_FLASH_Lock();
 8000dfe:	f000 fa95 	bl	800132c <HAL_FLASH_Lock>
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	20000954 	.word	0x20000954
 8000e14:	20000950 	.word	0x20000950

08000e18 <ve_prg_blks>:
*
*@param st_info storage information
*
*/
static void ve_prg_blks(s_usbd_st_info * p_st_info)
{
 8000e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e1c:	b08f      	sub	sp, #60	; 0x3c
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_FLASH_Unlock();
 8000e22:	f000 fa5d 	bl	80012e0 <HAL_FLASH_Unlock>
	
	
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
 8000e2a:	e094      	b.n	8000f56 <ve_prg_blks+0x13e>
//			dword_to_write  = (((uint64_t )ram_msd[j ] << 56 )|((uint64_t )ram_msd[j + 1] << 48 )|
//											  ((uint64_t )ram_msd[j + 2] << 40 )|((uint64_t )ram_msd[j + 3] << 32))|
//										  	(((uint64_t )ram_msd[j + 4] << 24 )|((uint64_t )ram_msd[j + 5] << 16)|
//											  ((uint64_t )ram_msd[j + 6] << 8  )|((uint64_t )ram_msd[j + 7]));
		
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000e2c:	4a51      	ldr	r2, [pc, #324]	; (8000f74 <ve_prg_blks+0x15c>)
 8000e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2d8      	uxtb	r0, r3
 8000e36:	f04f 0100 	mov.w	r1, #0
 8000e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <ve_prg_blks+0x15c>)
 8000e40:	5c9b      	ldrb	r3, [r3, r2]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f04f 0400 	mov.w	r4, #0
 8000e48:	0226      	lsls	r6, r4, #8
 8000e4a:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8000e4e:	021d      	lsls	r5, r3, #8
 8000e50:	ea40 0005 	orr.w	r0, r0, r5
 8000e54:	ea41 0106 	orr.w	r1, r1, r6
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e5a:	1c9a      	adds	r2, r3, #2
 8000e5c:	4b45      	ldr	r3, [pc, #276]	; (8000f74 <ve_prg_blks+0x15c>)
 8000e5e:	5c9b      	ldrb	r3, [r3, r2]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f04f 0400 	mov.w	r4, #0
 8000e66:	ea4f 4904 	mov.w	r9, r4, lsl #16
 8000e6a:	ea49 4913 	orr.w	r9, r9, r3, lsr #16
 8000e6e:	ea4f 4803 	mov.w	r8, r3, lsl #16
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000e72:	ea40 0008 	orr.w	r0, r0, r8
 8000e76:	ea41 0109 	orr.w	r1, r1, r9
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7c:	1cda      	adds	r2, r3, #3
 8000e7e:	4b3d      	ldr	r3, [pc, #244]	; (8000f74 <ve_prg_blks+0x15c>)
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f04f 0400 	mov.w	r4, #0
 8000e88:	0a1a      	lsrs	r2, r3, #8
 8000e8a:	627a      	str	r2, [r7, #36]	; 0x24
 8000e8c:	061b      	lsls	r3, r3, #24
 8000e8e:	623b      	str	r3, [r7, #32]
 8000e90:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8000e94:	ea4a 0a00 	orr.w	sl, sl, r0
 8000e98:	ea4b 0b01 	orr.w	fp, fp, r1
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9e:	1d1a      	adds	r2, r3, #4
 8000ea0:	4b34      	ldr	r3, [pc, #208]	; (8000f74 <ve_prg_blks+0x15c>)
 8000ea2:	5c9b      	ldrb	r3, [r3, r2]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f04f 0400 	mov.w	r4, #0
 8000eaa:	001b      	movs	r3, r3
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb4:	1d5a      	adds	r2, r3, #5
 8000eb6:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <ve_prg_blks+0x15c>)
 8000eb8:	5c9b      	ldrb	r3, [r3, r2]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f04f 0400 	mov.w	r4, #0
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ecc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000ed0:	ea40 0003 	orr.w	r0, r0, r3
 8000ed4:	ea41 0104 	orr.w	r1, r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8000ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eda:	1d9a      	adds	r2, r3, #6
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <ve_prg_blks+0x15c>)
 8000ede:	5c9b      	ldrb	r3, [r3, r2]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f04f 0400 	mov.w	r4, #0
 8000ee6:	041b      	lsls	r3, r3, #16
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 8000eee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000ef2:	ea43 0300 	orr.w	r3, r3, r0
 8000ef6:	ea44 0401 	orr.w	r4, r4, r1
 8000efa:	4618      	mov	r0, r3
 8000efc:	4621      	mov	r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8000efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f00:	1dda      	adds	r2, r3, #7
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <ve_prg_blks+0x15c>)
 8000f04:	5c9b      	ldrb	r3, [r3, r2]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f04f 0400 	mov.w	r4, #0
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000f18:	ea43 0300 	orr.w	r3, r3, r0
 8000f1c:	ea44 0401 	orr.w	r4, r4, r1
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000f20:	ea43 030a 	orr.w	r3, r3, sl
 8000f24:	ea44 040b 	orr.w	r4, r4, fp
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <ve_prg_blks+0x160>)
 8000f2a:	e882 0018 	stmia.w	r2, {r3, r4}
		
		if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, VIRT_EEPROM_ADDR+j,  dword_to_write) != HAL_OK)
 8000f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f30:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000f34:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <ve_prg_blks+0x160>)
 8000f3a:	cb18      	ldmia	r3, {r3, r4}
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4623      	mov	r3, r4
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f95d 	bl	8001200 <HAL_FLASH_Program>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <ve_prg_blks+0x138>
		{
			Error_Handler();
 8000f4c:	f7ff fcdc 	bl	8000908 <Error_Handler>
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8000f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f52:	3308      	adds	r3, #8
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
 8000f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	025a      	lsls	r2, r3, #9
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	f63f af64 	bhi.w	8000e2c <ve_prg_blks+0x14>
		}
	}
	
	HAL_FLASH_Lock();
 8000f64:	f000 f9e2 	bl	800132c <HAL_FLASH_Lock>
}
 8000f68:	bf00      	nop
 8000f6a:	373c      	adds	r7, #60	; 0x3c
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f72:	bf00      	nop
 8000f74:	20001cd4 	.word	0x20001cd4
 8000f78:	20000968 	.word	0x20000968

08000f7c <ve_operate>:



uint8_t ve_operate( s_usbd_st_info * p_st_info )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	ve_pgs_prep(p_st_info);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f7ff fefb 	bl	8000d80 <ve_pgs_prep>
	ve_prg_blks(p_st_info);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff44 	bl	8000e18 <ve_prg_blks>
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_Init+0x28>)
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x28>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f043 0310 	orr.w	r3, r3, #16
 8000fb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f8cf 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fcde 	bl	8000980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fca4 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a03      	ldr	r2, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	20000028 	.word	0x20000028
 8000ff4:	20002cd4 	.word	0x20002cd4

08000ff8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	20002cd4 	.word	0x20002cd4

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_EnableIRQ+0x34>)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	f002 021f 	and.w	r2, r2, #31
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	490d      	ldr	r1, [pc, #52]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	4909      	ldr	r1, [pc, #36]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	2201      	movs	r2, #1
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	401a      	ands	r2, r3
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001142:	2101      	movs	r1, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	1e59      	subs	r1, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff51 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff66 	bl	8001054 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ffb4 	bl	80010fc <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff83 	bl	80010a8 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff59 	bl	8001070 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d101      	bne.n	80011d8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e00e      	b.n	80011f6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	795b      	ldrb	r3, [r3, #5]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7fe ffc5 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_FLASH_Program+0xd8>)
 800121c:	7e1b      	ldrb	r3, [r3, #24]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <HAL_FLASH_Program+0x26>
 8001222:	2302      	movs	r3, #2
 8001224:	e054      	b.n	80012d0 <HAL_FLASH_Program+0xd0>
 8001226:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <HAL_FLASH_Program+0xd8>)
 8001228:	2201      	movs	r2, #1
 800122a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800122c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001230:	f000 f8a8 	bl	8001384 <FLASH_WaitForLastOperation>
 8001234:	4603      	mov	r3, r0
 8001236:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d144      	bne.n	80012c8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d102      	bne.n	800124a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001244:	2301      	movs	r3, #1
 8001246:	757b      	strb	r3, [r7, #21]
 8001248:	e007      	b.n	800125a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d102      	bne.n	8001256 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001250:	2302      	movs	r3, #2
 8001252:	757b      	strb	r3, [r7, #21]
 8001254:	e001      	b.n	800125a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001256:	2304      	movs	r3, #4
 8001258:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800125a:	2300      	movs	r3, #0
 800125c:	75bb      	strb	r3, [r7, #22]
 800125e:	e02d      	b.n	80012bc <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001260:	7dbb      	ldrb	r3, [r7, #22]
 8001262:	005a      	lsls	r2, r3, #1
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	eb02 0e03 	add.w	lr, r2, r3
 800126a:	7dbb      	ldrb	r3, [r7, #22]
 800126c:	0119      	lsls	r1, r3, #4
 800126e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001272:	f1c1 0620 	rsb	r6, r1, #32
 8001276:	f1a1 0020 	sub.w	r0, r1, #32
 800127a:	fa22 f401 	lsr.w	r4, r2, r1
 800127e:	fa03 f606 	lsl.w	r6, r3, r6
 8001282:	4334      	orrs	r4, r6
 8001284:	fa23 f000 	lsr.w	r0, r3, r0
 8001288:	4304      	orrs	r4, r0
 800128a:	fa23 f501 	lsr.w	r5, r3, r1
 800128e:	b2a3      	uxth	r3, r4
 8001290:	4619      	mov	r1, r3
 8001292:	4670      	mov	r0, lr
 8001294:	f000 f85a 	bl	800134c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800129c:	f000 f872 	bl	8001384 <FLASH_WaitForLastOperation>
 80012a0:	4603      	mov	r3, r0
 80012a2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_FLASH_Program+0xdc>)
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_FLASH_Program+0xdc>)
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	f023 0301 	bic.w	r3, r3, #1
 80012ae:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d107      	bne.n	80012c6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80012b6:	7dbb      	ldrb	r3, [r7, #22]
 80012b8:	3301      	adds	r3, #1
 80012ba:	75bb      	strb	r3, [r7, #22]
 80012bc:	7dba      	ldrb	r2, [r7, #22]
 80012be:	7d7b      	ldrb	r3, [r7, #21]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3cd      	bcc.n	8001260 <HAL_FLASH_Program+0x60>
 80012c4:	e000      	b.n	80012c8 <HAL_FLASH_Program+0xc8>
      {
        break;
 80012c6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_FLASH_Program+0xd8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	761a      	strb	r2, [r3, #24]

  return status;
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	20002cd8 	.word	0x20002cd8
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_FLASH_Unlock+0x40>)
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_FLASH_Unlock+0x40>)
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_FLASH_Unlock+0x44>)
 80012fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_FLASH_Unlock+0x40>)
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_FLASH_Unlock+0x48>)
 8001300:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_FLASH_Unlock+0x40>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001312:	79fb      	ldrb	r3, [r7, #7]
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40022000 	.word	0x40022000
 8001324:	45670123 	.word	0x45670123
 8001328:	cdef89ab 	.word	0xcdef89ab

0800132c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_FLASH_Lock+0x1c>)
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_FLASH_Lock+0x1c>)
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800133a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <FLASH_Program_HalfWord+0x30>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <FLASH_Program_HalfWord+0x34>)
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <FLASH_Program_HalfWord+0x34>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	887a      	ldrh	r2, [r7, #2]
 800136e:	801a      	strh	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20002cd8 	.word	0x20002cd8
 8001380:	40022000 	.word	0x40022000

08001384 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff fe34 	bl	8000ff8 <HAL_GetTick>
 8001390:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001392:	e010      	b.n	80013b6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139a:	d00c      	beq.n	80013b6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d007      	beq.n	80013b2 <FLASH_WaitForLastOperation+0x2e>
 80013a2:	f7ff fe29 	bl	8000ff8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1ad2      	subs	r2, r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d901      	bls.n	80013b6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e025      	b.n	8001402 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <FLASH_WaitForLastOperation+0x88>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1e8      	bne.n	8001394 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <FLASH_WaitForLastOperation+0x88>)
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <FLASH_WaitForLastOperation+0x88>)
 80013d0:	2220      	movs	r2, #32
 80013d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <FLASH_WaitForLastOperation+0x88>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10b      	bne.n	80013f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <FLASH_WaitForLastOperation+0x88>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d105      	bne.n	80013f8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <FLASH_WaitForLastOperation+0x88>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013f8:	f000 f80a 	bl	8001410 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b00      	cmp	r3, #0
 8001424:	d009      	beq.n	800143a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <FLASH_SetErrorCode+0x9c>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <FLASH_SetErrorCode+0x9c>)
 8001430:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f043 0310 	orr.w	r3, r3, #16
 8001438:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <FLASH_SetErrorCode+0x9c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <FLASH_SetErrorCode+0x9c>)
 8001450:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00b      	beq.n	800147e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <FLASH_SetErrorCode+0x9c>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <FLASH_SetErrorCode+0x9c>)
 8001470:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f240 1201 	movw	r2, #257	; 0x101
 8001484:	4293      	cmp	r3, r2
 8001486:	d106      	bne.n	8001496 <FLASH_SetErrorCode+0x86>
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	61d3      	str	r3, [r2, #28]
}  
 8001494:	e002      	b.n	800149c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <FLASH_SetErrorCode+0x98>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	60d3      	str	r3, [r2, #12]
}  
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40022000 	.word	0x40022000
 80014ac:	20002cd8 	.word	0x20002cd8

080014b0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_FLASHEx_Erase+0xd0>)
 80014c4:	7e1b      	ldrb	r3, [r3, #24]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_FLASHEx_Erase+0x1e>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e053      	b.n	8001576 <HAL_FLASHEx_Erase+0xc6>
 80014ce:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_FLASHEx_Erase+0xd0>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d116      	bne.n	800150a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014e0:	f7ff ff50 	bl	8001384 <FLASH_WaitForLastOperation>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d141      	bne.n	800156e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f84c 	bl	8001588 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014f4:	f7ff ff46 	bl	8001384 <FLASH_WaitForLastOperation>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <HAL_FLASHEx_Erase+0xd4>)
 80014fe:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_FLASHEx_Erase+0xd4>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f023 0304 	bic.w	r3, r3, #4
 8001506:	6113      	str	r3, [r2, #16]
 8001508:	e031      	b.n	800156e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800150a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800150e:	f7ff ff39 	bl	8001384 <FLASH_WaitForLastOperation>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d12a      	bne.n	800156e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f04f 32ff 	mov.w	r2, #4294967295
 800151e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	e019      	b.n	800155c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001528:	68b8      	ldr	r0, [r7, #8]
 800152a:	f000 f849 	bl	80015c0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800152e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001532:	f7ff ff27 	bl	8001384 <FLASH_WaitForLastOperation>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800153a:	4a12      	ldr	r2, [pc, #72]	; (8001584 <HAL_FLASHEx_Erase+0xd4>)
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_FLASHEx_Erase+0xd4>)
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f023 0302 	bic.w	r3, r3, #2
 8001544:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	601a      	str	r2, [r3, #0]
            break;
 8001552:	e00c      	b.n	800156e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800155a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	029a      	lsls	r2, r3, #10
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	d8dc      	bhi.n	8001528 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_FLASHEx_Erase+0xd0>)
 8001570:	2200      	movs	r2, #0
 8001572:	761a      	strb	r2, [r3, #24]

  return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20002cd8 	.word	0x20002cd8
 8001584:	40022000 	.word	0x40022000

08001588 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <FLASH_MassErase+0x30>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <FLASH_MassErase+0x34>)
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <FLASH_MassErase+0x34>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <FLASH_MassErase+0x34>)
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <FLASH_MassErase+0x34>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ac:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	20002cd8 	.word	0x20002cd8
 80015bc:	40022000 	.word	0x40022000

080015c0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <FLASH_PageErase+0x38>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <FLASH_PageErase+0x3c>)
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <FLASH_PageErase+0x3c>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <FLASH_PageErase+0x3c>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <FLASH_PageErase+0x3c>)
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <FLASH_PageErase+0x3c>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ea:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20002cd8 	.word	0x20002cd8
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001612:	e127      	b.n	8001864 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001614:	2201      	movs	r2, #1
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	429a      	cmp	r2, r3
 800162e:	f040 8116 	bne.w	800185e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b12      	cmp	r3, #18
 8001638:	d034      	beq.n	80016a4 <HAL_GPIO_Init+0xa4>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d80d      	bhi.n	800165a <HAL_GPIO_Init+0x5a>
 800163e:	2b02      	cmp	r3, #2
 8001640:	d02b      	beq.n	800169a <HAL_GPIO_Init+0x9a>
 8001642:	2b02      	cmp	r3, #2
 8001644:	d804      	bhi.n	8001650 <HAL_GPIO_Init+0x50>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d031      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d01c      	beq.n	8001688 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800164e:	e048      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001650:	2b03      	cmp	r3, #3
 8001652:	d043      	beq.n	80016dc <HAL_GPIO_Init+0xdc>
 8001654:	2b11      	cmp	r3, #17
 8001656:	d01b      	beq.n	8001690 <HAL_GPIO_Init+0x90>
          break;
 8001658:	e043      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800165a:	4a89      	ldr	r2, [pc, #548]	; (8001880 <HAL_GPIO_Init+0x280>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d026      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 8001660:	4a87      	ldr	r2, [pc, #540]	; (8001880 <HAL_GPIO_Init+0x280>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d806      	bhi.n	8001674 <HAL_GPIO_Init+0x74>
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_GPIO_Init+0x284>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d020      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800166c:	4a86      	ldr	r2, [pc, #536]	; (8001888 <HAL_GPIO_Init+0x288>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d01d      	beq.n	80016ae <HAL_GPIO_Init+0xae>
          break;
 8001672:	e036      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001674:	4a85      	ldr	r2, [pc, #532]	; (800188c <HAL_GPIO_Init+0x28c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d019      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 800167a:	4a85      	ldr	r2, [pc, #532]	; (8001890 <HAL_GPIO_Init+0x290>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d016      	beq.n	80016ae <HAL_GPIO_Init+0xae>
 8001680:	4a84      	ldr	r2, [pc, #528]	; (8001894 <HAL_GPIO_Init+0x294>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0xae>
          break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e028      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	3304      	adds	r3, #4
 8001696:	623b      	str	r3, [r7, #32]
          break;
 8001698:	e023      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	3308      	adds	r3, #8
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e01e      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	330c      	adds	r3, #12
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e019      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016b6:	2304      	movs	r3, #4
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e012      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016c4:	2308      	movs	r3, #8
 80016c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	611a      	str	r2, [r3, #16]
          break;
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d0:	2308      	movs	r3, #8
 80016d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	615a      	str	r2, [r3, #20]
          break;
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
          break;
 80016e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2bff      	cmp	r3, #255	; 0xff
 80016e6:	d801      	bhi.n	80016ec <HAL_GPIO_Init+0xec>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	e001      	b.n	80016f0 <HAL_GPIO_Init+0xf0>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3304      	adds	r3, #4
 80016f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d802      	bhi.n	80016fe <HAL_GPIO_Init+0xfe>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_Init+0x104>
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	3b08      	subs	r3, #8
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	210f      	movs	r1, #15
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	401a      	ands	r2, r3
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	431a      	orrs	r2, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8096 	beq.w	800185e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001732:	4a59      	ldr	r2, [pc, #356]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001734:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_GPIO_Init+0x298>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800174a:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x29c>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <HAL_GPIO_Init+0x2a0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x19e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4a      	ldr	r2, [pc, #296]	; (80018a4 <HAL_GPIO_Init+0x2a4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x19a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a49      	ldr	r2, [pc, #292]	; (80018a8 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x196>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a48      	ldr	r2, [pc, #288]	; (80018ac <HAL_GPIO_Init+0x2ac>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x192>
 800178e:	2303      	movs	r3, #3
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 8001792:	2304      	movs	r3, #4
 8001794:	e004      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 8001796:	2302      	movs	r3, #2
 8001798:	e002      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_GPIO_Init+0x1a0>
 800179e:	2300      	movs	r3, #0
 80017a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a2:	f002 0203 	and.w	r2, r2, #3
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4093      	lsls	r3, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017b0:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_GPIO_Init+0x29c>)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ca:	4939      	ldr	r1, [pc, #228]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d8:	4935      	ldr	r1, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017da:	4b35      	ldr	r3, [pc, #212]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4013      	ands	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f2:	492f      	ldr	r1, [pc, #188]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001800:	492b      	ldr	r1, [pc, #172]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4013      	ands	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800181a:	4925      	ldr	r1, [pc, #148]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001828:	4921      	ldr	r1, [pc, #132]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4013      	ands	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001842:	491b      	ldr	r1, [pc, #108]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001850:	4917      	ldr	r1, [pc, #92]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_GPIO_Init+0x2b0>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4013      	ands	r3, r2
 800185c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f aed0 	bne.w	8001614 <HAL_GPIO_Init+0x14>
  }
}
 8001874:	bf00      	nop
 8001876:	372c      	adds	r7, #44	; 0x2c
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	10210000 	.word	0x10210000
 8001884:	10110000 	.word	0x10110000
 8001888:	10120000 	.word	0x10120000
 800188c:	10310000 	.word	0x10310000
 8001890:	10320000 	.word	0x10320000
 8001894:	10220000 	.word	0x10220000
 8001898:	40021000 	.word	0x40021000
 800189c:	40010000 	.word	0x40010000
 80018a0:	40010800 	.word	0x40010800
 80018a4:	40010c00 	.word	0x40010c00
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40011400 	.word	0x40011400
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b08b      	sub	sp, #44	; 0x2c
 80018b8:	af06      	add	r7, sp, #24
 80018ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0fd      	b.n	8001ac2 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f00b fa24 	bl	800cd28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fdf3 	bl	80044d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	687e      	ldr	r6, [r7, #4]
 80018fa:	466d      	mov	r5, sp
 80018fc:	f106 0410 	add.w	r4, r6, #16
 8001900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	602b      	str	r3, [r5, #0]
 8001908:	1d33      	adds	r3, r6, #4
 800190a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f002 fdbd 	bl	800448c <USB_CoreInit>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0ce      	b.n	8001ac2 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fdee 	bl	800450c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
 8001934:	e04c      	b.n	80019d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3301      	adds	r3, #1
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	b298      	uxth	r0, r3
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3336      	adds	r3, #54	; 0x36
 8001974:	4602      	mov	r2, r0
 8001976:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3303      	adds	r3, #3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800198e:	7bfa      	ldrb	r2, [r7, #15]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	3338      	adds	r3, #56	; 0x38
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019a2:	7bfa      	ldrb	r2, [r7, #15]
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	333c      	adds	r3, #60	; 0x3c
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3340      	adds	r3, #64	; 0x40
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d3ad      	bcc.n	8001936 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e044      	b.n	8001a6a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3301      	adds	r3, #1
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d3b5      	bcc.n	80019e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	687e      	ldr	r6, [r7, #4]
 8001a7c:	466d      	mov	r5, sp
 8001a7e:	f106 0410 	add.w	r4, r6, #16
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	6823      	ldr	r3, [r4, #0]
 8001a88:	602b      	str	r3, [r5, #0]
 8001a8a:	1d33      	adds	r3, r6, #4
 8001a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8e:	6838      	ldr	r0, [r7, #0]
 8001a90:	f002 fd48 	bl	8004524 <USB_DevInit>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00d      	b.n	8001ac2 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fed9 	bl	8006872 <USB_DevDisconnect>

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d101      	bne.n	8001ae0 <HAL_PCD_Start+0x16>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e016      	b.n	8001b0e <HAL_PCD_Start+0x44>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 fcdd 	bl	80044ac <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001af2:	2101      	movs	r1, #1
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f00b fba0 	bl	800d23a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fead 	bl	800685e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b088      	sub	sp, #32
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 feaf 	bl	8006886 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b32:	d102      	bne.n	8001b3a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb8e 	bl	8002256 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fea1 	bl	8006886 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d112      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	b292      	uxth	r2, r2
 8001b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f00b f958 	bl	800ce1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f925 	bl	8001dc0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fe83 	bl	8006886 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f004 fe6c 	bl	8006886 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb8:	d10b      	bne.n	8001bd2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bcc:	b292      	uxth	r2, r2
 8001bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 fe55 	bl	8006886 <USB_ReadInterrupts>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be6:	d126      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f022 0204 	bic.w	r2, r2, #4
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	f022 0208 	bic.w	r2, r2, #8
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f00b f939 	bl	800ce90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c30:	b292      	uxth	r2, r2
 8001c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 fe23 	bl	8006886 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c4a:	f040 8084 	bne.w	8001d56 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	77fb      	strb	r3, [r7, #31]
 8001c52:	e011      	b.n	8001c78 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c54:	7ffb      	ldrb	r3, [r7, #31]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	7ffa      	ldrb	r2, [r7, #31]
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	440a      	add	r2, r1
 8001c62:	8812      	ldrh	r2, [r2, #0]
 8001c64:	b292      	uxth	r2, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	f107 0120 	add.w	r1, r7, #32
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	3301      	adds	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
 8001c78:	7ffb      	ldrb	r3, [r7, #31]
 8001c7a:	2b07      	cmp	r3, #7
 8001c7c:	d9ea      	bls.n	8001c54 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	f042 0201 	orr.w	r2, r2, #1
 8001c90:	b292      	uxth	r2, r2
 8001c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	b292      	uxth	r2, r2
 8001caa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cae:	bf00      	nop
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f6      	beq.n	8001cb0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001cce:	b292      	uxth	r2, r2
 8001cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd4:	b292      	uxth	r2, r2
 8001cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	77fb      	strb	r3, [r7, #31]
 8001cde:	e010      	b.n	8001d02 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	441a      	add	r2, r3
 8001cec:	7ffb      	ldrb	r3, [r7, #31]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	f107 0120 	add.w	r1, r7, #32
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001cfa:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	77fb      	strb	r3, [r7, #31]
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	2b07      	cmp	r3, #7
 8001d06:	d9eb      	bls.n	8001ce0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d14:	b292      	uxth	r2, r2
 8001d16:	f042 0208 	orr.w	r2, r2, #8
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d2c:	b292      	uxth	r2, r2
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	b292      	uxth	r2, r2
 8001d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d44:	b292      	uxth	r2, r2
 8001d46:	f042 0204 	orr.w	r2, r2, #4
 8001d4a:	b292      	uxth	r2, r2
 8001d4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f00b f883 	bl	800ce5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 fd93 	bl	8006886 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d6a:	d10e      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d78:	b292      	uxth	r2, r2
 8001d7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f00b f83c 	bl	800ce02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fd79 	bl	8006886 <USB_ReadInterrupts>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d9e:	d10b      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001db8:	bf00      	nop
 8001dba:	3720      	adds	r7, #32
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d101      	bne.n	8001dda <HAL_PCD_SetAddress+0x1a>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	e013      	b.n	8001e02 <HAL_PCD_SetAddress+0x42>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	78fa      	ldrb	r2, [r7, #3]
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f004 fd20 	bl	8006838 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	4608      	mov	r0, r1
 8001e14:	4611      	mov	r1, r2
 8001e16:	461a      	mov	r2, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	70fb      	strb	r3, [r7, #3]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	803b      	strh	r3, [r7, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	da0e      	bge.n	8001e4e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	705a      	strb	r2, [r3, #1]
 8001e4c:	e00e      	b.n	8001e6c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 0207 	and.w	r2, r3, #7
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e78:	883a      	ldrh	r2, [r7, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	78ba      	ldrb	r2, [r7, #2]
 8001e82:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_PCD_EP_Open+0xa6>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e00e      	b.n	8001ece <HAL_PCD_EP_Open+0xc4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 fb66 	bl	8004590 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ecc:	7afb      	ldrb	r3, [r7, #11]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	da0e      	bge.n	8001f08 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	705a      	strb	r2, [r3, #1]
 8001f06:	e00e      	b.n	8001f26 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 0207 	and.w	r2, r3, #7
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_PCD_EP_Close+0x6a>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e00e      	b.n	8001f5e <HAL_PCD_EP_Close+0x88>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 fe82 	bl	8004c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	460b      	mov	r3, r1
 8001f74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	f003 0207 	and.w	r2, r3, #7
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6979      	ldr	r1, [r7, #20]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f003 f834 	bl	8005030 <USB_EPStartXfer>
 8001fc8:	e005      	b.n	8001fd6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 f82d 	bl	8005030 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 0207 	and.w	r2, r3, #7
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	460b      	mov	r3, r1
 800201c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2200      	movs	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2201      	movs	r2, #1
 8002058:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	b2da      	uxtb	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002066:	7afb      	ldrb	r3, [r7, #11]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	4618      	mov	r0, r3
 8002078:	f002 ffda 	bl	8005030 <USB_EPStartXfer>
 800207c:	e005      	b.n	800208a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6979      	ldr	r1, [r7, #20]
 8002084:	4618      	mov	r0, r3
 8002086:	f002 ffd3 	bl	8005030 <USB_EPStartXfer>
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d901      	bls.n	80020b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e04c      	b.n	800214c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da0e      	bge.n	80020d8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	705a      	strb	r2, [r3, #1]
 80020d6:	e00c      	b.n	80020f2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_PCD_EP_SetStall+0x7e>
 800210e:	2302      	movs	r3, #2
 8002110:	e01c      	b.n	800214c <HAL_PCD_EP_SetStall+0xb8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fa8c 	bl	800663e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	2b00      	cmp	r3, #0
 800212e:	d108      	bne.n	8002142 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800213a:	4619      	mov	r1, r3
 800213c:	4610      	mov	r0, r2
 800213e:	f004 fbb1 	bl	80068a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 020f 	and.w	r2, r3, #15
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d901      	bls.n	8002172 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e040      	b.n	80021f4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	da0e      	bge.n	8002198 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	705a      	strb	r2, [r3, #1]
 8002196:	e00e      	b.n	80021b6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	f003 0207 	and.w	r2, r3, #7
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4413      	add	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_PCD_EP_ClrStall+0x82>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e00e      	b.n	80021f4 <HAL_PCD_EP_ClrStall+0xa0>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 fa7a 	bl	80066de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_PCD_EP_Flush+0x1a>
 8002212:	2302      	movs	r3, #2
 8002214:	e01b      	b.n	800224e <HAL_PCD_EP_Flush+0x52>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 800221e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da09      	bge.n	800223a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f002 f996 	bl	8004564 <USB_FlushTxFifo>
 8002238:	e004      	b.n	8002244 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f002 f99b 	bl	800457a <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b08e      	sub	sp, #56	; 0x38
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800225e:	e2ec      	b.n	800283a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002268:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800226a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002276:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8161 	bne.w	8002542 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002280:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d152      	bne.n	8002330 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3328      	adds	r3, #40	; 0x28
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	3302      	adds	r3, #2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	441a      	add	r2, r3
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022ee:	2100      	movs	r1, #0
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f00a fd6c 	bl	800cdce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 829b 	beq.w	800283a <PCD_EP_ISR_Handler+0x5e4>
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8296 	bne.w	800283a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	b292      	uxth	r2, r2
 8002322:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800232e:	e284      	b.n	800283a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002340:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002346:	2b00      	cmp	r3, #0
 8002348:	d034      	beq.n	80023b4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	3306      	adds	r3, #6
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002388:	b29b      	uxth	r3, r3
 800238a:	f004 fada 	bl	8006942 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	b29a      	uxth	r2, r3
 8002396:	f640 738f 	movw	r3, #3983	; 0xf8f
 800239a:	4013      	ands	r3, r2
 800239c:	843b      	strh	r3, [r7, #32]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	8c3a      	ldrh	r2, [r7, #32]
 80023a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a8:	b292      	uxth	r2, r2
 80023aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f00a fce1 	bl	800cd74 <HAL_PCD_SetupStageCallback>
 80023b2:	e242      	b.n	800283a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023b4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f280 823e 	bge.w	800283a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023ca:	4013      	ands	r3, r2
 80023cc:	83fb      	strh	r3, [r7, #30]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	8bfa      	ldrh	r2, [r7, #30]
 80023d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d8:	b292      	uxth	r2, r2
 80023da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4413      	add	r3, r2
 80023f0:	3306      	adds	r3, #6
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d019      	beq.n	8002444 <PCD_EP_ISR_Handler+0x1ee>
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d015      	beq.n	8002444 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	6959      	ldr	r1, [r3, #20]
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002428:	b29b      	uxth	r3, r3
 800242a:	f004 fa8a 	bl	8006942 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	441a      	add	r2, r3
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800243c:	2100      	movs	r1, #0
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f00a fcaa 	bl	800cd98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002450:	2b00      	cmp	r3, #0
 8002452:	f040 81f2 	bne.w	800283a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002464:	b29b      	uxth	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d112      	bne.n	80024a4 <PCD_EP_ISR_Handler+0x24e>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002488:	b29a      	uxth	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	801a      	strh	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249c:	b29a      	uxth	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	801a      	strh	r2, [r3, #0]
 80024a2:	e02f      	b.n	8002504 <PCD_EP_ISR_Handler+0x2ae>
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b3e      	cmp	r3, #62	; 0x3e
 80024aa:	d813      	bhi.n	80024d4 <PCD_EP_ISR_Handler+0x27e>
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <PCD_EP_ISR_Handler+0x270>
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	3301      	adds	r3, #1
 80024c4:	633b      	str	r3, [r7, #48]	; 0x30
 80024c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	e017      	b.n	8002504 <PCD_EP_ISR_Handler+0x2ae>
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <PCD_EP_ISR_Handler+0x298>
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	3b01      	subs	r3, #1
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	029b      	lsls	r3, r3, #10
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fe:	b29a      	uxth	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002514:	827b      	strh	r3, [r7, #18]
 8002516:	8a7b      	ldrh	r3, [r7, #18]
 8002518:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800251c:	827b      	strh	r3, [r7, #18]
 800251e:	8a7b      	ldrh	r3, [r7, #18]
 8002520:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002524:	827b      	strh	r3, [r7, #18]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	8a7b      	ldrh	r3, [r7, #18]
 800252c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253c:	b29b      	uxth	r3, r3
 800253e:	8013      	strh	r3, [r2, #0]
 8002540:	e17b      	b.n	800283a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002554:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002558:	2b00      	cmp	r3, #0
 800255a:	f280 80ea 	bge.w	8002732 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29a      	uxth	r2, r3
 8002570:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002574:	4013      	ands	r3, r2
 8002576:	823b      	strh	r3, [r7, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	8a3a      	ldrh	r2, [r7, #16]
 8002588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800258c:	b292      	uxth	r2, r2
 800258e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002590:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	7b1b      	ldrb	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d122      	bne.n	80025f4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3306      	adds	r3, #6
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	6959      	ldr	r1, [r3, #20]
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	88da      	ldrh	r2, [r3, #6]
 80025ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ee:	f004 f9a8 	bl	8006942 <USB_ReadPMA>
 80025f2:	e07c      	b.n	80026ee <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	78db      	ldrb	r3, [r3, #3]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d108      	bne.n	800260e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025fe:	461a      	mov	r2, r3
 8002600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f927 	bl	8002856 <HAL_PCD_EP_DB_Receive>
 8002608:	4603      	mov	r3, r0
 800260a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800260c:	e06f      	b.n	80026ee <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29b      	uxth	r3, r3
 8002620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002628:	81fb      	strh	r3, [r7, #14]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	441a      	add	r2, r3
 8002638:	89fb      	ldrh	r3, [r7, #14]
 800263a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800264a:	b29b      	uxth	r3, r3
 800264c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d021      	beq.n	80026ac <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002670:	b29b      	uxth	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	3302      	adds	r3, #2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002690:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002692:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02a      	beq.n	80026ee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	6959      	ldr	r1, [r3, #20]
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	891a      	ldrh	r2, [r3, #8]
 80026a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a6:	f004 f94c 	bl	8006942 <USB_ReadPMA>
 80026aa:	e020      	b.n	80026ee <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	3306      	adds	r3, #6
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026d4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	6959      	ldr	r1, [r3, #20]
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	895a      	ldrh	r2, [r3, #10]
 80026e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ea:	f004 f92a 	bl	8006942 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	69da      	ldr	r2, [r3, #28]
 80026f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026f4:	441a      	add	r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002700:	441a      	add	r2, r3
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <PCD_EP_ISR_Handler+0x4c2>
 800270e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d206      	bcs.n	8002726 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f00a fb3a 	bl	800cd98 <HAL_PCD_DataOutStageCallback>
 8002724:	e005      	b.n	8002732 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800272c:	4618      	mov	r0, r3
 800272e:	f002 fc7f 	bl	8005030 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002732:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d07e      	beq.n	800283a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800273c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276a:	81bb      	strh	r3, [r7, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	461a      	mov	r2, r3
 8002772:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	89bb      	ldrh	r3, [r7, #12]
 800277c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	78db      	ldrb	r3, [r3, #3]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d00c      	beq.n	80027aa <PCD_EP_ISR_Handler+0x554>
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	78db      	ldrb	r3, [r3, #3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800279c:	2b02      	cmp	r3, #2
 800279e:	d146      	bne.n	800282e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d141      	bne.n	800282e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	3302      	adds	r3, #2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d2:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	897b      	ldrh	r3, [r7, #10]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d906      	bls.n	80027ec <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	1ad2      	subs	r2, r2, r3
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	619a      	str	r2, [r3, #24]
 80027ea:	e002      	b.n	80027f2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	4619      	mov	r1, r3
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f00a fae4 	bl	800cdce <HAL_PCD_DataInStageCallback>
 8002806:	e018      	b.n	800283a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	897b      	ldrh	r3, [r7, #10]
 800280e:	441a      	add	r2, r3
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	441a      	add	r2, r3
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002826:	4618      	mov	r0, r3
 8002828:	f002 fc02 	bl	8005030 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800282c:	e005      	b.n	800283a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800282e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002830:	461a      	mov	r2, r3
 8002832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f91b 	bl	8002a70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002842:	b29b      	uxth	r3, r3
 8002844:	b21b      	sxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	f6ff ad0a 	blt.w	8002260 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3738      	adds	r7, #56	; 0x38
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b088      	sub	sp, #32
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	4613      	mov	r3, r2
 8002862:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d07e      	beq.n	800296c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002876:	b29b      	uxth	r3, r3
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	3302      	adds	r3, #2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002896:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	8bfb      	ldrh	r3, [r7, #30]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d306      	bcc.n	80028b0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	8bfb      	ldrh	r3, [r7, #30]
 80028a8:	1ad2      	subs	r2, r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	619a      	str	r2, [r3, #24]
 80028ae:	e002      	b.n	80028b6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d123      	bne.n	8002906 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d8:	83bb      	strh	r3, [r7, #28]
 80028da:	8bbb      	ldrh	r3, [r7, #28]
 80028dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028e0:	83bb      	strh	r3, [r7, #28]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	441a      	add	r2, r3
 80028f0:	8bbb      	ldrh	r3, [r7, #28]
 80028f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002902:	b29b      	uxth	r3, r3
 8002904:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01f      	beq.n	8002950 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	837b      	strh	r3, [r7, #26]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	8b7b      	ldrh	r3, [r7, #26]
 800293c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002948:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800294c:	b29b      	uxth	r3, r3
 800294e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002950:	8bfb      	ldrh	r3, [r7, #30]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 8087 	beq.w	8002a66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	6959      	ldr	r1, [r3, #20]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	891a      	ldrh	r2, [r3, #8]
 8002964:	8bfb      	ldrh	r3, [r7, #30]
 8002966:	f003 ffec 	bl	8006942 <USB_ReadPMA>
 800296a:	e07c      	b.n	8002a66 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	3306      	adds	r3, #6
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002994:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	8bfb      	ldrh	r3, [r7, #30]
 800299c:	429a      	cmp	r2, r3
 800299e:	d306      	bcc.n	80029ae <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	619a      	str	r2, [r3, #24]
 80029ac:	e002      	b.n	80029b4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d123      	bne.n	8002a04 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	833b      	strh	r3, [r7, #24]
 80029d8:	8b3b      	ldrh	r3, [r7, #24]
 80029da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029de:	833b      	strh	r3, [r7, #24]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	8b3b      	ldrh	r3, [r7, #24]
 80029f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11f      	bne.n	8002a4e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a28:	82fb      	strh	r3, [r7, #22]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	441a      	add	r2, r3
 8002a38:	8afb      	ldrh	r3, [r7, #22]
 8002a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a4e:	8bfb      	ldrh	r3, [r7, #30]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6959      	ldr	r1, [r3, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	895a      	ldrh	r2, [r3, #10]
 8002a60:	8bfb      	ldrh	r3, [r7, #30]
 8002a62:	f003 ff6e 	bl	8006942 <USB_ReadPMA>
    }
  }

  return count;
 8002a66:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3720      	adds	r7, #32
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b0a4      	sub	sp, #144	; 0x90
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 81dd 	beq.w	8002e44 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d907      	bls.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	699a      	ldr	r2, [r3, #24]
 8002ac6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	619a      	str	r2, [r3, #24]
 8002ad0:	e002      	b.n	8002ad8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 80bb 	bne.w	8002c58 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d126      	bne.n	8002b38 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	461a      	mov	r2, r3
 8002afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002afe:	4413      	add	r3, r2
 8002b00:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	011a      	lsls	r2, r3, #4
 8002b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b10:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	e01a      	b.n	8002b6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d116      	bne.n	8002b6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	677b      	str	r3, [r7, #116]	; 0x74
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b54:	4413      	add	r3, r2
 8002b56:	677b      	str	r3, [r7, #116]	; 0x74
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	011a      	lsls	r2, r3, #4
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b60:	4413      	add	r3, r2
 8002b62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b66:	673b      	str	r3, [r7, #112]	; 0x70
 8002b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d126      	bne.n	8002bca <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b90:	4413      	add	r3, r2
 8002b92:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	011a      	lsls	r2, r3, #4
 8002b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ba2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb2:	801a      	strh	r2, [r3, #0]
 8002bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	e017      	b.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d113      	bne.n	8002bfa <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	4413      	add	r3, r2
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	011a      	lsls	r2, r3, #4
 8002bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bec:	4413      	add	r3, r2
 8002bee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8002bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f00a f8e4 	bl	800cdce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 82f1 	beq.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	8013      	strh	r3, [r2, #0]
 8002c56:	e2cd      	b.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d021      	beq.n	8002ca6 <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	441a      	add	r2, r3
 8002c8e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	f040 82a1 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cba:	441a      	add	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cc8:	441a      	add	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d30b      	bcc.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6a1a      	ldr	r2, [r3, #32]
 8002ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cea:	1ad2      	subs	r2, r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	621a      	str	r2, [r3, #32]
 8002cf0:	e017      	b.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002cfa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d0a:	e00a      	b.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	785b      	ldrb	r3, [r3, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d163      	bne.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x382>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d3e:	4413      	add	r3, r2
 8002d40:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	011a      	lsls	r2, r3, #4
 8002d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d50:	657b      	str	r3, [r7, #84]	; 0x54
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d112      	bne.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d68:	801a      	strh	r2, [r3, #0]
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	e055      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d84:	2b3e      	cmp	r3, #62	; 0x3e
 8002d86:	d817      	bhi.n	8002db8 <HAL_PCD_EP_DB_Transmit+0x348>
 8002d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x338>
 8002d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da2:	3301      	adds	r3, #1
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	029b      	lsls	r3, r3, #10
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	e039      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x368>
 8002dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	029b      	lsls	r3, r3, #10
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dee:	801a      	strh	r2, [r3, #0]
 8002df0:	e01c      	b.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	785b      	ldrb	r3, [r3, #1]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d118      	bne.n	8002e2c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0e:	4413      	add	r3, r2
 8002e10:	653b      	str	r3, [r7, #80]	; 0x50
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	011a      	lsls	r2, r3, #4
 8002e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	6959      	ldr	r1, [r3, #20]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	891a      	ldrh	r2, [r3, #8]
 8002e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	f003 fd3c 	bl	80068ba <USB_WritePMA>
 8002e42:	e1d7      	b.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	3306      	adds	r3, #6
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e6c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d307      	bcc.n	8002e8c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e84:	1ad2      	subs	r2, r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	619a      	str	r2, [r3, #24]
 8002e8a:	e002      	b.n	8002e92 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f040 80b9 	bne.w	800300e <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d126      	bne.n	8002ef2 <HAL_PCD_EP_DB_Transmit+0x482>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb8:	4413      	add	r3, r2
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	011a      	lsls	r2, r3, #4
 8002ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eca:	647b      	str	r3, [r7, #68]	; 0x44
 8002ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eda:	801a      	strh	r2, [r3, #0]
 8002edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	e01a      	b.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	785b      	ldrb	r3, [r3, #1]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d116      	bne.n	8002f28 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	643b      	str	r3, [r7, #64]	; 0x40
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0e:	4413      	add	r3, r2
 8002f10:	643b      	str	r3, [r7, #64]	; 0x40
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	011a      	lsls	r2, r3, #4
 8002f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	2200      	movs	r2, #0
 8002f26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d126      	bne.n	8002f84 <HAL_PCD_EP_DB_Transmit+0x514>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4a:	4413      	add	r3, r2
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f56:	4413      	add	r3, r2
 8002f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	801a      	strh	r2, [r3, #0]
 8002f82:	e017      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	785b      	ldrb	r3, [r3, #1]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d113      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x544>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9a:	4413      	add	r3, r2
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	011a      	lsls	r2, r3, #4
 8002fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f009 ff07 	bl	800cdce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fc0:	88fb      	ldrh	r3, [r7, #6]
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 8114 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003008:	b29b      	uxth	r3, r3
 800300a:	8013      	strh	r3, [r2, #0]
 800300c:	e0f2      	b.n	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d11f      	bne.n	8003058 <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800302e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003032:	853b      	strh	r3, [r7, #40]	; 0x28
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003044:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003048:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	b29b      	uxth	r3, r3
 8003056:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305e:	2b01      	cmp	r3, #1
 8003060:	f040 80c8 	bne.w	80031f4 <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800306c:	441a      	add	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800307a:	441a      	add	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d30b      	bcc.n	80030a4 <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800309c:	1ad2      	subs	r2, r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	621a      	str	r2, [r3, #32]
 80030a2:	e017      	b.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d108      	bne.n	80030be <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 80030ac:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80030b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030bc:	e00a      	b.n	80030d4 <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	785b      	ldrb	r3, [r3, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d163      	bne.n	80031aa <HAL_PCD_EP_DB_Transmit+0x73a>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	623b      	str	r3, [r7, #32]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	4413      	add	r3, r2
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	011a      	lsls	r2, r3, #4
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	4413      	add	r3, r2
 8003104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310e:	2b00      	cmp	r3, #0
 8003110:	d112      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800311c:	b29a      	uxth	r2, r3
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800312c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003130:	b29a      	uxth	r2, r3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	e052      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x76e>
 8003138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313c:	2b3e      	cmp	r3, #62	; 0x3e
 800313e:	d817      	bhi.n	8003170 <HAL_PCD_EP_DB_Transmit+0x700>
 8003140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800314a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d004      	beq.n	8003160 <HAL_PCD_EP_DB_Transmit+0x6f0>
 8003156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315a:	3301      	adds	r3, #1
 800315c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003164:	b29b      	uxth	r3, r3
 8003166:	029b      	lsls	r3, r3, #10
 8003168:	b29a      	uxth	r2, r3
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	801a      	strh	r2, [r3, #0]
 800316e:	e036      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x76e>
 8003170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800317a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x720>
 8003186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800318a:	3b01      	subs	r3, #1
 800318c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003194:	b29b      	uxth	r3, r3
 8003196:	029b      	lsls	r3, r3, #10
 8003198:	b29b      	uxth	r3, r3
 800319a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	801a      	strh	r2, [r3, #0]
 80031a8:	e019      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x76e>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	785b      	ldrb	r3, [r3, #1]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d115      	bne.n	80031de <HAL_PCD_EP_DB_Transmit+0x76e>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	4413      	add	r3, r2
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	011a      	lsls	r2, r3, #4
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	4413      	add	r3, r2
 80031ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d8:	b29a      	uxth	r2, r3
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6959      	ldr	r1, [r3, #20]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	895a      	ldrh	r2, [r3, #10]
 80031ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 fb63 	bl	80068ba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320e:	82fb      	strh	r3, [r7, #22]
 8003210:	8afb      	ldrh	r3, [r7, #22]
 8003212:	f083 0310 	eor.w	r3, r3, #16
 8003216:	82fb      	strh	r3, [r7, #22]
 8003218:	8afb      	ldrh	r3, [r7, #22]
 800321a:	f083 0320 	eor.w	r3, r3, #32
 800321e:	82fb      	strh	r3, [r7, #22]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	441a      	add	r2, r3
 800322e:	8afb      	ldrh	r3, [r7, #22]
 8003230:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003234:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3790      	adds	r7, #144	; 0x90
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	817b      	strh	r3, [r7, #10]
 800325c:	4613      	mov	r3, r2
 800325e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326c:	897b      	ldrh	r3, [r7, #10]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	e009      	b.n	8003298 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003284:	897a      	ldrh	r2, [r7, #10]
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003298:	893b      	ldrh	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	80da      	strh	r2, [r3, #6]
 80032ac:	e00b      	b.n	80032c6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2201      	movs	r2, #1
 80032b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e26c      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8087 	beq.w	8003402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f4:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d00c      	beq.n	800331a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003300:	4b8f      	ldr	r3, [pc, #572]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d112      	bne.n	8003332 <HAL_RCC_OscConfig+0x5e>
 800330c:	4b8c      	ldr	r3, [pc, #560]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d10b      	bne.n	8003332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331a:	4b89      	ldr	r3, [pc, #548]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d06c      	beq.n	8003400 <HAL_RCC_OscConfig+0x12c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d168      	bne.n	8003400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e246      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333a:	d106      	bne.n	800334a <HAL_RCC_OscConfig+0x76>
 800333c:	4a80      	ldr	r2, [pc, #512]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800333e:	4b80      	ldr	r3, [pc, #512]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003346:	6013      	str	r3, [r2, #0]
 8003348:	e02e      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x98>
 8003352:	4a7b      	ldr	r2, [pc, #492]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003354:	4b7a      	ldr	r3, [pc, #488]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4a78      	ldr	r2, [pc, #480]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003360:	4b77      	ldr	r3, [pc, #476]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e01d      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0xbc>
 8003376:	4a72      	ldr	r2, [pc, #456]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003378:	4b71      	ldr	r3, [pc, #452]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4a6f      	ldr	r2, [pc, #444]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003384:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e00b      	b.n	80033a8 <HAL_RCC_OscConfig+0xd4>
 8003390:	4a6b      	ldr	r2, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003392:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4a68      	ldr	r2, [pc, #416]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800339e:	4b68      	ldr	r3, [pc, #416]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d013      	beq.n	80033d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fd fe22 	bl	8000ff8 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fd fe1e 	bl	8000ff8 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1fa      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d0f0      	beq.n	80033b8 <HAL_RCC_OscConfig+0xe4>
 80033d6:	e014      	b.n	8003402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fe0e 	bl	8000ff8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd fe0a 	bl	8000ff8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1e6      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x10c>
 80033fe:	e000      	b.n	8003402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d063      	beq.n	80034d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340e:	4b4c      	ldr	r3, [pc, #304]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800341a:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b08      	cmp	r3, #8
 8003424:	d11c      	bne.n	8003460 <HAL_RCC_OscConfig+0x18c>
 8003426:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d116      	bne.n	8003460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_RCC_OscConfig+0x176>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1ba      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344a:	493d      	ldr	r1, [pc, #244]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345e:	e03a      	b.n	80034d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d020      	beq.n	80034aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x270>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346e:	f7fd fdc3 	bl	8000ff8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003476:	f7fd fdbf 	bl	8000ff8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e19b      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	492a      	ldr	r1, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003496:	4b2a      	ldr	r3, [pc, #168]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4313      	orrs	r3, r2
 80034a6:	600b      	str	r3, [r1, #0]
 80034a8:	e015      	b.n	80034d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCC_OscConfig+0x270>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fda2 	bl	8000ff8 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fd fd9e 	bl	8000ff8 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e17a      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d03a      	beq.n	8003558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d019      	beq.n	800351e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f0:	f7fd fd82 	bl	8000ff8 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f8:	f7fd fd7e 	bl	8000ff8 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e15a      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_RCC_OscConfig+0x26c>)
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003516:	2001      	movs	r0, #1
 8003518:	f000 faf6 	bl	8003b08 <RCC_Delay>
 800351c:	e01c      	b.n	8003558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_RCC_OscConfig+0x274>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fd fd68 	bl	8000ff8 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352a:	e00f      	b.n	800354c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800352c:	f7fd fd64 	bl	8000ff8 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d908      	bls.n	800354c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e140      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	42420000 	.word	0x42420000
 8003548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	4b9e      	ldr	r3, [pc, #632]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e9      	bne.n	800352c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a6 	beq.w	80036b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356a:	4b97      	ldr	r3, [pc, #604]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003576:	4a94      	ldr	r2, [pc, #592]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003578:	4b93      	ldr	r3, [pc, #588]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	61d3      	str	r3, [r2, #28]
 8003582:	4b91      	ldr	r3, [pc, #580]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b8e      	ldr	r3, [pc, #568]	; (80037cc <HAL_RCC_OscConfig+0x4f8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4a8b      	ldr	r2, [pc, #556]	; (80037cc <HAL_RCC_OscConfig+0x4f8>)
 80035a0:	4b8a      	ldr	r3, [pc, #552]	; (80037cc <HAL_RCC_OscConfig+0x4f8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fd fd25 	bl	8000ff8 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fd fd21 	bl	8000ff8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b64      	cmp	r3, #100	; 0x64
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0fd      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b81      	ldr	r3, [pc, #516]	; (80037cc <HAL_RCC_OscConfig+0x4f8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x312>
 80035d8:	4a7b      	ldr	r2, [pc, #492]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	4b7b      	ldr	r3, [pc, #492]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	e02d      	b.n	8003642 <HAL_RCC_OscConfig+0x36e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x334>
 80035ee:	4a76      	ldr	r2, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	4b75      	ldr	r3, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	6213      	str	r3, [r2, #32]
 80035fa:	4a73      	ldr	r2, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	4b72      	ldr	r3, [pc, #456]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	6213      	str	r3, [r2, #32]
 8003606:	e01c      	b.n	8003642 <HAL_RCC_OscConfig+0x36e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d10c      	bne.n	800362a <HAL_RCC_OscConfig+0x356>
 8003610:	4a6d      	ldr	r2, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	4a6a      	ldr	r2, [pc, #424]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800361e:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	e00b      	b.n	8003642 <HAL_RCC_OscConfig+0x36e>
 800362a:	4a67      	ldr	r2, [pc, #412]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800362c:	4b66      	ldr	r3, [pc, #408]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6213      	str	r3, [r2, #32]
 8003636:	4a64      	ldr	r2, [pc, #400]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	4b63      	ldr	r3, [pc, #396]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364a:	f7fd fcd5 	bl	8000ff8 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fcd1 	bl	8000ff8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0ab      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCC_OscConfig+0x37e>
 8003674:	e014      	b.n	80036a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fd fcbf 	bl	8000ff8 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fd fcbb 	bl	8000ff8 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e095      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003694:	4b4c      	ldr	r3, [pc, #304]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ee      	bne.n	800367e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4a48      	ldr	r2, [pc, #288]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80036a8:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8081 	beq.w	80037be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036bc:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d061      	beq.n	800378c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d146      	bne.n	800375e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b3f      	ldr	r3, [pc, #252]	; (80037d0 <HAL_RCC_OscConfig+0x4fc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fd fc8f 	bl	8000ff8 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fd fc8b 	bl	8000ff8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e067      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d108      	bne.n	8003718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003706:	4930      	ldr	r1, [pc, #192]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4313      	orrs	r3, r2
 8003716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003718:	482b      	ldr	r0, [pc, #172]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a19      	ldr	r1, [r3, #32]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	430b      	orrs	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003730:	4b27      	ldr	r3, [pc, #156]	; (80037d0 <HAL_RCC_OscConfig+0x4fc>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fd fc5f 	bl	8000ff8 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373e:	f7fd fc5b 	bl	8000ff8 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e037      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x46a>
 800375c:	e02f      	b.n	80037be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_RCC_OscConfig+0x4fc>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fd fc48 	bl	8000ff8 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376c:	f7fd fc44 	bl	8000ff8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e020      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x498>
 800378a:	e018      	b.n	80037be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e013      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	42420060 	.word	0x42420060

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d0      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0207 	and.w	r2, r3, #7
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d210      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4967      	ldr	r1, [pc, #412]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 0207 	bic.w	r2, r3, #7
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0207 	and.w	r2, r3, #7
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4a59      	ldr	r2, [pc, #356]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	4b59      	ldr	r3, [pc, #356]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800383a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4a53      	ldr	r2, [pc, #332]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	4b53      	ldr	r3, [pc, #332]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4950      	ldr	r1, [pc, #320]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4b50      	ldr	r3, [pc, #320]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d040      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e073      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4939      	ldr	r1, [pc, #228]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	4b38      	ldr	r3, [pc, #224]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 0203 	bic.w	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fd fb98 	bl	8000ff8 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd fb94 	bl	8000ff8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e053      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2d      	ldr	r3, [pc, #180]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0207 	and.w	r2, r3, #7
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d910      	bls.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4924      	ldr	r1, [pc, #144]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 0207 	bic.w	r2, r3, #7
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0207 	and.w	r2, r3, #7
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4919      	ldr	r1, [pc, #100]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394e:	4912      	ldr	r1, [pc, #72]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4601      	mov	r1, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	5cd3      	ldrb	r3, [r2, r3]
 8003976:	fa21 f303 	lsr.w	r3, r1, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fffc 	bl	8000980 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	0800d510 	.word	0x0800d510
 80039a0:	20000020 	.word	0x20000020
 80039a4:	20000024 	.word	0x20000024

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b490      	push	{r4, r7}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039b0:	1d3c      	adds	r4, r7, #4
 80039b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039d2:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d002      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x40>
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d003      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0x46>
 80039e6:	e02d      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ea:	623b      	str	r3, [r7, #32]
      break;
 80039ec:	e02d      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	0c9b      	lsrs	r3, r3, #18
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039fa:	4413      	add	r3, r2
 80039fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	0c5b      	lsrs	r3, r3, #17
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a26:	fb02 f203 	mul.w	r2, r2, r3
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e004      	b.n	8003a3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	623b      	str	r3, [r7, #32]
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a46:	623b      	str	r3, [r7, #32]
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc90      	pop	{r4, r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	0800d45c 	.word	0x0800d45c
 8003a5c:	0800d46c 	.word	0x0800d46c
 8003a60:	40021000 	.word	0x40021000
 8003a64:	007a1200 	.word	0x007a1200
 8003a68:	003d0900 	.word	0x003d0900

08003a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a70:	4b02      	ldr	r3, [pc, #8]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	20000020 	.word	0x20000020

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff2 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	0a1b      	lsrs	r3, r3, #8
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	0800d520 	.word	0x0800d520

08003aa8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_RCC_GetClockConfig+0x58>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCC_GetClockConfig+0x58>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_GetClockConfig+0x58>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003adc:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_RCC_GetClockConfig+0x58>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	08db      	lsrs	r3, r3, #3
 8003ae2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_GetClockConfig+0x5c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0207 	and.w	r2, r3, #7
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40022000 	.word	0x40022000

08003b08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <RCC_Delay+0x34>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <RCC_Delay+0x38>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0a5b      	lsrs	r3, r3, #9
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	fb02 f303 	mul.w	r3, r2, r3
 8003b22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b24:	bf00      	nop
  }
  while (Delay --);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	60fa      	str	r2, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f9      	bne.n	8003b24 <RCC_Delay+0x1c>
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000020 	.word	0x20000020
 8003b40:	10624dd3 	.word	0x10624dd3

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d07d      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b60:	2300      	movs	r3, #0
 8003b62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b64:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10d      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b70:	4a4c      	ldr	r2, [pc, #304]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b72:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	61d3      	str	r3, [r2, #28]
 8003b7c:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d118      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b98:	4a43      	ldr	r2, [pc, #268]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9a:	4b43      	ldr	r3, [pc, #268]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fa28 	bl	8000ff8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003baa:	e008      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bac:	f7fd fa24 	bl	8000ff8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e06d      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b3a      	ldr	r3, [pc, #232]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d02e      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d027      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bf2:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf8:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bfe:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d014      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fd f9f3 	bl	8000ff8 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fd f9ef 	bl	8000ff8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e036      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ee      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c38:	491a      	ldr	r1, [pc, #104]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	4b14      	ldr	r3, [pc, #80]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c68:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c86:	4907      	ldr	r1, [pc, #28]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	42420440 	.word	0x42420440

08003cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e041      	b.n	8003d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7fc ff24 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f000 fa64 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d001      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e03a      	b.n	8003dde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	68d2      	ldr	r2, [r2, #12]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a18      	ldr	r2, [pc, #96]	; (8003de8 <HAL_TIM_Base_Start_IT+0x98>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00e      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x58>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d009      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x58>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_TIM_Base_Start_IT+0x9c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_Base_Start_IT+0x58>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b06      	cmp	r3, #6
 8003db8:	d010      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dca:	e007      	b.n	8003ddc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40000800 	.word	0x40000800

08003df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d122      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d11b      	bne.n	8003e50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0202 	mvn.w	r2, #2
 8003e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9a4 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003e3c:	e005      	b.n	8003e4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f997 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f9a6 	bl	8004196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0204 	mvn.w	r2, #4
 8003e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f97a 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f96d 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f97c 	bl	8004196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b08      	cmp	r3, #8
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0208 	mvn.w	r2, #8
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2204      	movs	r2, #4
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f950 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f943 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f952 	bl	8004196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0210 	mvn.w	r2, #16
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2208      	movs	r2, #8
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f926 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f919 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f928 	bl	8004196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d10e      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0201 	mvn.w	r2, #1
 8003f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fc fcb6 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa6b 	bl	800447a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d10e      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d107      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8ec 	bl	80041a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d107      	bne.n	8003ffc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0220 	mvn.w	r2, #32
 8003ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa36 	bl	8004468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_TIM_ConfigClockSource+0x18>
 8004018:	2302      	movs	r3, #2
 800401a:	e0a6      	b.n	800416a <HAL_TIM_ConfigClockSource+0x166>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800403a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004042:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d067      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x120>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d80b      	bhi.n	8004070 <HAL_TIM_ConfigClockSource+0x6c>
 8004058:	2b10      	cmp	r3, #16
 800405a:	d073      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0x140>
 800405c:	2b10      	cmp	r3, #16
 800405e:	d802      	bhi.n	8004066 <HAL_TIM_ConfigClockSource+0x62>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d06f      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004064:	e078      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004066:	2b20      	cmp	r3, #32
 8004068:	d06c      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0x140>
 800406a:	2b30      	cmp	r3, #48	; 0x30
 800406c:	d06a      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800406e:	e073      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004070:	2b70      	cmp	r3, #112	; 0x70
 8004072:	d00d      	beq.n	8004090 <HAL_TIM_ConfigClockSource+0x8c>
 8004074:	2b70      	cmp	r3, #112	; 0x70
 8004076:	d804      	bhi.n	8004082 <HAL_TIM_ConfigClockSource+0x7e>
 8004078:	2b50      	cmp	r3, #80	; 0x50
 800407a:	d033      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0xe0>
 800407c:	2b60      	cmp	r3, #96	; 0x60
 800407e:	d041      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004080:	e06a      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d066      	beq.n	8004156 <HAL_TIM_ConfigClockSource+0x152>
 8004088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408c:	d017      	beq.n	80040be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800408e:	e063      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6899      	ldr	r1, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f000 f965 	bl	800436e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	609a      	str	r2, [r3, #8]
      break;
 80040bc:	e04c      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6899      	ldr	r1, [r3, #8]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f000 f94e 	bl	800436e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	6892      	ldr	r2, [r2, #8]
 80040dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e0:	609a      	str	r2, [r3, #8]
      break;
 80040e2:	e039      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	461a      	mov	r2, r3
 80040f2:	f000 f8c5 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2150      	movs	r1, #80	; 0x50
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f91c 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004102:	e029      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	461a      	mov	r2, r3
 8004112:	f000 f8e3 	bl	80042dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2160      	movs	r1, #96	; 0x60
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f90c 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004122:	e019      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	461a      	mov	r2, r3
 8004132:	f000 f8a5 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2140      	movs	r1, #64	; 0x40
 800413c:	4618      	mov	r0, r3
 800413e:	f000 f8fc 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004142:	e009      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 f8f3 	bl	800433a <TIM_ITRx_SetConfig>
        break;
 8004154:	e000      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr

08004196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b083      	sub	sp, #12
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800419e:	bf00      	nop
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bc80      	pop	{r7}
 80041b8:	4770      	bx	lr
	...

080041bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a26      	ldr	r2, [pc, #152]	; (8004278 <TIM_Base_SetConfig+0xbc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x30>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a25      	ldr	r2, [pc, #148]	; (800427c <TIM_Base_SetConfig+0xc0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d00b      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d007      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a19      	ldr	r2, [pc, #100]	; (8004278 <TIM_Base_SetConfig+0xbc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d003      	beq.n	800421e <TIM_Base_SetConfig+0x62>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a18      	ldr	r2, [pc, #96]	; (800427c <TIM_Base_SetConfig+0xc0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d108      	bne.n	8004230 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a07      	ldr	r2, [pc, #28]	; (8004274 <TIM_Base_SetConfig+0xb8>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800

08004280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0201 	bic.w	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 030a 	bic.w	r3, r3, #10
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0210 	bic.w	r2, r3, #16
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	031b      	lsls	r3, r3, #12
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	f043 0307 	orr.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	431a      	orrs	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	609a      	str	r2, [r3, #8]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e046      	b.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d009      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10c      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800442c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800448c:	b084      	sub	sp, #16
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	f107 0014 	add.w	r0, r7, #20
 800449a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	b004      	add	sp, #16
 80044aa:	4770      	bx	lr

080044ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044e4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	43db      	mvns	r3, r3
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4013      	ands	r3, r2
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004524:	b084      	sub	sp, #16
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	f107 0014 	add.w	r0, r7, #20
 8004532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	b004      	add	sp, #16
 8004562:	4770      	bx	lr

08004564 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr
	...

08004590 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004590:	b480      	push	{r7}
 8004592:	b09b      	sub	sp, #108	; 0x6c
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	78db      	ldrb	r3, [r3, #3]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d81f      	bhi.n	8004602 <USB_ActivateEndpoint+0x72>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <USB_ActivateEndpoint+0x38>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045f5 	.word	0x080045f5
 80045d0:	0800460b 	.word	0x0800460b
 80045d4:	080045e7 	.word	0x080045e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045e4:	e012      	b.n	800460c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045ea:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045f2:	e00b      	b.n	800460c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045f4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004600:	e004      	b.n	800460c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004608:	e000      	b.n	800460c <USB_ActivateEndpoint+0x7c>
      break;
 800460a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	441a      	add	r2, r3
 8004616:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800461a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462a:	b29b      	uxth	r3, r3
 800462c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004644:	b29a      	uxth	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004660:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004664:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004670:	b29b      	uxth	r3, r3
 8004672:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	7b1b      	ldrb	r3, [r3, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8153 	bne.w	8004924 <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	785b      	ldrb	r3, [r3, #1]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 808e 	beq.w	80047a4 <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65bb      	str	r3, [r7, #88]	; 0x58
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004698:	4413      	add	r3, r2
 800469a:	65bb      	str	r3, [r7, #88]	; 0x58
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	011a      	lsls	r2, r3, #4
 80046a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046aa:	657b      	str	r3, [r7, #84]	; 0x54
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	88db      	ldrh	r3, [r3, #6]
 80046b0:	085b      	lsrs	r3, r3, #1
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80046cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01d      	beq.n	8004714 <USB_ActivateEndpoint+0x184>
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	441a      	add	r2, r3
 80046fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004710:	b29b      	uxth	r3, r3
 8004712:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	78db      	ldrb	r3, [r3, #3]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d024      	beq.n	8004766 <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004732:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004736:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800473a:	f083 0320 	eor.w	r3, r3, #32
 800473e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]
 8004764:	e271      	b.n	8004c4a <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800478e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8013      	strh	r3, [r2, #0]
 80047a2:	e252      	b.n	8004c4a <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	4413      	add	r3, r2
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	011a      	lsls	r2, r3, #4
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047c6:	647b      	str	r3, [r7, #68]	; 0x44
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	88db      	ldrh	r3, [r3, #6]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	643b      	str	r3, [r7, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e8:	4413      	add	r3, r2
 80047ea:	643b      	str	r3, [r7, #64]	; 0x40
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	011a      	lsls	r2, r3, #4
 80047f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f4:	4413      	add	r3, r2
 80047f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d112      	bne.n	800482a <USB_ActivateEndpoint+0x29a>
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800480e:	b29a      	uxth	r2, r3
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004822:	b29a      	uxth	r2, r3
 8004824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e02f      	b.n	800488a <USB_ActivateEndpoint+0x2fa>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	2b3e      	cmp	r3, #62	; 0x3e
 8004830:	d813      	bhi.n	800485a <USB_ActivateEndpoint+0x2ca>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	663b      	str	r3, [r7, #96]	; 0x60
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <USB_ActivateEndpoint+0x2bc>
 8004846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004848:	3301      	adds	r3, #1
 800484a:	663b      	str	r3, [r7, #96]	; 0x60
 800484c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800484e:	b29b      	uxth	r3, r3
 8004850:	029b      	lsls	r3, r3, #10
 8004852:	b29a      	uxth	r2, r3
 8004854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e017      	b.n	800488a <USB_ActivateEndpoint+0x2fa>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	663b      	str	r3, [r7, #96]	; 0x60
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <USB_ActivateEndpoint+0x2e4>
 800486e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004870:	3b01      	subs	r3, #1
 8004872:	663b      	str	r3, [r7, #96]	; 0x60
 8004874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004876:	b29b      	uxth	r3, r3
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	b29b      	uxth	r3, r3
 800487c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004884:	b29a      	uxth	r2, r3
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004898:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800489a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01b      	beq.n	80048da <USB_ActivateEndpoint+0x34a>
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	873b      	strh	r3, [r7, #56]	; 0x38
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004900:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	441a      	add	r2, r3
 800490c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800490e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800491a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800491e:	b29b      	uxth	r3, r3
 8004920:	8013      	strh	r3, [r2, #0]
 8004922:	e192      	b.n	8004c4a <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800494c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004950:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004958:	b29b      	uxth	r3, r3
 800495a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	633b      	str	r3, [r7, #48]	; 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004966:	b29b      	uxth	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	4413      	add	r3, r2
 800496e:	633b      	str	r3, [r7, #48]	; 0x30
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	011a      	lsls	r2, r3, #4
 8004976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004978:	4413      	add	r3, r2
 800497a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	891b      	ldrh	r3, [r3, #8]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	801a      	strh	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	62bb      	str	r3, [r7, #40]	; 0x28
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	4413      	add	r3, r2
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	895b      	ldrh	r3, [r3, #10]
 80049b8:	085b      	lsrs	r3, r3, #1
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 8091 	bne.w	8004af0 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	847b      	strh	r3, [r7, #34]	; 0x22
 80049dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01b      	beq.n	8004a1e <USB_ActivateEndpoint+0x48e>
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fc:	843b      	strh	r3, [r7, #32]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	8c3b      	ldrh	r3, [r7, #32]
 8004a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	83fb      	strh	r3, [r7, #30]
 8004a2c:	8bfb      	ldrh	r3, [r7, #30]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01b      	beq.n	8004a6e <USB_ActivateEndpoint+0x4de>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	83bb      	strh	r3, [r7, #28]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	8bbb      	ldrh	r3, [r7, #28]
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	837b      	strh	r3, [r7, #26]
 8004a86:	8b7b      	ldrh	r3, [r7, #26]
 8004a88:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a8c:	837b      	strh	r3, [r7, #26]
 8004a8e:	8b7b      	ldrh	r3, [r7, #26]
 8004a90:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a94:	837b      	strh	r3, [r7, #26]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8b7b      	ldrh	r3, [r7, #26]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004acc:	833b      	strh	r3, [r7, #24]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	441a      	add	r2, r3
 8004ad8:	8b3b      	ldrh	r3, [r7, #24]
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
 8004aee:	e0ac      	b.n	8004c4a <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	82fb      	strh	r3, [r7, #22]
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <USB_ActivateEndpoint+0x5b0>
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	82bb      	strh	r3, [r7, #20]
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8abb      	ldrh	r3, [r7, #20]
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	827b      	strh	r3, [r7, #18]
 8004b4e:	8a7b      	ldrh	r3, [r7, #18]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <USB_ActivateEndpoint+0x600>
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	823b      	strh	r3, [r7, #16]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	8a3b      	ldrh	r3, [r7, #16]
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	78db      	ldrb	r3, [r3, #3]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d020      	beq.n	8004bda <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bae:	81fb      	strh	r3, [r7, #14]
 8004bb0:	89fb      	ldrh	r3, [r7, #14]
 8004bb2:	f083 0320 	eor.w	r3, r3, #32
 8004bb6:	81fb      	strh	r3, [r7, #14]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	89fb      	ldrh	r3, [r7, #14]
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
 8004bd8:	e01b      	b.n	8004c12 <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf0:	81bb      	strh	r3, [r7, #12]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	441a      	add	r2, r3
 8004bfc:	89bb      	ldrh	r3, [r7, #12]
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c28:	817b      	strh	r3, [r7, #10]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	441a      	add	r2, r3
 8004c34:	897b      	ldrh	r3, [r7, #10]
 8004c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	376c      	adds	r7, #108	; 0x6c
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr

08004c58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b08d      	sub	sp, #52	; 0x34
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	7b1b      	ldrb	r3, [r3, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 808e 	bne.w	8004d88 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d044      	beq.n	8004cfe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <USB_DeactivateEndpoint+0x6c>
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cda:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]
 8004cfc:	e192      	b.n	8005024 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <USB_DeactivateEndpoint+0xf6>
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
 8004d86:	e14d      	b.n	8005024 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 80a5 	bne.w	8004edc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01b      	beq.n	8004de2 <USB_DeactivateEndpoint+0x18a>
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc0:	843b      	strh	r3, [r7, #32]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8c3b      	ldrh	r3, [r7, #32]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	881b      	ldrh	r3, [r3, #0]
 8004dee:	83fb      	strh	r3, [r7, #30]
 8004df0:	8bfb      	ldrh	r3, [r7, #30]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01b      	beq.n	8004e32 <USB_DeactivateEndpoint+0x1da>
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	83bb      	strh	r3, [r7, #28]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	8bbb      	ldrh	r3, [r7, #28]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	837b      	strh	r3, [r7, #26]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e80:	833b      	strh	r3, [r7, #24]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8b3b      	ldrh	r3, [r7, #24]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb8:	82fb      	strh	r3, [r7, #22]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	8afb      	ldrh	r3, [r7, #22]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
 8004eda:	e0a3      	b.n	8005024 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	82bb      	strh	r3, [r7, #20]
 8004eea:	8abb      	ldrh	r3, [r7, #20]
 8004eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01b      	beq.n	8004f2c <USB_DeactivateEndpoint+0x2d4>
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	827b      	strh	r3, [r7, #18]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	8a7b      	ldrh	r3, [r7, #18]
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	823b      	strh	r3, [r7, #16]
 8004f3a:	8a3b      	ldrh	r3, [r7, #16]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01b      	beq.n	8004f7c <USB_DeactivateEndpoint+0x324>
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	81fb      	strh	r3, [r7, #14]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	89fb      	ldrh	r3, [r7, #14]
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	81bb      	strh	r3, [r7, #12]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	89bb      	ldrh	r3, [r7, #12]
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	817b      	strh	r3, [r7, #10]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	813b      	strh	r3, [r7, #8]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	893b      	ldrh	r3, [r7, #8]
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3734      	adds	r7, #52	; 0x34
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0ce      	sub	sp, #312	; 0x138
 8005034:	af00      	add	r7, sp, #0
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	6018      	str	r0, [r3, #0]
 800503a:	463b      	mov	r3, r7
 800503c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800503e:	463b      	mov	r3, r7
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b01      	cmp	r3, #1
 8005046:	f040 873e 	bne.w	8005ec6 <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800504a:	463b      	mov	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699a      	ldr	r2, [r3, #24]
 8005050:	463b      	mov	r3, r7
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d905      	bls.n	8005066 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800505a:	463b      	mov	r3, r7
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005064:	e004      	b.n	8005070 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	7b1b      	ldrb	r3, [r3, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d12e      	bne.n	80050d8 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6959      	ldr	r1, [r3, #20]
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	88da      	ldrh	r2, [r3, #6]
 8005086:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800508a:	b29b      	uxth	r3, r3
 800508c:	1d38      	adds	r0, r7, #4
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	f001 fc13 	bl	80068ba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ac:	4413      	add	r3, r2
 80050ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	011a      	lsls	r2, r3, #4
 80050ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050be:	4413      	add	r3, r2
 80050c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	f000 bec2 	b.w	8005e5c <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	78db      	ldrb	r3, [r3, #3]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	f040 836a 	bne.w	80057b8 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050e4:	463b      	mov	r3, r7
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	463b      	mov	r3, r7
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f240 830e 	bls.w	8005712 <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80050f6:	1d3b      	adds	r3, r7, #4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005110:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	463b      	mov	r3, r7
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005136:	b29b      	uxth	r3, r3
 8005138:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800513a:	463b      	mov	r3, r7
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6a1a      	ldr	r2, [r3, #32]
 8005140:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	463b      	mov	r3, r7
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 817c 	beq.w	8005460 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	785b      	ldrb	r3, [r3, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d16f      	bne.n	800525a <USB_EPStartXfer+0x22a>
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005182:	1d3b      	adds	r3, r7, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518a:	b29b      	uxth	r3, r3
 800518c:	461a      	mov	r2, r3
 800518e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005192:	4413      	add	r3, r2
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	011a      	lsls	r2, r3, #4
 80051a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051a4:	4413      	add	r3, r2
 80051a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d116      	bne.n	80051e4 <USB_EPStartXfer+0x1b4>
 80051b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e05b      	b.n	800529c <USB_EPStartXfer+0x26c>
 80051e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051e8:	2b3e      	cmp	r3, #62	; 0x3e
 80051ea:	d818      	bhi.n	800521e <USB_EPStartXfer+0x1ee>
 80051ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80051f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <USB_EPStartXfer+0x1dc>
 8005202:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005206:	3301      	adds	r3, #1
 8005208:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800520c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29a      	uxth	r2, r3
 8005216:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800521a:	801a      	strh	r2, [r3, #0]
 800521c:	e03e      	b.n	800529c <USB_EPStartXfer+0x26c>
 800521e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005222:	095b      	lsrs	r3, r3, #5
 8005224:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005228:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <USB_EPStartXfer+0x20e>
 8005234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005238:	3b01      	subs	r3, #1
 800523a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800523e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29a      	uxth	r2, r3
 8005252:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e020      	b.n	800529c <USB_EPStartXfer+0x26c>
 800525a:	463b      	mov	r3, r7
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11b      	bne.n	800529c <USB_EPStartXfer+0x26c>
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526c:	b29b      	uxth	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005274:	4413      	add	r3, r2
 8005276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800527a:	463b      	mov	r3, r7
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	011a      	lsls	r2, r3, #4
 8005282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005286:	4413      	add	r3, r2
 8005288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800528c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005290:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005294:	b29a      	uxth	r2, r3
 8005296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800529a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800529c:	463b      	mov	r3, r7
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	895b      	ldrh	r3, [r3, #10]
 80052a2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a6:	463b      	mov	r3, r7
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6959      	ldr	r1, [r3, #20]
 80052ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80052b6:	1d38      	adds	r0, r7, #4
 80052b8:	6800      	ldr	r0, [r0, #0]
 80052ba:	f001 fafe 	bl	80068ba <USB_WritePMA>
            ep->xfer_buff += len;
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695a      	ldr	r2, [r3, #20]
 80052c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052c8:	441a      	add	r2, r3
 80052ca:	463b      	mov	r3, r7
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a1a      	ldr	r2, [r3, #32]
 80052d6:	463b      	mov	r3, r7
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d909      	bls.n	80052f4 <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 80052e0:	463b      	mov	r3, r7
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	463b      	mov	r3, r7
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	621a      	str	r2, [r3, #32]
 80052f2:	e008      	b.n	8005306 <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 80052f4:	463b      	mov	r3, r7
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2200      	movs	r2, #0
 8005304:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005306:	463b      	mov	r3, r7
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d16f      	bne.n	80053f0 <USB_EPStartXfer+0x3c0>
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005318:	1d3b      	adds	r3, r7, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005328:	4413      	add	r3, r2
 800532a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800532e:	463b      	mov	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	011a      	lsls	r2, r3, #4
 8005336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800533a:	4413      	add	r3, r2
 800533c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005344:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005348:	2b00      	cmp	r3, #0
 800534a:	d116      	bne.n	800537a <USB_EPStartXfer+0x34a>
 800534c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005358:	b29a      	uxth	r2, r3
 800535a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b29b      	uxth	r3, r3
 8005368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800536c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005370:	b29a      	uxth	r2, r3
 8005372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005376:	801a      	strh	r2, [r3, #0]
 8005378:	e05f      	b.n	800543a <USB_EPStartXfer+0x40a>
 800537a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800537e:	2b3e      	cmp	r3, #62	; 0x3e
 8005380:	d818      	bhi.n	80053b4 <USB_EPStartXfer+0x384>
 8005382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800538c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <USB_EPStartXfer+0x372>
 8005398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539c:	3301      	adds	r3, #1
 800539e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	029b      	lsls	r3, r3, #10
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e042      	b.n	800543a <USB_EPStartXfer+0x40a>
 80053b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053c2:	f003 031f 	and.w	r3, r3, #31
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <USB_EPStartXfer+0x3a4>
 80053ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ce:	3b01      	subs	r3, #1
 80053d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d8:	b29b      	uxth	r3, r3
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	e024      	b.n	800543a <USB_EPStartXfer+0x40a>
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d11f      	bne.n	800543a <USB_EPStartXfer+0x40a>
 80053fa:	1d3b      	adds	r3, r7, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540a:	b29b      	uxth	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005412:	4413      	add	r3, r2
 8005414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	011a      	lsls	r2, r3, #4
 8005420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005424:	4413      	add	r3, r2
 8005426:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800542a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800542e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005432:	b29a      	uxth	r2, r3
 8005434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800543a:	463b      	mov	r3, r7
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	891b      	ldrh	r3, [r3, #8]
 8005440:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6959      	ldr	r1, [r3, #20]
 800544a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800544e:	b29b      	uxth	r3, r3
 8005450:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005454:	1d38      	adds	r0, r7, #4
 8005456:	6800      	ldr	r0, [r0, #0]
 8005458:	f001 fa2f 	bl	80068ba <USB_WritePMA>
 800545c:	f000 bcfe 	b.w	8005e5c <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005460:	463b      	mov	r3, r7
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d164      	bne.n	8005534 <USB_EPStartXfer+0x504>
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800547e:	4413      	add	r3, r2
 8005480:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005482:	463b      	mov	r3, r7
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800548c:	4413      	add	r3, r2
 800548e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005492:	67bb      	str	r3, [r7, #120]	; 0x78
 8005494:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005498:	2b00      	cmp	r3, #0
 800549a:	d112      	bne.n	80054c2 <USB_EPStartXfer+0x492>
 800549c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e057      	b.n	8005572 <USB_EPStartXfer+0x542>
 80054c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054c6:	2b3e      	cmp	r3, #62	; 0x3e
 80054c8:	d817      	bhi.n	80054fa <USB_EPStartXfer+0x4ca>
 80054ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <USB_EPStartXfer+0x4ba>
 80054e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054e4:	3301      	adds	r3, #1
 80054e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e03b      	b.n	8005572 <USB_EPStartXfer+0x542>
 80054fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005504:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <USB_EPStartXfer+0x4ea>
 8005510:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005514:	3b01      	subs	r3, #1
 8005516:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800551a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e01e      	b.n	8005572 <USB_EPStartXfer+0x542>
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d119      	bne.n	8005572 <USB_EPStartXfer+0x542>
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	677b      	str	r3, [r7, #116]	; 0x74
 8005544:	1d3b      	adds	r3, r7, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554c:	b29b      	uxth	r3, r3
 800554e:	461a      	mov	r2, r3
 8005550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005552:	4413      	add	r3, r2
 8005554:	677b      	str	r3, [r7, #116]	; 0x74
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005560:	4413      	add	r3, r2
 8005562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005566:	673b      	str	r3, [r7, #112]	; 0x70
 8005568:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800556c:	b29a      	uxth	r2, r3
 800556e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005570:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005572:	463b      	mov	r3, r7
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	891b      	ldrh	r3, [r3, #8]
 8005578:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6959      	ldr	r1, [r3, #20]
 8005582:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005586:	b29b      	uxth	r3, r3
 8005588:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800558c:	1d38      	adds	r0, r7, #4
 800558e:	6800      	ldr	r0, [r0, #0]
 8005590:	f001 f993 	bl	80068ba <USB_WritePMA>
            ep->xfer_buff += len;
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800559e:	441a      	add	r2, r3
 80055a0:	463b      	mov	r3, r7
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055a6:	463b      	mov	r3, r7
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	463b      	mov	r3, r7
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d909      	bls.n	80055ca <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 80055b6:	463b      	mov	r3, r7
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055c0:	1ad2      	subs	r2, r2, r3
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	621a      	str	r2, [r3, #32]
 80055c8:	e008      	b.n	80055dc <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 80055ca:	463b      	mov	r3, r7
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2200      	movs	r2, #0
 80055da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e2:	463b      	mov	r3, r7
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	785b      	ldrb	r3, [r3, #1]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d164      	bne.n	80056b6 <USB_EPStartXfer+0x686>
 80055ec:	1d3b      	adds	r3, r7, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005600:	4413      	add	r3, r2
 8005602:	66bb      	str	r3, [r7, #104]	; 0x68
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	011a      	lsls	r2, r3, #4
 800560c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800560e:	4413      	add	r3, r2
 8005610:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005614:	667b      	str	r3, [r7, #100]	; 0x64
 8005616:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800561a:	2b00      	cmp	r3, #0
 800561c:	d112      	bne.n	8005644 <USB_EPStartXfer+0x614>
 800561e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005628:	b29a      	uxth	r2, r3
 800562a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562c:	801a      	strh	r2, [r3, #0]
 800562e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29b      	uxth	r3, r3
 8005634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563c:	b29a      	uxth	r2, r3
 800563e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e054      	b.n	80056ee <USB_EPStartXfer+0x6be>
 8005644:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005648:	2b3e      	cmp	r3, #62	; 0x3e
 800564a:	d817      	bhi.n	800567c <USB_EPStartXfer+0x64c>
 800564c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005656:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <USB_EPStartXfer+0x63c>
 8005662:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005666:	3301      	adds	r3, #1
 8005668:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800566c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005670:	b29b      	uxth	r3, r3
 8005672:	029b      	lsls	r3, r3, #10
 8005674:	b29a      	uxth	r2, r3
 8005676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e038      	b.n	80056ee <USB_EPStartXfer+0x6be>
 800567c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005686:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2b00      	cmp	r3, #0
 8005690:	d104      	bne.n	800569c <USB_EPStartXfer+0x66c>
 8005692:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005696:	3b01      	subs	r3, #1
 8005698:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800569c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	029b      	lsls	r3, r3, #10
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	e01b      	b.n	80056ee <USB_EPStartXfer+0x6be>
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	785b      	ldrb	r3, [r3, #1]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d116      	bne.n	80056ee <USB_EPStartXfer+0x6be>
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ce:	4413      	add	r3, r2
 80056d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d2:	463b      	mov	r3, r7
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	011a      	lsls	r2, r3, #4
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	4413      	add	r3, r2
 80056de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e2:	663b      	str	r3, [r7, #96]	; 0x60
 80056e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056ee:	463b      	mov	r3, r7
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	895b      	ldrh	r3, [r3, #10]
 80056f4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6959      	ldr	r1, [r3, #20]
 80056fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005702:	b29b      	uxth	r3, r3
 8005704:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005708:	1d38      	adds	r0, r7, #4
 800570a:	6800      	ldr	r0, [r0, #0]
 800570c:	f001 f8d5 	bl	80068ba <USB_WritePMA>
 8005710:	e3a4      	b.n	8005e5c <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	441a      	add	r2, r3
 8005748:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800574c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575c:	b29b      	uxth	r3, r3
 800575e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	65bb      	str	r3, [r7, #88]	; 0x58
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005774:	4413      	add	r3, r2
 8005776:	65bb      	str	r3, [r7, #88]	; 0x58
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	011a      	lsls	r2, r3, #4
 8005780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005782:	4413      	add	r3, r2
 8005784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005788:	657b      	str	r3, [r7, #84]	; 0x54
 800578a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800578e:	b29a      	uxth	r2, r3
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005794:	463b      	mov	r3, r7
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	891b      	ldrh	r3, [r3, #8]
 800579a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6959      	ldr	r1, [r3, #20]
 80057a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80057ae:	1d38      	adds	r0, r7, #4
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f001 f882 	bl	80068ba <USB_WritePMA>
 80057b6:	e351      	b.n	8005e5c <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	441a      	add	r2, r3
 80057e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057fc:	463b      	mov	r3, r7
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6a1a      	ldr	r2, [r3, #32]
 8005802:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800580e:	1d3b      	adds	r3, r7, #4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	463b      	mov	r3, r7
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8178 	beq.w	8005b1a <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d164      	bne.n	8005904 <USB_EPStartXfer+0x8d4>
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584e:	4413      	add	r3, r2
 8005850:	64bb      	str	r3, [r7, #72]	; 0x48
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585c:	4413      	add	r3, r2
 800585e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005862:	647b      	str	r3, [r7, #68]	; 0x44
 8005864:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005868:	2b00      	cmp	r3, #0
 800586a:	d112      	bne.n	8005892 <USB_EPStartXfer+0x862>
 800586c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005876:	b29a      	uxth	r2, r3
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	b29b      	uxth	r3, r3
 8005882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588a:	b29a      	uxth	r2, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e054      	b.n	800593c <USB_EPStartXfer+0x90c>
 8005892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005896:	2b3e      	cmp	r3, #62	; 0x3e
 8005898:	d817      	bhi.n	80058ca <USB_EPStartXfer+0x89a>
 800589a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <USB_EPStartXfer+0x88a>
 80058b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058b4:	3301      	adds	r3, #1
 80058b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c6:	801a      	strh	r2, [r3, #0]
 80058c8:	e038      	b.n	800593c <USB_EPStartXfer+0x90c>
 80058ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <USB_EPStartXfer+0x8ba>
 80058e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058e4:	3b01      	subs	r3, #1
 80058e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e01b      	b.n	800593c <USB_EPStartXfer+0x90c>
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	785b      	ldrb	r3, [r3, #1]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d116      	bne.n	800593c <USB_EPStartXfer+0x90c>
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591c:	4413      	add	r3, r2
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	011a      	lsls	r2, r3, #4
 8005928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800592a:	4413      	add	r3, r2
 800592c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
 8005932:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005936:	b29a      	uxth	r2, r3
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	895b      	ldrh	r3, [r3, #10]
 8005942:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005946:	463b      	mov	r3, r7
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6959      	ldr	r1, [r3, #20]
 800594c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005950:	b29b      	uxth	r3, r3
 8005952:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005956:	1d38      	adds	r0, r7, #4
 8005958:	6800      	ldr	r0, [r0, #0]
 800595a:	f000 ffae 	bl	80068ba <USB_WritePMA>
          ep->xfer_buff += len;
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005968:	441a      	add	r2, r3
 800596a:	463b      	mov	r3, r7
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d909      	bls.n	8005994 <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6a1a      	ldr	r2, [r3, #32]
 8005986:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	463b      	mov	r3, r7
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	621a      	str	r2, [r3, #32]
 8005992:	e008      	b.n	80059a6 <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2200      	movs	r2, #0
 80059a4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80059a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8256 	beq.w	8005e5c <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059b0:	463b      	mov	r3, r7
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d172      	bne.n	8005aa0 <USB_EPStartXfer+0xa70>
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	4413      	add	r3, r2
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d2:	463b      	mov	r3, r7
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	011a      	lsls	r2, r3, #4
 80059da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059dc:	4413      	add	r3, r2
 80059de:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d11a      	bne.n	8005a26 <USB_EPStartXfer+0x9f6>
 80059f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	e067      	b.n	8005af6 <USB_EPStartXfer+0xac6>
 8005a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2c:	d819      	bhi.n	8005a62 <USB_EPStartXfer+0xa32>
 8005a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a32:	085b      	lsrs	r3, r3, #1
 8005a34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <USB_EPStartXfer+0xa1e>
 8005a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	029b      	lsls	r3, r3, #10
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e049      	b.n	8005af6 <USB_EPStartXfer+0xac6>
 8005a62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <USB_EPStartXfer+0xa52>
 8005a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	029b      	lsls	r3, r3, #10
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	e02a      	b.n	8005af6 <USB_EPStartXfer+0xac6>
 8005aa0:	463b      	mov	r3, r7
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d125      	bne.n	8005af6 <USB_EPStartXfer+0xac6>
 8005aaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005aae:	1d3a      	adds	r2, r7, #4
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ac4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	440a      	add	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	463b      	mov	r3, r7
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ae2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	891b      	ldrh	r3, [r3, #8]
 8005afc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6959      	ldr	r1, [r3, #20]
 8005b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005b10:	1d38      	adds	r0, r7, #4
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	f000 fed1 	bl	80068ba <USB_WritePMA>
 8005b18:	e1a0      	b.n	8005e5c <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d17a      	bne.n	8005c1a <USB_EPStartXfer+0xbea>
 8005b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b28:	1d3a      	adds	r2, r7, #4
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	1d3b      	adds	r3, r7, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	4619      	mov	r1, r3
 8005b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005b42:	6812      	ldr	r2, [r2, #0]
 8005b44:	440a      	add	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	463b      	mov	r3, r7
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	011a      	lsls	r2, r3, #4
 8005b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4413      	add	r3, r2
 8005b58:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d11a      	bne.n	8005ba0 <USB_EPStartXfer+0xb70>
 8005b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	e067      	b.n	8005c70 <USB_EPStartXfer+0xc40>
 8005ba0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ba4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba6:	d819      	bhi.n	8005bdc <USB_EPStartXfer+0xbac>
 8005ba8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bac:	085b      	lsrs	r3, r3, #1
 8005bae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <USB_EPStartXfer+0xb98>
 8005bbe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bc8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	029b      	lsls	r3, r3, #10
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e049      	b.n	8005c70 <USB_EPStartXfer+0xc40>
 8005bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005be6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <USB_EPStartXfer+0xbcc>
 8005bf2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	029b      	lsls	r3, r3, #10
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	e02a      	b.n	8005c70 <USB_EPStartXfer+0xc40>
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d125      	bne.n	8005c70 <USB_EPStartXfer+0xc40>
 8005c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c28:	1d3a      	adds	r2, r7, #4
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	440a      	add	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	011a      	lsls	r2, r3, #4
 8005c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4413      	add	r3, r2
 8005c58:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c5c:	f107 0320 	add.w	r3, r7, #32
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	f107 0320 	add.w	r3, r7, #32
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	891b      	ldrh	r3, [r3, #8]
 8005c76:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6959      	ldr	r1, [r3, #20]
 8005c80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005c8a:	1d38      	adds	r0, r7, #4
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f000 fe14 	bl	80068ba <USB_WritePMA>
          ep->xfer_buff += len;
 8005c92:	463b      	mov	r3, r7
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c9c:	441a      	add	r2, r3
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a1a      	ldr	r2, [r3, #32]
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d909      	bls.n	8005cc8 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6a1a      	ldr	r2, [r3, #32]
 8005cba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	621a      	str	r2, [r3, #32]
 8005cc6:	e008      	b.n	8005cda <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cc8:	463b      	mov	r3, r7
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005cda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80bc 	beq.w	8005e5c <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ce4:	f107 031c 	add.w	r3, r7, #28
 8005ce8:	1d3a      	adds	r2, r7, #4
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	463b      	mov	r3, r7
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d17a      	bne.n	8005dee <USB_EPStartXfer+0xdbe>
 8005cf8:	f107 0318 	add.w	r3, r7, #24
 8005cfc:	1d3a      	adds	r2, r7, #4
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f107 0318 	add.w	r3, r7, #24
 8005d12:	f107 0218 	add.w	r2, r7, #24
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	440a      	add	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	011a      	lsls	r2, r3, #4
 8005d24:	f107 0318 	add.w	r3, r7, #24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d11a      	bne.n	8005d74 <USB_EPStartXfer+0xd44>
 8005d3e:	f107 0314 	add.w	r3, r7, #20
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	f107 0314 	add.w	r3, r7, #20
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	f107 0314 	add.w	r3, r7, #20
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	f107 0314 	add.w	r3, r7, #20
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	e062      	b.n	8005e3a <USB_EPStartXfer+0xe0a>
 8005d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d78:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7a:	d819      	bhi.n	8005db0 <USB_EPStartXfer+0xd80>
 8005d7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d80:	085b      	lsrs	r3, r3, #1
 8005d82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <USB_EPStartXfer+0xd6c>
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d96:	3301      	adds	r3, #1
 8005d98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	029b      	lsls	r3, r3, #10
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e044      	b.n	8005e3a <USB_EPStartXfer+0xe0a>
 8005db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <USB_EPStartXfer+0xda0>
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	f107 0314 	add.w	r3, r7, #20
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e025      	b.n	8005e3a <USB_EPStartXfer+0xe0a>
 8005dee:	463b      	mov	r3, r7
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d120      	bne.n	8005e3a <USB_EPStartXfer+0xe0a>
 8005df8:	1d3b      	adds	r3, r7, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	4619      	mov	r1, r3
 8005e04:	f107 031c 	add.w	r3, r7, #28
 8005e08:	f107 021c 	add.w	r2, r7, #28
 8005e0c:	6812      	ldr	r2, [r2, #0]
 8005e0e:	440a      	add	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	463b      	mov	r3, r7
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	011a      	lsls	r2, r3, #4
 8005e1a:	f107 031c 	add.w	r3, r7, #28
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4413      	add	r3, r2
 8005e22:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e26:	f107 0310 	add.w	r3, r7, #16
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	f107 0310 	add.w	r3, r7, #16
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	895b      	ldrh	r3, [r3, #10]
 8005e40:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e44:	463b      	mov	r3, r7
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6959      	ldr	r1, [r3, #20]
 8005e4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005e54:	1d38      	adds	r0, r7, #4
 8005e56:	6800      	ldr	r0, [r0, #0]
 8005e58:	f000 fd2f 	bl	80068ba <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f107 020e 	add.w	r2, r7, #14
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7a:	8013      	strh	r3, [r2, #0]
 8005e7c:	f107 030e 	add.w	r3, r7, #14
 8005e80:	f107 020e 	add.w	r2, r7, #14
 8005e84:	8812      	ldrh	r2, [r2, #0]
 8005e86:	f082 0210 	eor.w	r2, r2, #16
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	f107 030e 	add.w	r3, r7, #14
 8005e90:	f107 020e 	add.w	r2, r7, #14
 8005e94:	8812      	ldrh	r2, [r2, #0]
 8005e96:	f082 0220 	eor.w	r2, r2, #32
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	f107 030e 	add.w	r3, r7, #14
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]
 8005ec4:	e3b5      	b.n	8006632 <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	7b1b      	ldrb	r3, [r3, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 8090 	bne.w	8005ff2 <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	463b      	mov	r3, r7
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d90e      	bls.n	8005f00 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ef6:	1ad2      	subs	r2, r2, r3
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	619a      	str	r2, [r3, #24]
 8005efe:	e008      	b.n	8005f12 <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f30:	463b      	mov	r3, r7
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	011a      	lsls	r2, r3, #4
 8005f38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d116      	bne.n	8005f7c <USB_EPStartXfer+0xf4c>
 8005f4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f60:	801a      	strh	r2, [r3, #0]
 8005f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	e32c      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
 8005f7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f80:	2b3e      	cmp	r3, #62	; 0x3e
 8005f82:	d818      	bhi.n	8005fb6 <USB_EPStartXfer+0xf86>
 8005f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <USB_EPStartXfer+0xf74>
 8005f9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fa4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	029b      	lsls	r3, r3, #10
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e30f      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
 8005fb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d104      	bne.n	8005fd6 <USB_EPStartXfer+0xfa6>
 8005fcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	029b      	lsls	r3, r3, #10
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	e2f1      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	f040 818f 	bne.w	800631c <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ffe:	463b      	mov	r3, r7
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d175      	bne.n	80060f4 <USB_EPStartXfer+0x10c4>
 8006008:	1d3b      	adds	r3, r7, #4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006020:	4413      	add	r3, r2
 8006022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	011a      	lsls	r2, r3, #4
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006032:	4413      	add	r3, r2
 8006034:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d116      	bne.n	8006074 <USB_EPStartXfer+0x1044>
 8006046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006052:	b29a      	uxth	r2, r3
 8006054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e065      	b.n	8006140 <USB_EPStartXfer+0x1110>
 8006074:	463b      	mov	r3, r7
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b3e      	cmp	r3, #62	; 0x3e
 800607c:	d81a      	bhi.n	80060b4 <USB_EPStartXfer+0x1084>
 800607e:	463b      	mov	r3, r7
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800608a:	463b      	mov	r3, r7
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <USB_EPStartXfer+0x1072>
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609c:	3301      	adds	r3, #1
 800609e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e045      	b.n	8006140 <USB_EPStartXfer+0x1110>
 80060b4:	463b      	mov	r3, r7
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060c0:	463b      	mov	r3, r7
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <USB_EPStartXfer+0x10a8>
 80060ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d2:	3b01      	subs	r3, #1
 80060d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060dc:	b29b      	uxth	r3, r3
 80060de:	029b      	lsls	r3, r3, #10
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e025      	b.n	8006140 <USB_EPStartXfer+0x1110>
 80060f4:	463b      	mov	r3, r7
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d120      	bne.n	8006140 <USB_EPStartXfer+0x1110>
 80060fe:	1d3b      	adds	r3, r7, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800610e:	b29b      	uxth	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006116:	4413      	add	r3, r2
 8006118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	011a      	lsls	r2, r3, #4
 8006124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006128:	4413      	add	r3, r2
 800612a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800612e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	b29a      	uxth	r2, r3
 800613a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	1d3b      	adds	r3, r7, #4
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d175      	bne.n	800623e <USB_EPStartXfer+0x120e>
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800616a:	4413      	add	r3, r2
 800616c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	011a      	lsls	r2, r3, #4
 8006178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800617c:	4413      	add	r3, r2
 800617e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d116      	bne.n	80061be <USB_EPStartXfer+0x118e>
 8006190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800619c:	b29a      	uxth	r2, r3
 800619e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	e061      	b.n	8006282 <USB_EPStartXfer+0x1252>
 80061be:	463b      	mov	r3, r7
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b3e      	cmp	r3, #62	; 0x3e
 80061c6:	d81a      	bhi.n	80061fe <USB_EPStartXfer+0x11ce>
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061d4:	463b      	mov	r3, r7
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <USB_EPStartXfer+0x11bc>
 80061e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061e6:	3301      	adds	r3, #1
 80061e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	029b      	lsls	r3, r3, #10
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e041      	b.n	8006282 <USB_EPStartXfer+0x1252>
 80061fe:	463b      	mov	r3, r7
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800620a:	463b      	mov	r3, r7
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <USB_EPStartXfer+0x11f2>
 8006218:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800621c:	3b01      	subs	r3, #1
 800621e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006222:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800623a:	801a      	strh	r2, [r3, #0]
 800623c:	e021      	b.n	8006282 <USB_EPStartXfer+0x1252>
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d11c      	bne.n	8006282 <USB_EPStartXfer+0x1252>
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006258:	4413      	add	r3, r2
 800625a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800625e:	463b      	mov	r3, r7
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	011a      	lsls	r2, r3, #4
 8006266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800626a:	4413      	add	r3, r2
 800626c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006280:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 81a4 	beq.w	80065d6 <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <USB_EPStartXfer+0x128a>
 80062ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10d      	bne.n	80062d6 <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 8187 	bne.w	80065d6 <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 8180 	bne.w	80065d6 <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80062d6:	1d3b      	adds	r3, r7, #4
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	463b      	mov	r3, r7
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f0:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	463b      	mov	r3, r7
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	441a      	add	r2, r3
 8006302:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8006306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800630a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006312:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
 800631a:	e15c      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	2b01      	cmp	r3, #1
 8006324:	f040 8155 	bne.w	80065d2 <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699a      	ldr	r2, [r3, #24]
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	429a      	cmp	r2, r3
 8006336:	d90e      	bls.n	8006356 <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800634c:	1ad2      	subs	r2, r2, r3
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	619a      	str	r2, [r3, #24]
 8006354:	e008      	b.n	8006368 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2200      	movs	r2, #0
 8006366:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006368:	463b      	mov	r3, r7
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d16f      	bne.n	8006452 <USB_EPStartXfer+0x1422>
 8006372:	1d3b      	adds	r3, r7, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800637a:	1d3b      	adds	r3, r7, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006382:	b29b      	uxth	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800638a:	4413      	add	r3, r2
 800638c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	011a      	lsls	r2, r3, #4
 8006398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639c:	4413      	add	r3, r2
 800639e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d116      	bne.n	80063dc <USB_EPStartXfer+0x13ac>
 80063ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e05f      	b.n	800649c <USB_EPStartXfer+0x146c>
 80063dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063e0:	2b3e      	cmp	r3, #62	; 0x3e
 80063e2:	d818      	bhi.n	8006416 <USB_EPStartXfer+0x13e6>
 80063e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <USB_EPStartXfer+0x13d4>
 80063fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fe:	3301      	adds	r3, #1
 8006400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006404:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006408:	b29b      	uxth	r3, r3
 800640a:	029b      	lsls	r3, r3, #10
 800640c:	b29a      	uxth	r2, r3
 800640e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e042      	b.n	800649c <USB_EPStartXfer+0x146c>
 8006416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006420:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006424:	f003 031f 	and.w	r3, r3, #31
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <USB_EPStartXfer+0x1406>
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006430:	3b01      	subs	r3, #1
 8006432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643a:	b29b      	uxth	r3, r3
 800643c:	029b      	lsls	r3, r3, #10
 800643e:	b29b      	uxth	r3, r3
 8006440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006448:	b29a      	uxth	r2, r3
 800644a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800644e:	801a      	strh	r2, [r3, #0]
 8006450:	e024      	b.n	800649c <USB_EPStartXfer+0x146c>
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d11f      	bne.n	800649c <USB_EPStartXfer+0x146c>
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646c:	b29b      	uxth	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	4413      	add	r3, r2
 8006476:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	011a      	lsls	r2, r3, #4
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006486:	4413      	add	r3, r2
 8006488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800648c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006490:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006494:	b29a      	uxth	r2, r3
 8006496:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800649a:	801a      	strh	r2, [r3, #0]
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064a4:	463b      	mov	r3, r7
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d16f      	bne.n	800658e <USB_EPStartXfer+0x155e>
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064b6:	1d3b      	adds	r3, r7, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064be:	b29b      	uxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064c6:	4413      	add	r3, r2
 80064c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	011a      	lsls	r2, r3, #4
 80064d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064d8:	4413      	add	r3, r2
 80064da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d116      	bne.n	8006518 <USB_EPStartXfer+0x14e8>
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006502:	881b      	ldrh	r3, [r3, #0]
 8006504:	b29b      	uxth	r3, r3
 8006506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800650a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800650e:	b29a      	uxth	r2, r3
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	801a      	strh	r2, [r3, #0]
 8006516:	e05e      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
 8006518:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800651c:	2b3e      	cmp	r3, #62	; 0x3e
 800651e:	d818      	bhi.n	8006552 <USB_EPStartXfer+0x1522>
 8006520:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006524:	085b      	lsrs	r3, r3, #1
 8006526:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800652a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <USB_EPStartXfer+0x1510>
 8006536:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800653a:	3301      	adds	r3, #1
 800653c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006540:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29a      	uxth	r2, r3
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	801a      	strh	r2, [r3, #0]
 8006550:	e041      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
 8006552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800655c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <USB_EPStartXfer+0x1542>
 8006568:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800656c:	3b01      	subs	r3, #1
 800656e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006572:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006576:	b29b      	uxth	r3, r3
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	b29b      	uxth	r3, r3
 800657c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	e023      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d11e      	bne.n	80065d6 <USB_EPStartXfer+0x15a6>
 8006598:	1d3b      	adds	r3, r7, #4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065a8:	4413      	add	r3, r2
 80065aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065ae:	463b      	mov	r3, r7
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065ba:	4413      	add	r3, r2
 80065bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e001      	b.n	80065d6 <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e02e      	b.n	8006634 <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80065f4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80065f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065fc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006600:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006604:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006608:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	441a      	add	r2, r3
 800661a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800661e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800662a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800662e:	b29b      	uxth	r3, r3
 8006630:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d020      	beq.n	8006692 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	b29b      	uxth	r3, r3
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006666:	81fb      	strh	r3, [r7, #14]
 8006668:	89fb      	ldrh	r3, [r7, #14]
 800666a:	f083 0310 	eor.w	r3, r3, #16
 800666e:	81fb      	strh	r3, [r7, #14]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	89fb      	ldrh	r3, [r7, #14]
 800667c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29b      	uxth	r3, r3
 800668e:	8013      	strh	r3, [r2, #0]
 8006690:	e01f      	b.n	80066d2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	81bb      	strh	r3, [r7, #12]
 80066aa:	89bb      	ldrh	r3, [r7, #12]
 80066ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066b0:	81bb      	strh	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	441a      	add	r2, r3
 80066bc:	89bb      	ldrh	r3, [r7, #12]
 80066be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066de:	b480      	push	{r7}
 80066e0:	b087      	sub	sp, #28
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	7b1b      	ldrb	r3, [r3, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 809d 	bne.w	800682c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d04c      	beq.n	8006794 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	82fb      	strh	r3, [r7, #22]
 8006708:	8afb      	ldrh	r3, [r7, #22]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d01b      	beq.n	800674a <USB_EPClearStall+0x6c>
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006728:	82bb      	strh	r3, [r7, #20]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	8abb      	ldrh	r3, [r7, #20]
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006742:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	78db      	ldrb	r3, [r3, #3]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d06c      	beq.n	800682c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006768:	827b      	strh	r3, [r7, #18]
 800676a:	8a7b      	ldrh	r3, [r7, #18]
 800676c:	f083 0320 	eor.w	r3, r3, #32
 8006770:	827b      	strh	r3, [r7, #18]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	441a      	add	r2, r3
 800677c:	8a7b      	ldrh	r3, [r7, #18]
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]
 8006792:	e04b      	b.n	800682c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	823b      	strh	r3, [r7, #16]
 80067a2:	8a3b      	ldrh	r3, [r7, #16]
 80067a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01b      	beq.n	80067e4 <USB_EPClearStall+0x106>
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	81fb      	strh	r3, [r7, #14]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	441a      	add	r2, r3
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	81bb      	strh	r3, [r7, #12]
 80067fc:	89bb      	ldrh	r3, [r7, #12]
 80067fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006802:	81bb      	strh	r3, [r7, #12]
 8006804:	89bb      	ldrh	r3, [r7, #12]
 8006806:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800680a:	81bb      	strh	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	441a      	add	r2, r3
 8006816:	89bb      	ldrh	r3, [r7, #12]
 8006818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006828:	b29b      	uxth	r3, r3
 800682a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	bc80      	pop	{r7}
 8006836:	4770      	bx	lr

08006838 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2280      	movs	r2, #128	; 0x80
 800684e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr

0800685e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	bc80      	pop	{r7}
 8006870:	4770      	bx	lr

08006872 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006894:	b29b      	uxth	r3, r3
 8006896:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006898:	68fb      	ldr	r3, [r7, #12]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b08d      	sub	sp, #52	; 0x34
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	4611      	mov	r1, r2
 80068c6:	461a      	mov	r2, r3
 80068c8:	460b      	mov	r3, r1
 80068ca:	80fb      	strh	r3, [r7, #6]
 80068cc:	4613      	mov	r3, r2
 80068ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068d0:	88bb      	ldrh	r3, [r7, #4]
 80068d2:	3301      	adds	r3, #1
 80068d4:	085b      	lsrs	r3, r3, #1
 80068d6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	005a      	lsls	r2, r3, #1
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	e01e      	b.n	8006932 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	3301      	adds	r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	021b      	lsls	r3, r3, #8
 8006908:	b29b      	uxth	r3, r3
 800690a:	461a      	mov	r2, r3
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	b29a      	uxth	r2, r3
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	3302      	adds	r3, #2
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	3302      	adds	r3, #2
 8006924:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	3301      	adds	r3, #1
 800692a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800692c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692e:	3b01      	subs	r3, #1
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1dd      	bne.n	80068f4 <USB_WritePMA+0x3a>
  }
}
 8006938:	bf00      	nop
 800693a:	3734      	adds	r7, #52	; 0x34
 800693c:	46bd      	mov	sp, r7
 800693e:	bc80      	pop	{r7}
 8006940:	4770      	bx	lr

08006942 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006942:	b480      	push	{r7}
 8006944:	b08b      	sub	sp, #44	; 0x2c
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	4611      	mov	r1, r2
 800694e:	461a      	mov	r2, r3
 8006950:	460b      	mov	r3, r1
 8006952:	80fb      	strh	r3, [r7, #6]
 8006954:	4613      	mov	r3, r2
 8006956:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006958:	88bb      	ldrh	r3, [r7, #4]
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	b29b      	uxth	r3, r3
 800695e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006968:	88fb      	ldrh	r3, [r7, #6]
 800696a:	005a      	lsls	r2, r3, #1
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006974:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
 800697a:	e01b      	b.n	80069b4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	3302      	adds	r3, #2
 8006988:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	0a1b      	lsrs	r3, r3, #8
 800699c:	b2da      	uxtb	r2, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3301      	adds	r3, #1
 80069a6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	3302      	adds	r3, #2
 80069ac:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	3b01      	subs	r3, #1
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e0      	bne.n	800697c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069ba:	88bb      	ldrh	r3, [r7, #4]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	701a      	strb	r2, [r3, #0]
  }
}
 80069d6:	bf00      	nop
 80069d8:	372c      	adds	r7, #44	; 0x2c
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr

080069e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069e4:	4904      	ldr	r1, [pc, #16]	; (80069f8 <MX_FATFS_Init+0x18>)
 80069e6:	4805      	ldr	r0, [pc, #20]	; (80069fc <MX_FATFS_Init+0x1c>)
 80069e8:	f002 fd96 	bl	8009518 <FATFS_LinkDriver>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	4b03      	ldr	r3, [pc, #12]	; (8006a00 <MX_FATFS_Init+0x20>)
 80069f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069f4:	bf00      	nop
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20002cf8 	.word	0x20002cf8
 80069fc:	2000002c 	.word	0x2000002c
 8006a00:	20002cfc 	.word	0x20002cfc

08006a04 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <USER_initialize+0x20>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a14:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <USER_initialize+0x20>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bc80      	pop	{r7}
 8006a22:	4770      	bx	lr
 8006a24:	20000029 	.word	0x20000029

08006a28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	4603      	mov	r3, r0
 8006a30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <USER_status+0x20>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a38:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <USER_status+0x20>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr
 8006a48:	20000029 	.word	0x20000029

08006a4c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006a5c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bc80      	pop	{r7}
 8006a66:	4770      	bx	lr

08006a68 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006a78:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	603a      	str	r2, [r7, #0]
 8006a8e:	71fb      	strb	r3, [r7, #7]
 8006a90:	460b      	mov	r3, r1
 8006a92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	73fb      	strb	r3, [r7, #15]
    return res;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7c1b      	ldrb	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d115      	bne.n	8006ae4 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006abc:	2202      	movs	r2, #2
 8006abe:	2101      	movs	r1, #1
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f006 fa5e 	bl	800cf82 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	2181      	movs	r1, #129	; 0x81
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f006 fa53 	bl	800cf82 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ae2:	e012      	b.n	8006b0a <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	2101      	movs	r1, #1
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f006 fa49 	bl	800cf82 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	2202      	movs	r2, #2
 8006afc:	2181      	movs	r1, #129	; 0x81
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f006 fa3f 	bl	800cf82 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006b0a:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006b0e:	f006 fb7f 	bl	800d210 <USBD_static_malloc>
 8006b12:	4602      	mov	r2, r0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e003      	b.n	8006b30 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f9d9 	bl	8006ee0 <MSC_BOT_Init>

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006b44:	2101      	movs	r1, #1
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f006 fa41 	bl	800cfce <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006b54:	2181      	movs	r1, #129	; 0x81
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f006 fa39 	bl	800cfce <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa06 	bl	8006f74 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f006 fb55 	bl	800d228 <USBD_static_free>
    pdev->pClassData  = NULL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba0:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d04d      	beq.n	8006c52 <USBD_MSC_Setup+0xc2>
 8006bb6:	2b20      	cmp	r3, #32
 8006bb8:	f040 8113 	bne.w	8006de2 <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2bfe      	cmp	r3, #254	; 0xfe
 8006bc2:	d002      	beq.n	8006bca <USBD_MSC_Setup+0x3a>
 8006bc4:	2bff      	cmp	r3, #255	; 0xff
 8006bc6:	d024      	beq.n	8006c12 <USBD_MSC_Setup+0x82>
 8006bc8:	e03b      	b.n	8006c42 <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	885b      	ldrh	r3, [r3, #2]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d118      	bne.n	8006c04 <USBD_MSC_Setup+0x74>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	88db      	ldrh	r3, [r3, #6]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d114      	bne.n	8006c04 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da0f      	bge.n	8006c04 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f002 fbbd 	bl	800937c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c02:	e025      	b.n	8006c50 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f002 fb4e 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c10:	e01e      	b.n	8006c50 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	885b      	ldrh	r3, [r3, #2]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10c      	bne.n	8006c34 <USBD_MSC_Setup+0xa4>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	88db      	ldrh	r3, [r3, #6]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db03      	blt.n	8006c34 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f987 	bl	8006f40 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c32:	e00d      	b.n	8006c50 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f002 fb36 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c40:	e006      	b.n	8006c50 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 fb2f 	bl	80092a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c4e:	bf00      	nop
      }
      break;
 8006c50:	e0ce      	b.n	8006df0 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	2b0b      	cmp	r3, #11
 8006c58:	f200 80bb 	bhi.w	8006dd2 <USBD_MSC_Setup+0x242>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <USBD_MSC_Setup+0xd4>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08006d0b 	.word	0x08006d0b
 8006c6c:	08006dd3 	.word	0x08006dd3
 8006c70:	08006dd3 	.word	0x08006dd3
 8006c74:	08006dd3 	.word	0x08006dd3
 8006c78:	08006dd3 	.word	0x08006dd3
 8006c7c:	08006dd3 	.word	0x08006dd3
 8006c80:	08006dd3 	.word	0x08006dd3
 8006c84:	08006dd3 	.word	0x08006dd3
 8006c88:	08006dd3 	.word	0x08006dd3
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006ce5 	.word	0x08006ce5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d107      	bne.n	8006cae <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c9e:	f107 030e 	add.w	r3, r7, #14
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f002 fb68 	bl	800937c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cac:	e098      	b.n	8006de0 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f002 faf9 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cba:	e091      	b.n	8006de0 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d107      	bne.n	8006cd6 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	3304      	adds	r3, #4
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f002 fb54 	bl	800937c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd4:	e084      	b.n	8006de0 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 fae5 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce2:	e07d      	b.n	8006de0 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d106      	bne.n	8006cfc <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cfa:	e071      	b.n	8006de0 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006cfc:	6839      	ldr	r1, [r7, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f002 fad2 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d04:	2302      	movs	r3, #2
 8006d06:	75fb      	strb	r3, [r7, #23]
          break;
 8006d08:	e06a      	b.n	8006de0 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	889b      	ldrh	r3, [r3, #4]
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f006 f97a 	bl	800d00c <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	889b      	ldrh	r3, [r3, #4]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f006 f954 	bl	800cfce <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	889b      	ldrh	r3, [r3, #4]
 8006d2a:	b25b      	sxtb	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da23      	bge.n	8006d78 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	889b      	ldrh	r3, [r3, #4]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	f003 020f 	and.w	r2, r3, #15
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	440b      	add	r3, r1
 8006d46:	3318      	adds	r3, #24
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7c1b      	ldrb	r3, [r3, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d58:	2202      	movs	r2, #2
 8006d5a:	2181      	movs	r1, #129	; 0x81
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f006 f910 	bl	800cf82 <USBD_LL_OpenEP>
 8006d62:	e005      	b.n	8006d70 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006d64:	2340      	movs	r3, #64	; 0x40
 8006d66:	2202      	movs	r2, #2
 8006d68:	2181      	movs	r1, #129	; 0x81
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f006 f909 	bl	800cf82 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d76:	e024      	b.n	8006dc2 <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	889b      	ldrh	r3, [r3, #4]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	440b      	add	r3, r1
 8006d8e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	7c1b      	ldrb	r3, [r3, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d107      	bne.n	8006dae <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006d9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da2:	2202      	movs	r2, #2
 8006da4:	2101      	movs	r1, #1
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f006 f8eb 	bl	800cf82 <USBD_LL_OpenEP>
 8006dac:	e005      	b.n	8006dba <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006dae:	2340      	movs	r3, #64	; 0x40
 8006db0:	2202      	movs	r2, #2
 8006db2:	2101      	movs	r1, #1
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f006 f8e4 	bl	800cf82 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	889b      	ldrh	r3, [r3, #4]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa50 	bl	8007270 <MSC_BOT_CplClrFeature>
          break;
 8006dd0:	e006      	b.n	8006de0 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f002 fa67 	bl	80092a8 <USBD_CtlError>
          ret = USBD_FAIL;
 8006dda:	2302      	movs	r3, #2
 8006ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8006dde:	bf00      	nop
      }
      break;
 8006de0:	e006      	b.n	8006df0 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f002 fa5f 	bl	80092a8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006dea:	2302      	movs	r3, #2
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	bf00      	nop
  }

  return ret;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	460b      	mov	r3, r1
 8006e06:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8c1 	bl	8006f94 <MSC_BOT_DataIn>

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8e2 	bl	8006ff6 <MSC_BOT_DataOut>

  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20000078 	.word	0x20000078

08006e5c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006e6a:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20000098 	.word	0x20000098

08006e7c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2220      	movs	r2, #32
 8006e88:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006e8a:	4b03      	ldr	r3, [pc, #12]	; (8006e98 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	200000b8 	.word	0x200000b8

08006e9c <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	220a      	movs	r2, #10
 8006ea8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	200000d8 	.word	0x200000d8

08006ebc <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eee:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2000      	movs	r0, #0
 8006f16:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006f18:	2101      	movs	r1, #1
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f006 f876 	bl	800d00c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006f20:	2181      	movs	r1, #129	; 0x81
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f006 f872 	bl	800d00c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f2e:	231f      	movs	r3, #31
 8006f30:	2101      	movs	r1, #1
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f006 f935 	bl	800d1a2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f62:	231f      	movs	r3, #31
 8006f64:	2101      	movs	r1, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f006 f91b 	bl	800d1a2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f82:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	721a      	strb	r2, [r3, #8]
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	7a1b      	ldrb	r3, [r3, #8]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d004      	beq.n	8006fba <MSC_BOT_DataIn+0x26>
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	db19      	blt.n	8006fe8 <MSC_BOT_DataIn+0x54>
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	dc17      	bgt.n	8006fe8 <MSC_BOT_DataIn+0x54>
 8006fb8:	e011      	b.n	8006fde <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f979 	bl	80072c0 <SCSI_ProcessCmd>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da0b      	bge.n	8006fec <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f8f0 	bl	80071bc <MSC_BOT_SendCSW>
      }
      break;
 8006fdc:	e006      	b.n	8006fec <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006fde:	2100      	movs	r1, #0
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8eb 	bl	80071bc <MSC_BOT_SendCSW>
      break;
 8006fe6:	e002      	b.n	8006fee <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <MSC_BOT_DataIn+0x5a>
      break;
 8006fec:	bf00      	nop
  }
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	7a1b      	ldrb	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <MSC_BOT_DataOut+0x22>
 8007012:	2b01      	cmp	r3, #1
 8007014:	d004      	beq.n	8007020 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007016:	e015      	b.n	8007044 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f817 	bl	800704c <MSC_BOT_CBW_Decode>
      break;
 800701e:	e011      	b.n	8007044 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800702c:	461a      	mov	r2, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f946 	bl	80072c0 <SCSI_ProcessCmd>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	da03      	bge.n	8007042 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800703a:	2101      	movs	r1, #1
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f8bd 	bl	80071bc <MSC_BOT_SendCSW>
      break;
 8007042:	bf00      	nop
  }
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007074:	2101      	movs	r1, #1
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f006 f8b6 	bl	800d1e8 <USBD_LL_GetRxDataSize>
 800707c:	4603      	mov	r3, r0
 800707e:	2b1f      	cmp	r3, #31
 8007080:	d114      	bne.n	80070ac <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007088:	4a32      	ldr	r2, [pc, #200]	; (8007154 <MSC_BOT_CBW_Decode+0x108>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d10e      	bne.n	80070ac <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007094:	2b01      	cmp	r3, #1
 8007096:	d809      	bhi.n	80070ac <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d90e      	bls.n	80070ca <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80070b2:	2320      	movs	r3, #32
 80070b4:	2205      	movs	r2, #5
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc48 	bl	800794c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2202      	movs	r2, #2
 80070c0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8a6 	bl	8007214 <MSC_BOT_Abort>
 80070c8:	e041      	b.n	800714e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80070d6:	461a      	mov	r2, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f8f1 	bl	80072c0 <SCSI_ProcessCmd>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da0c      	bge.n	80070fe <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	7a1b      	ldrb	r3, [r3, #8]
 80070e8:	2b05      	cmp	r3, #5
 80070ea:	d104      	bne.n	80070f6 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80070ec:	2101      	movs	r1, #1
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f864 	bl	80071bc <MSC_BOT_SendCSW>
 80070f4:	e02b      	b.n	800714e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f88c 	bl	8007214 <MSC_BOT_Abort>
 80070fc:	e027      	b.n	800714e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	7a1b      	ldrb	r3, [r3, #8]
 8007102:	2b02      	cmp	r3, #2
 8007104:	d022      	beq.n	800714c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800710a:	2b01      	cmp	r3, #1
 800710c:	d01e      	beq.n	800714c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007112:	2b03      	cmp	r3, #3
 8007114:	d01a      	beq.n	800714c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	895b      	ldrh	r3, [r3, #10]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f103 010c 	add.w	r1, r3, #12
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	895b      	ldrh	r3, [r3, #10]
 8007128:	461a      	mov	r2, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f814 	bl	8007158 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007130:	e00d      	b.n	800714e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	895b      	ldrh	r3, [r3, #10]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800713a:	2100      	movs	r1, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f83d 	bl	80071bc <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007142:	e004      	b.n	800714e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f865 	bl	8007214 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800714a:	e000      	b.n	800714e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800714c:	bf00      	nop
    }
  }
}
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	43425355 	.word	0x43425355

08007158 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	429a      	cmp	r2, r3
 8007178:	d204      	bcs.n	8007184 <MSC_BOT_SendData+0x2c>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007180:	b29b      	uxth	r3, r3
 8007182:	e000      	b.n	8007186 <MSC_BOT_SendData+0x2e>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	2204      	movs	r2, #4
 80071a4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80071a6:	8a7b      	ldrh	r3, [r7, #18]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	2181      	movs	r1, #129	; 0x81
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f005 ffd5 	bl	800d15c <USBD_LL_Transmit>
}
 80071b2:	bf00      	nop
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ce:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4a0f      	ldr	r2, [pc, #60]	; (8007210 <MSC_BOT_SendCSW+0x54>)
 80071d4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	78fa      	ldrb	r2, [r7, #3]
 80071dc:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 80071ec:	230d      	movs	r3, #13
 80071ee:	2181      	movs	r1, #129	; 0x81
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f005 ffb3 	bl	800d15c <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80071fc:	231f      	movs	r3, #31
 80071fe:	2101      	movs	r1, #1
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f005 ffce 	bl	800d1a2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	53425355 	.word	0x53425355

08007214 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007222:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10c      	bne.n	8007248 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007240:	2101      	movs	r1, #1
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f005 ff01 	bl	800d04a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007248:	2181      	movs	r1, #129	; 0x81
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f005 fefd 	bl	800d04a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	7a5b      	ldrb	r3, [r3, #9]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d107      	bne.n	8007268 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 800725e:	231f      	movs	r3, #31
 8007260:	2101      	movs	r1, #1
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f005 ff9d 	bl	800d1a2 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007268:	bf00      	nop
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007282:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	7a5b      	ldrb	r3, [r3, #9]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d107      	bne.n	800729c <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800728c:	2181      	movs	r1, #129	; 0x81
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f005 fedb 	bl	800d04a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	725a      	strb	r2, [r3, #9]
 800729a:	e00d      	b.n	80072b8 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800729c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	da08      	bge.n	80072b6 <MSC_BOT_CplClrFeature+0x46>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	7a5b      	ldrb	r3, [r3, #9]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d004      	beq.n	80072b6 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80072ac:	2101      	movs	r1, #1
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff ff84 	bl	80071bc <MSC_BOT_SendCSW>
 80072b4:	e000      	b.n	80072b8 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 80072b6:	bf00      	nop
  }
}
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	460b      	mov	r3, r1
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b5a      	cmp	r3, #90	; 0x5a
 80072d4:	f200 810e 	bhi.w	80074f4 <SCSI_ProcessCmd+0x234>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <SCSI_ProcessCmd+0x20>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	0800744d 	.word	0x0800744d
 80072e4:	080074f5 	.word	0x080074f5
 80072e8:	080074f5 	.word	0x080074f5
 80072ec:	0800745b 	.word	0x0800745b
 80072f0:	080074f5 	.word	0x080074f5
 80072f4:	080074f5 	.word	0x080074f5
 80072f8:	080074f5 	.word	0x080074f5
 80072fc:	080074f5 	.word	0x080074f5
 8007300:	080074f5 	.word	0x080074f5
 8007304:	080074f5 	.word	0x080074f5
 8007308:	080074f5 	.word	0x080074f5
 800730c:	080074f5 	.word	0x080074f5
 8007310:	080074f5 	.word	0x080074f5
 8007314:	080074f5 	.word	0x080074f5
 8007318:	080074f5 	.word	0x080074f5
 800731c:	080074f5 	.word	0x080074f5
 8007320:	080074f5 	.word	0x080074f5
 8007324:	080074f5 	.word	0x080074f5
 8007328:	08007469 	.word	0x08007469
 800732c:	080074f5 	.word	0x080074f5
 8007330:	080074f5 	.word	0x080074f5
 8007334:	080074f5 	.word	0x080074f5
 8007338:	080074f5 	.word	0x080074f5
 800733c:	080074f5 	.word	0x080074f5
 8007340:	080074f5 	.word	0x080074f5
 8007344:	080074f5 	.word	0x080074f5
 8007348:	08007493 	.word	0x08007493
 800734c:	08007477 	.word	0x08007477
 8007350:	080074f5 	.word	0x080074f5
 8007354:	080074f5 	.word	0x080074f5
 8007358:	08007485 	.word	0x08007485
 800735c:	080074f5 	.word	0x080074f5
 8007360:	080074f5 	.word	0x080074f5
 8007364:	080074f5 	.word	0x080074f5
 8007368:	080074f5 	.word	0x080074f5
 800736c:	080074af 	.word	0x080074af
 8007370:	080074f5 	.word	0x080074f5
 8007374:	080074bd 	.word	0x080074bd
 8007378:	080074f5 	.word	0x080074f5
 800737c:	080074f5 	.word	0x080074f5
 8007380:	080074cb 	.word	0x080074cb
 8007384:	080074f5 	.word	0x080074f5
 8007388:	080074d9 	.word	0x080074d9
 800738c:	080074f5 	.word	0x080074f5
 8007390:	080074f5 	.word	0x080074f5
 8007394:	080074f5 	.word	0x080074f5
 8007398:	080074f5 	.word	0x080074f5
 800739c:	080074e7 	.word	0x080074e7
 80073a0:	080074f5 	.word	0x080074f5
 80073a4:	080074f5 	.word	0x080074f5
 80073a8:	080074f5 	.word	0x080074f5
 80073ac:	080074f5 	.word	0x080074f5
 80073b0:	080074f5 	.word	0x080074f5
 80073b4:	080074f5 	.word	0x080074f5
 80073b8:	080074f5 	.word	0x080074f5
 80073bc:	080074f5 	.word	0x080074f5
 80073c0:	080074f5 	.word	0x080074f5
 80073c4:	080074f5 	.word	0x080074f5
 80073c8:	080074f5 	.word	0x080074f5
 80073cc:	080074f5 	.word	0x080074f5
 80073d0:	080074f5 	.word	0x080074f5
 80073d4:	080074f5 	.word	0x080074f5
 80073d8:	080074f5 	.word	0x080074f5
 80073dc:	080074f5 	.word	0x080074f5
 80073e0:	080074f5 	.word	0x080074f5
 80073e4:	080074f5 	.word	0x080074f5
 80073e8:	080074f5 	.word	0x080074f5
 80073ec:	080074f5 	.word	0x080074f5
 80073f0:	080074f5 	.word	0x080074f5
 80073f4:	080074f5 	.word	0x080074f5
 80073f8:	080074f5 	.word	0x080074f5
 80073fc:	080074f5 	.word	0x080074f5
 8007400:	080074f5 	.word	0x080074f5
 8007404:	080074f5 	.word	0x080074f5
 8007408:	080074f5 	.word	0x080074f5
 800740c:	080074f5 	.word	0x080074f5
 8007410:	080074f5 	.word	0x080074f5
 8007414:	080074f5 	.word	0x080074f5
 8007418:	080074f5 	.word	0x080074f5
 800741c:	080074f5 	.word	0x080074f5
 8007420:	080074f5 	.word	0x080074f5
 8007424:	080074f5 	.word	0x080074f5
 8007428:	080074f5 	.word	0x080074f5
 800742c:	080074f5 	.word	0x080074f5
 8007430:	080074f5 	.word	0x080074f5
 8007434:	080074f5 	.word	0x080074f5
 8007438:	080074f5 	.word	0x080074f5
 800743c:	080074f5 	.word	0x080074f5
 8007440:	080074f5 	.word	0x080074f5
 8007444:	080074f5 	.word	0x080074f5
 8007448:	080074a1 	.word	0x080074a1
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4619      	mov	r1, r3
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f85c 	bl	8007510 <SCSI_TestUnitReady>
      break;
 8007458:	e055      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fa09 	bl	8007878 <SCSI_RequestSense>
      break;
 8007466:	e04e      	b.n	8007506 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4619      	mov	r1, r3
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f888 	bl	8007584 <SCSI_Inquiry>
      break;
 8007474:	e047      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4619      	mov	r1, r3
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fa9e 	bl	80079be <SCSI_StartStopUnit>
      break;
 8007482:	e040      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007484:	7afb      	ldrb	r3, [r7, #11]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	4619      	mov	r1, r3
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 fa97 	bl	80079be <SCSI_StartStopUnit>
      break;
 8007490:	e039      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f99d 	bl	80077d8 <SCSI_ModeSense6>
      break;
 800749e:	e032      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4619      	mov	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f9be 	bl	8007828 <SCSI_ModeSense10>
      break;
 80074ac:	e02b      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f92a 	bl	800770e <SCSI_ReadFormatCapacity>
      break;
 80074ba:	e024      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80074bc:	7afb      	ldrb	r3, [r7, #11]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	4619      	mov	r1, r3
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f8bc 	bl	8007640 <SCSI_ReadCapacity10>
      break;
 80074c8:	e01d      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4619      	mov	r1, r3
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa88 	bl	80079e6 <SCSI_Read10>
      break;
 80074d6:	e016      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80074d8:	7afb      	ldrb	r3, [r7, #11]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4619      	mov	r1, r3
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 fb0d 	bl	8007afe <SCSI_Write10>
      break;
 80074e4:	e00f      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80074e6:	7afb      	ldrb	r3, [r7, #11]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4619      	mov	r1, r3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fbb6 	bl	8007c5e <SCSI_Verify10>
      break;
 80074f2:	e008      	b.n	8007506 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80074f4:	7af9      	ldrb	r1, [r7, #11]
 80074f6:	2320      	movs	r3, #32
 80074f8:	2205      	movs	r2, #5
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fa26 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007500:	f04f 33ff 	mov.w	r3, #4294967295
 8007504:	e000      	b.n	8007508 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	460b      	mov	r3, r1
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007524:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007536:	2320      	movs	r3, #32
 8007538:	2205      	movs	r2, #5
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 fa06 	bl	800794c <SCSI_SenseCode>

    return -1;
 8007540:	f04f 33ff 	mov.w	r3, #4294967295
 8007544:	e019      	b.n	800757a <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	7afa      	ldrb	r2, [r7, #11]
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800755a:	7af9      	ldrb	r1, [r7, #11]
 800755c:	233a      	movs	r3, #58	; 0x3a
 800755e:	2202      	movs	r2, #2
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f9f3 	bl	800794c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2205      	movs	r2, #5
 800756a:	721a      	strb	r2, [r3, #8]

    return -1;
 800756c:	f04f 33ff 	mov.w	r3, #4294967295
 8007570:	e003      	b.n	800757a <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2200      	movs	r2, #0
 8007576:	815a      	strh	r2, [r3, #10]

  return 0;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007584:	b480      	push	{r7}
 8007586:	b089      	sub	sp, #36	; 0x24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	460b      	mov	r3, r1
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007598:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3301      	adds	r3, #1
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d014      	beq.n	80075d2 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80075a8:	2307      	movs	r3, #7
 80075aa:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	8bfa      	ldrh	r2, [r7, #30]
 80075b0:	815a      	strh	r2, [r3, #10]

    while (len)
 80075b2:	e00a      	b.n	80075ca <SCSI_Inquiry+0x46>
    {
      len--;
 80075b4:	8bfb      	ldrh	r3, [r7, #30]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80075ba:	8bfb      	ldrh	r3, [r7, #30]
 80075bc:	8bfa      	ldrh	r2, [r7, #30]
 80075be:	491f      	ldr	r1, [pc, #124]	; (800763c <SCSI_Inquiry+0xb8>)
 80075c0:	5c89      	ldrb	r1, [r1, r2]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	4413      	add	r3, r2
 80075c6:	460a      	mov	r2, r1
 80075c8:	731a      	strb	r2, [r3, #12]
    while (len)
 80075ca:	8bfb      	ldrh	r3, [r7, #30]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1f1      	bne.n	80075b4 <SCSI_Inquiry+0x30>
 80075d0:	e02e      	b.n	8007630 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075d8:	69d9      	ldr	r1, [r3, #28]
 80075da:	7afa      	ldrb	r2, [r7, #11]
 80075dc:	4613      	mov	r3, r2
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4413      	add	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	440b      	add	r3, r1
 80075e6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3304      	adds	r3, #4
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3305      	adds	r3, #5
 80075f2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	8bfa      	ldrh	r2, [r7, #30]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d303      	bcc.n	800760a <SCSI_Inquiry+0x86>
    {
      len = params[4];
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3304      	adds	r3, #4
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	8bfa      	ldrh	r2, [r7, #30]
 800760e:	815a      	strh	r2, [r3, #10]

    while (len)
 8007610:	e00b      	b.n	800762a <SCSI_Inquiry+0xa6>
    {
      len--;
 8007612:	8bfb      	ldrh	r3, [r7, #30]
 8007614:	3b01      	subs	r3, #1
 8007616:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007618:	8bfb      	ldrh	r3, [r7, #30]
 800761a:	8bfa      	ldrh	r2, [r7, #30]
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	440a      	add	r2, r1
 8007620:	7811      	ldrb	r1, [r2, #0]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	4413      	add	r3, r2
 8007626:	460a      	mov	r2, r1
 8007628:	731a      	strb	r2, [r3, #12]
    while (len)
 800762a:	8bfb      	ldrh	r3, [r7, #30]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1f0      	bne.n	8007612 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3724      	adds	r7, #36	; 0x24
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr
 800763c:	0800d528 	.word	0x0800d528

08007640 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	460b      	mov	r3, r1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007654:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	f502 7118 	add.w	r1, r2, #608	; 0x260
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	f202 225e 	addw	r2, r2, #606	; 0x25e
 800766a:	7af8      	ldrb	r0, [r7, #11]
 800766c:	4798      	blx	r3
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d008      	beq.n	8007686 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007674:	7af9      	ldrb	r1, [r7, #11]
 8007676:	233a      	movs	r3, #58	; 0x3a
 8007678:	2202      	movs	r2, #2
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f966 	bl	800794c <SCSI_SenseCode>
    return -1;
 8007680:	f04f 33ff 	mov.w	r3, #4294967295
 8007684:	e03f      	b.n	8007706 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800768c:	3b01      	subs	r3, #1
 800768e:	0e1b      	lsrs	r3, r3, #24
 8007690:	b2da      	uxtb	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 800769c:	3b01      	subs	r3, #1
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80076ac:	3b01      	subs	r3, #1
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076cc:	161b      	asrs	r3, r3, #24
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076da:	141b      	asrs	r3, r3, #16
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076e8:	0a1b      	lsrs	r3, r3, #8
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2208      	movs	r2, #8
 8007702:	815a      	strh	r2, [r3, #10]
    return 0;
 8007704:	2300      	movs	r3, #0
  }
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b088      	sub	sp, #32
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	460b      	mov	r3, r1
 8007718:	607a      	str	r2, [r7, #4]
 800771a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007724:	2300      	movs	r3, #0
 8007726:	83fb      	strh	r3, [r7, #30]
 8007728:	e007      	b.n	800773a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800772a:	8bfb      	ldrh	r3, [r7, #30]
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	4413      	add	r3, r2
 8007730:	2200      	movs	r2, #0
 8007732:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007734:	8bfb      	ldrh	r3, [r7, #30]
 8007736:	3301      	adds	r3, #1
 8007738:	83fb      	strh	r3, [r7, #30]
 800773a:	8bfb      	ldrh	r3, [r7, #30]
 800773c:	2b0b      	cmp	r3, #11
 800773e:	d9f4      	bls.n	800772a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f107 0216 	add.w	r2, r7, #22
 800774c:	f107 0110 	add.w	r1, r7, #16
 8007750:	7af8      	ldrb	r0, [r7, #11]
 8007752:	4798      	blx	r3
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d008      	beq.n	800776c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800775a:	7af9      	ldrb	r1, [r7, #11]
 800775c:	233a      	movs	r3, #58	; 0x3a
 800775e:	2202      	movs	r2, #2
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f8f3 	bl	800794c <SCSI_SenseCode>
    return -1;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
 800776a:	e030      	b.n	80077ce <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2208      	movs	r2, #8
 8007770:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3b01      	subs	r3, #1
 8007776:	0e1b      	lsrs	r3, r3, #24
 8007778:	b2da      	uxtb	r2, r3
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	3b01      	subs	r3, #1
 8007782:	0c1b      	lsrs	r3, r3, #16
 8007784:	b2da      	uxtb	r2, r3
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	3b01      	subs	r3, #1
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b2da      	uxtb	r2, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b2da      	uxtb	r2, r3
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2202      	movs	r2, #2
 80077a6:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80077a8:	8afb      	ldrh	r3, [r7, #22]
 80077aa:	141b      	asrs	r3, r3, #16
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80077be:	8afb      	ldrh	r3, [r7, #22]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	220c      	movs	r2, #12
 80077ca:	815a      	strh	r2, [r3, #10]
    return 0;
 80077cc:	2300      	movs	r3, #0
  }
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3720      	adds	r7, #32
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	460b      	mov	r3, r1
 80077e2:	607a      	str	r2, [r7, #4]
 80077e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ec:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80077ee:	2308      	movs	r3, #8
 80077f0:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	8afa      	ldrh	r2, [r7, #22]
 80077f6:	815a      	strh	r2, [r3, #10]

  while (len)
 80077f8:	e00a      	b.n	8007810 <SCSI_ModeSense6+0x38>
  {
    len--;
 80077fa:	8afb      	ldrh	r3, [r7, #22]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007800:	8afb      	ldrh	r3, [r7, #22]
 8007802:	8afa      	ldrh	r2, [r7, #22]
 8007804:	4907      	ldr	r1, [pc, #28]	; (8007824 <SCSI_ModeSense6+0x4c>)
 8007806:	5c89      	ldrb	r1, [r1, r2]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	460a      	mov	r2, r1
 800780e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007810:	8afb      	ldrh	r3, [r7, #22]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f1      	bne.n	80077fa <SCSI_ModeSense6+0x22>
  }
  return 0;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	371c      	adds	r7, #28
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	0800d530 	.word	0x0800d530

08007828 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	460b      	mov	r3, r1
 8007832:	607a      	str	r2, [r7, #4]
 8007834:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007836:	2308      	movs	r3, #8
 8007838:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	8afa      	ldrh	r2, [r7, #22]
 8007846:	815a      	strh	r2, [r3, #10]

  while (len)
 8007848:	e00a      	b.n	8007860 <SCSI_ModeSense10+0x38>
  {
    len--;
 800784a:	8afb      	ldrh	r3, [r7, #22]
 800784c:	3b01      	subs	r3, #1
 800784e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007850:	8afb      	ldrh	r3, [r7, #22]
 8007852:	8afa      	ldrh	r2, [r7, #22]
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <SCSI_ModeSense10+0x4c>)
 8007856:	5c89      	ldrb	r1, [r1, r2]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	460a      	mov	r2, r1
 800785e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007860:	8afb      	ldrh	r3, [r7, #22]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f1      	bne.n	800784a <SCSI_ModeSense10+0x22>
  }

  return 0;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	0800d538 	.word	0x0800d538

08007878 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	460b      	mov	r3, r1
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788c:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800788e:	2300      	movs	r3, #0
 8007890:	75fb      	strb	r3, [r7, #23]
 8007892:	e007      	b.n	80078a4 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	2200      	movs	r2, #0
 800789c:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	3301      	adds	r3, #1
 80078a2:	75fb      	strb	r3, [r7, #23]
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
 80078a6:	2b11      	cmp	r3, #17
 80078a8:	d9f4      	bls.n	8007894 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2270      	movs	r2, #112	; 0x70
 80078ae:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	220c      	movs	r2, #12
 80078b4:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d02e      	beq.n	8007924 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	3347      	adds	r3, #71	; 0x47
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	4413      	add	r3, r2
 80078d4:	791a      	ldrb	r2, [r3, #4]
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	3347      	adds	r3, #71	; 0x47
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	4413      	add	r3, r2
 80078e8:	7a5a      	ldrb	r2, [r3, #9]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	3347      	adds	r3, #71	; 0x47
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4413      	add	r3, r2
 80078fc:	7a1a      	ldrb	r2, [r3, #8]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007908:	3301      	adds	r3, #1
 800790a:	b2da      	uxtb	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007918:	2b04      	cmp	r3, #4
 800791a:	d103      	bne.n	8007924 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	2212      	movs	r2, #18
 8007928:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3304      	adds	r3, #4
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b12      	cmp	r3, #18
 8007932:	d805      	bhi.n	8007940 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3304      	adds	r3, #4
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	b29a      	uxth	r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr

0800794c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	461a      	mov	r2, r3
 800795a:	4603      	mov	r3, r0
 800795c:	70fb      	strb	r3, [r7, #3]
 800795e:	460b      	mov	r3, r1
 8007960:	70bb      	strb	r3, [r7, #2]
 8007962:	4613      	mov	r3, r2
 8007964:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800796c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	3347      	adds	r3, #71	; 0x47
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	4413      	add	r3, r2
 800797c:	78ba      	ldrb	r2, [r7, #2]
 800797e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	3347      	adds	r3, #71	; 0x47
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4413      	add	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007998:	3301      	adds	r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d103      	bne.n	80079b4 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bc80      	pop	{r7}
 80079bc:	4770      	bx	lr

080079be <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80079be:	b480      	push	{r7}
 80079c0:	b087      	sub	sp, #28
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	460b      	mov	r3, r1
 80079c8:	607a      	str	r2, [r7, #4]
 80079ca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	2200      	movs	r2, #0
 80079d8:	815a      	strh	r2, [r3, #10]
  return 0;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	371c      	adds	r7, #28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr

080079e6 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	460b      	mov	r3, r1
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fa:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	7a1b      	ldrb	r3, [r3, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d16e      	bne.n	8007ae2 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007a0a:	b25b      	sxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db0a      	blt.n	8007a26 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007a16:	2320      	movs	r3, #32
 8007a18:	2205      	movs	r2, #5
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff ff96 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007a20:	f04f 33ff 	mov.w	r3, #4294967295
 8007a24:	e067      	b.n	8007af6 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	7afa      	ldrb	r2, [r7, #11]
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007a3a:	7af9      	ldrb	r1, [r7, #11]
 8007a3c:	233a      	movs	r3, #58	; 0x3a
 8007a3e:	2202      	movs	r2, #2
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f7ff ff83 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	e054      	b.n	8007af6 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3302      	adds	r3, #2
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3303      	adds	r3, #3
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a5c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3304      	adds	r3, #4
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007a66:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	3205      	adds	r2, #5
 8007a6c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007a6e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3307      	adds	r3, #7
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	3208      	adds	r2, #8
 8007a82:	7812      	ldrb	r2, [r2, #0]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a98:	7af9      	ldrb	r1, [r7, #11]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f912 	bl	8007cc4 <SCSI_CheckAddressRange>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da02      	bge.n	8007aac <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aaa:	e024      	b.n	8007af6 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007abe:	6979      	ldr	r1, [r7, #20]
 8007ac0:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007ac4:	fb01 f303 	mul.w	r3, r1, r3
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d00a      	beq.n	8007ae2 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007ad2:	2320      	movs	r3, #32
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff ff38 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	e009      	b.n	8007af6 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae8:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007aea:	7afb      	ldrb	r3, [r7, #11]
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f90a 	bl	8007d08 <SCSI_ProcessRead>
 8007af4:	4603      	mov	r3, r0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	460b      	mov	r3, r1
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b12:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	7a1b      	ldrb	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f040 8096 	bne.w	8007c4a <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da0a      	bge.n	8007b40 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007b30:	2320      	movs	r3, #32
 8007b32:	2205      	movs	r2, #5
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff ff09 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3e:	e08a      	b.n	8007c56 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	7afa      	ldrb	r2, [r7, #11]
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	4798      	blx	r3
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d008      	beq.n	8007b66 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b54:	7af9      	ldrb	r1, [r7, #11]
 8007b56:	233a      	movs	r3, #58	; 0x3a
 8007b58:	2202      	movs	r2, #2
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fef6 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	e077      	b.n	8007c56 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	7afa      	ldrb	r2, [r7, #11]
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007b7a:	7af9      	ldrb	r1, [r7, #11]
 8007b7c:	2327      	movs	r3, #39	; 0x27
 8007b7e:	2202      	movs	r2, #2
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fee3 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8a:	e064      	b.n	8007c56 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	3302      	adds	r3, #2
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3303      	adds	r3, #3
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b9c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007ba6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	3205      	adds	r2, #5
 8007bac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007bae:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3307      	adds	r3, #7
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	3208      	adds	r2, #8
 8007bc2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bd8:	7af9      	ldrb	r1, [r7, #11]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 f872 	bl	8007cc4 <SCSI_CheckAddressRange>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	da02      	bge.n	8007bec <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	e034      	b.n	8007c56 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007bf8:	fb02 f303 	mul.w	r3, r2, r3
 8007bfc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d00a      	beq.n	8007c20 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c10:	2320      	movs	r3, #32
 8007c12:	2205      	movs	r2, #5
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f7ff fe99 	bl	800794c <SCSI_SenseCode>
      return -1;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1e:	e01a      	b.n	8007c56 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c26:	bf28      	it	cs
 8007c28:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c2c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2201      	movs	r2, #1
 8007c32:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f103 020c 	add.w	r2, r3, #12
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2101      	movs	r1, #1
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f005 faae 	bl	800d1a2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e005      	b.n	8007c56 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f8ce 	bl	8007df0 <SCSI_ProcessWrite>
 8007c54:	4603      	mov	r3, r0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b086      	sub	sp, #24
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	60f8      	str	r0, [r7, #12]
 8007c66:	460b      	mov	r3, r1
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c72:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3301      	adds	r3, #1
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d008      	beq.n	8007c94 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007c82:	7af9      	ldrb	r1, [r7, #11]
 8007c84:	2324      	movs	r3, #36	; 0x24
 8007c86:	2205      	movs	r2, #5
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fe5f 	bl	800794c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c92:	e013      	b.n	8007cbc <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ca0:	7af9      	ldrb	r1, [r7, #11]
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f80e 	bl	8007cc4 <SCSI_CheckAddressRange>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da02      	bge.n	8007cb4 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	e003      	b.n	8007cbc <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	815a      	strh	r2, [r3, #10]
  return 0;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	607a      	str	r2, [r7, #4]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cda:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d908      	bls.n	8007cfe <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007cec:	7af9      	ldrb	r1, [r7, #11]
 8007cee:	2321      	movs	r3, #33	; 0x21
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f7ff fe2a 	bl	800794c <SCSI_SenseCode>
    return -1;
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	e000      	b.n	8007d00 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3718      	adds	r7, #24
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007d08:	b590      	push	{r4, r7, lr}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007d28:	fb02 f303 	mul.w	r3, r2, r3
 8007d2c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d34:	bf28      	it	cs
 8007d36:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d3a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d42:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d56:	4618      	mov	r0, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	78f8      	ldrb	r0, [r7, #3]
 8007d62:	47a0      	blx	r4
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da08      	bge.n	8007d7c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007d6a:	78f9      	ldrb	r1, [r7, #3]
 8007d6c:	2311      	movs	r3, #17
 8007d6e:	2204      	movs	r2, #4
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fdeb 	bl	800794c <SCSI_SenseCode>
    return -1;
 8007d76:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7a:	e035      	b.n	8007de8 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f103 020c 	add.w	r2, r3, #12
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2181      	movs	r1, #129	; 0x81
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f005 f9e7 	bl	800d15c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da2:	441a      	add	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007db6:	4619      	mov	r1, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dbe:	1ad2      	subs	r2, r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	1ad2      	subs	r2, r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2203      	movs	r2, #3
 8007de4:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd90      	pop	{r4, r7, pc}

08007df0 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e1c:	bf28      	it	cs
 8007e1e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007e22:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e2a:	695c      	ldr	r4, [r3, #20]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f103 010c 	add.w	r1, r3, #12
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e3e:	4618      	mov	r0, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	78f8      	ldrb	r0, [r7, #3]
 8007e4a:	47a0      	blx	r4
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	da08      	bge.n	8007e64 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007e52:	78f9      	ldrb	r1, [r7, #3]
 8007e54:	2303      	movs	r3, #3
 8007e56:	2204      	movs	r2, #4
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fd77 	bl	800794c <SCSI_SenseCode>

    return -1;
 8007e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e62:	e045      	b.n	8007ef0 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e70:	4619      	mov	r1, r3
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e78:	441a      	add	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e94:	1ad2      	subs	r2, r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff f97f 	bl	80071bc <MSC_BOT_SendCSW>
 8007ebe:	e016      	b.n	8007eee <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed4:	bf28      	it	cs
 8007ed6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007eda:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f103 020c 	add.w	r2, r3, #12
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f005 f95a 	bl	800d1a2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}

08007ef8 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007f08:	2302      	movs	r3, #2
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	2181      	movs	r1, #129	; 0x81
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f005 f837 	bl	800cf82 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	2203      	movs	r2, #3
 8007f1e:	2101      	movs	r1, #1
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f005 f82e 	bl	800cf82 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007f2e:	2018      	movs	r0, #24
 8007f30:	f005 f96e 	bl	800d210 <USBD_static_malloc>
 8007f34:	4602      	mov	r2, r0
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007f46:	2301      	movs	r3, #1
 8007f48:	73fb      	strb	r3, [r7, #15]
 8007f4a:	e011      	b.n	8007f70 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f52:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2200      	movs	r2, #0
 8007f58:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	2302      	movs	r3, #2
 8007f68:	2101      	movs	r1, #1
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f005 f919 	bl	800d1a2 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
 8007f82:	460b      	mov	r3, r1
 8007f84:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007f86:	2181      	movs	r1, #129	; 0x81
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f005 f820 	bl	800cfce <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007f94:	2101      	movs	r1, #1
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f005 f819 	bl	800cfce <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f005 f932 	bl	800d228 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008002:	2b00      	cmp	r3, #0
 8008004:	d051      	beq.n	80080aa <USBD_CUSTOM_HID_Setup+0xd2>
 8008006:	2b20      	cmp	r3, #32
 8008008:	f040 80d8 	bne.w	80081bc <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	785b      	ldrb	r3, [r3, #1]
 8008010:	3b02      	subs	r3, #2
 8008012:	2b09      	cmp	r3, #9
 8008014:	d841      	bhi.n	800809a <USBD_CUSTOM_HID_Setup+0xc2>
 8008016:	a201      	add	r2, pc, #4	; (adr r2, 800801c <USBD_CUSTOM_HID_Setup+0x44>)
 8008018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801c:	08008075 	.word	0x08008075
 8008020:	08008053 	.word	0x08008053
 8008024:	0800809b 	.word	0x0800809b
 8008028:	0800809b 	.word	0x0800809b
 800802c:	0800809b 	.word	0x0800809b
 8008030:	0800809b 	.word	0x0800809b
 8008034:	0800809b 	.word	0x0800809b
 8008038:	08008085 	.word	0x08008085
 800803c:	08008063 	.word	0x08008063
 8008040:	08008045 	.word	0x08008045
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	885b      	ldrh	r3, [r3, #2]
 8008048:	b2db      	uxtb	r3, r3
 800804a:	461a      	mov	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	605a      	str	r2, [r3, #4]
          break;
 8008050:	e02a      	b.n	80080a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3304      	adds	r3, #4
 8008056:	2201      	movs	r2, #1
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f98e 	bl	800937c <USBD_CtlSendData>
          break;
 8008060:	e022      	b.n	80080a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	0a1b      	lsrs	r3, r3, #8
 8008068:	b29b      	uxth	r3, r3
 800806a:	b2db      	uxtb	r3, r3
 800806c:	461a      	mov	r2, r3
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	609a      	str	r2, [r3, #8]
          break;
 8008072:	e019      	b.n	80080a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	3308      	adds	r3, #8
 8008078:	2201      	movs	r2, #1
 800807a:	4619      	mov	r1, r3
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f001 f97d 	bl	800937c <USBD_CtlSendData>
          break;
 8008082:	e011      	b.n	80080a8 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2201      	movs	r2, #1
 8008088:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800808a:	6939      	ldr	r1, [r7, #16]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	88db      	ldrh	r3, [r3, #6]
 8008090:	461a      	mov	r2, r3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 f9a0 	bl	80093d8 <USBD_CtlPrepareRx>
          break;
 8008098:	e006      	b.n	80080a8 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f903 	bl	80092a8 <USBD_CtlError>
          ret = USBD_FAIL;
 80080a2:	2302      	movs	r3, #2
 80080a4:	75fb      	strb	r3, [r7, #23]
          break;
 80080a6:	bf00      	nop
      }
      break;
 80080a8:	e08f      	b.n	80081ca <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b0b      	cmp	r3, #11
 80080b0:	d87c      	bhi.n	80081ac <USBD_CUSTOM_HID_Setup+0x1d4>
 80080b2:	a201      	add	r2, pc, #4	; (adr r2, 80080b8 <USBD_CUSTOM_HID_Setup+0xe0>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	080080e9 	.word	0x080080e9
 80080bc:	080081ad 	.word	0x080081ad
 80080c0:	080081ad 	.word	0x080081ad
 80080c4:	080081ad 	.word	0x080081ad
 80080c8:	080081ad 	.word	0x080081ad
 80080cc:	080081ad 	.word	0x080081ad
 80080d0:	08008111 	.word	0x08008111
 80080d4:	080081ad 	.word	0x080081ad
 80080d8:	080081ad 	.word	0x080081ad
 80080dc:	080081ad 	.word	0x080081ad
 80080e0:	0800815f 	.word	0x0800815f
 80080e4:	08008187 	.word	0x08008187
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d107      	bne.n	8008102 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80080f2:	f107 030e 	add.w	r3, r7, #14
 80080f6:	2202      	movs	r2, #2
 80080f8:	4619      	mov	r1, r3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 f93e 	bl	800937c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008100:	e05b      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 f8cf 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800810a:	2302      	movs	r3, #2
 800810c:	75fb      	strb	r3, [r7, #23]
          break;
 800810e:	e054      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	885b      	ldrh	r3, [r3, #2]
 8008114:	0a1b      	lsrs	r3, r3, #8
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b22      	cmp	r3, #34	; 0x22
 800811a:	d10b      	bne.n	8008134 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	88db      	ldrh	r3, [r3, #6]
 8008120:	2b5f      	cmp	r3, #95	; 0x5f
 8008122:	bf28      	it	cs
 8008124:	235f      	movcs	r3, #95	; 0x5f
 8008126:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	e00d      	b.n	8008150 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	885b      	ldrh	r3, [r3, #2]
 8008138:	0a1b      	lsrs	r3, r3, #8
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b21      	cmp	r3, #33	; 0x21
 800813e:	d107      	bne.n	8008150 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008140:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008142:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	88db      	ldrh	r3, [r3, #6]
 8008148:	2b09      	cmp	r3, #9
 800814a:	bf28      	it	cs
 800814c:	2309      	movcs	r3, #9
 800814e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008150:	8bfb      	ldrh	r3, [r7, #30]
 8008152:	461a      	mov	r2, r3
 8008154:	69b9      	ldr	r1, [r7, #24]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 f910 	bl	800937c <USBD_CtlSendData>
          break;
 800815c:	e02d      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008164:	2b03      	cmp	r3, #3
 8008166:	d107      	bne.n	8008178 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	330c      	adds	r3, #12
 800816c:	2201      	movs	r2, #1
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f903 	bl	800937c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008176:	e020      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f001 f894 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8008180:	2302      	movs	r3, #2
 8008182:	75fb      	strb	r3, [r7, #23]
          break;
 8008184:	e019      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	2b03      	cmp	r3, #3
 800818e:	d106      	bne.n	800819e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	885b      	ldrh	r3, [r3, #2]
 8008194:	b2db      	uxtb	r3, r3
 8008196:	461a      	mov	r2, r3
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800819c:	e00d      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f001 f881 	bl	80092a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80081a6:	2302      	movs	r3, #2
 80081a8:	75fb      	strb	r3, [r7, #23]
          break;
 80081aa:	e006      	b.n	80081ba <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 f87a 	bl	80092a8 <USBD_CtlError>
          ret = USBD_FAIL;
 80081b4:	2302      	movs	r3, #2
 80081b6:	75fb      	strb	r3, [r7, #23]
          break;
 80081b8:	bf00      	nop
      }
      break;
 80081ba:	e006      	b.n	80081ca <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 f872 	bl	80092a8 <USBD_CtlError>
      ret = USBD_FAIL;
 80081c4:	2302      	movs	r3, #2
 80081c6:	75fb      	strb	r3, [r7, #23]
      break;
 80081c8:	bf00      	nop
  }
  return ret;
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	200001a0 	.word	0x200001a0

080081d8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ec:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d10f      	bne.n	8008218 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	7d1b      	ldrb	r3, [r3, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d109      	bne.n	8008214 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2201      	movs	r2, #1
 8008204:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	2181      	movs	r1, #129	; 0x81
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f004 ffa5 	bl	800d15c <USBD_LL_Transmit>
 8008212:	e001      	b.n	8008218 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8008214:	2301      	movs	r3, #1
 8008216:	e000      	b.n	800821a <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2229      	movs	r2, #41	; 0x29
 8008230:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008232:	4b03      	ldr	r3, [pc, #12]	; (8008240 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008234:	4618      	mov	r0, r3
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	bc80      	pop	{r7}
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	2000011c 	.word	0x2000011c

08008244 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2229      	movs	r2, #41	; 0x29
 8008250:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008252:	4b03      	ldr	r3, [pc, #12]	; (8008260 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000148 	.word	0x20000148

08008264 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2229      	movs	r2, #41	; 0x29
 8008270:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	bc80      	pop	{r7}
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	20000174 	.word	0x20000174

08008284 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008296:	2200      	movs	r2, #0
 8008298:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr

080082a6 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b8:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	7810      	ldrb	r0, [r2, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	7852      	ldrb	r2, [r2, #1]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80082ce:	68fa      	ldr	r2, [r7, #12]
 80082d0:	2302      	movs	r3, #2
 80082d2:	2101      	movs	r1, #1
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f004 ff64 	bl	800d1a2 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d10c      	bne.n	8008316 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	7810      	ldrb	r0, [r2, #0]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	7852      	ldrb	r2, [r2, #1]
 800830c:	4611      	mov	r1, r2
 800830e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	220a      	movs	r2, #10
 800832c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800832e:	4b03      	ldr	r3, [pc, #12]	; (800833c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	200001ac 	.word	0x200001ac

08008340 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800834a:	2302      	movs	r3, #2
 800834c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d005      	beq.n	8008360 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800835c:	2300      	movs	r3, #0
 800835e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008360:	7bfb      	ldrb	r3, [r7, #15]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	bc80      	pop	{r7}
 800836a:	4770      	bx	lr

0800836c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4613      	mov	r3, r2
 8008378:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008380:	2302      	movs	r3, #2
 8008382:	e01a      	b.n	80083ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	79fa      	ldrb	r2, [r7, #7]
 80083b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f004 fd7a 	bl	800ceac <USBD_LL_Init>

  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d006      	beq.n	80083e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	e001      	b.n	80083e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80083e4:	2302      	movs	r3, #2
 80083e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr

080083f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f004 fda5 	bl	800cf4c <USBD_LL_Start>

  return USBD_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800842c:	2302      	movs	r3, #2
 800842e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	4611      	mov	r1, r2
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008454:	7bfb      	ldrb	r3, [r7, #15]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	4611      	mov	r1, r2
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3

  return USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 feca 	bl	8009230 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d00c      	beq.n	80084da <USBD_LL_SetupStage+0x56>
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d302      	bcc.n	80084ca <USBD_LL_SetupStage+0x46>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d010      	beq.n	80084ea <USBD_LL_SetupStage+0x66>
 80084c8:	e017      	b.n	80084fa <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9ca 	bl	800886c <USBD_StdDevReq>
      break;
 80084d8:	e01a      	b.n	8008510 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa2c 	bl	8008940 <USBD_StdItfReq>
      break;
 80084e8:	e012      	b.n	8008510 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa6a 	bl	80089cc <USBD_StdEPReq>
      break;
 80084f8:	e00a      	b.n	8008510 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008504:	b2db      	uxtb	r3, r3
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f004 fd9e 	bl	800d04a <USBD_LL_StallEP>
      break;
 800850e:	bf00      	nop
  }

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	460b      	mov	r3, r1
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d14b      	bne.n	80085c6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008534:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800853c:	2b03      	cmp	r3, #3
 800853e:	d134      	bne.n	80085aa <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	68da      	ldr	r2, [r3, #12]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	429a      	cmp	r2, r3
 800854a:	d919      	bls.n	8008580 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008562:	429a      	cmp	r2, r3
 8008564:	d203      	bcs.n	800856e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800856a:	b29b      	uxth	r3, r3
 800856c:	e002      	b.n	8008574 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008572:	b29b      	uxth	r3, r3
 8008574:	461a      	mov	r2, r3
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 ff4b 	bl	8009414 <USBD_CtlContinueRx>
 800857e:	e038      	b.n	80085f2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008592:	2b03      	cmp	r3, #3
 8008594:	d105      	bne.n	80085a2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 ff48 	bl	8009438 <USBD_CtlSendStatus>
 80085a8:	e023      	b.n	80085f2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085b0:	2b05      	cmp	r3, #5
 80085b2:	d11e      	bne.n	80085f2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80085bc:	2100      	movs	r1, #0
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f004 fd43 	bl	800d04a <USBD_LL_StallEP>
 80085c4:	e015      	b.n	80085f2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d108      	bne.n	80085ee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	7afa      	ldrb	r2, [r7, #11]
 80085e6:	4611      	mov	r1, r2
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	4798      	blx	r3
 80085ec:	e001      	b.n	80085f2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085ee:	2302      	movs	r3, #2
 80085f0:	e000      	b.n	80085f4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	460b      	mov	r3, r1
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800860a:	7afb      	ldrb	r3, [r7, #11]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d17f      	bne.n	8008710 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	3314      	adds	r3, #20
 8008614:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800861c:	2b02      	cmp	r3, #2
 800861e:	d15c      	bne.n	80086da <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	429a      	cmp	r2, r3
 800862a:	d915      	bls.n	8008658 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	1ad2      	subs	r2, r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 feb5 	bl	80093b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	2100      	movs	r1, #0
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f004 fda6 	bl	800d1a2 <USBD_LL_PrepareReceive>
 8008656:	e04e      	b.n	80086f6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	6912      	ldr	r2, [r2, #16]
 8008660:	fbb3 f1f2 	udiv	r1, r3, r2
 8008664:	fb02 f201 	mul.w	r2, r2, r1
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d11c      	bne.n	80086a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008676:	429a      	cmp	r2, r3
 8008678:	d316      	bcc.n	80086a8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008684:	429a      	cmp	r2, r3
 8008686:	d20f      	bcs.n	80086a8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008688:	2200      	movs	r2, #0
 800868a:	2100      	movs	r1, #0
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 fe91 	bl	80093b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800869a:	2300      	movs	r3, #0
 800869c:	2200      	movs	r2, #0
 800869e:	2100      	movs	r1, #0
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f004 fd7e 	bl	800d1a2 <USBD_LL_PrepareReceive>
 80086a6:	e026      	b.n	80086f6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d105      	bne.n	80086ca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80086ca:	2180      	movs	r1, #128	; 0x80
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f004 fcbc 	bl	800d04a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 fec3 	bl	800945e <USBD_CtlReceiveStatus>
 80086d8:	e00d      	b.n	80086f6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d004      	beq.n	80086ee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80086ee:	2180      	movs	r1, #128	; 0x80
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f004 fcaa 	bl	800d04a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d11d      	bne.n	800873c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff fe83 	bl	800840c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800870e:	e015      	b.n	800873c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008716:	695b      	ldr	r3, [r3, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00d      	beq.n	8008738 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008722:	2b03      	cmp	r3, #3
 8008724:	d108      	bne.n	8008738 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	7afa      	ldrb	r2, [r7, #11]
 8008730:	4611      	mov	r1, r2
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	4798      	blx	r3
 8008736:	e001      	b.n	800873c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008738:	2302      	movs	r3, #2
 800873a:	e000      	b.n	800873e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b082      	sub	sp, #8
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800874e:	2340      	movs	r3, #64	; 0x40
 8008750:	2200      	movs	r2, #0
 8008752:	2100      	movs	r1, #0
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f004 fc14 	bl	800cf82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2240      	movs	r2, #64	; 0x40
 8008766:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800876a:	2340      	movs	r3, #64	; 0x40
 800876c:	2200      	movs	r2, #0
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f004 fc06 	bl	800cf82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2240      	movs	r2, #64	; 0x40
 8008780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d009      	beq.n	80087be <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6852      	ldr	r2, [r2, #4]
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	4611      	mov	r1, r2
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
  }

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bc80      	pop	{r7}
 80087e4:	4770      	bx	lr

080087e6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr

0800880e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881c:	2b04      	cmp	r3, #4
 800881e:	d105      	bne.n	800882c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008846:	2b03      	cmp	r3, #3
 8008848:	d10b      	bne.n	8008862 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008882:	2b20      	cmp	r3, #32
 8008884:	d004      	beq.n	8008890 <USBD_StdDevReq+0x24>
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d002      	beq.n	8008890 <USBD_StdDevReq+0x24>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d008      	beq.n	80088a0 <USBD_StdDevReq+0x34>
 800888e:	e04c      	b.n	800892a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
      break;
 800889e:	e049      	b.n	8008934 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d83a      	bhi.n	800891e <USBD_StdDevReq+0xb2>
 80088a8:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USBD_StdDevReq+0x44>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	08008901 	.word	0x08008901
 80088b4:	08008915 	.word	0x08008915
 80088b8:	0800891f 	.word	0x0800891f
 80088bc:	0800890b 	.word	0x0800890b
 80088c0:	0800891f 	.word	0x0800891f
 80088c4:	080088e3 	.word	0x080088e3
 80088c8:	080088d9 	.word	0x080088d9
 80088cc:	0800891f 	.word	0x0800891f
 80088d0:	080088f7 	.word	0x080088f7
 80088d4:	080088ed 	.word	0x080088ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f9d4 	bl	8008c88 <USBD_GetDescriptor>
          break;
 80088e0:	e022      	b.n	8008928 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088e2:	6839      	ldr	r1, [r7, #0]
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fb37 	bl	8008f58 <USBD_SetAddress>
          break;
 80088ea:	e01d      	b.n	8008928 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb74 	bl	8008fdc <USBD_SetConfig>
          break;
 80088f4:	e018      	b.n	8008928 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fbfd 	bl	80090f8 <USBD_GetConfig>
          break;
 80088fe:	e013      	b.n	8008928 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fc2c 	bl	8009160 <USBD_GetStatus>
          break;
 8008908:	e00e      	b.n	8008928 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fc5a 	bl	80091c6 <USBD_SetFeature>
          break;
 8008912:	e009      	b.n	8008928 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fc69 	bl	80091ee <USBD_ClrFeature>
          break;
 800891c:	e004      	b.n	8008928 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fcc1 	bl	80092a8 <USBD_CtlError>
          break;
 8008926:	bf00      	nop
      }
      break;
 8008928:	e004      	b.n	8008934 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800892a:	6839      	ldr	r1, [r7, #0]
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fcbb 	bl	80092a8 <USBD_CtlError>
      break;
 8008932:	bf00      	nop
  }

  return ret;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop

08008940 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008956:	2b20      	cmp	r3, #32
 8008958:	d003      	beq.n	8008962 <USBD_StdItfReq+0x22>
 800895a:	2b40      	cmp	r3, #64	; 0x40
 800895c:	d001      	beq.n	8008962 <USBD_StdItfReq+0x22>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d12a      	bne.n	80089b8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008968:	3b01      	subs	r3, #1
 800896a:	2b02      	cmp	r3, #2
 800896c:	d81d      	bhi.n	80089aa <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	889b      	ldrh	r3, [r3, #4]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b01      	cmp	r3, #1
 8008976:	d813      	bhi.n	80089a0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
 8008986:	4603      	mov	r3, r0
 8008988:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	88db      	ldrh	r3, [r3, #6]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d110      	bne.n	80089b4 <USBD_StdItfReq+0x74>
 8008992:	7bfb      	ldrb	r3, [r7, #15]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10d      	bne.n	80089b4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fd4d 	bl	8009438 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800899e:	e009      	b.n	80089b4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80089a0:	6839      	ldr	r1, [r7, #0]
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fc80 	bl	80092a8 <USBD_CtlError>
          break;
 80089a8:	e004      	b.n	80089b4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fc7b 	bl	80092a8 <USBD_CtlError>
          break;
 80089b2:	e000      	b.n	80089b6 <USBD_StdItfReq+0x76>
          break;
 80089b4:	bf00      	nop
      }
      break;
 80089b6:	e004      	b.n	80089c2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fc74 	bl	80092a8 <USBD_CtlError>
      break;
 80089c0:	bf00      	nop
  }

  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	889b      	ldrh	r3, [r3, #4]
 80089de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d004      	beq.n	80089f6 <USBD_StdEPReq+0x2a>
 80089ec:	2b40      	cmp	r3, #64	; 0x40
 80089ee:	d002      	beq.n	80089f6 <USBD_StdEPReq+0x2a>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d008      	beq.n	8008a06 <USBD_StdEPReq+0x3a>
 80089f4:	e13d      	b.n	8008c72 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4798      	blx	r3
      break;
 8008a04:	e13a      	b.n	8008c7c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a0e:	2b20      	cmp	r3, #32
 8008a10:	d10a      	bne.n	8008a28 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	e12a      	b.n	8008c7e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d03e      	beq.n	8008aae <USBD_StdEPReq+0xe2>
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d002      	beq.n	8008a3a <USBD_StdEPReq+0x6e>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d070      	beq.n	8008b1a <USBD_StdEPReq+0x14e>
 8008a38:	e115      	b.n	8008c66 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d002      	beq.n	8008a4a <USBD_StdEPReq+0x7e>
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d015      	beq.n	8008a74 <USBD_StdEPReq+0xa8>
 8008a48:	e02b      	b.n	8008aa2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00c      	beq.n	8008a6a <USBD_StdEPReq+0x9e>
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b80      	cmp	r3, #128	; 0x80
 8008a54:	d009      	beq.n	8008a6a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f004 faf5 	bl	800d04a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a60:	2180      	movs	r1, #128	; 0x80
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f004 faf1 	bl	800d04a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a68:	e020      	b.n	8008aac <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fc1b 	bl	80092a8 <USBD_CtlError>
              break;
 8008a72:	e01b      	b.n	8008aac <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	885b      	ldrh	r3, [r3, #2]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10e      	bne.n	8008a9a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00b      	beq.n	8008a9a <USBD_StdEPReq+0xce>
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b80      	cmp	r3, #128	; 0x80
 8008a86:	d008      	beq.n	8008a9a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	88db      	ldrh	r3, [r3, #6]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d104      	bne.n	8008a9a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f004 fad8 	bl	800d04a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fccc 	bl	8009438 <USBD_CtlSendStatus>

              break;
 8008aa0:	e004      	b.n	8008aac <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 fbff 	bl	80092a8 <USBD_CtlError>
              break;
 8008aaa:	bf00      	nop
          }
          break;
 8008aac:	e0e0      	b.n	8008c70 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d002      	beq.n	8008abe <USBD_StdEPReq+0xf2>
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d015      	beq.n	8008ae8 <USBD_StdEPReq+0x11c>
 8008abc:	e026      	b.n	8008b0c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00c      	beq.n	8008ade <USBD_StdEPReq+0x112>
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b80      	cmp	r3, #128	; 0x80
 8008ac8:	d009      	beq.n	8008ade <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f004 fabb 	bl	800d04a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ad4:	2180      	movs	r1, #128	; 0x80
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f004 fab7 	bl	800d04a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008adc:	e01c      	b.n	8008b18 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fbe1 	bl	80092a8 <USBD_CtlError>
              break;
 8008ae6:	e017      	b.n	8008b18 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	885b      	ldrh	r3, [r3, #2]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d112      	bne.n	8008b16 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f004 fac2 	bl	800d088 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fc97 	bl	8009438 <USBD_CtlSendStatus>
              }
              break;
 8008b0a:	e004      	b.n	8008b16 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fbca 	bl	80092a8 <USBD_CtlError>
              break;
 8008b14:	e000      	b.n	8008b18 <USBD_StdEPReq+0x14c>
              break;
 8008b16:	bf00      	nop
          }
          break;
 8008b18:	e0aa      	b.n	8008c70 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d002      	beq.n	8008b2a <USBD_StdEPReq+0x15e>
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d032      	beq.n	8008b8e <USBD_StdEPReq+0x1c2>
 8008b28:	e097      	b.n	8008c5a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b2a:	7bbb      	ldrb	r3, [r7, #14]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <USBD_StdEPReq+0x174>
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b80      	cmp	r3, #128	; 0x80
 8008b34:	d004      	beq.n	8008b40 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fbb5 	bl	80092a8 <USBD_CtlError>
                break;
 8008b3e:	e091      	b.n	8008c64 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	da0b      	bge.n	8008b60 <USBD_StdEPReq+0x194>
 8008b48:	7bbb      	ldrb	r3, [r7, #14]
 8008b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	3310      	adds	r3, #16
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	3304      	adds	r3, #4
 8008b5e:	e00b      	b.n	8008b78 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	4413      	add	r3, r2
 8008b76:	3304      	adds	r3, #4
 8008b78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2202      	movs	r2, #2
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fbf8 	bl	800937c <USBD_CtlSendData>
              break;
 8008b8c:	e06a      	b.n	8008c64 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	da11      	bge.n	8008bba <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	f003 020f 	and.w	r2, r3, #15
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	3318      	adds	r3, #24
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d117      	bne.n	8008be0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fb78 	bl	80092a8 <USBD_CtlError>
                  break;
 8008bb8:	e054      	b.n	8008c64 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bba:	7bbb      	ldrb	r3, [r7, #14]
 8008bbc:	f003 020f 	and.w	r2, r3, #15
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	440b      	add	r3, r1
 8008bcc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fb65 	bl	80092a8 <USBD_CtlError>
                  break;
 8008bde:	e041      	b.n	8008c64 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	da0b      	bge.n	8008c00 <USBD_StdEPReq+0x234>
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	3310      	adds	r3, #16
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	e00b      	b.n	8008c18 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	3304      	adds	r3, #4
 8008c18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c1a:	7bbb      	ldrb	r3, [r7, #14]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <USBD_StdEPReq+0x25a>
 8008c20:	7bbb      	ldrb	r3, [r7, #14]
 8008c22:	2b80      	cmp	r3, #128	; 0x80
 8008c24:	d103      	bne.n	8008c2e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	e00e      	b.n	8008c4c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f004 fa47 	bl	800d0c6 <USBD_LL_IsStallEP>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2201      	movs	r2, #1
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e002      	b.n	8008c4c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fb92 	bl	800937c <USBD_CtlSendData>
              break;
 8008c58:	e004      	b.n	8008c64 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fb23 	bl	80092a8 <USBD_CtlError>
              break;
 8008c62:	bf00      	nop
          }
          break;
 8008c64:	e004      	b.n	8008c70 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fb1d 	bl	80092a8 <USBD_CtlError>
          break;
 8008c6e:	bf00      	nop
      }
      break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fb17 	bl	80092a8 <USBD_CtlError>
      break;
 8008c7a:	bf00      	nop
  }

  return ret;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3710      	adds	r7, #16
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	885b      	ldrh	r3, [r3, #2]
 8008ca2:	0a1b      	lsrs	r3, r3, #8
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	2b06      	cmp	r3, #6
 8008caa:	f200 8128 	bhi.w	8008efe <USBD_GetDescriptor+0x276>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBD_GetDescriptor+0x2c>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cd1 	.word	0x08008cd1
 8008cb8:	08008ce9 	.word	0x08008ce9
 8008cbc:	08008d29 	.word	0x08008d29
 8008cc0:	08008eff 	.word	0x08008eff
 8008cc4:	08008eff 	.word	0x08008eff
 8008cc8:	08008e9f 	.word	0x08008e9f
 8008ccc:	08008ecb 	.word	0x08008ecb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	7c12      	ldrb	r2, [r2, #16]
 8008cdc:	f107 0108 	add.w	r1, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
      break;
 8008ce6:	e112      	b.n	8008f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	7c1b      	ldrb	r3, [r3, #16]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10d      	bne.n	8008d0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	f107 0208 	add.w	r2, r7, #8
 8008cfc:	4610      	mov	r0, r2
 8008cfe:	4798      	blx	r3
 8008d00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	3301      	adds	r3, #1
 8008d06:	2202      	movs	r2, #2
 8008d08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d0a:	e100      	b.n	8008f0e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	f107 0208 	add.w	r2, r7, #8
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
 8008d1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	3301      	adds	r3, #1
 8008d22:	2202      	movs	r2, #2
 8008d24:	701a      	strb	r2, [r3, #0]
      break;
 8008d26:	e0f2      	b.n	8008f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	885b      	ldrh	r3, [r3, #2]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b05      	cmp	r3, #5
 8008d30:	f200 80ac 	bhi.w	8008e8c <USBD_GetDescriptor+0x204>
 8008d34:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <USBD_GetDescriptor+0xb4>)
 8008d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3a:	bf00      	nop
 8008d3c:	08008d55 	.word	0x08008d55
 8008d40:	08008d89 	.word	0x08008d89
 8008d44:	08008dbd 	.word	0x08008dbd
 8008d48:	08008df1 	.word	0x08008df1
 8008d4c:	08008e25 	.word	0x08008e25
 8008d50:	08008e59 	.word	0x08008e59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00b      	beq.n	8008d78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	7c12      	ldrb	r2, [r2, #16]
 8008d6c:	f107 0108 	add.w	r1, r7, #8
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
 8008d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d76:	e091      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa94 	bl	80092a8 <USBD_CtlError>
            err++;
 8008d80:	7afb      	ldrb	r3, [r7, #11]
 8008d82:	3301      	adds	r3, #1
 8008d84:	72fb      	strb	r3, [r7, #11]
          break;
 8008d86:	e089      	b.n	8008e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	7c12      	ldrb	r2, [r2, #16]
 8008da0:	f107 0108 	add.w	r1, r7, #8
 8008da4:	4610      	mov	r0, r2
 8008da6:	4798      	blx	r3
 8008da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008daa:	e077      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa7a 	bl	80092a8 <USBD_CtlError>
            err++;
 8008db4:	7afb      	ldrb	r3, [r7, #11]
 8008db6:	3301      	adds	r3, #1
 8008db8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dba:	e06f      	b.n	8008e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	7c12      	ldrb	r2, [r2, #16]
 8008dd4:	f107 0108 	add.w	r1, r7, #8
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
 8008ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dde:	e05d      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa60 	bl	80092a8 <USBD_CtlError>
            err++;
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	3301      	adds	r3, #1
 8008dec:	72fb      	strb	r3, [r7, #11]
          break;
 8008dee:	e055      	b.n	8008e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7c12      	ldrb	r2, [r2, #16]
 8008e08:	f107 0108 	add.w	r1, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e12:	e043      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa46 	bl	80092a8 <USBD_CtlError>
            err++;
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	72fb      	strb	r3, [r7, #11]
          break;
 8008e22:	e03b      	b.n	8008e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e36:	695b      	ldr	r3, [r3, #20]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e46:	e029      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa2c 	bl	80092a8 <USBD_CtlError>
            err++;
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	3301      	adds	r3, #1
 8008e54:	72fb      	strb	r3, [r7, #11]
          break;
 8008e56:	e021      	b.n	8008e9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7c12      	ldrb	r2, [r2, #16]
 8008e70:	f107 0108 	add.w	r1, r7, #8
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
 8008e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e7a:	e00f      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa12 	bl	80092a8 <USBD_CtlError>
            err++;
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	3301      	adds	r3, #1
 8008e88:	72fb      	strb	r3, [r7, #11]
          break;
 8008e8a:	e007      	b.n	8008e9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fa0a 	bl	80092a8 <USBD_CtlError>
          err++;
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	3301      	adds	r3, #1
 8008e98:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e9a:	e038      	b.n	8008f0e <USBD_GetDescriptor+0x286>
 8008e9c:	e037      	b.n	8008f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7c1b      	ldrb	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eae:	f107 0208 	add.w	r2, r7, #8
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	4798      	blx	r3
 8008eb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb8:	e029      	b.n	8008f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eba:	6839      	ldr	r1, [r7, #0]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f9f3 	bl	80092a8 <USBD_CtlError>
        err++;
 8008ec2:	7afb      	ldrb	r3, [r7, #11]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec8:	e021      	b.n	8008f0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7c1b      	ldrb	r3, [r3, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10d      	bne.n	8008eee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	f107 0208 	add.w	r2, r7, #8
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4798      	blx	r3
 8008ee2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	2207      	movs	r2, #7
 8008eea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eec:	e00f      	b.n	8008f0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eee:	6839      	ldr	r1, [r7, #0]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f9d9 	bl	80092a8 <USBD_CtlError>
        err++;
 8008ef6:	7afb      	ldrb	r3, [r7, #11]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	72fb      	strb	r3, [r7, #11]
      break;
 8008efc:	e007      	b.n	8008f0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f9d1 	bl	80092a8 <USBD_CtlError>
      err++;
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f0c:	bf00      	nop
  }

  if (err != 0U)
 8008f0e:	7afb      	ldrb	r3, [r7, #11]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d11c      	bne.n	8008f4e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f14:	893b      	ldrh	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d011      	beq.n	8008f3e <USBD_GetDescriptor+0x2b6>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	88da      	ldrh	r2, [r3, #6]
 8008f26:	893b      	ldrh	r3, [r7, #8]
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	bf28      	it	cs
 8008f2c:	4613      	movcs	r3, r2
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f32:	893b      	ldrh	r3, [r7, #8]
 8008f34:	461a      	mov	r2, r3
 8008f36:	68f9      	ldr	r1, [r7, #12]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fa1f 	bl	800937c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	88db      	ldrh	r3, [r3, #6]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d104      	bne.n	8008f50 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa76 	bl	8009438 <USBD_CtlSendStatus>
 8008f4c:	e000      	b.n	8008f50 <USBD_GetDescriptor+0x2c8>
    return;
 8008f4e:	bf00      	nop
    }
  }
}
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop

08008f58 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	889b      	ldrh	r3, [r3, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d130      	bne.n	8008fcc <USBD_SetAddress+0x74>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	88db      	ldrh	r3, [r3, #6]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d12c      	bne.n	8008fcc <USBD_SetAddress+0x74>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	885b      	ldrh	r3, [r3, #2]
 8008f76:	2b7f      	cmp	r3, #127	; 0x7f
 8008f78:	d828      	bhi.n	8008fcc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	885b      	ldrh	r3, [r3, #2]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d104      	bne.n	8008f9a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f988 	bl	80092a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f98:	e01c      	b.n	8008fd4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	7bfa      	ldrb	r2, [r7, #15]
 8008f9e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f004 f8b9 	bl	800d11e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fa43 	bl	8009438 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d004      	beq.n	8008fc2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc0:	e008      	b.n	8008fd4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fca:	e003      	b.n	8008fd4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f96a 	bl	80092a8 <USBD_CtlError>
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	885b      	ldrh	r3, [r3, #2]
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	4b41      	ldr	r3, [pc, #260]	; (80090f4 <USBD_SetConfig+0x118>)
 8008fee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ff0:	4b40      	ldr	r3, [pc, #256]	; (80090f4 <USBD_SetConfig+0x118>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d904      	bls.n	8009002 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f954 	bl	80092a8 <USBD_CtlError>
 8009000:	e075      	b.n	80090ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009008:	2b02      	cmp	r3, #2
 800900a:	d002      	beq.n	8009012 <USBD_SetConfig+0x36>
 800900c:	2b03      	cmp	r3, #3
 800900e:	d023      	beq.n	8009058 <USBD_SetConfig+0x7c>
 8009010:	e062      	b.n	80090d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009012:	4b38      	ldr	r3, [pc, #224]	; (80090f4 <USBD_SetConfig+0x118>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d01a      	beq.n	8009050 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800901a:	4b36      	ldr	r3, [pc, #216]	; (80090f4 <USBD_SetConfig+0x118>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2203      	movs	r2, #3
 8009028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800902c:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <USBD_SetConfig+0x118>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff f9f4 	bl	8008420 <USBD_SetClassConfig>
 8009038:	4603      	mov	r3, r0
 800903a:	2b02      	cmp	r3, #2
 800903c:	d104      	bne.n	8009048 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f931 	bl	80092a8 <USBD_CtlError>
            return;
 8009046:	e052      	b.n	80090ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 f9f5 	bl	8009438 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800904e:	e04e      	b.n	80090ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f9f1 	bl	8009438 <USBD_CtlSendStatus>
        break;
 8009056:	e04a      	b.n	80090ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009058:	4b26      	ldr	r3, [pc, #152]	; (80090f4 <USBD_SetConfig+0x118>)
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d112      	bne.n	8009086 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009068:	4b22      	ldr	r3, [pc, #136]	; (80090f4 <USBD_SetConfig+0x118>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	461a      	mov	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009072:	4b20      	ldr	r3, [pc, #128]	; (80090f4 <USBD_SetConfig+0x118>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff f9f0 	bl	800845e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f9da 	bl	8009438 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009084:	e033      	b.n	80090ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009086:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <USBD_SetConfig+0x118>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	429a      	cmp	r2, r3
 8009092:	d01d      	beq.n	80090d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff f9de 	bl	800845e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80090a2:	4b14      	ldr	r3, [pc, #80]	; (80090f4 <USBD_SetConfig+0x118>)
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <USBD_SetConfig+0x118>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff f9b4 	bl	8008420 <USBD_SetClassConfig>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d104      	bne.n	80090c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f8f1 	bl	80092a8 <USBD_CtlError>
            return;
 80090c6:	e012      	b.n	80090ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f9b5 	bl	8009438 <USBD_CtlSendStatus>
        break;
 80090ce:	e00e      	b.n	80090ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f9b1 	bl	8009438 <USBD_CtlSendStatus>
        break;
 80090d6:	e00a      	b.n	80090ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f8e4 	bl	80092a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <USBD_SetConfig+0x118>)
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7ff f9b9 	bl	800845e <USBD_ClrClassConfig>
        break;
 80090ec:	bf00      	nop
    }
  }
}
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000970 	.word	0x20000970

080090f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	88db      	ldrh	r3, [r3, #6]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d004      	beq.n	8009114 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8cb 	bl	80092a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009112:	e021      	b.n	8009158 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911a:	2b01      	cmp	r3, #1
 800911c:	db17      	blt.n	800914e <USBD_GetConfig+0x56>
 800911e:	2b02      	cmp	r3, #2
 8009120:	dd02      	ble.n	8009128 <USBD_GetConfig+0x30>
 8009122:	2b03      	cmp	r3, #3
 8009124:	d00b      	beq.n	800913e <USBD_GetConfig+0x46>
 8009126:	e012      	b.n	800914e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3308      	adds	r3, #8
 8009132:	2201      	movs	r2, #1
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f920 	bl	800937c <USBD_CtlSendData>
        break;
 800913c:	e00c      	b.n	8009158 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3304      	adds	r3, #4
 8009142:	2201      	movs	r2, #1
 8009144:	4619      	mov	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f918 	bl	800937c <USBD_CtlSendData>
        break;
 800914c:	e004      	b.n	8009158 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f8a9 	bl	80092a8 <USBD_CtlError>
        break;
 8009156:	bf00      	nop
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009170:	3b01      	subs	r3, #1
 8009172:	2b02      	cmp	r3, #2
 8009174:	d81e      	bhi.n	80091b4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	88db      	ldrh	r3, [r3, #6]
 800917a:	2b02      	cmp	r3, #2
 800917c:	d004      	beq.n	8009188 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f891 	bl	80092a8 <USBD_CtlError>
        break;
 8009186:	e01a      	b.n	80091be <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f043 0202 	orr.w	r2, r3, #2
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	330c      	adds	r3, #12
 80091a8:	2202      	movs	r2, #2
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f8e5 	bl	800937c <USBD_CtlSendData>
      break;
 80091b2:	e004      	b.n	80091be <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f876 	bl	80092a8 <USBD_CtlError>
      break;
 80091bc:	bf00      	nop
  }
}
 80091be:	bf00      	nop
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	885b      	ldrh	r3, [r3, #2]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d106      	bne.n	80091e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f929 	bl	8009438 <USBD_CtlSendStatus>
  }
}
 80091e6:	bf00      	nop
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fe:	3b01      	subs	r3, #1
 8009200:	2b02      	cmp	r3, #2
 8009202:	d80b      	bhi.n	800921c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	885b      	ldrh	r3, [r3, #2]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d10c      	bne.n	8009226 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f90f 	bl	8009438 <USBD_CtlSendStatus>
      }
      break;
 800921a:	e004      	b.n	8009226 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f842 	bl	80092a8 <USBD_CtlError>
      break;
 8009224:	e000      	b.n	8009228 <USBD_ClrFeature+0x3a>
      break;
 8009226:	bf00      	nop
  }
}
 8009228:	bf00      	nop
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781a      	ldrb	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	785a      	ldrb	r2, [r3, #1]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	3302      	adds	r3, #2
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b29a      	uxth	r2, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	3303      	adds	r3, #3
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	021b      	lsls	r3, r3, #8
 800925c:	b29b      	uxth	r3, r3
 800925e:	4413      	add	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	3304      	adds	r3, #4
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	b29a      	uxth	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	3305      	adds	r3, #5
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	b29b      	uxth	r3, r3
 800927a:	4413      	add	r3, r2
 800927c:	b29a      	uxth	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	3306      	adds	r3, #6
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	b29a      	uxth	r2, r3
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	3307      	adds	r3, #7
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	021b      	lsls	r3, r3, #8
 8009294:	b29b      	uxth	r3, r3
 8009296:	4413      	add	r3, r2
 8009298:	b29a      	uxth	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	80da      	strh	r2, [r3, #6]

}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80092b2:	2180      	movs	r1, #128	; 0x80
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f003 fec8 	bl	800d04a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80092ba:	2100      	movs	r1, #0
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f003 fec4 	bl	800d04a <USBD_LL_StallEP>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b086      	sub	sp, #24
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	60f8      	str	r0, [r7, #12]
 80092d2:	60b9      	str	r1, [r7, #8]
 80092d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d032      	beq.n	8009346 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f834 	bl	800934e <USBD_GetLen>
 80092e6:	4603      	mov	r3, r0
 80092e8:	3301      	adds	r3, #1
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	005b      	lsls	r3, r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
 80092f6:	1c5a      	adds	r2, r3, #1
 80092f8:	75fa      	strb	r2, [r7, #23]
 80092fa:	461a      	mov	r2, r3
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	4413      	add	r3, r2
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	75fa      	strb	r2, [r7, #23]
 800930c:	461a      	mov	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	4413      	add	r3, r2
 8009312:	2203      	movs	r2, #3
 8009314:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009316:	e012      	b.n	800933e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	75fa      	strb	r2, [r7, #23]
 800931e:	461a      	mov	r2, r3
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	441a      	add	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	1c59      	adds	r1, r3, #1
 8009328:	60f9      	str	r1, [r7, #12]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	75fa      	strb	r2, [r7, #23]
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	4413      	add	r3, r2
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e8      	bne.n	8009318 <USBD_GetString+0x4e>
    }
  }
}
 8009346:	bf00      	nop
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800934e:	b480      	push	{r7}
 8009350:	b085      	sub	sp, #20
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800935a:	e005      	b.n	8009368 <USBD_GetLen+0x1a>
  {
    len++;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	3301      	adds	r3, #1
 8009360:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3301      	adds	r3, #1
 8009366:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1f5      	bne.n	800935c <USBD_GetLen+0xe>
  }

  return len;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2202      	movs	r2, #2
 800938e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009392:	88fa      	ldrh	r2, [r7, #6]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009398:	88fa      	ldrh	r2, [r7, #6]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800939e:	88fb      	ldrh	r3, [r7, #6]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	2100      	movs	r1, #0
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f003 fed9 	bl	800d15c <USBD_LL_Transmit>

  return USBD_OK;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	4613      	mov	r3, r2
 80093c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c2:	88fb      	ldrh	r3, [r7, #6]
 80093c4:	68ba      	ldr	r2, [r7, #8]
 80093c6:	2100      	movs	r1, #0
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f003 fec7 	bl	800d15c <USBD_LL_Transmit>

  return USBD_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2203      	movs	r2, #3
 80093ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093ee:	88fa      	ldrh	r2, [r7, #6]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80093f6:	88fa      	ldrh	r2, [r7, #6]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093fe:	88fb      	ldrh	r3, [r7, #6]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f003 fecc 	bl	800d1a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009422:	88fb      	ldrh	r3, [r7, #6]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	2100      	movs	r1, #0
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f003 feba 	bl	800d1a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2204      	movs	r2, #4
 8009444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009448:	2300      	movs	r3, #0
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f003 fe84 	bl	800d15c <USBD_LL_Transmit>

  return USBD_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2205      	movs	r2, #5
 800946a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800946e:	2300      	movs	r3, #0
 8009470:	2200      	movs	r2, #0
 8009472:	2100      	movs	r1, #0
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f003 fe94 	bl	800d1a2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	4613      	mov	r3, r2
 8009490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 800949c:	7a5b      	ldrb	r3, [r3, #9]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d831      	bhi.n	8009508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094a4:	4b1b      	ldr	r3, [pc, #108]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094a6:	7a5b      	ldrb	r3, [r3, #9]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	4b19      	ldr	r3, [pc, #100]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094ae:	2100      	movs	r1, #0
 80094b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80094b2:	4b18      	ldr	r3, [pc, #96]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094b4:	7a5b      	ldrb	r3, [r3, #9]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	4a16      	ldr	r2, [pc, #88]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	4413      	add	r3, r2
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80094c2:	4b14      	ldr	r3, [pc, #80]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094c4:	7a5b      	ldrb	r3, [r3, #9]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	461a      	mov	r2, r3
 80094ca:	4b12      	ldr	r3, [pc, #72]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094cc:	4413      	add	r3, r2
 80094ce:	79fa      	ldrb	r2, [r7, #7]
 80094d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80094d2:	4b10      	ldr	r3, [pc, #64]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094d4:	7a5b      	ldrb	r3, [r3, #9]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	b2d1      	uxtb	r1, r2
 80094dc:	4a0d      	ldr	r2, [pc, #52]	; (8009514 <FATFS_LinkDriverEx+0x90>)
 80094de:	7251      	strb	r1, [r2, #9]
 80094e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80094e2:	7dbb      	ldrb	r3, [r7, #22]
 80094e4:	3330      	adds	r3, #48	; 0x30
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	3301      	adds	r3, #1
 80094f0:	223a      	movs	r2, #58	; 0x3a
 80094f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3302      	adds	r3, #2
 80094f8:	222f      	movs	r2, #47	; 0x2f
 80094fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3303      	adds	r3, #3
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009504:	2300      	movs	r3, #0
 8009506:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009508:	7dfb      	ldrb	r3, [r7, #23]
}
 800950a:	4618      	mov	r0, r3
 800950c:	371c      	adds	r7, #28
 800950e:	46bd      	mov	sp, r7
 8009510:	bc80      	pop	{r7}
 8009512:	4770      	bx	lr
 8009514:	20000974 	.word	0x20000974

08009518 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009522:	2200      	movs	r2, #0
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff ffac 	bl	8009484 <FATFS_LinkDriverEx>
 800952c:	4603      	mov	r3, r0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009536:	b480      	push	{r7}
 8009538:	b085      	sub	sp, #20
 800953a:	af00      	add	r7, sp, #0
 800953c:	4603      	mov	r3, r0
 800953e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009540:	2300      	movs	r3, #0
 8009542:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009548:	2b84      	cmp	r3, #132	; 0x84
 800954a:	d005      	beq.n	8009558 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800954c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4413      	add	r3, r2
 8009554:	3303      	adds	r3, #3
 8009556:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009558:	68fb      	ldr	r3, [r7, #12]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bc80      	pop	{r7}
 8009562:	4770      	bx	lr

08009564 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800956a:	f3ef 8305 	mrs	r3, IPSR
 800956e:	607b      	str	r3, [r7, #4]
  return(result);
 8009570:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	b2db      	uxtb	r3, r3
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	bc80      	pop	{r7}
 8009584:	4770      	bx	lr

08009586 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800958a:	f002 f84b 	bl	800b624 <vTaskStartScheduler>
  
  return osOK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	bd80      	pop	{r7, pc}

08009594 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009596:	b089      	sub	sp, #36	; 0x24
 8009598:	af04      	add	r7, sp, #16
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d020      	beq.n	80095e8 <osThreadCreate+0x54>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d01c      	beq.n	80095e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685c      	ldr	r4, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681d      	ldr	r5, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691e      	ldr	r6, [r3, #16]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff ffb8 	bl	8009536 <makeFreeRtosPriority>
 80095c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095d0:	9202      	str	r2, [sp, #8]
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	9100      	str	r1, [sp, #0]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	4632      	mov	r2, r6
 80095da:	4629      	mov	r1, r5
 80095dc:	4620      	mov	r0, r4
 80095de:	f001 fdd5 	bl	800b18c <xTaskCreateStatic>
 80095e2:	4603      	mov	r3, r0
 80095e4:	60fb      	str	r3, [r7, #12]
 80095e6:	e01c      	b.n	8009622 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685c      	ldr	r4, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095f4:	b29e      	uxth	r6, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7ff ff9a 	bl	8009536 <makeFreeRtosPriority>
 8009602:	4602      	mov	r2, r0
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	9200      	str	r2, [sp, #0]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	4632      	mov	r2, r6
 8009610:	4629      	mov	r1, r5
 8009612:	4620      	mov	r0, r4
 8009614:	f001 fe13 	bl	800b23e <xTaskCreate>
 8009618:	4603      	mov	r3, r0
 800961a:	2b01      	cmp	r3, #1
 800961c:	d001      	beq.n	8009622 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	e000      	b.n	8009624 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800962c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <osDelay+0x16>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	e000      	b.n	8009644 <osDelay+0x18>
 8009642:	2301      	movs	r3, #1
 8009644:	4618      	mov	r0, r3
 8009646:	f001 ff27 	bl	800b498 <vTaskDelay>
  
  return osOK;
 800964a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af02      	add	r7, sp, #8
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	460b      	mov	r3, r1
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d013      	beq.n	8009692 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <osTimerCreate+0x20>
 8009670:	2101      	movs	r1, #1
 8009672:	e000      	b.n	8009676 <osTimerCreate+0x22>
 8009674:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800967e:	9201      	str	r2, [sp, #4]
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	460a      	mov	r2, r1
 8009686:	2101      	movs	r1, #1
 8009688:	480b      	ldr	r0, [pc, #44]	; (80096b8 <osTimerCreate+0x64>)
 800968a:	f002 feae 	bl	800c3ea <xTimerCreateStatic>
 800968e:	4603      	mov	r3, r0
 8009690:	e00e      	b.n	80096b0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8009692:	7afb      	ldrb	r3, [r7, #11]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <osTimerCreate+0x48>
 8009698:	2201      	movs	r2, #1
 800969a:	e000      	b.n	800969e <osTimerCreate+0x4a>
 800969c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2101      	movs	r1, #1
 80096a8:	4803      	ldr	r0, [pc, #12]	; (80096b8 <osTimerCreate+0x64>)
 80096aa:	f002 fe7d 	bl	800c3a8 <xTimerCreate>
 80096ae:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	0800d470 	.word	0x0800d470

080096bc <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af02      	add	r7, sp, #8
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <osTimerStart+0x20>
    ticks = 1;
 80096d8:	2301      	movs	r3, #1
 80096da:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80096dc:	f7ff ff42 	bl	8009564 <inHandlerMode>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d01b      	beq.n	800971e <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80096e6:	f107 020c 	add.w	r2, r7, #12
 80096ea:	2300      	movs	r3, #0
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4613      	mov	r3, r2
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	2109      	movs	r1, #9
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f002 fee5 	bl	800c4c4 <xTimerGenericCommand>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d002      	beq.n	8009706 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8009700:	23ff      	movs	r3, #255	; 0xff
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	e018      	b.n	8009738 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d015      	beq.n	8009738 <osTimerStart+0x7c>
 800970c:	4b0d      	ldr	r3, [pc, #52]	; (8009744 <osTimerStart+0x88>)
 800970e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	f3bf 8f4f 	dsb	sy
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	e00c      	b.n	8009738 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800971e:	2300      	movs	r3, #0
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	2300      	movs	r3, #0
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	2104      	movs	r1, #4
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f002 fecb 	bl	800c4c4 <xTimerGenericCommand>
 800972e:	4603      	mov	r3, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	d001      	beq.n	8009738 <osTimerStart+0x7c>
      result = osErrorOS;
 8009734:	23ff      	movs	r3, #255	; 0xff
 8009736:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8009738:	697b      	ldr	r3, [r7, #20]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	e000ed04 	.word	0xe000ed04

08009748 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d007      	beq.n	8009768 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	4619      	mov	r1, r3
 800975e:	2001      	movs	r0, #1
 8009760:	f000 fefc 	bl	800a55c <xQueueCreateMutexStatic>
 8009764:	4603      	mov	r3, r0
 8009766:	e003      	b.n	8009770 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009768:	2001      	movs	r0, #1
 800976a:	f000 fedf 	bl	800a52c <xQueueCreateMutex>
 800976e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009782:	2300      	movs	r3, #0
 8009784:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <osMutexWait+0x18>
    return osErrorParameter;
 800978c:	2380      	movs	r3, #128	; 0x80
 800978e:	e03a      	b.n	8009806 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979a:	d103      	bne.n	80097a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800979c:	f04f 33ff 	mov.w	r3, #4294967295
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	e009      	b.n	80097b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <osMutexWait+0x40>
      ticks = 1;
 80097b4:	2301      	movs	r3, #1
 80097b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80097b8:	f7ff fed4 	bl	8009564 <inHandlerMode>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d017      	beq.n	80097f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80097c2:	f107 0308 	add.w	r3, r7, #8
 80097c6:	461a      	mov	r2, r3
 80097c8:	2100      	movs	r1, #0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 fade 	bl	800ad8c <xQueueReceiveFromISR>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d001      	beq.n	80097da <osMutexWait+0x62>
      return osErrorOS;
 80097d6:	23ff      	movs	r3, #255	; 0xff
 80097d8:	e015      	b.n	8009806 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d011      	beq.n	8009804 <osMutexWait+0x8c>
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <osMutexWait+0x98>)
 80097e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	e008      	b.n	8009804 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80097f2:	68f9      	ldr	r1, [r7, #12]
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f9c1 	bl	800ab7c <xQueueSemaphoreTake>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d001      	beq.n	8009804 <osMutexWait+0x8c>
    return osErrorOS;
 8009800:	23ff      	movs	r3, #255	; 0xff
 8009802:	e000      	b.n	8009806 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	e000ed04 	.word	0xe000ed04

08009814 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800981c:	2300      	movs	r3, #0
 800981e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009820:	2300      	movs	r3, #0
 8009822:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009824:	f7ff fe9e 	bl	8009564 <inHandlerMode>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d016      	beq.n	800985c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800982e:	f107 0308 	add.w	r3, r7, #8
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 f83b 	bl	800a8b0 <xQueueGiveFromISR>
 800983a:	4603      	mov	r3, r0
 800983c:	2b01      	cmp	r3, #1
 800983e:	d001      	beq.n	8009844 <osMutexRelease+0x30>
      return osErrorOS;
 8009840:	23ff      	movs	r3, #255	; 0xff
 8009842:	e017      	b.n	8009874 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d013      	beq.n	8009872 <osMutexRelease+0x5e>
 800984a:	4b0c      	ldr	r3, [pc, #48]	; (800987c <osMutexRelease+0x68>)
 800984c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	e00a      	b.n	8009872 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800985c:	2300      	movs	r3, #0
 800985e:	2200      	movs	r2, #0
 8009860:	2100      	movs	r1, #0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fe96 	bl	800a594 <xQueueGenericSend>
 8009868:	4603      	mov	r3, r0
 800986a:	2b01      	cmp	r3, #1
 800986c:	d001      	beq.n	8009872 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800986e:	23ff      	movs	r3, #255	; 0xff
 8009870:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	e000ed04 	.word	0xe000ed04

08009880 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b085      	sub	sp, #20
 8009884:	af02      	add	r7, sp, #8
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d012      	beq.n	80098b8 <osMessageCreate+0x38>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00e      	beq.n	80098b8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6818      	ldr	r0, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6859      	ldr	r1, [r3, #4]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689a      	ldr	r2, [r3, #8]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68dc      	ldr	r4, [r3, #12]
 80098aa:	2300      	movs	r3, #0
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4623      	mov	r3, r4
 80098b0:	f000 fd54 	bl	800a35c <xQueueGenericCreateStatic>
 80098b4:	4603      	mov	r3, r0
 80098b6:	e008      	b.n	80098ca <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	4619      	mov	r1, r3
 80098c4:	f000 fdbc 	bl	800a440 <xQueueGenericCreate>
 80098c8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd90      	pop	{r4, r7, pc}
	...

080098d4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80098d4:	b590      	push	{r4, r7, lr}
 80098d6:	b08b      	sub	sp, #44	; 0x2c
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80098ee:	2380      	movs	r3, #128	; 0x80
 80098f0:	617b      	str	r3, [r7, #20]
    return event;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	461c      	mov	r4, r3
 80098f6:	f107 0314 	add.w	r3, r7, #20
 80098fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009902:	e054      	b.n	80099ae <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009904:	2300      	movs	r3, #0
 8009906:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009908:	2300      	movs	r3, #0
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d103      	bne.n	800991c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
 800991a:	e009      	b.n	8009930 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d006      	beq.n	8009930 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <osMessageGet+0x5c>
      ticks = 1;
 800992c:	2301      	movs	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009930:	f7ff fe18 	bl	8009564 <inHandlerMode>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d01c      	beq.n	8009974 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800993a:	f107 0220 	add.w	r2, r7, #32
 800993e:	f107 0314 	add.w	r3, r7, #20
 8009942:	3304      	adds	r3, #4
 8009944:	4619      	mov	r1, r3
 8009946:	68b8      	ldr	r0, [r7, #8]
 8009948:	f001 fa20 	bl	800ad8c <xQueueReceiveFromISR>
 800994c:	4603      	mov	r3, r0
 800994e:	2b01      	cmp	r3, #1
 8009950:	d102      	bne.n	8009958 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009952:	2310      	movs	r3, #16
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	e001      	b.n	800995c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009958:	2300      	movs	r3, #0
 800995a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01d      	beq.n	800999e <osMessageGet+0xca>
 8009962:	4b15      	ldr	r3, [pc, #84]	; (80099b8 <osMessageGet+0xe4>)
 8009964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	e014      	b.n	800999e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009974:	f107 0314 	add.w	r3, r7, #20
 8009978:	3304      	adds	r3, #4
 800997a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800997c:	4619      	mov	r1, r3
 800997e:	68b8      	ldr	r0, [r7, #8]
 8009980:	f001 f820 	bl	800a9c4 <xQueueReceive>
 8009984:	4603      	mov	r3, r0
 8009986:	2b01      	cmp	r3, #1
 8009988:	d102      	bne.n	8009990 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800998a:	2310      	movs	r3, #16
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e006      	b.n	800999e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <osMessageGet+0xc6>
 8009996:	2300      	movs	r3, #0
 8009998:	e000      	b.n	800999c <osMessageGet+0xc8>
 800999a:	2340      	movs	r3, #64	; 0x40
 800999c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	461c      	mov	r4, r3
 80099a2:	f107 0314 	add.w	r3, r7, #20
 80099a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	372c      	adds	r7, #44	; 0x2c
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd90      	pop	{r4, r7, pc}
 80099b6:	bf00      	nop
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f103 0208 	add.w	r2, r3, #8
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f103 0208 	add.w	r2, r3, #8
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f103 0208 	add.w	r2, r3, #8
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr

080099fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bc80      	pop	{r7}
 8009a10:	4770      	bx	lr

08009a12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	683a      	ldr	r2, [r7, #0]
 8009a3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	601a      	str	r2, [r3, #0]
}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bc80      	pop	{r7}
 8009a56:	4770      	bx	lr

08009a58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d103      	bne.n	8009a78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	e00c      	b.n	8009a92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	e002      	b.n	8009a86 <vListInsert+0x2e>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d9f6      	bls.n	8009a80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
}
 8009abe:	bf00      	nop
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bc80      	pop	{r7}
 8009ac6:	4770      	bx	lr

08009ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	6892      	ldr	r2, [r2, #8]
 8009ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	6852      	ldr	r2, [r2, #4]
 8009ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685a      	ldr	r2, [r3, #4]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d103      	bne.n	8009afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	1e5a      	subs	r2, r3, #1
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bc80      	pop	{r7}
 8009b18:	4770      	bx	lr
	...

08009b1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3b04      	subs	r3, #4
 8009b2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f023 0201 	bic.w	r2, r3, #1
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	3b04      	subs	r3, #4
 8009b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <pxPortInitialiseStack+0x54>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	3b14      	subs	r3, #20
 8009b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3b20      	subs	r3, #32
 8009b62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b64:	68fb      	ldr	r3, [r7, #12]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr
 8009b70:	08009b75 	.word	0x08009b75

08009b74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <prvTaskExitError+0x4c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d009      	beq.n	8009b9c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e7fe      	b.n	8009b9a <prvTaskExitError+0x26>
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	f383 8811 	msr	BASEPRI, r3
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bae:	bf00      	nop
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0fc      	beq.n	8009bb0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bc80      	pop	{r7}
 8009bbe:	4770      	bx	lr
 8009bc0:	200001b8 	.word	0x200001b8
	...

08009bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <pxCurrentTCBConst2>)
 8009bd2:	6819      	ldr	r1, [r3, #0]
 8009bd4:	6808      	ldr	r0, [r1, #0]
 8009bd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009bda:	f380 8809 	msr	PSP, r0
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f04f 0000 	mov.w	r0, #0
 8009be6:	f380 8811 	msr	BASEPRI, r0
 8009bea:	f04e 0e0d 	orr.w	lr, lr, #13
 8009bee:	4770      	bx	lr

08009bf0 <pxCurrentTCBConst2>:
 8009bf0:	20001940 	.word	0x20001940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop

08009bf8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009bf8:	4806      	ldr	r0, [pc, #24]	; (8009c14 <prvPortStartFirstTask+0x1c>)
 8009bfa:	6800      	ldr	r0, [r0, #0]
 8009bfc:	6800      	ldr	r0, [r0, #0]
 8009bfe:	f380 8808 	msr	MSP, r0
 8009c02:	b662      	cpsie	i
 8009c04:	b661      	cpsie	f
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	df00      	svc	0
 8009c10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c12:	bf00      	nop
 8009c14:	e000ed08 	.word	0xe000ed08

08009c18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c1e:	4b31      	ldr	r3, [pc, #196]	; (8009ce4 <xPortStartScheduler+0xcc>)
 8009c20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	22ff      	movs	r2, #255	; 0xff
 8009c2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	4b29      	ldr	r3, [pc, #164]	; (8009ce8 <xPortStartScheduler+0xd0>)
 8009c44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c46:	4b29      	ldr	r3, [pc, #164]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c48:	2207      	movs	r2, #7
 8009c4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c4c:	e009      	b.n	8009c62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c4e:	4b27      	ldr	r3, [pc, #156]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	4a25      	ldr	r2, [pc, #148]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d0ef      	beq.n	8009c4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c6e:	4b1f      	ldr	r3, [pc, #124]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f1c3 0307 	rsb	r3, r3, #7
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d009      	beq.n	8009c8e <xPortStartScheduler+0x76>
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	60bb      	str	r3, [r7, #8]
 8009c8c:	e7fe      	b.n	8009c8c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c8e:	4b17      	ldr	r3, [pc, #92]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	021b      	lsls	r3, r3, #8
 8009c94:	4a15      	ldr	r2, [pc, #84]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c98:	4b14      	ldr	r3, [pc, #80]	; (8009cec <xPortStartScheduler+0xd4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ca0:	4a12      	ldr	r2, [pc, #72]	; (8009cec <xPortStartScheduler+0xd4>)
 8009ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009cac:	4a10      	ldr	r2, [pc, #64]	; (8009cf0 <xPortStartScheduler+0xd8>)
 8009cae:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <xPortStartScheduler+0xd8>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cb8:	4a0d      	ldr	r2, [pc, #52]	; (8009cf0 <xPortStartScheduler+0xd8>)
 8009cba:	4b0d      	ldr	r3, [pc, #52]	; (8009cf0 <xPortStartScheduler+0xd8>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009cc4:	f000 f8b0 	bl	8009e28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009cc8:	4b0a      	ldr	r3, [pc, #40]	; (8009cf4 <xPortStartScheduler+0xdc>)
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cce:	f7ff ff93 	bl	8009bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cd2:	f001 fe7f 	bl	800b9d4 <vTaskSwitchContext>
	prvTaskExitError();
 8009cd6:	f7ff ff4d 	bl	8009b74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	e000e400 	.word	0xe000e400
 8009ce8:	20000980 	.word	0x20000980
 8009cec:	20000984 	.word	0x20000984
 8009cf0:	e000ed20 	.word	0xe000ed20
 8009cf4:	200001b8 	.word	0x200001b8

08009cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d10:	4b0e      	ldr	r3, [pc, #56]	; (8009d4c <vPortEnterCritical+0x54>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	4a0d      	ldr	r2, [pc, #52]	; (8009d4c <vPortEnterCritical+0x54>)
 8009d18:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d1a:	4b0c      	ldr	r3, [pc, #48]	; (8009d4c <vPortEnterCritical+0x54>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d10e      	bne.n	8009d40 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d22:	4b0b      	ldr	r3, [pc, #44]	; (8009d50 <vPortEnterCritical+0x58>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d009      	beq.n	8009d40 <vPortEnterCritical+0x48>
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	e7fe      	b.n	8009d3e <vPortEnterCritical+0x46>
	}
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	200001b8 	.word	0x200001b8
 8009d50:	e000ed04 	.word	0xe000ed04

08009d54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d5a:	4b10      	ldr	r3, [pc, #64]	; (8009d9c <vPortExitCritical+0x48>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <vPortExitCritical+0x22>
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	607b      	str	r3, [r7, #4]
 8009d74:	e7fe      	b.n	8009d74 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <vPortExitCritical+0x48>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a07      	ldr	r2, [pc, #28]	; (8009d9c <vPortExitCritical+0x48>)
 8009d7e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d80:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <vPortExitCritical+0x48>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d104      	bne.n	8009d92 <vPortExitCritical+0x3e>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d92:	bf00      	nop
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr
 8009d9c:	200001b8 	.word	0x200001b8

08009da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009da0:	f3ef 8009 	mrs	r0, PSP
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <pxCurrentTCBConst>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009db0:	6010      	str	r0, [r2, #0]
 8009db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009db6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dba:	f380 8811 	msr	BASEPRI, r0
 8009dbe:	f001 fe09 	bl	800b9d4 <vTaskSwitchContext>
 8009dc2:	f04f 0000 	mov.w	r0, #0
 8009dc6:	f380 8811 	msr	BASEPRI, r0
 8009dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dce:	6819      	ldr	r1, [r3, #0]
 8009dd0:	6808      	ldr	r0, [r1, #0]
 8009dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009dd6:	f380 8809 	msr	PSP, r0
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	4770      	bx	lr

08009de0 <pxCurrentTCBConst>:
 8009de0:	20001940 	.word	0x20001940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009de4:	bf00      	nop
 8009de6:	bf00      	nop

08009de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e00:	f001 fd2c 	bl	800b85c <xTaskIncrementTick>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e0a:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <SysTick_Handler+0x3c>)
 8009e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e10:	601a      	str	r2, [r3, #0]
 8009e12:	2300      	movs	r3, #0
 8009e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	e000ed04 	.word	0xe000ed04

08009e28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <vPortSetupTimerInterrupt+0x30>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e32:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <vPortSetupTimerInterrupt+0x34>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e38:	4a09      	ldr	r2, [pc, #36]	; (8009e60 <vPortSetupTimerInterrupt+0x38>)
 8009e3a:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <vPortSetupTimerInterrupt+0x3c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	490a      	ldr	r1, [pc, #40]	; (8009e68 <vPortSetupTimerInterrupt+0x40>)
 8009e40:	fba1 1303 	umull	r1, r3, r1, r3
 8009e44:	099b      	lsrs	r3, r3, #6
 8009e46:	3b01      	subs	r3, #1
 8009e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e4a:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <vPortSetupTimerInterrupt+0x30>)
 8009e4c:	2207      	movs	r2, #7
 8009e4e:	601a      	str	r2, [r3, #0]
}
 8009e50:	bf00      	nop
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bc80      	pop	{r7}
 8009e56:	4770      	bx	lr
 8009e58:	e000e010 	.word	0xe000e010
 8009e5c:	e000e018 	.word	0xe000e018
 8009e60:	e000e014 	.word	0xe000e014
 8009e64:	20000020 	.word	0x20000020
 8009e68:	10624dd3 	.word	0x10624dd3

08009e6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b085      	sub	sp, #20
 8009e70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e72:	f3ef 8305 	mrs	r3, IPSR
 8009e76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b0f      	cmp	r3, #15
 8009e7c:	d913      	bls.n	8009ea6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e7e:	4a15      	ldr	r2, [pc, #84]	; (8009ed4 <vPortValidateInterruptPriority+0x68>)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	4413      	add	r3, r2
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e88:	4b13      	ldr	r3, [pc, #76]	; (8009ed8 <vPortValidateInterruptPriority+0x6c>)
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	7afa      	ldrb	r2, [r7, #11]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d209      	bcs.n	8009ea6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	607b      	str	r3, [r7, #4]
 8009ea4:	e7fe      	b.n	8009ea4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ea6:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <vPortValidateInterruptPriority+0x70>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009eae:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <vPortValidateInterruptPriority+0x74>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d909      	bls.n	8009eca <vPortValidateInterruptPriority+0x5e>
 8009eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	e7fe      	b.n	8009ec8 <vPortValidateInterruptPriority+0x5c>
	}
 8009eca:	bf00      	nop
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bc80      	pop	{r7}
 8009ed2:	4770      	bx	lr
 8009ed4:	e000e3f0 	.word	0xe000e3f0
 8009ed8:	20000980 	.word	0x20000980
 8009edc:	e000ed0c 	.word	0xe000ed0c
 8009ee0:	20000984 	.word	0x20000984

08009ee4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08a      	sub	sp, #40	; 0x28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef0:	f001 fbfc 	bl	800b6ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ef4:	4b57      	ldr	r3, [pc, #348]	; (800a054 <pvPortMalloc+0x170>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009efc:	f000 f90c 	bl	800a118 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f00:	4b55      	ldr	r3, [pc, #340]	; (800a058 <pvPortMalloc+0x174>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 808c 	bne.w	800a026 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01c      	beq.n	8009f4e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f14:	2208      	movs	r2, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4413      	add	r3, r2
 8009f1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f003 0307 	and.w	r3, r3, #7
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d013      	beq.n	8009f4e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f023 0307 	bic.w	r3, r3, #7
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d009      	beq.n	8009f4e <pvPortMalloc+0x6a>
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	617b      	str	r3, [r7, #20]
 8009f4c:	e7fe      	b.n	8009f4c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d068      	beq.n	800a026 <pvPortMalloc+0x142>
 8009f54:	4b41      	ldr	r3, [pc, #260]	; (800a05c <pvPortMalloc+0x178>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d863      	bhi.n	800a026 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f5e:	4b40      	ldr	r3, [pc, #256]	; (800a060 <pvPortMalloc+0x17c>)
 8009f60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f62:	4b3f      	ldr	r3, [pc, #252]	; (800a060 <pvPortMalloc+0x17c>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f68:	e004      	b.n	8009f74 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	685a      	ldr	r2, [r3, #4]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d203      	bcs.n	8009f86 <pvPortMalloc+0xa2>
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1f1      	bne.n	8009f6a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f86:	4b33      	ldr	r3, [pc, #204]	; (800a054 <pvPortMalloc+0x170>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d04a      	beq.n	800a026 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2208      	movs	r2, #8
 8009f96:	4413      	add	r3, r2
 8009f98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	6a3b      	ldr	r3, [r7, #32]
 8009fa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	1ad2      	subs	r2, r2, r3
 8009faa:	2308      	movs	r3, #8
 8009fac:	005b      	lsls	r3, r3, #1
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d91e      	bls.n	8009ff0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <pvPortMalloc+0xf4>
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	613b      	str	r3, [r7, #16]
 8009fd6:	e7fe      	b.n	8009fd6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	1ad2      	subs	r2, r2, r3
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fea:	69b8      	ldr	r0, [r7, #24]
 8009fec:	f000 f8f6 	bl	800a1dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <pvPortMalloc+0x178>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	4a18      	ldr	r2, [pc, #96]	; (800a05c <pvPortMalloc+0x178>)
 8009ffc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ffe:	4b17      	ldr	r3, [pc, #92]	; (800a05c <pvPortMalloc+0x178>)
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b18      	ldr	r3, [pc, #96]	; (800a064 <pvPortMalloc+0x180>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d203      	bcs.n	800a012 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a00a:	4b14      	ldr	r3, [pc, #80]	; (800a05c <pvPortMalloc+0x178>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a15      	ldr	r2, [pc, #84]	; (800a064 <pvPortMalloc+0x180>)
 800a010:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <pvPortMalloc+0x174>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	431a      	orrs	r2, r3
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	2200      	movs	r2, #0
 800a024:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a026:	f001 fb6f 	bl	800b708 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	f003 0307 	and.w	r3, r3, #7
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <pvPortMalloc+0x164>
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	f383 8811 	msr	BASEPRI, r3
 800a03c:	f3bf 8f6f 	isb	sy
 800a040:	f3bf 8f4f 	dsb	sy
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e7fe      	b.n	800a046 <pvPortMalloc+0x162>
	return pvReturn;
 800a048:	69fb      	ldr	r3, [r7, #28]
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3728      	adds	r7, #40	; 0x28
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20001930 	.word	0x20001930
 800a058:	2000193c 	.word	0x2000193c
 800a05c:	20001934 	.word	0x20001934
 800a060:	20001928 	.word	0x20001928
 800a064:	20001938 	.word	0x20001938

0800a068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d046      	beq.n	800a108 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a07a:	2308      	movs	r3, #8
 800a07c:	425b      	negs	r3, r3
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	4413      	add	r3, r2
 800a082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	4b20      	ldr	r3, [pc, #128]	; (800a110 <vPortFree+0xa8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4013      	ands	r3, r2
 800a092:	2b00      	cmp	r3, #0
 800a094:	d109      	bne.n	800a0aa <vPortFree+0x42>
 800a096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60fb      	str	r3, [r7, #12]
 800a0a8:	e7fe      	b.n	800a0a8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d009      	beq.n	800a0c6 <vPortFree+0x5e>
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60bb      	str	r3, [r7, #8]
 800a0c4:	e7fe      	b.n	800a0c4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	4b11      	ldr	r3, [pc, #68]	; (800a110 <vPortFree+0xa8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d019      	beq.n	800a108 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d115      	bne.n	800a108 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <vPortFree+0xa8>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	43db      	mvns	r3, r3
 800a0e6:	401a      	ands	r2, r3
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0ec:	f001 fafe 	bl	800b6ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	4b07      	ldr	r3, [pc, #28]	; (800a114 <vPortFree+0xac>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	4a06      	ldr	r2, [pc, #24]	; (800a114 <vPortFree+0xac>)
 800a0fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0fe:	6938      	ldr	r0, [r7, #16]
 800a100:	f000 f86c 	bl	800a1dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a104:	f001 fb00 	bl	800b708 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a108:	bf00      	nop
 800a10a:	3718      	adds	r7, #24
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	2000193c 	.word	0x2000193c
 800a114:	20001934 	.word	0x20001934

0800a118 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a11e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a122:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a124:	4b27      	ldr	r3, [pc, #156]	; (800a1c4 <prvHeapInit+0xac>)
 800a126:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00c      	beq.n	800a14c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3307      	adds	r3, #7
 800a136:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0307 	bic.w	r3, r3, #7
 800a13e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	4a1f      	ldr	r2, [pc, #124]	; (800a1c4 <prvHeapInit+0xac>)
 800a148:	4413      	add	r3, r2
 800a14a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a150:	4a1d      	ldr	r2, [pc, #116]	; (800a1c8 <prvHeapInit+0xb0>)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a156:	4b1c      	ldr	r3, [pc, #112]	; (800a1c8 <prvHeapInit+0xb0>)
 800a158:	2200      	movs	r2, #0
 800a15a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4413      	add	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a164:	2208      	movs	r2, #8
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	1a9b      	subs	r3, r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0307 	bic.w	r3, r3, #7
 800a172:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4a15      	ldr	r2, [pc, #84]	; (800a1cc <prvHeapInit+0xb4>)
 800a178:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a17a:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <prvHeapInit+0xb4>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2200      	movs	r2, #0
 800a180:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <prvHeapInit+0xb4>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	1ad2      	subs	r2, r2, r3
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a198:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <prvHeapInit+0xb4>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	4a0a      	ldr	r2, [pc, #40]	; (800a1d0 <prvHeapInit+0xb8>)
 800a1a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	4a09      	ldr	r2, [pc, #36]	; (800a1d4 <prvHeapInit+0xbc>)
 800a1ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1b0:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <prvHeapInit+0xc0>)
 800a1b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1b6:	601a      	str	r2, [r3, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bc80      	pop	{r7}
 800a1c0:	4770      	bx	lr
 800a1c2:	bf00      	nop
 800a1c4:	20000988 	.word	0x20000988
 800a1c8:	20001928 	.word	0x20001928
 800a1cc:	20001930 	.word	0x20001930
 800a1d0:	20001938 	.word	0x20001938
 800a1d4:	20001934 	.word	0x20001934
 800a1d8:	2000193c 	.word	0x2000193c

0800a1dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1e4:	4b27      	ldr	r3, [pc, #156]	; (800a284 <prvInsertBlockIntoFreeList+0xa8>)
 800a1e6:	60fb      	str	r3, [r7, #12]
 800a1e8:	e002      	b.n	800a1f0 <prvInsertBlockIntoFreeList+0x14>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d3f7      	bcc.n	800a1ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	441a      	add	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d108      	bne.n	800a21e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	441a      	add	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	68ba      	ldr	r2, [r7, #8]
 800a228:	441a      	add	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d118      	bne.n	800a264 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	4b14      	ldr	r3, [pc, #80]	; (800a288 <prvInsertBlockIntoFreeList+0xac>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d00d      	beq.n	800a25a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	441a      	add	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	e008      	b.n	800a26c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <prvInsertBlockIntoFreeList+0xac>)
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	e003      	b.n	800a26c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d002      	beq.n	800a27a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	bc80      	pop	{r7}
 800a282:	4770      	bx	lr
 800a284:	20001928 	.word	0x20001928
 800a288:	20001930 	.word	0x20001930

0800a28c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d109      	bne.n	800a2b4 <xQueueGenericReset+0x28>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	e7fe      	b.n	800a2b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a2b4:	f7ff fd20 	bl	8009cf8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c0:	68f9      	ldr	r1, [r7, #12]
 800a2c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2c4:	fb01 f303 	mul.w	r3, r1, r3
 800a2c8:	441a      	add	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2ea:	fb01 f303 	mul.w	r3, r1, r3
 800a2ee:	441a      	add	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	22ff      	movs	r2, #255	; 0xff
 800a2f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	22ff      	movs	r2, #255	; 0xff
 800a300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d114      	bne.n	800a334 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d01a      	beq.n	800a348 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3310      	adds	r3, #16
 800a316:	4618      	mov	r0, r3
 800a318:	f001 fc04 	bl	800bb24 <xTaskRemoveFromEventList>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d012      	beq.n	800a348 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a322:	4b0d      	ldr	r3, [pc, #52]	; (800a358 <xQueueGenericReset+0xcc>)
 800a324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	e009      	b.n	800a348 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3310      	adds	r3, #16
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff fb3f 	bl	80099bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3324      	adds	r3, #36	; 0x24
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fb3a 	bl	80099bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a348:	f7ff fd04 	bl	8009d54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a34c:	2301      	movs	r3, #1
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08e      	sub	sp, #56	; 0x38
 800a360:	af02      	add	r7, sp, #8
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d109      	bne.n	800a384 <xQueueGenericCreateStatic+0x28>
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	62bb      	str	r3, [r7, #40]	; 0x28
 800a382:	e7fe      	b.n	800a382 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d109      	bne.n	800a39e <xQueueGenericCreateStatic+0x42>
 800a38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
 800a39c:	e7fe      	b.n	800a39c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <xQueueGenericCreateStatic+0x4e>
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <xQueueGenericCreateStatic+0x52>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e000      	b.n	800a3b0 <xQueueGenericCreateStatic+0x54>
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <xQueueGenericCreateStatic+0x6c>
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	623b      	str	r3, [r7, #32]
 800a3c6:	e7fe      	b.n	800a3c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d102      	bne.n	800a3d4 <xQueueGenericCreateStatic+0x78>
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <xQueueGenericCreateStatic+0x7c>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <xQueueGenericCreateStatic+0x7e>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <xQueueGenericCreateStatic+0x96>
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	61fb      	str	r3, [r7, #28]
 800a3f0:	e7fe      	b.n	800a3f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3f2:	2348      	movs	r3, #72	; 0x48
 800a3f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b48      	cmp	r3, #72	; 0x48
 800a3fa:	d009      	beq.n	800a410 <xQueueGenericCreateStatic+0xb4>
 800a3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	61bb      	str	r3, [r7, #24]
 800a40e:	e7fe      	b.n	800a40e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00d      	beq.n	800a436 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	4613      	mov	r3, r2
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f842 	bl	800a4ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a438:	4618      	mov	r0, r3
 800a43a:	3730      	adds	r7, #48	; 0x30
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08a      	sub	sp, #40	; 0x28
 800a444:	af02      	add	r7, sp, #8
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d109      	bne.n	800a468 <xQueueGenericCreate+0x28>
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	613b      	str	r3, [r7, #16]
 800a466:	e7fe      	b.n	800a466 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d102      	bne.n	800a474 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	61fb      	str	r3, [r7, #28]
 800a472:	e004      	b.n	800a47e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	fb02 f303 	mul.w	r3, r2, r3
 800a47c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a47e:	69fb      	ldr	r3, [r7, #28]
 800a480:	3348      	adds	r3, #72	; 0x48
 800a482:	4618      	mov	r0, r3
 800a484:	f7ff fd2e 	bl	8009ee4 <pvPortMalloc>
 800a488:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00f      	beq.n	800a4b0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	3348      	adds	r3, #72	; 0x48
 800a494:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a49e:	79fa      	ldrb	r2, [r7, #7]
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f000 f805 	bl	800a4ba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
	}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3720      	adds	r7, #32
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	60f8      	str	r0, [r7, #12]
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	e002      	b.n	800a4dc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	69b8      	ldr	r0, [r7, #24]
 800a4ec:	f7ff fece 	bl	800a28c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4f0:	bf00      	nop
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00e      	beq.n	800a524 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	2100      	movs	r1, #0
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f838 	bl	800a594 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a524:	bf00      	nop
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a536:	2301      	movs	r3, #1
 800a538:	617b      	str	r3, [r7, #20]
 800a53a:	2300      	movs	r3, #0
 800a53c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	461a      	mov	r2, r3
 800a542:	6939      	ldr	r1, [r7, #16]
 800a544:	6978      	ldr	r0, [r7, #20]
 800a546:	f7ff ff7b 	bl	800a440 <xQueueGenericCreate>
 800a54a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f7ff ffd3 	bl	800a4f8 <prvInitialiseMutex>

		return pxNewQueue;
 800a552:	68fb      	ldr	r3, [r7, #12]
	}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af02      	add	r7, sp, #8
 800a562:	4603      	mov	r3, r0
 800a564:	6039      	str	r1, [r7, #0]
 800a566:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a568:	2301      	movs	r3, #1
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	2300      	movs	r3, #0
 800a56e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2200      	movs	r2, #0
 800a578:	6939      	ldr	r1, [r7, #16]
 800a57a:	6978      	ldr	r0, [r7, #20]
 800a57c:	f7ff feee 	bl	800a35c <xQueueGenericCreateStatic>
 800a580:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff ffb8 	bl	800a4f8 <prvInitialiseMutex>

		return pxNewQueue;
 800a588:	68fb      	ldr	r3, [r7, #12]
	}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
	...

0800a594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08e      	sub	sp, #56	; 0x38
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d109      	bne.n	800a5c4 <xQueueGenericSend+0x30>
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c2:	e7fe      	b.n	800a5c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <xQueueGenericSend+0x3e>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <xQueueGenericSend+0x42>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <xQueueGenericSend+0x44>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d109      	bne.n	800a5f0 <xQueueGenericSend+0x5c>
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ee:	e7fe      	b.n	800a5ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d103      	bne.n	800a5fe <xQueueGenericSend+0x6a>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d101      	bne.n	800a602 <xQueueGenericSend+0x6e>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e000      	b.n	800a604 <xQueueGenericSend+0x70>
 800a602:	2300      	movs	r3, #0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <xQueueGenericSend+0x88>
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	623b      	str	r3, [r7, #32]
 800a61a:	e7fe      	b.n	800a61a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a61c:	f001 fc3c 	bl	800be98 <xTaskGetSchedulerState>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d102      	bne.n	800a62c <xQueueGenericSend+0x98>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d101      	bne.n	800a630 <xQueueGenericSend+0x9c>
 800a62c:	2301      	movs	r3, #1
 800a62e:	e000      	b.n	800a632 <xQueueGenericSend+0x9e>
 800a630:	2300      	movs	r3, #0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d109      	bne.n	800a64a <xQueueGenericSend+0xb6>
 800a636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	61fb      	str	r3, [r7, #28]
 800a648:	e7fe      	b.n	800a648 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a64a:	f7ff fb55 	bl	8009cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a656:	429a      	cmp	r2, r3
 800a658:	d302      	bcc.n	800a660 <xQueueGenericSend+0xcc>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d129      	bne.n	800a6b4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a660:	683a      	ldr	r2, [r7, #0]
 800a662:	68b9      	ldr	r1, [r7, #8]
 800a664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a666:	f000 fc25 	bl	800aeb4 <prvCopyDataToQueue>
 800a66a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b00      	cmp	r3, #0
 800a672:	d010      	beq.n	800a696 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	3324      	adds	r3, #36	; 0x24
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 fa53 	bl	800bb24 <xTaskRemoveFromEventList>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d013      	beq.n	800a6ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a684:	4b3f      	ldr	r3, [pc, #252]	; (800a784 <xQueueGenericSend+0x1f0>)
 800a686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	e00a      	b.n	800a6ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d007      	beq.n	800a6ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a69c:	4b39      	ldr	r3, [pc, #228]	; (800a784 <xQueueGenericSend+0x1f0>)
 800a69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6ac:	f7ff fb52 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e063      	b.n	800a77c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d103      	bne.n	800a6c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6ba:	f7ff fb4b 	bl	8009d54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e05c      	b.n	800a77c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6c8:	f107 0314 	add.w	r3, r7, #20
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f001 fa8b 	bl	800bbe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6d6:	f7ff fb3d 	bl	8009d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6da:	f001 f807 	bl	800b6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6de:	f7ff fb0b 	bl	8009cf8 <vPortEnterCritical>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6e8:	b25b      	sxtb	r3, r3
 800a6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ee:	d103      	bne.n	800a6f8 <xQueueGenericSend+0x164>
 800a6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6fe:	b25b      	sxtb	r3, r3
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a704:	d103      	bne.n	800a70e <xQueueGenericSend+0x17a>
 800a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a70e:	f7ff fb21 	bl	8009d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a712:	1d3a      	adds	r2, r7, #4
 800a714:	f107 0314 	add.w	r3, r7, #20
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 fa7a 	bl	800bc14 <xTaskCheckForTimeOut>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d124      	bne.n	800a770 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a728:	f000 fcbc 	bl	800b0a4 <prvIsQueueFull>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d018      	beq.n	800a764 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	3310      	adds	r3, #16
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	4611      	mov	r1, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f001 f9a4 	bl	800ba88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a742:	f000 fc47 	bl	800afd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a746:	f000 ffdf 	bl	800b708 <xTaskResumeAll>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f47f af7c 	bne.w	800a64a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a752:	4b0c      	ldr	r3, [pc, #48]	; (800a784 <xQueueGenericSend+0x1f0>)
 800a754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	e772      	b.n	800a64a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a766:	f000 fc35 	bl	800afd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a76a:	f000 ffcd 	bl	800b708 <xTaskResumeAll>
 800a76e:	e76c      	b.n	800a64a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a772:	f000 fc2f 	bl	800afd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a776:	f000 ffc7 	bl	800b708 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a77a:	2300      	movs	r3, #0
		}
	}
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3738      	adds	r7, #56	; 0x38
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	e000ed04 	.word	0xe000ed04

0800a788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08e      	sub	sp, #56	; 0x38
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	607a      	str	r2, [r7, #4]
 800a794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d109      	bne.n	800a7b4 <xQueueGenericSendFromISR+0x2c>
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b2:	e7fe      	b.n	800a7b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d103      	bne.n	800a7c2 <xQueueGenericSendFromISR+0x3a>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x3e>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e000      	b.n	800a7c8 <xQueueGenericSendFromISR+0x40>
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d109      	bne.n	800a7e0 <xQueueGenericSendFromISR+0x58>
 800a7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d0:	f383 8811 	msr	BASEPRI, r3
 800a7d4:	f3bf 8f6f 	isb	sy
 800a7d8:	f3bf 8f4f 	dsb	sy
 800a7dc:	623b      	str	r3, [r7, #32]
 800a7de:	e7fe      	b.n	800a7de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d103      	bne.n	800a7ee <xQueueGenericSendFromISR+0x66>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d101      	bne.n	800a7f2 <xQueueGenericSendFromISR+0x6a>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e000      	b.n	800a7f4 <xQueueGenericSendFromISR+0x6c>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <xQueueGenericSendFromISR+0x84>
 800a7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	61fb      	str	r3, [r7, #28]
 800a80a:	e7fe      	b.n	800a80a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a80c:	f7ff fb2e 	bl	8009e6c <vPortValidateInterruptPriority>
	__asm volatile
 800a810:	f3ef 8211 	mrs	r2, BASEPRI
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	61ba      	str	r2, [r7, #24]
 800a826:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a828:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a82a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a834:	429a      	cmp	r2, r3
 800a836:	d302      	bcc.n	800a83e <xQueueGenericSendFromISR+0xb6>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	d12c      	bne.n	800a898 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	68b9      	ldr	r1, [r7, #8]
 800a84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a84e:	f000 fb31 	bl	800aeb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a852:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d112      	bne.n	800a882 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d016      	beq.n	800a892 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	3324      	adds	r3, #36	; 0x24
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 f95b 	bl	800bb24 <xTaskRemoveFromEventList>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00e      	beq.n	800a892 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	e007      	b.n	800a892 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a886:	3301      	adds	r3, #1
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	b25a      	sxtb	r2, r3
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a892:	2301      	movs	r3, #1
 800a894:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a896:	e001      	b.n	800a89c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	637b      	str	r3, [r7, #52]	; 0x34
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3738      	adds	r7, #56	; 0x38
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08e      	sub	sp, #56	; 0x38
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d109      	bne.n	800a8d8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	623b      	str	r3, [r7, #32]
 800a8d6:	e7fe      	b.n	800a8d6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d009      	beq.n	800a8f4 <xQueueGiveFromISR+0x44>
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	e7fe      	b.n	800a8f2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d103      	bne.n	800a904 <xQueueGiveFromISR+0x54>
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <xQueueGiveFromISR+0x58>
 800a904:	2301      	movs	r3, #1
 800a906:	e000      	b.n	800a90a <xQueueGiveFromISR+0x5a>
 800a908:	2300      	movs	r3, #0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <xQueueGiveFromISR+0x72>
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	61bb      	str	r3, [r7, #24]
 800a920:	e7fe      	b.n	800a920 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a922:	f7ff faa3 	bl	8009e6c <vPortValidateInterruptPriority>
	__asm volatile
 800a926:	f3ef 8211 	mrs	r2, BASEPRI
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	617a      	str	r2, [r7, #20]
 800a93c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a93e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a940:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	429a      	cmp	r2, r3
 800a950:	d92b      	bls.n	800a9aa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	1c5a      	adds	r2, r3, #1
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a964:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96c:	d112      	bne.n	800a994 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	2b00      	cmp	r3, #0
 800a974:	d016      	beq.n	800a9a4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a978:	3324      	adds	r3, #36	; 0x24
 800a97a:	4618      	mov	r0, r3
 800a97c:	f001 f8d2 	bl	800bb24 <xTaskRemoveFromEventList>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00e      	beq.n	800a9a4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00b      	beq.n	800a9a4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	e007      	b.n	800a9a4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a998:	3301      	adds	r3, #1
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	b25a      	sxtb	r2, r3
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a8:	e001      	b.n	800a9ae <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3738      	adds	r7, #56	; 0x38
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08c      	sub	sp, #48	; 0x30
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d109      	bne.n	800a9f2 <xQueueReceive+0x2e>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	623b      	str	r3, [r7, #32]
 800a9f0:	e7fe      	b.n	800a9f0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d103      	bne.n	800aa00 <xQueueReceive+0x3c>
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <xQueueReceive+0x40>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e000      	b.n	800aa06 <xQueueReceive+0x42>
 800aa04:	2300      	movs	r3, #0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <xQueueReceive+0x5a>
 800aa0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0e:	f383 8811 	msr	BASEPRI, r3
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	61fb      	str	r3, [r7, #28]
 800aa1c:	e7fe      	b.n	800aa1c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa1e:	f001 fa3b 	bl	800be98 <xTaskGetSchedulerState>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <xQueueReceive+0x6a>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <xQueueReceive+0x6e>
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e000      	b.n	800aa34 <xQueueReceive+0x70>
 800aa32:	2300      	movs	r3, #0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d109      	bne.n	800aa4c <xQueueReceive+0x88>
 800aa38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3c:	f383 8811 	msr	BASEPRI, r3
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	f3bf 8f4f 	dsb	sy
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	e7fe      	b.n	800aa4a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa4c:	f7ff f954 	bl	8009cf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01f      	beq.n	800aa9c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa5c:	68b9      	ldr	r1, [r7, #8]
 800aa5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa60:	f000 fa92 	bl	800af88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	1e5a      	subs	r2, r3, #1
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00f      	beq.n	800aa94 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	3310      	adds	r3, #16
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 f853 	bl	800bb24 <xTaskRemoveFromEventList>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d007      	beq.n	800aa94 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa84:	4b3c      	ldr	r3, [pc, #240]	; (800ab78 <xQueueReceive+0x1b4>)
 800aa86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa94:	f7ff f95e 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e069      	b.n	800ab70 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d103      	bne.n	800aaaa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaa2:	f7ff f957 	bl	8009d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e062      	b.n	800ab70 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aab0:	f107 0310 	add.w	r3, r7, #16
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 f897 	bl	800bbe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aabe:	f7ff f949 	bl	8009d54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aac2:	f000 fe13 	bl	800b6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aac6:	f7ff f917 	bl	8009cf8 <vPortEnterCritical>
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aad0:	b25b      	sxtb	r3, r3
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	d103      	bne.n	800aae0 <xQueueReceive+0x11c>
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aae6:	b25b      	sxtb	r3, r3
 800aae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaec:	d103      	bne.n	800aaf6 <xQueueReceive+0x132>
 800aaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaf6:	f7ff f92d 	bl	8009d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aafa:	1d3a      	adds	r2, r7, #4
 800aafc:	f107 0310 	add.w	r3, r7, #16
 800ab00:	4611      	mov	r1, r2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f886 	bl	800bc14 <xTaskCheckForTimeOut>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d123      	bne.n	800ab56 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab10:	f000 fab2 	bl	800b078 <prvIsQueueEmpty>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d017      	beq.n	800ab4a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1c:	3324      	adds	r3, #36	; 0x24
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 ffb0 	bl	800ba88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab2a:	f000 fa53 	bl	800afd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab2e:	f000 fdeb 	bl	800b708 <xTaskResumeAll>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d189      	bne.n	800aa4c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ab38:	4b0f      	ldr	r3, [pc, #60]	; (800ab78 <xQueueReceive+0x1b4>)
 800ab3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab3e:	601a      	str	r2, [r3, #0]
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	e780      	b.n	800aa4c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4c:	f000 fa42 	bl	800afd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab50:	f000 fdda 	bl	800b708 <xTaskResumeAll>
 800ab54:	e77a      	b.n	800aa4c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab58:	f000 fa3c 	bl	800afd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab5c:	f000 fdd4 	bl	800b708 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab62:	f000 fa89 	bl	800b078 <prvIsQueueEmpty>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f43f af6f 	beq.w	800aa4c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3730      	adds	r7, #48	; 0x30
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	e000ed04 	.word	0xe000ed04

0800ab7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08e      	sub	sp, #56	; 0x38
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d109      	bne.n	800abac <xQueueSemaphoreTake+0x30>
 800ab98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	623b      	str	r3, [r7, #32]
 800abaa:	e7fe      	b.n	800abaa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d009      	beq.n	800abc8 <xQueueSemaphoreTake+0x4c>
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61fb      	str	r3, [r7, #28]
 800abc6:	e7fe      	b.n	800abc6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abc8:	f001 f966 	bl	800be98 <xTaskGetSchedulerState>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d102      	bne.n	800abd8 <xQueueSemaphoreTake+0x5c>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <xQueueSemaphoreTake+0x60>
 800abd8:	2301      	movs	r3, #1
 800abda:	e000      	b.n	800abde <xQueueSemaphoreTake+0x62>
 800abdc:	2300      	movs	r3, #0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d109      	bne.n	800abf6 <xQueueSemaphoreTake+0x7a>
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	f383 8811 	msr	BASEPRI, r3
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	61bb      	str	r3, [r7, #24]
 800abf4:	e7fe      	b.n	800abf4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800abf6:	f7ff f87f 	bl	8009cf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d024      	beq.n	800ac50 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac08:	1e5a      	subs	r2, r3, #1
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d104      	bne.n	800ac20 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ac16:	f001 fb05 	bl	800c224 <pvTaskIncrementMutexHeldCount>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	691b      	ldr	r3, [r3, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00f      	beq.n	800ac48 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2a:	3310      	adds	r3, #16
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 ff79 	bl	800bb24 <xTaskRemoveFromEventList>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac38:	4b53      	ldr	r3, [pc, #332]	; (800ad88 <xQueueSemaphoreTake+0x20c>)
 800ac3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac48:	f7ff f884 	bl	8009d54 <vPortExitCritical>
				return pdPASS;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e096      	b.n	800ad7e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d110      	bne.n	800ac78 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d009      	beq.n	800ac70 <xQueueSemaphoreTake+0xf4>
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	617b      	str	r3, [r7, #20]
 800ac6e:	e7fe      	b.n	800ac6e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac70:	f7ff f870 	bl	8009d54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac74:	2300      	movs	r3, #0
 800ac76:	e082      	b.n	800ad7e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac7e:	f107 030c 	add.w	r3, r7, #12
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 ffb0 	bl	800bbe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac8c:	f7ff f862 	bl	8009d54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac90:	f000 fd2c 	bl	800b6ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac94:	f7ff f830 	bl	8009cf8 <vPortEnterCritical>
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac9e:	b25b      	sxtb	r3, r3
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d103      	bne.n	800acae <xQueueSemaphoreTake+0x132>
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acb4:	b25b      	sxtb	r3, r3
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acba:	d103      	bne.n	800acc4 <xQueueSemaphoreTake+0x148>
 800acbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acc4:	f7ff f846 	bl	8009d54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acc8:	463a      	mov	r2, r7
 800acca:	f107 030c 	add.w	r3, r7, #12
 800acce:	4611      	mov	r1, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f000 ff9f 	bl	800bc14 <xTaskCheckForTimeOut>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d132      	bne.n	800ad42 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acde:	f000 f9cb 	bl	800b078 <prvIsQueueEmpty>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d026      	beq.n	800ad36 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ace8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d109      	bne.n	800ad04 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800acf0:	f7ff f802 	bl	8009cf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f001 f8eb 	bl	800bed4 <xTaskPriorityInherit>
 800acfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad00:	f7ff f828 	bl	8009d54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad06:	3324      	adds	r3, #36	; 0x24
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 febb 	bl	800ba88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad14:	f000 f95e 	bl	800afd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad18:	f000 fcf6 	bl	800b708 <xTaskResumeAll>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f47f af69 	bne.w	800abf6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ad24:	4b18      	ldr	r3, [pc, #96]	; (800ad88 <xQueueSemaphoreTake+0x20c>)
 800ad26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	e75f      	b.n	800abf6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad38:	f000 f94c 	bl	800afd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad3c:	f000 fce4 	bl	800b708 <xTaskResumeAll>
 800ad40:	e759      	b.n	800abf6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad44:	f000 f946 	bl	800afd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad48:	f000 fcde 	bl	800b708 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad4e:	f000 f993 	bl	800b078 <prvIsQueueEmpty>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f43f af4e 	beq.w	800abf6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d00d      	beq.n	800ad7c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ad60:	f7fe ffca 	bl	8009cf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad66:	f000 f88e 	bl	800ae86 <prvGetDisinheritPriorityAfterTimeout>
 800ad6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad72:	4618      	mov	r0, r3
 800ad74:	f001 f9b8 	bl	800c0e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad78:	f7fe ffec 	bl	8009d54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3738      	adds	r7, #56	; 0x38
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b08e      	sub	sp, #56	; 0x38
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d109      	bne.n	800adb6 <xQueueReceiveFromISR+0x2a>
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	623b      	str	r3, [r7, #32]
 800adb4:	e7fe      	b.n	800adb4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d103      	bne.n	800adc4 <xQueueReceiveFromISR+0x38>
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <xQueueReceiveFromISR+0x3c>
 800adc4:	2301      	movs	r3, #1
 800adc6:	e000      	b.n	800adca <xQueueReceiveFromISR+0x3e>
 800adc8:	2300      	movs	r3, #0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <xQueueReceiveFromISR+0x56>
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	61fb      	str	r3, [r7, #28]
 800ade0:	e7fe      	b.n	800ade0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ade2:	f7ff f843 	bl	8009e6c <vPortValidateInterruptPriority>
	__asm volatile
 800ade6:	f3ef 8211 	mrs	r2, BASEPRI
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	61ba      	str	r2, [r7, #24]
 800adfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800adfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d02f      	beq.n	800ae6e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae1c:	f000 f8b4 	bl	800af88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	1e5a      	subs	r2, r3, #1
 800ae24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae30:	d112      	bne.n	800ae58 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d016      	beq.n	800ae68 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	3310      	adds	r3, #16
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fe70 	bl	800bb24 <xTaskRemoveFromEventList>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00e      	beq.n	800ae68 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	e007      	b.n	800ae68 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	b25a      	sxtb	r2, r3
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae6c:	e001      	b.n	800ae72 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3738      	adds	r7, #56	; 0x38
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae86:	b480      	push	{r7}
 800ae88:	b085      	sub	sp, #20
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d006      	beq.n	800aea4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1c3 0307 	rsb	r3, r3, #7
 800aea0:	60fb      	str	r3, [r7, #12]
 800aea2:	e001      	b.n	800aea8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aea8:	68fb      	ldr	r3, [r7, #12]
	}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3714      	adds	r7, #20
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bc80      	pop	{r7}
 800aeb2:	4770      	bx	lr

0800aeb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10d      	bne.n	800aeee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d14d      	bne.n	800af76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	4618      	mov	r0, r3
 800aee0:	f001 f87e 	bl	800bfe0 <xTaskPriorityDisinherit>
 800aee4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	605a      	str	r2, [r3, #4]
 800aeec:	e043      	b.n	800af76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d119      	bne.n	800af28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6898      	ldr	r0, [r3, #8]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	461a      	mov	r2, r3
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	f002 fa1c 	bl	800d33c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	689a      	ldr	r2, [r3, #8]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0c:	441a      	add	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d32b      	bcc.n	800af76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	609a      	str	r2, [r3, #8]
 800af26:	e026      	b.n	800af76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	68d8      	ldr	r0, [r3, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af30:	461a      	mov	r2, r3
 800af32:	68b9      	ldr	r1, [r7, #8]
 800af34:	f002 fa02 	bl	800d33c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	68da      	ldr	r2, [r3, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	425b      	negs	r3, r3
 800af42:	441a      	add	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d207      	bcs.n	800af64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5c:	425b      	negs	r3, r3
 800af5e:	441a      	add	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b02      	cmp	r3, #2
 800af68:	d105      	bne.n	800af76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	3b01      	subs	r3, #1
 800af74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af7e:	697b      	ldr	r3, [r7, #20]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af96:	2b00      	cmp	r3, #0
 800af98:	d018      	beq.n	800afcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68da      	ldr	r2, [r3, #12]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	441a      	add	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	68da      	ldr	r2, [r3, #12]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d303      	bcc.n	800afbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68d9      	ldr	r1, [r3, #12]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	461a      	mov	r2, r3
 800afc6:	6838      	ldr	r0, [r7, #0]
 800afc8:	f002 f9b8 	bl	800d33c <memcpy>
	}
}
 800afcc:	bf00      	nop
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afdc:	f7fe fe8c 	bl	8009cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afe8:	e011      	b.n	800b00e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d012      	beq.n	800b018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3324      	adds	r3, #36	; 0x24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fd94 	bl	800bb24 <xTaskRemoveFromEventList>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b002:	f000 fe67 	bl	800bcd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	3b01      	subs	r3, #1
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b012:	2b00      	cmp	r3, #0
 800b014:	dce9      	bgt.n	800afea <prvUnlockQueue+0x16>
 800b016:	e000      	b.n	800b01a <prvUnlockQueue+0x46>
					break;
 800b018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	22ff      	movs	r2, #255	; 0xff
 800b01e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b022:	f7fe fe97 	bl	8009d54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b026:	f7fe fe67 	bl	8009cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b032:	e011      	b.n	800b058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d012      	beq.n	800b062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3310      	adds	r3, #16
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fd6f 	bl	800bb24 <xTaskRemoveFromEventList>
 800b046:	4603      	mov	r3, r0
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d001      	beq.n	800b050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b04c:	f000 fe42 	bl	800bcd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	3b01      	subs	r3, #1
 800b054:	b2db      	uxtb	r3, r3
 800b056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	dce9      	bgt.n	800b034 <prvUnlockQueue+0x60>
 800b060:	e000      	b.n	800b064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	22ff      	movs	r2, #255	; 0xff
 800b068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b06c:	f7fe fe72 	bl	8009d54 <vPortExitCritical>
}
 800b070:	bf00      	nop
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b080:	f7fe fe3a 	bl	8009cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b08c:	2301      	movs	r3, #1
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	e001      	b.n	800b096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b096:	f7fe fe5d 	bl	8009d54 <vPortExitCritical>

	return xReturn;
 800b09a:	68fb      	ldr	r3, [r7, #12]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0ac:	f7fe fe24 	bl	8009cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d102      	bne.n	800b0c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	e001      	b.n	800b0c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c6:	f7fe fe45 	bl	8009d54 <vPortExitCritical>

	return xReturn;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0de:	2300      	movs	r3, #0
 800b0e0:	60fb      	str	r3, [r7, #12]
 800b0e2:	e014      	b.n	800b10e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0e4:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <vQueueAddToRegistry+0x4c>)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10b      	bne.n	800b108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0f0:	490b      	ldr	r1, [pc, #44]	; (800b120 <vQueueAddToRegistry+0x4c>)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0fa:	4a09      	ldr	r2, [pc, #36]	; (800b120 <vQueueAddToRegistry+0x4c>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	4413      	add	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b106:	e005      	b.n	800b114 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	3301      	adds	r3, #1
 800b10c:	60fb      	str	r3, [r7, #12]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2b07      	cmp	r3, #7
 800b112:	d9e7      	bls.n	800b0e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b114:	bf00      	nop
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	bc80      	pop	{r7}
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	20003160 	.word	0x20003160

0800b124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b124:	b580      	push	{r7, lr}
 800b126:	b086      	sub	sp, #24
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b134:	f7fe fde0 	bl	8009cf8 <vPortEnterCritical>
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b13e:	b25b      	sxtb	r3, r3
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d103      	bne.n	800b14e <vQueueWaitForMessageRestricted+0x2a>
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b154:	b25b      	sxtb	r3, r3
 800b156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15a:	d103      	bne.n	800b164 <vQueueWaitForMessageRestricted+0x40>
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b164:	f7fe fdf6 	bl	8009d54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	3324      	adds	r3, #36	; 0x24
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 fca9 	bl	800bad0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b17e:	6978      	ldr	r0, [r7, #20]
 800b180:	f7ff ff28 	bl	800afd4 <prvUnlockQueue>
	}
 800b184:	bf00      	nop
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b08e      	sub	sp, #56	; 0x38
 800b190:	af04      	add	r7, sp, #16
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d109      	bne.n	800b1b4 <xTaskCreateStatic+0x28>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	623b      	str	r3, [r7, #32]
 800b1b2:	e7fe      	b.n	800b1b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d109      	bne.n	800b1ce <xTaskCreateStatic+0x42>
 800b1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1be:	f383 8811 	msr	BASEPRI, r3
 800b1c2:	f3bf 8f6f 	isb	sy
 800b1c6:	f3bf 8f4f 	dsb	sy
 800b1ca:	61fb      	str	r3, [r7, #28]
 800b1cc:	e7fe      	b.n	800b1cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1ce:	2354      	movs	r3, #84	; 0x54
 800b1d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2b54      	cmp	r3, #84	; 0x54
 800b1d6:	d009      	beq.n	800b1ec <xTaskCreateStatic+0x60>
 800b1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	61bb      	str	r3, [r7, #24]
 800b1ea:	e7fe      	b.n	800b1ea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d01e      	beq.n	800b230 <xTaskCreateStatic+0xa4>
 800b1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d01b      	beq.n	800b230 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b200:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	2202      	movs	r2, #2
 800b206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b20a:	2300      	movs	r3, #0
 800b20c:	9303      	str	r3, [sp, #12]
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	9302      	str	r3, [sp, #8]
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	68b9      	ldr	r1, [r7, #8]
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 f850 	bl	800b2c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b22a:	f000 f8cb 	bl	800b3c4 <prvAddNewTaskToReadyList>
 800b22e:	e001      	b.n	800b234 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b230:	2300      	movs	r3, #0
 800b232:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b234:	697b      	ldr	r3, [r7, #20]
	}
 800b236:	4618      	mov	r0, r3
 800b238:	3728      	adds	r7, #40	; 0x28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b08c      	sub	sp, #48	; 0x30
 800b242:	af04      	add	r7, sp, #16
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	603b      	str	r3, [r7, #0]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b24e:	88fb      	ldrh	r3, [r7, #6]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe fe46 	bl	8009ee4 <pvPortMalloc>
 800b258:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00e      	beq.n	800b27e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b260:	2054      	movs	r0, #84	; 0x54
 800b262:	f7fe fe3f 	bl	8009ee4 <pvPortMalloc>
 800b266:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	631a      	str	r2, [r3, #48]	; 0x30
 800b274:	e005      	b.n	800b282 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b276:	6978      	ldr	r0, [r7, #20]
 800b278:	f7fe fef6 	bl	800a068 <vPortFree>
 800b27c:	e001      	b.n	800b282 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b27e:	2300      	movs	r3, #0
 800b280:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d017      	beq.n	800b2b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b290:	88fa      	ldrh	r2, [r7, #6]
 800b292:	2300      	movs	r3, #0
 800b294:	9303      	str	r3, [sp, #12]
 800b296:	69fb      	ldr	r3, [r7, #28]
 800b298:	9302      	str	r3, [sp, #8]
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	68b9      	ldr	r1, [r7, #8]
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f000 f80e 	bl	800b2c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2ac:	69f8      	ldr	r0, [r7, #28]
 800b2ae:	f000 f889 	bl	800b3c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	61bb      	str	r3, [r7, #24]
 800b2b6:	e002      	b.n	800b2be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2be:	69bb      	ldr	r3, [r7, #24]
	}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3720      	adds	r7, #32
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b088      	sub	sp, #32
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4413      	add	r3, r2
 800b2e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	f023 0307 	bic.w	r3, r3, #7
 800b2ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2f0:	69bb      	ldr	r3, [r7, #24]
 800b2f2:	f003 0307 	and.w	r3, r3, #7
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d009      	beq.n	800b30e <prvInitialiseNewTask+0x46>
 800b2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	e7fe      	b.n	800b30c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b30e:	2300      	movs	r3, #0
 800b310:	61fb      	str	r3, [r7, #28]
 800b312:	e012      	b.n	800b33a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	4413      	add	r3, r2
 800b31a:	7819      	ldrb	r1, [r3, #0]
 800b31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	4413      	add	r3, r2
 800b322:	3334      	adds	r3, #52	; 0x34
 800b324:	460a      	mov	r2, r1
 800b326:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	4413      	add	r3, r2
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d006      	beq.n	800b342 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	3301      	adds	r3, #1
 800b338:	61fb      	str	r3, [r7, #28]
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	2b0f      	cmp	r3, #15
 800b33e:	d9e9      	bls.n	800b314 <prvInitialiseNewTask+0x4c>
 800b340:	e000      	b.n	800b344 <prvInitialiseNewTask+0x7c>
		{
			break;
 800b342:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	2200      	movs	r2, #0
 800b348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	2b06      	cmp	r3, #6
 800b350:	d901      	bls.n	800b356 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b352:	2306      	movs	r3, #6
 800b354:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b360:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b364:	2200      	movs	r2, #0
 800b366:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	3304      	adds	r3, #4
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7fe fb44 	bl	80099fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	3318      	adds	r3, #24
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fb3f 	bl	80099fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b380:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	f1c3 0207 	rsb	r2, r3, #7
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b390:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	2200      	movs	r2, #0
 800b396:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	68f9      	ldr	r1, [r7, #12]
 800b3a4:	69b8      	ldr	r0, [r7, #24]
 800b3a6:	f7fe fbb9 	bl	8009b1c <pxPortInitialiseStack>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3bc:	bf00      	nop
 800b3be:	3720      	adds	r7, #32
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3cc:	f7fe fc94 	bl	8009cf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3d0:	4b2a      	ldr	r3, [pc, #168]	; (800b47c <prvAddNewTaskToReadyList+0xb8>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	4a29      	ldr	r2, [pc, #164]	; (800b47c <prvAddNewTaskToReadyList+0xb8>)
 800b3d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3da:	4b29      	ldr	r3, [pc, #164]	; (800b480 <prvAddNewTaskToReadyList+0xbc>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d109      	bne.n	800b3f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3e2:	4a27      	ldr	r2, [pc, #156]	; (800b480 <prvAddNewTaskToReadyList+0xbc>)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3e8:	4b24      	ldr	r3, [pc, #144]	; (800b47c <prvAddNewTaskToReadyList+0xb8>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d110      	bne.n	800b412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3f0:	f000 fc94 	bl	800bd1c <prvInitialiseTaskLists>
 800b3f4:	e00d      	b.n	800b412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3f6:	4b23      	ldr	r3, [pc, #140]	; (800b484 <prvAddNewTaskToReadyList+0xc0>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d109      	bne.n	800b412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3fe:	4b20      	ldr	r3, [pc, #128]	; (800b480 <prvAddNewTaskToReadyList+0xbc>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	429a      	cmp	r2, r3
 800b40a:	d802      	bhi.n	800b412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b40c:	4a1c      	ldr	r2, [pc, #112]	; (800b480 <prvAddNewTaskToReadyList+0xbc>)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b412:	4b1d      	ldr	r3, [pc, #116]	; (800b488 <prvAddNewTaskToReadyList+0xc4>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	4a1b      	ldr	r2, [pc, #108]	; (800b488 <prvAddNewTaskToReadyList+0xc4>)
 800b41a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	2201      	movs	r2, #1
 800b422:	409a      	lsls	r2, r3
 800b424:	4b19      	ldr	r3, [pc, #100]	; (800b48c <prvAddNewTaskToReadyList+0xc8>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4313      	orrs	r3, r2
 800b42a:	4a18      	ldr	r2, [pc, #96]	; (800b48c <prvAddNewTaskToReadyList+0xc8>)
 800b42c:	6013      	str	r3, [r2, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4a15      	ldr	r2, [pc, #84]	; (800b490 <prvAddNewTaskToReadyList+0xcc>)
 800b43c:	441a      	add	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	3304      	adds	r3, #4
 800b442:	4619      	mov	r1, r3
 800b444:	4610      	mov	r0, r2
 800b446:	f7fe fae4 	bl	8009a12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b44a:	f7fe fc83 	bl	8009d54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b44e:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <prvAddNewTaskToReadyList+0xc0>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00e      	beq.n	800b474 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b456:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <prvAddNewTaskToReadyList+0xbc>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	429a      	cmp	r2, r3
 800b462:	d207      	bcs.n	800b474 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b464:	4b0b      	ldr	r3, [pc, #44]	; (800b494 <prvAddNewTaskToReadyList+0xd0>)
 800b466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	20001a40 	.word	0x20001a40
 800b480:	20001940 	.word	0x20001940
 800b484:	20001a4c 	.word	0x20001a4c
 800b488:	20001a5c 	.word	0x20001a5c
 800b48c:	20001a48 	.word	0x20001a48
 800b490:	20001944 	.word	0x20001944
 800b494:	e000ed04 	.word	0xe000ed04

0800b498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d016      	beq.n	800b4d8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4aa:	4b13      	ldr	r3, [pc, #76]	; (800b4f8 <vTaskDelay+0x60>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d009      	beq.n	800b4c6 <vTaskDelay+0x2e>
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	e7fe      	b.n	800b4c4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b4c6:	f000 f911 	bl	800b6ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 febd 	bl	800c24c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4d2:	f000 f919 	bl	800b708 <xTaskResumeAll>
 800b4d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d107      	bne.n	800b4ee <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b4de:	4b07      	ldr	r3, [pc, #28]	; (800b4fc <vTaskDelay+0x64>)
 800b4e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e4:	601a      	str	r2, [r3, #0]
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20001a68 	.word	0x20001a68
 800b4fc:	e000ed04 	.word	0xe000ed04

0800b500 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b508:	f7fe fbf6 	bl	8009cf8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d102      	bne.n	800b518 <vTaskSuspend+0x18>
 800b512:	4b3c      	ldr	r3, [pc, #240]	; (800b604 <vTaskSuspend+0x104>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	e000      	b.n	800b51a <vTaskSuspend+0x1a>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	3304      	adds	r3, #4
 800b520:	4618      	mov	r0, r3
 800b522:	f7fe fad1 	bl	8009ac8 <uxListRemove>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d115      	bne.n	800b558 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b530:	4935      	ldr	r1, [pc, #212]	; (800b608 <vTaskSuspend+0x108>)
 800b532:	4613      	mov	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	440b      	add	r3, r1
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d10a      	bne.n	800b558 <vTaskSuspend+0x58>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b546:	2201      	movs	r2, #1
 800b548:	fa02 f303 	lsl.w	r3, r2, r3
 800b54c:	43da      	mvns	r2, r3
 800b54e:	4b2f      	ldr	r3, [pc, #188]	; (800b60c <vTaskSuspend+0x10c>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4013      	ands	r3, r2
 800b554:	4a2d      	ldr	r2, [pc, #180]	; (800b60c <vTaskSuspend+0x10c>)
 800b556:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d004      	beq.n	800b56a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	3318      	adds	r3, #24
 800b564:	4618      	mov	r0, r3
 800b566:	f7fe faaf 	bl	8009ac8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3304      	adds	r3, #4
 800b56e:	4619      	mov	r1, r3
 800b570:	4827      	ldr	r0, [pc, #156]	; (800b610 <vTaskSuspend+0x110>)
 800b572:	f7fe fa4e 	bl	8009a12 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d103      	bne.n	800b58a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b58a:	f7fe fbe3 	bl	8009d54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b58e:	4b21      	ldr	r3, [pc, #132]	; (800b614 <vTaskSuspend+0x114>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b596:	f7fe fbaf 	bl	8009cf8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b59a:	f000 fc59 	bl	800be50 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b59e:	f7fe fbd9 	bl	8009d54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b5a2:	4b18      	ldr	r3, [pc, #96]	; (800b604 <vTaskSuspend+0x104>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d126      	bne.n	800b5fa <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800b5ac:	4b19      	ldr	r3, [pc, #100]	; (800b614 <vTaskSuspend+0x114>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d016      	beq.n	800b5e2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b5b4:	4b18      	ldr	r3, [pc, #96]	; (800b618 <vTaskSuspend+0x118>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d009      	beq.n	800b5d0 <vTaskSuspend+0xd0>
 800b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c0:	f383 8811 	msr	BASEPRI, r3
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	e7fe      	b.n	800b5ce <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800b5d0:	4b12      	ldr	r3, [pc, #72]	; (800b61c <vTaskSuspend+0x11c>)
 800b5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5e0:	e00b      	b.n	800b5fa <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b5e2:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <vTaskSuspend+0x110>)
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <vTaskSuspend+0x120>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d103      	bne.n	800b5f6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800b5ee:	4b05      	ldr	r3, [pc, #20]	; (800b604 <vTaskSuspend+0x104>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]
	}
 800b5f4:	e001      	b.n	800b5fa <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800b5f6:	f000 f9ed 	bl	800b9d4 <vTaskSwitchContext>
	}
 800b5fa:	bf00      	nop
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	20001940 	.word	0x20001940
 800b608:	20001944 	.word	0x20001944
 800b60c:	20001a48 	.word	0x20001a48
 800b610:	20001a2c 	.word	0x20001a2c
 800b614:	20001a4c 	.word	0x20001a4c
 800b618:	20001a68 	.word	0x20001a68
 800b61c:	e000ed04 	.word	0xe000ed04
 800b620:	20001a40 	.word	0x20001a40

0800b624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	; 0x28
 800b628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b62a:	2300      	movs	r3, #0
 800b62c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b62e:	2300      	movs	r3, #0
 800b630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b632:	463a      	mov	r2, r7
 800b634:	1d39      	adds	r1, r7, #4
 800b636:	f107 0308 	add.w	r3, r7, #8
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f4 fdba 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	9202      	str	r2, [sp, #8]
 800b648:	9301      	str	r3, [sp, #4]
 800b64a:	2300      	movs	r3, #0
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	2300      	movs	r3, #0
 800b650:	460a      	mov	r2, r1
 800b652:	4920      	ldr	r1, [pc, #128]	; (800b6d4 <vTaskStartScheduler+0xb0>)
 800b654:	4820      	ldr	r0, [pc, #128]	; (800b6d8 <vTaskStartScheduler+0xb4>)
 800b656:	f7ff fd99 	bl	800b18c <xTaskCreateStatic>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4b1f      	ldr	r3, [pc, #124]	; (800b6dc <vTaskStartScheduler+0xb8>)
 800b65e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b660:	4b1e      	ldr	r3, [pc, #120]	; (800b6dc <vTaskStartScheduler+0xb8>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	e001      	b.n	800b672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b66e:	2300      	movs	r3, #0
 800b670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b01      	cmp	r3, #1
 800b676:	d102      	bne.n	800b67e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b678:	f000 fe4e 	bl	800c318 <xTimerCreateTimerTask>
 800b67c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d115      	bne.n	800b6b0 <vTaskStartScheduler+0x8c>
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b696:	4b12      	ldr	r3, [pc, #72]	; (800b6e0 <vTaskStartScheduler+0xbc>)
 800b698:	f04f 32ff 	mov.w	r2, #4294967295
 800b69c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b69e:	4b11      	ldr	r3, [pc, #68]	; (800b6e4 <vTaskStartScheduler+0xc0>)
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b6a4:	4b10      	ldr	r3, [pc, #64]	; (800b6e8 <vTaskStartScheduler+0xc4>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6aa:	f7fe fab5 	bl	8009c18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6ae:	e00d      	b.n	800b6cc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6b6:	d109      	bne.n	800b6cc <vTaskStartScheduler+0xa8>
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e7fe      	b.n	800b6ca <vTaskStartScheduler+0xa6>
}
 800b6cc:	bf00      	nop
 800b6ce:	3718      	adds	r7, #24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	0800d474 	.word	0x0800d474
 800b6d8:	0800bced 	.word	0x0800bced
 800b6dc:	20001a64 	.word	0x20001a64
 800b6e0:	20001a60 	.word	0x20001a60
 800b6e4:	20001a4c 	.word	0x20001a4c
 800b6e8:	20001a44 	.word	0x20001a44

0800b6ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b6f0:	4b04      	ldr	r3, [pc, #16]	; (800b704 <vTaskSuspendAll+0x18>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	4a03      	ldr	r2, [pc, #12]	; (800b704 <vTaskSuspendAll+0x18>)
 800b6f8:	6013      	str	r3, [r2, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bc80      	pop	{r7}
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20001a68 	.word	0x20001a68

0800b708 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b712:	2300      	movs	r3, #0
 800b714:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b716:	4b41      	ldr	r3, [pc, #260]	; (800b81c <xTaskResumeAll+0x114>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <xTaskResumeAll+0x2a>
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	e7fe      	b.n	800b730 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b732:	f7fe fae1 	bl	8009cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b736:	4b39      	ldr	r3, [pc, #228]	; (800b81c <xTaskResumeAll+0x114>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	4a37      	ldr	r2, [pc, #220]	; (800b81c <xTaskResumeAll+0x114>)
 800b73e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b740:	4b36      	ldr	r3, [pc, #216]	; (800b81c <xTaskResumeAll+0x114>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d161      	bne.n	800b80c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b748:	4b35      	ldr	r3, [pc, #212]	; (800b820 <xTaskResumeAll+0x118>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d05d      	beq.n	800b80c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b750:	e02e      	b.n	800b7b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b752:	4b34      	ldr	r3, [pc, #208]	; (800b824 <xTaskResumeAll+0x11c>)
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3318      	adds	r3, #24
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe f9b2 	bl	8009ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	3304      	adds	r3, #4
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fe f9ad 	bl	8009ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b772:	2201      	movs	r2, #1
 800b774:	409a      	lsls	r2, r3
 800b776:	4b2c      	ldr	r3, [pc, #176]	; (800b828 <xTaskResumeAll+0x120>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	4a2a      	ldr	r2, [pc, #168]	; (800b828 <xTaskResumeAll+0x120>)
 800b77e:	6013      	str	r3, [r2, #0]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b784:	4613      	mov	r3, r2
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4a27      	ldr	r2, [pc, #156]	; (800b82c <xTaskResumeAll+0x124>)
 800b78e:	441a      	add	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	3304      	adds	r3, #4
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f7fe f93b 	bl	8009a12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a0:	4b23      	ldr	r3, [pc, #140]	; (800b830 <xTaskResumeAll+0x128>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d302      	bcc.n	800b7b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b7aa:	4b22      	ldr	r3, [pc, #136]	; (800b834 <xTaskResumeAll+0x12c>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7b0:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <xTaskResumeAll+0x11c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1cc      	bne.n	800b752 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d001      	beq.n	800b7c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7be:	f000 fb47 	bl	800be50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	; (800b838 <xTaskResumeAll+0x130>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d010      	beq.n	800b7f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7ce:	f000 f845 	bl	800b85c <xTaskIncrementTick>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b7d8:	4b16      	ldr	r3, [pc, #88]	; (800b834 <xTaskResumeAll+0x12c>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3b01      	subs	r3, #1
 800b7e2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f1      	bne.n	800b7ce <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b7ea:	4b13      	ldr	r3, [pc, #76]	; (800b838 <xTaskResumeAll+0x130>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7f0:	4b10      	ldr	r3, [pc, #64]	; (800b834 <xTaskResumeAll+0x12c>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d009      	beq.n	800b80c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7fc:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <xTaskResumeAll+0x134>)
 800b7fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b802:	601a      	str	r2, [r3, #0]
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b80c:	f7fe faa2 	bl	8009d54 <vPortExitCritical>

	return xAlreadyYielded;
 800b810:	68bb      	ldr	r3, [r7, #8]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20001a68 	.word	0x20001a68
 800b820:	20001a40 	.word	0x20001a40
 800b824:	20001a00 	.word	0x20001a00
 800b828:	20001a48 	.word	0x20001a48
 800b82c:	20001944 	.word	0x20001944
 800b830:	20001940 	.word	0x20001940
 800b834:	20001a54 	.word	0x20001a54
 800b838:	20001a50 	.word	0x20001a50
 800b83c:	e000ed04 	.word	0xe000ed04

0800b840 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b846:	4b04      	ldr	r3, [pc, #16]	; (800b858 <xTaskGetTickCount+0x18>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b84c:	687b      	ldr	r3, [r7, #4]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	bc80      	pop	{r7}
 800b856:	4770      	bx	lr
 800b858:	20001a44 	.word	0x20001a44

0800b85c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b866:	4b50      	ldr	r3, [pc, #320]	; (800b9a8 <xTaskIncrementTick+0x14c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f040 808c 	bne.w	800b988 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b870:	4b4e      	ldr	r3, [pc, #312]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b878:	4a4c      	ldr	r2, [pc, #304]	; (800b9ac <xTaskIncrementTick+0x150>)
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d11f      	bne.n	800b8c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b884:	4b4a      	ldr	r3, [pc, #296]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d009      	beq.n	800b8a2 <xTaskIncrementTick+0x46>
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	e7fe      	b.n	800b8a0 <xTaskIncrementTick+0x44>
 800b8a2:	4b43      	ldr	r3, [pc, #268]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	4b42      	ldr	r3, [pc, #264]	; (800b9b4 <xTaskIncrementTick+0x158>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a40      	ldr	r2, [pc, #256]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	4a40      	ldr	r2, [pc, #256]	; (800b9b4 <xTaskIncrementTick+0x158>)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6013      	str	r3, [r2, #0]
 800b8b6:	4b40      	ldr	r3, [pc, #256]	; (800b9b8 <xTaskIncrementTick+0x15c>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	4a3e      	ldr	r2, [pc, #248]	; (800b9b8 <xTaskIncrementTick+0x15c>)
 800b8be:	6013      	str	r3, [r2, #0]
 800b8c0:	f000 fac6 	bl	800be50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8c4:	4b3d      	ldr	r3, [pc, #244]	; (800b9bc <xTaskIncrementTick+0x160>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d34d      	bcc.n	800b96a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ce:	4b38      	ldr	r3, [pc, #224]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <xTaskIncrementTick+0x80>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e000      	b.n	800b8de <xTaskIncrementTick+0x82>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d004      	beq.n	800b8ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8e2:	4b36      	ldr	r3, [pc, #216]	; (800b9bc <xTaskIncrementTick+0x160>)
 800b8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e8:	601a      	str	r2, [r3, #0]
					break;
 800b8ea:	e03e      	b.n	800b96a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b8ec:	4b30      	ldr	r3, [pc, #192]	; (800b9b0 <xTaskIncrementTick+0x154>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	685b      	ldr	r3, [r3, #4]
 800b8fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8fc:	693a      	ldr	r2, [r7, #16]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d203      	bcs.n	800b90c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b904:	4a2d      	ldr	r2, [pc, #180]	; (800b9bc <xTaskIncrementTick+0x160>)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6013      	str	r3, [r2, #0]
						break;
 800b90a:	e02e      	b.n	800b96a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	3304      	adds	r3, #4
 800b910:	4618      	mov	r0, r3
 800b912:	f7fe f8d9 	bl	8009ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d004      	beq.n	800b928 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	3318      	adds	r3, #24
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe f8d0 	bl	8009ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92c:	2201      	movs	r2, #1
 800b92e:	409a      	lsls	r2, r3
 800b930:	4b23      	ldr	r3, [pc, #140]	; (800b9c0 <xTaskIncrementTick+0x164>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4313      	orrs	r3, r2
 800b936:	4a22      	ldr	r2, [pc, #136]	; (800b9c0 <xTaskIncrementTick+0x164>)
 800b938:	6013      	str	r3, [r2, #0]
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b93e:	4613      	mov	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4a1f      	ldr	r2, [pc, #124]	; (800b9c4 <xTaskIncrementTick+0x168>)
 800b948:	441a      	add	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	3304      	adds	r3, #4
 800b94e:	4619      	mov	r1, r3
 800b950:	4610      	mov	r0, r2
 800b952:	f7fe f85e 	bl	8009a12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95a:	4b1b      	ldr	r3, [pc, #108]	; (800b9c8 <xTaskIncrementTick+0x16c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b960:	429a      	cmp	r2, r3
 800b962:	d3b4      	bcc.n	800b8ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b964:	2301      	movs	r3, #1
 800b966:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b968:	e7b1      	b.n	800b8ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b96a:	4b17      	ldr	r3, [pc, #92]	; (800b9c8 <xTaskIncrementTick+0x16c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b970:	4914      	ldr	r1, [pc, #80]	; (800b9c4 <xTaskIncrementTick+0x168>)
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	440b      	add	r3, r1
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d907      	bls.n	800b992 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b982:	2301      	movs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	e004      	b.n	800b992 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b988:	4b10      	ldr	r3, [pc, #64]	; (800b9cc <xTaskIncrementTick+0x170>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	3301      	adds	r3, #1
 800b98e:	4a0f      	ldr	r2, [pc, #60]	; (800b9cc <xTaskIncrementTick+0x170>)
 800b990:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b992:	4b0f      	ldr	r3, [pc, #60]	; (800b9d0 <xTaskIncrementTick+0x174>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b99a:	2301      	movs	r3, #1
 800b99c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b99e:	697b      	ldr	r3, [r7, #20]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3718      	adds	r7, #24
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20001a68 	.word	0x20001a68
 800b9ac:	20001a44 	.word	0x20001a44
 800b9b0:	200019f8 	.word	0x200019f8
 800b9b4:	200019fc 	.word	0x200019fc
 800b9b8:	20001a58 	.word	0x20001a58
 800b9bc:	20001a60 	.word	0x20001a60
 800b9c0:	20001a48 	.word	0x20001a48
 800b9c4:	20001944 	.word	0x20001944
 800b9c8:	20001940 	.word	0x20001940
 800b9cc:	20001a50 	.word	0x20001a50
 800b9d0:	20001a54 	.word	0x20001a54

0800b9d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9da:	4b26      	ldr	r3, [pc, #152]	; (800ba74 <vTaskSwitchContext+0xa0>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9e2:	4b25      	ldr	r3, [pc, #148]	; (800ba78 <vTaskSwitchContext+0xa4>)
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9e8:	e03e      	b.n	800ba68 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b9ea:	4b23      	ldr	r3, [pc, #140]	; (800ba78 <vTaskSwitchContext+0xa4>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b9f0:	4b22      	ldr	r3, [pc, #136]	; (800ba7c <vTaskSwitchContext+0xa8>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	fab3 f383 	clz	r3, r3
 800b9fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b9fe:	7afb      	ldrb	r3, [r7, #11]
 800ba00:	f1c3 031f 	rsb	r3, r3, #31
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	491e      	ldr	r1, [pc, #120]	; (800ba80 <vTaskSwitchContext+0xac>)
 800ba08:	697a      	ldr	r2, [r7, #20]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	440b      	add	r3, r1
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d109      	bne.n	800ba2e <vTaskSwitchContext+0x5a>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	f383 8811 	msr	BASEPRI, r3
 800ba22:	f3bf 8f6f 	isb	sy
 800ba26:	f3bf 8f4f 	dsb	sy
 800ba2a:	607b      	str	r3, [r7, #4]
 800ba2c:	e7fe      	b.n	800ba2c <vTaskSwitchContext+0x58>
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	4613      	mov	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4a11      	ldr	r2, [pc, #68]	; (800ba80 <vTaskSwitchContext+0xac>)
 800ba3a:	4413      	add	r3, r2
 800ba3c:	613b      	str	r3, [r7, #16]
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	605a      	str	r2, [r3, #4]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d104      	bne.n	800ba5e <vTaskSwitchContext+0x8a>
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	605a      	str	r2, [r3, #4]
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	4a07      	ldr	r2, [pc, #28]	; (800ba84 <vTaskSwitchContext+0xb0>)
 800ba66:	6013      	str	r3, [r2, #0]
}
 800ba68:	bf00      	nop
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bc80      	pop	{r7}
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	20001a68 	.word	0x20001a68
 800ba78:	20001a54 	.word	0x20001a54
 800ba7c:	20001a48 	.word	0x20001a48
 800ba80:	20001944 	.word	0x20001944
 800ba84:	20001940 	.word	0x20001940

0800ba88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d109      	bne.n	800baac <vTaskPlaceOnEventList+0x24>
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	e7fe      	b.n	800baaa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baac:	4b07      	ldr	r3, [pc, #28]	; (800bacc <vTaskPlaceOnEventList+0x44>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3318      	adds	r3, #24
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7fd ffcf 	bl	8009a58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800baba:	2101      	movs	r1, #1
 800babc:	6838      	ldr	r0, [r7, #0]
 800babe:	f000 fbc5 	bl	800c24c <prvAddCurrentTaskToDelayedList>
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	20001940 	.word	0x20001940

0800bad0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <vTaskPlaceOnEventListRestricted+0x26>
 800bae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae6:	f383 8811 	msr	BASEPRI, r3
 800baea:	f3bf 8f6f 	isb	sy
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	617b      	str	r3, [r7, #20]
 800baf4:	e7fe      	b.n	800baf4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baf6:	4b0a      	ldr	r3, [pc, #40]	; (800bb20 <vTaskPlaceOnEventListRestricted+0x50>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	3318      	adds	r3, #24
 800bafc:	4619      	mov	r1, r3
 800bafe:	68f8      	ldr	r0, [r7, #12]
 800bb00:	f7fd ff87 	bl	8009a12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d002      	beq.n	800bb10 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bb0a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	68b8      	ldr	r0, [r7, #8]
 800bb14:	f000 fb9a 	bl	800c24c <prvAddCurrentTaskToDelayedList>
	}
 800bb18:	bf00      	nop
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	20001940 	.word	0x20001940

0800bb24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d109      	bne.n	800bb4e <xTaskRemoveFromEventList+0x2a>
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60fb      	str	r3, [r7, #12]
 800bb4c:	e7fe      	b.n	800bb4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	3318      	adds	r3, #24
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fd ffb8 	bl	8009ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb58:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <xTaskRemoveFromEventList+0xac>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d11c      	bne.n	800bb9a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	3304      	adds	r3, #4
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fd ffaf 	bl	8009ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6e:	2201      	movs	r2, #1
 800bb70:	409a      	lsls	r2, r3
 800bb72:	4b18      	ldr	r3, [pc, #96]	; (800bbd4 <xTaskRemoveFromEventList+0xb0>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	4a16      	ldr	r2, [pc, #88]	; (800bbd4 <xTaskRemoveFromEventList+0xb0>)
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb80:	4613      	mov	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4a13      	ldr	r2, [pc, #76]	; (800bbd8 <xTaskRemoveFromEventList+0xb4>)
 800bb8a:	441a      	add	r2, r3
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4619      	mov	r1, r3
 800bb92:	4610      	mov	r0, r2
 800bb94:	f7fd ff3d 	bl	8009a12 <vListInsertEnd>
 800bb98:	e005      	b.n	800bba6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	4619      	mov	r1, r3
 800bba0:	480e      	ldr	r0, [pc, #56]	; (800bbdc <xTaskRemoveFromEventList+0xb8>)
 800bba2:	f7fd ff36 	bl	8009a12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <xTaskRemoveFromEventList+0xbc>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d905      	bls.n	800bbc0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <xTaskRemoveFromEventList+0xc0>)
 800bbba:	2201      	movs	r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	e001      	b.n	800bbc4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bbc4:	697b      	ldr	r3, [r7, #20]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3718      	adds	r7, #24
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	20001a68 	.word	0x20001a68
 800bbd4:	20001a48 	.word	0x20001a48
 800bbd8:	20001944 	.word	0x20001944
 800bbdc:	20001a00 	.word	0x20001a00
 800bbe0:	20001940 	.word	0x20001940
 800bbe4:	20001a54 	.word	0x20001a54

0800bbe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbf0:	4b06      	ldr	r3, [pc, #24]	; (800bc0c <vTaskInternalSetTimeOutState+0x24>)
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbf8:	4b05      	ldr	r3, [pc, #20]	; (800bc10 <vTaskInternalSetTimeOutState+0x28>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	605a      	str	r2, [r3, #4]
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bc80      	pop	{r7}
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20001a58 	.word	0x20001a58
 800bc10:	20001a44 	.word	0x20001a44

0800bc14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d109      	bne.n	800bc38 <xTaskCheckForTimeOut+0x24>
 800bc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc28:	f383 8811 	msr	BASEPRI, r3
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	613b      	str	r3, [r7, #16]
 800bc36:	e7fe      	b.n	800bc36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d109      	bne.n	800bc52 <xTaskCheckForTimeOut+0x3e>
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	e7fe      	b.n	800bc50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bc52:	f7fe f851 	bl	8009cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc56:	4b1d      	ldr	r3, [pc, #116]	; (800bccc <xTaskCheckForTimeOut+0xb8>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6e:	d102      	bne.n	800bc76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc70:	2300      	movs	r3, #0
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	e023      	b.n	800bcbe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	4b15      	ldr	r3, [pc, #84]	; (800bcd0 <xTaskCheckForTimeOut+0xbc>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d007      	beq.n	800bc92 <xTaskCheckForTimeOut+0x7e>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d802      	bhi.n	800bc92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	61fb      	str	r3, [r7, #28]
 800bc90:	e015      	b.n	800bcbe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d90b      	bls.n	800bcb4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff ff9d 	bl	800bbe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	61fb      	str	r3, [r7, #28]
 800bcb2:	e004      	b.n	800bcbe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcbe:	f7fe f849 	bl	8009d54 <vPortExitCritical>

	return xReturn;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3720      	adds	r7, #32
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	20001a44 	.word	0x20001a44
 800bcd0:	20001a58 	.word	0x20001a58

0800bcd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcd8:	4b03      	ldr	r3, [pc, #12]	; (800bce8 <vTaskMissedYield+0x14>)
 800bcda:	2201      	movs	r2, #1
 800bcdc:	601a      	str	r2, [r3, #0]
}
 800bcde:	bf00      	nop
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bc80      	pop	{r7}
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20001a54 	.word	0x20001a54

0800bcec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcf4:	f000 f852 	bl	800bd9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcf8:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <prvIdleTask+0x28>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d9f9      	bls.n	800bcf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd00:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <prvIdleTask+0x2c>)
 800bd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd10:	e7f0      	b.n	800bcf4 <prvIdleTask+0x8>
 800bd12:	bf00      	nop
 800bd14:	20001944 	.word	0x20001944
 800bd18:	e000ed04 	.word	0xe000ed04

0800bd1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b082      	sub	sp, #8
 800bd20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd22:	2300      	movs	r3, #0
 800bd24:	607b      	str	r3, [r7, #4]
 800bd26:	e00c      	b.n	800bd42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4a12      	ldr	r2, [pc, #72]	; (800bd7c <prvInitialiseTaskLists+0x60>)
 800bd34:	4413      	add	r3, r2
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fd fe40 	bl	80099bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	607b      	str	r3, [r7, #4]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b06      	cmp	r3, #6
 800bd46:	d9ef      	bls.n	800bd28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd48:	480d      	ldr	r0, [pc, #52]	; (800bd80 <prvInitialiseTaskLists+0x64>)
 800bd4a:	f7fd fe37 	bl	80099bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd4e:	480d      	ldr	r0, [pc, #52]	; (800bd84 <prvInitialiseTaskLists+0x68>)
 800bd50:	f7fd fe34 	bl	80099bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd54:	480c      	ldr	r0, [pc, #48]	; (800bd88 <prvInitialiseTaskLists+0x6c>)
 800bd56:	f7fd fe31 	bl	80099bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd5a:	480c      	ldr	r0, [pc, #48]	; (800bd8c <prvInitialiseTaskLists+0x70>)
 800bd5c:	f7fd fe2e 	bl	80099bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd60:	480b      	ldr	r0, [pc, #44]	; (800bd90 <prvInitialiseTaskLists+0x74>)
 800bd62:	f7fd fe2b 	bl	80099bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd66:	4b0b      	ldr	r3, [pc, #44]	; (800bd94 <prvInitialiseTaskLists+0x78>)
 800bd68:	4a05      	ldr	r2, [pc, #20]	; (800bd80 <prvInitialiseTaskLists+0x64>)
 800bd6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <prvInitialiseTaskLists+0x7c>)
 800bd6e:	4a05      	ldr	r2, [pc, #20]	; (800bd84 <prvInitialiseTaskLists+0x68>)
 800bd70:	601a      	str	r2, [r3, #0]
}
 800bd72:	bf00      	nop
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20001944 	.word	0x20001944
 800bd80:	200019d0 	.word	0x200019d0
 800bd84:	200019e4 	.word	0x200019e4
 800bd88:	20001a00 	.word	0x20001a00
 800bd8c:	20001a14 	.word	0x20001a14
 800bd90:	20001a2c 	.word	0x20001a2c
 800bd94:	200019f8 	.word	0x200019f8
 800bd98:	200019fc 	.word	0x200019fc

0800bd9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bda2:	e019      	b.n	800bdd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bda4:	f7fd ffa8 	bl	8009cf8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bda8:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <prvCheckTasksWaitingTermination+0x4c>)
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fd fe87 	bl	8009ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdba:	4b0c      	ldr	r3, [pc, #48]	; (800bdec <prvCheckTasksWaitingTermination+0x50>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	4a0a      	ldr	r2, [pc, #40]	; (800bdec <prvCheckTasksWaitingTermination+0x50>)
 800bdc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bdc4:	4b0a      	ldr	r3, [pc, #40]	; (800bdf0 <prvCheckTasksWaitingTermination+0x54>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	4a09      	ldr	r2, [pc, #36]	; (800bdf0 <prvCheckTasksWaitingTermination+0x54>)
 800bdcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdce:	f7fd ffc1 	bl	8009d54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 f80e 	bl	800bdf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <prvCheckTasksWaitingTermination+0x54>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e1      	bne.n	800bda4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20001a14 	.word	0x20001a14
 800bdec:	20001a40 	.word	0x20001a40
 800bdf0:	20001a28 	.word	0x20001a28

0800bdf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be02:	2b00      	cmp	r3, #0
 800be04:	d108      	bne.n	800be18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe f92c 	bl	800a068 <vPortFree>
				vPortFree( pxTCB );
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7fe f929 	bl	800a068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be16:	e017      	b.n	800be48 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d103      	bne.n	800be2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fe f920 	bl	800a068 <vPortFree>
	}
 800be28:	e00e      	b.n	800be48 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be30:	2b02      	cmp	r3, #2
 800be32:	d009      	beq.n	800be48 <prvDeleteTCB+0x54>
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	e7fe      	b.n	800be46 <prvDeleteTCB+0x52>
	}
 800be48:	bf00      	nop
 800be4a:	3710      	adds	r7, #16
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be56:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <prvResetNextTaskUnblockTime+0x40>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <prvResetNextTaskUnblockTime+0x14>
 800be60:	2301      	movs	r3, #1
 800be62:	e000      	b.n	800be66 <prvResetNextTaskUnblockTime+0x16>
 800be64:	2300      	movs	r3, #0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be6a:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <prvResetNextTaskUnblockTime+0x44>)
 800be6c:	f04f 32ff 	mov.w	r2, #4294967295
 800be70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be72:	e008      	b.n	800be86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be74:	4b06      	ldr	r3, [pc, #24]	; (800be90 <prvResetNextTaskUnblockTime+0x40>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	4a04      	ldr	r2, [pc, #16]	; (800be94 <prvResetNextTaskUnblockTime+0x44>)
 800be84:	6013      	str	r3, [r2, #0]
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr
 800be90:	200019f8 	.word	0x200019f8
 800be94:	20001a60 	.word	0x20001a60

0800be98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be9e:	4b0b      	ldr	r3, [pc, #44]	; (800becc <xTaskGetSchedulerState+0x34>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d102      	bne.n	800beac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bea6:	2301      	movs	r3, #1
 800bea8:	607b      	str	r3, [r7, #4]
 800beaa:	e008      	b.n	800bebe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beac:	4b08      	ldr	r3, [pc, #32]	; (800bed0 <xTaskGetSchedulerState+0x38>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d102      	bne.n	800beba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800beb4:	2302      	movs	r3, #2
 800beb6:	607b      	str	r3, [r7, #4]
 800beb8:	e001      	b.n	800bebe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beba:	2300      	movs	r3, #0
 800bebc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bebe:	687b      	ldr	r3, [r7, #4]
	}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bc80      	pop	{r7}
 800bec8:	4770      	bx	lr
 800beca:	bf00      	nop
 800becc:	20001a4c 	.word	0x20001a4c
 800bed0:	20001a68 	.word	0x20001a68

0800bed4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d06e      	beq.n	800bfc8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beee:	4b39      	ldr	r3, [pc, #228]	; (800bfd4 <xTaskPriorityInherit+0x100>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d25e      	bcs.n	800bfb6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	699b      	ldr	r3, [r3, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	db06      	blt.n	800bf0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf00:	4b34      	ldr	r3, [pc, #208]	; (800bfd4 <xTaskPriorityInherit+0x100>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf06:	f1c3 0207 	rsb	r2, r3, #7
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	6959      	ldr	r1, [r3, #20]
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf16:	4613      	mov	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4a2e      	ldr	r2, [pc, #184]	; (800bfd8 <xTaskPriorityInherit+0x104>)
 800bf20:	4413      	add	r3, r2
 800bf22:	4299      	cmp	r1, r3
 800bf24:	d101      	bne.n	800bf2a <xTaskPriorityInherit+0x56>
 800bf26:	2301      	movs	r3, #1
 800bf28:	e000      	b.n	800bf2c <xTaskPriorityInherit+0x58>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d03a      	beq.n	800bfa6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	3304      	adds	r3, #4
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fd fdc7 	bl	8009ac8 <uxListRemove>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d115      	bne.n	800bf6c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf44:	4924      	ldr	r1, [pc, #144]	; (800bfd8 <xTaskPriorityInherit+0x104>)
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10a      	bne.n	800bf6c <xTaskPriorityInherit+0x98>
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf60:	43da      	mvns	r2, r3
 800bf62:	4b1e      	ldr	r3, [pc, #120]	; (800bfdc <xTaskPriorityInherit+0x108>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4013      	ands	r3, r2
 800bf68:	4a1c      	ldr	r2, [pc, #112]	; (800bfdc <xTaskPriorityInherit+0x108>)
 800bf6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf6c:	4b19      	ldr	r3, [pc, #100]	; (800bfd4 <xTaskPriorityInherit+0x100>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	409a      	lsls	r2, r3
 800bf7e:	4b17      	ldr	r3, [pc, #92]	; (800bfdc <xTaskPriorityInherit+0x108>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	4a15      	ldr	r2, [pc, #84]	; (800bfdc <xTaskPriorityInherit+0x108>)
 800bf86:	6013      	str	r3, [r2, #0]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf8c:	4613      	mov	r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	4a10      	ldr	r2, [pc, #64]	; (800bfd8 <xTaskPriorityInherit+0x104>)
 800bf96:	441a      	add	r2, r3
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fd fd37 	bl	8009a12 <vListInsertEnd>
 800bfa4:	e004      	b.n	800bfb0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfa6:	4b0b      	ldr	r3, [pc, #44]	; (800bfd4 <xTaskPriorityInherit+0x100>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e008      	b.n	800bfc8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <xTaskPriorityInherit+0x100>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d201      	bcs.n	800bfc8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
	}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20001940 	.word	0x20001940
 800bfd8:	20001944 	.word	0x20001944
 800bfdc:	20001a48 	.word	0x20001a48

0800bfe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfec:	2300      	movs	r3, #0
 800bfee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d06c      	beq.n	800c0d0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bff6:	4b39      	ldr	r3, [pc, #228]	; (800c0dc <xTaskPriorityDisinherit+0xfc>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d009      	beq.n	800c014 <xTaskPriorityDisinherit+0x34>
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	e7fe      	b.n	800c012 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d109      	bne.n	800c030 <xTaskPriorityDisinherit+0x50>
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	60bb      	str	r3, [r7, #8]
 800c02e:	e7fe      	b.n	800c02e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c034:	1e5a      	subs	r2, r3, #1
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c042:	429a      	cmp	r2, r3
 800c044:	d044      	beq.n	800c0d0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d140      	bne.n	800c0d0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	3304      	adds	r3, #4
 800c052:	4618      	mov	r0, r3
 800c054:	f7fd fd38 	bl	8009ac8 <uxListRemove>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d115      	bne.n	800c08a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c062:	491f      	ldr	r1, [pc, #124]	; (800c0e0 <xTaskPriorityDisinherit+0x100>)
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	440b      	add	r3, r1
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <xTaskPriorityDisinherit+0xaa>
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c078:	2201      	movs	r2, #1
 800c07a:	fa02 f303 	lsl.w	r3, r2, r3
 800c07e:	43da      	mvns	r2, r3
 800c080:	4b18      	ldr	r3, [pc, #96]	; (800c0e4 <xTaskPriorityDisinherit+0x104>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4013      	ands	r3, r2
 800c086:	4a17      	ldr	r2, [pc, #92]	; (800c0e4 <xTaskPriorityDisinherit+0x104>)
 800c088:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c096:	f1c3 0207 	rsb	r2, r3, #7
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	409a      	lsls	r2, r3
 800c0a6:	4b0f      	ldr	r3, [pc, #60]	; (800c0e4 <xTaskPriorityDisinherit+0x104>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	4a0d      	ldr	r2, [pc, #52]	; (800c0e4 <xTaskPriorityDisinherit+0x104>)
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4a08      	ldr	r2, [pc, #32]	; (800c0e0 <xTaskPriorityDisinherit+0x100>)
 800c0be:	441a      	add	r2, r3
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f7fd fca3 	bl	8009a12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0d0:	697b      	ldr	r3, [r7, #20]
	}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20001940 	.word	0x20001940
 800c0e0:	20001944 	.word	0x20001944
 800c0e4:	20001a48 	.word	0x20001a48

0800c0e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8086 	beq.w	800c20e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c106:	2b00      	cmp	r3, #0
 800c108:	d109      	bne.n	800c11e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	f383 8811 	msr	BASEPRI, r3
 800c112:	f3bf 8f6f 	isb	sy
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	e7fe      	b.n	800c11c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d202      	bcs.n	800c12e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	61fb      	str	r3, [r7, #28]
 800c12c:	e002      	b.n	800c134 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c132:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d067      	beq.n	800c20e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	429a      	cmp	r2, r3
 800c146:	d162      	bne.n	800c20e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c148:	4b33      	ldr	r3, [pc, #204]	; (800c218 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	69ba      	ldr	r2, [r7, #24]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d109      	bne.n	800c166 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	60bb      	str	r3, [r7, #8]
 800c164:	e7fe      	b.n	800c164 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c166:	69bb      	ldr	r3, [r7, #24]
 800c168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	2b00      	cmp	r3, #0
 800c178:	db04      	blt.n	800c184 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	f1c3 0207 	rsb	r2, r3, #7
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6959      	ldr	r1, [r3, #20]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	4613      	mov	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4a22      	ldr	r2, [pc, #136]	; (800c21c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c194:	4413      	add	r3, r2
 800c196:	4299      	cmp	r1, r3
 800c198:	d101      	bne.n	800c19e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d034      	beq.n	800c20e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fd fc8d 	bl	8009ac8 <uxListRemove>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d115      	bne.n	800c1e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b8:	4918      	ldr	r1, [pc, #96]	; (800c21c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	440b      	add	r3, r1
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10a      	bne.n	800c1e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d4:	43da      	mvns	r2, r3
 800c1d6:	4b12      	ldr	r3, [pc, #72]	; (800c220 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	4a10      	ldr	r2, [pc, #64]	; (800c220 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1de:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	409a      	lsls	r2, r3
 800c1e8:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	4a0c      	ldr	r2, [pc, #48]	; (800c220 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4a07      	ldr	r2, [pc, #28]	; (800c21c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c200:	441a      	add	r2, r3
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	3304      	adds	r3, #4
 800c206:	4619      	mov	r1, r3
 800c208:	4610      	mov	r0, r2
 800c20a:	f7fd fc02 	bl	8009a12 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c20e:	bf00      	nop
 800c210:	3720      	adds	r7, #32
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20001940 	.word	0x20001940
 800c21c:	20001944 	.word	0x20001944
 800c220:	20001a48 	.word	0x20001a48

0800c224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c224:	b480      	push	{r7}
 800c226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c228:	4b07      	ldr	r3, [pc, #28]	; (800c248 <pvTaskIncrementMutexHeldCount+0x24>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d004      	beq.n	800c23a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c230:	4b05      	ldr	r3, [pc, #20]	; (800c248 <pvTaskIncrementMutexHeldCount+0x24>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c236:	3201      	adds	r2, #1
 800c238:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c23a:	4b03      	ldr	r3, [pc, #12]	; (800c248 <pvTaskIncrementMutexHeldCount+0x24>)
 800c23c:	681b      	ldr	r3, [r3, #0]
	}
 800c23e:	4618      	mov	r0, r3
 800c240:	46bd      	mov	sp, r7
 800c242:	bc80      	pop	{r7}
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20001940 	.word	0x20001940

0800c24c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c256:	4b29      	ldr	r3, [pc, #164]	; (800c2fc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c25c:	4b28      	ldr	r3, [pc, #160]	; (800c300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	3304      	adds	r3, #4
 800c262:	4618      	mov	r0, r3
 800c264:	f7fd fc30 	bl	8009ac8 <uxListRemove>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10b      	bne.n	800c286 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c26e:	4b24      	ldr	r3, [pc, #144]	; (800c300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	2201      	movs	r2, #1
 800c276:	fa02 f303 	lsl.w	r3, r2, r3
 800c27a:	43da      	mvns	r2, r3
 800c27c:	4b21      	ldr	r3, [pc, #132]	; (800c304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4013      	ands	r3, r2
 800c282:	4a20      	ldr	r2, [pc, #128]	; (800c304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c284:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28c:	d10a      	bne.n	800c2a4 <prvAddCurrentTaskToDelayedList+0x58>
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d007      	beq.n	800c2a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c294:	4b1a      	ldr	r3, [pc, #104]	; (800c300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	4619      	mov	r1, r3
 800c29c:	481a      	ldr	r0, [pc, #104]	; (800c308 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c29e:	f7fd fbb8 	bl	8009a12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2a2:	e026      	b.n	800c2f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4413      	add	r3, r2
 800c2aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2ac:	4b14      	ldr	r3, [pc, #80]	; (800c300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d209      	bcs.n	800c2d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2bc:	4b13      	ldr	r3, [pc, #76]	; (800c30c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	4b0f      	ldr	r3, [pc, #60]	; (800c300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3304      	adds	r3, #4
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	f7fd fbc5 	bl	8009a58 <vListInsert>
}
 800c2ce:	e010      	b.n	800c2f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2d0:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	4b0a      	ldr	r3, [pc, #40]	; (800c300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4619      	mov	r1, r3
 800c2dc:	4610      	mov	r0, r2
 800c2de:	f7fd fbbb 	bl	8009a58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2e2:	4b0c      	ldr	r3, [pc, #48]	; (800c314 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68ba      	ldr	r2, [r7, #8]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d202      	bcs.n	800c2f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c2ec:	4a09      	ldr	r2, [pc, #36]	; (800c314 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	6013      	str	r3, [r2, #0]
}
 800c2f2:	bf00      	nop
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	20001a44 	.word	0x20001a44
 800c300:	20001940 	.word	0x20001940
 800c304:	20001a48 	.word	0x20001a48
 800c308:	20001a2c 	.word	0x20001a2c
 800c30c:	200019fc 	.word	0x200019fc
 800c310:	200019f8 	.word	0x200019f8
 800c314:	20001a60 	.word	0x20001a60

0800c318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08a      	sub	sp, #40	; 0x28
 800c31c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c31e:	2300      	movs	r3, #0
 800c320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c322:	f000 fb37 	bl	800c994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c326:	4b1c      	ldr	r3, [pc, #112]	; (800c398 <xTimerCreateTimerTask+0x80>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d021      	beq.n	800c372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c32e:	2300      	movs	r3, #0
 800c330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c336:	1d3a      	adds	r2, r7, #4
 800c338:	f107 0108 	add.w	r1, r7, #8
 800c33c:	f107 030c 	add.w	r3, r7, #12
 800c340:	4618      	mov	r0, r3
 800c342:	f7f3 ff4f 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c346:	6879      	ldr	r1, [r7, #4]
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	9202      	str	r2, [sp, #8]
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	2302      	movs	r3, #2
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	2300      	movs	r3, #0
 800c356:	460a      	mov	r2, r1
 800c358:	4910      	ldr	r1, [pc, #64]	; (800c39c <xTimerCreateTimerTask+0x84>)
 800c35a:	4811      	ldr	r0, [pc, #68]	; (800c3a0 <xTimerCreateTimerTask+0x88>)
 800c35c:	f7fe ff16 	bl	800b18c <xTaskCreateStatic>
 800c360:	4602      	mov	r2, r0
 800c362:	4b10      	ldr	r3, [pc, #64]	; (800c3a4 <xTimerCreateTimerTask+0x8c>)
 800c364:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c366:	4b0f      	ldr	r3, [pc, #60]	; (800c3a4 <xTimerCreateTimerTask+0x8c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d001      	beq.n	800c372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c36e:	2301      	movs	r3, #1
 800c370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d109      	bne.n	800c38c <xTimerCreateTimerTask+0x74>
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	613b      	str	r3, [r7, #16]
 800c38a:	e7fe      	b.n	800c38a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c38c:	697b      	ldr	r3, [r7, #20]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3718      	adds	r7, #24
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	20001a9c 	.word	0x20001a9c
 800c39c:	0800d47c 	.word	0x0800d47c
 800c3a0:	0800c5dd 	.word	0x0800c5dd
 800c3a4:	20001aa0 	.word	0x20001aa0

0800c3a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c3b6:	202c      	movs	r0, #44	; 0x2c
 800c3b8:	f7fd fd94 	bl	8009ee4 <pvPortMalloc>
 800c3bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00d      	beq.n	800c3e0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
 800c3ca:	9300      	str	r3, [sp, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68b9      	ldr	r1, [r7, #8]
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f000 f844 	bl	800c460 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c3e0:	697b      	ldr	r3, [r7, #20]
	}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b08a      	sub	sp, #40	; 0x28
 800c3ee:	af02      	add	r7, sp, #8
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	60b9      	str	r1, [r7, #8]
 800c3f4:	607a      	str	r2, [r7, #4]
 800c3f6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c3f8:	232c      	movs	r3, #44	; 0x2c
 800c3fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	2b2c      	cmp	r3, #44	; 0x2c
 800c400:	d009      	beq.n	800c416 <xTimerCreateStatic+0x2c>
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	f383 8811 	msr	BASEPRI, r3
 800c40a:	f3bf 8f6f 	isb	sy
 800c40e:	f3bf 8f4f 	dsb	sy
 800c412:	61bb      	str	r3, [r7, #24]
 800c414:	e7fe      	b.n	800c414 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d109      	bne.n	800c430 <xTimerCreateStatic+0x46>
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	e7fe      	b.n	800c42e <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00d      	beq.n	800c456 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	68b9      	ldr	r1, [r7, #8]
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f000 f809 	bl	800c460 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c456:	69fb      	ldr	r3, [r7, #28]
	}
 800c458:	4618      	mov	r0, r3
 800c45a:	3720      	adds	r7, #32
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d109      	bne.n	800c488 <prvInitialiseNewTimer+0x28>
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	e7fe      	b.n	800c486 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d015      	beq.n	800c4ba <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c48e:	f000 fa81 	bl	800c994 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	6a3a      	ldr	r2, [r7, #32]
 800c4ae:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7fd faa0 	bl	80099fa <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c4ba:	bf00      	nop
 800c4bc:	3718      	adds	r7, #24
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
	...

0800c4c4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	; 0x28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d109      	bne.n	800c4f0 <xTimerGenericCommand+0x2c>
 800c4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e0:	f383 8811 	msr	BASEPRI, r3
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	f3bf 8f4f 	dsb	sy
 800c4ec:	623b      	str	r3, [r7, #32]
 800c4ee:	e7fe      	b.n	800c4ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4f0:	4b19      	ldr	r3, [pc, #100]	; (800c558 <xTimerGenericCommand+0x94>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d02a      	beq.n	800c54e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	2b05      	cmp	r3, #5
 800c508:	dc18      	bgt.n	800c53c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c50a:	f7ff fcc5 	bl	800be98 <xTaskGetSchedulerState>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b02      	cmp	r3, #2
 800c512:	d109      	bne.n	800c528 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c514:	4b10      	ldr	r3, [pc, #64]	; (800c558 <xTimerGenericCommand+0x94>)
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	f107 0114 	add.w	r1, r7, #20
 800c51c:	2300      	movs	r3, #0
 800c51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c520:	f7fe f838 	bl	800a594 <xQueueGenericSend>
 800c524:	6278      	str	r0, [r7, #36]	; 0x24
 800c526:	e012      	b.n	800c54e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c528:	4b0b      	ldr	r3, [pc, #44]	; (800c558 <xTimerGenericCommand+0x94>)
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	f107 0114 	add.w	r1, r7, #20
 800c530:	2300      	movs	r3, #0
 800c532:	2200      	movs	r2, #0
 800c534:	f7fe f82e 	bl	800a594 <xQueueGenericSend>
 800c538:	6278      	str	r0, [r7, #36]	; 0x24
 800c53a:	e008      	b.n	800c54e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c53c:	4b06      	ldr	r3, [pc, #24]	; (800c558 <xTimerGenericCommand+0x94>)
 800c53e:	6818      	ldr	r0, [r3, #0]
 800c540:	f107 0114 	add.w	r1, r7, #20
 800c544:	2300      	movs	r3, #0
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	f7fe f91e 	bl	800a788 <xQueueGenericSendFromISR>
 800c54c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c550:	4618      	mov	r0, r3
 800c552:	3728      	adds	r7, #40	; 0x28
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	20001a9c 	.word	0x20001a9c

0800c55c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b088      	sub	sp, #32
 800c560:	af02      	add	r7, sp, #8
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c566:	4b1c      	ldr	r3, [pc, #112]	; (800c5d8 <prvProcessExpiredTimer+0x7c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68db      	ldr	r3, [r3, #12]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	3304      	adds	r3, #4
 800c574:	4618      	mov	r0, r3
 800c576:	f7fd faa7 	bl	8009ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	69db      	ldr	r3, [r3, #28]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d121      	bne.n	800c5c6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	699a      	ldr	r2, [r3, #24]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	18d1      	adds	r1, r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	683a      	ldr	r2, [r7, #0]
 800c58e:	6978      	ldr	r0, [r7, #20]
 800c590:	f000 f8c8 	bl	800c724 <prvInsertTimerInActiveList>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d015      	beq.n	800c5c6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c59a:	2300      	movs	r3, #0
 800c59c:	9300      	str	r3, [sp, #0]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	6978      	ldr	r0, [r7, #20]
 800c5a6:	f7ff ff8d 	bl	800c4c4 <xTimerGenericCommand>
 800c5aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d109      	bne.n	800c5c6 <prvProcessExpiredTimer+0x6a>
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	60fb      	str	r3, [r7, #12]
 800c5c4:	e7fe      	b.n	800c5c4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	4798      	blx	r3
}
 800c5ce:	bf00      	nop
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20001a94 	.word	0x20001a94

0800c5dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5e4:	f107 0308 	add.w	r3, r7, #8
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 f857 	bl	800c69c <prvGetNextExpireTime>
 800c5ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 f803 	bl	800c600 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5fa:	f000 f8d5 	bl	800c7a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5fe:	e7f1      	b.n	800c5e4 <prvTimerTask+0x8>

0800c600 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c60a:	f7ff f86f 	bl	800b6ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c60e:	f107 0308 	add.w	r3, r7, #8
 800c612:	4618      	mov	r0, r3
 800c614:	f000 f866 	bl	800c6e4 <prvSampleTimeNow>
 800c618:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d130      	bne.n	800c682 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10a      	bne.n	800c63c <prvProcessTimerOrBlockTask+0x3c>
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d806      	bhi.n	800c63c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c62e:	f7ff f86b 	bl	800b708 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c632:	68f9      	ldr	r1, [r7, #12]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ff91 	bl	800c55c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c63a:	e024      	b.n	800c686 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d008      	beq.n	800c654 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c642:	4b13      	ldr	r3, [pc, #76]	; (800c690 <prvProcessTimerOrBlockTask+0x90>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	bf0c      	ite	eq
 800c64c:	2301      	moveq	r3, #1
 800c64e:	2300      	movne	r3, #0
 800c650:	b2db      	uxtb	r3, r3
 800c652:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c654:	4b0f      	ldr	r3, [pc, #60]	; (800c694 <prvProcessTimerOrBlockTask+0x94>)
 800c656:	6818      	ldr	r0, [r3, #0]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	1ad3      	subs	r3, r2, r3
 800c65e:	683a      	ldr	r2, [r7, #0]
 800c660:	4619      	mov	r1, r3
 800c662:	f7fe fd5f 	bl	800b124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c666:	f7ff f84f 	bl	800b708 <xTaskResumeAll>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10a      	bne.n	800c686 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c670:	4b09      	ldr	r3, [pc, #36]	; (800c698 <prvProcessTimerOrBlockTask+0x98>)
 800c672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
}
 800c680:	e001      	b.n	800c686 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c682:	f7ff f841 	bl	800b708 <xTaskResumeAll>
}
 800c686:	bf00      	nop
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20001a98 	.word	0x20001a98
 800c694:	20001a9c 	.word	0x20001a9c
 800c698:	e000ed04 	.word	0xe000ed04

0800c69c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6a4:	4b0e      	ldr	r3, [pc, #56]	; (800c6e0 <prvGetNextExpireTime+0x44>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bf0c      	ite	eq
 800c6ae:	2301      	moveq	r3, #1
 800c6b0:	2300      	movne	r3, #0
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d105      	bne.n	800c6ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6c2:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <prvGetNextExpireTime+0x44>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	e001      	b.n	800c6d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3714      	adds	r7, #20
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bc80      	pop	{r7}
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	20001a94 	.word	0x20001a94

0800c6e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6ec:	f7ff f8a8 	bl	800b840 <xTaskGetTickCount>
 800c6f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6f2:	4b0b      	ldr	r3, [pc, #44]	; (800c720 <prvSampleTimeNow+0x3c>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d205      	bcs.n	800c708 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6fc:	f000 f8ea 	bl	800c8d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	e002      	b.n	800c70e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c70e:	4a04      	ldr	r2, [pc, #16]	; (800c720 <prvSampleTimeNow+0x3c>)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c714:	68fb      	ldr	r3, [r7, #12]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3710      	adds	r7, #16
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20001aa4 	.word	0x20001aa4

0800c724 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
 800c730:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c732:	2300      	movs	r3, #0
 800c734:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	429a      	cmp	r2, r3
 800c748:	d812      	bhi.n	800c770 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	1ad2      	subs	r2, r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	429a      	cmp	r2, r3
 800c756:	d302      	bcc.n	800c75e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c758:	2301      	movs	r3, #1
 800c75a:	617b      	str	r3, [r7, #20]
 800c75c:	e01b      	b.n	800c796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c75e:	4b10      	ldr	r3, [pc, #64]	; (800c7a0 <prvInsertTimerInActiveList+0x7c>)
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3304      	adds	r3, #4
 800c766:	4619      	mov	r1, r3
 800c768:	4610      	mov	r0, r2
 800c76a:	f7fd f975 	bl	8009a58 <vListInsert>
 800c76e:	e012      	b.n	800c796 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d206      	bcs.n	800c786 <prvInsertTimerInActiveList+0x62>
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d302      	bcc.n	800c786 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e007      	b.n	800c796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c786:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <prvInsertTimerInActiveList+0x80>)
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	3304      	adds	r3, #4
 800c78e:	4619      	mov	r1, r3
 800c790:	4610      	mov	r0, r2
 800c792:	f7fd f961 	bl	8009a58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c796:	697b      	ldr	r3, [r7, #20]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3718      	adds	r7, #24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	20001a98 	.word	0x20001a98
 800c7a4:	20001a94 	.word	0x20001a94

0800c7a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08c      	sub	sp, #48	; 0x30
 800c7ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ae:	e07f      	b.n	800c8b0 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	db7c      	blt.n	800c8b0 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d004      	beq.n	800c7cc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fd f97e 	bl	8009ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7cc:	1d3b      	adds	r3, r7, #4
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff ff88 	bl	800c6e4 <prvSampleTimeNow>
 800c7d4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b09      	cmp	r3, #9
 800c7da:	d868      	bhi.n	800c8ae <prvProcessReceivedCommands+0x106>
 800c7dc:	a201      	add	r2, pc, #4	; (adr r2, 800c7e4 <prvProcessReceivedCommands+0x3c>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c80d 	.word	0x0800c80d
 800c7e8:	0800c80d 	.word	0x0800c80d
 800c7ec:	0800c80d 	.word	0x0800c80d
 800c7f0:	0800c8b1 	.word	0x0800c8b1
 800c7f4:	0800c867 	.word	0x0800c867
 800c7f8:	0800c89d 	.word	0x0800c89d
 800c7fc:	0800c80d 	.word	0x0800c80d
 800c800:	0800c80d 	.word	0x0800c80d
 800c804:	0800c8b1 	.word	0x0800c8b1
 800c808:	0800c867 	.word	0x0800c867
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	18d1      	adds	r1, r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6a3a      	ldr	r2, [r7, #32]
 800c818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c81a:	f7ff ff83 	bl	800c724 <prvInsertTimerInActiveList>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d045      	beq.n	800c8b0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c82a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d13d      	bne.n	800c8b0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	441a      	add	r2, r3
 800c83c:	2300      	movs	r3, #0
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	2300      	movs	r3, #0
 800c842:	2100      	movs	r1, #0
 800c844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c846:	f7ff fe3d 	bl	800c4c4 <xTimerGenericCommand>
 800c84a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d12e      	bne.n	800c8b0 <prvProcessReceivedCommands+0x108>
 800c852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	61bb      	str	r3, [r7, #24]
 800c864:	e7fe      	b.n	800c864 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	699b      	ldr	r3, [r3, #24]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d109      	bne.n	800c888 <prvProcessReceivedCommands+0xe0>
 800c874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c878:	f383 8811 	msr	BASEPRI, r3
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f3bf 8f4f 	dsb	sy
 800c884:	617b      	str	r3, [r7, #20]
 800c886:	e7fe      	b.n	800c886 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	699a      	ldr	r2, [r3, #24]
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	18d1      	adds	r1, r2, r3
 800c890:	6a3b      	ldr	r3, [r7, #32]
 800c892:	6a3a      	ldr	r2, [r7, #32]
 800c894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c896:	f7ff ff45 	bl	800c724 <prvInsertTimerInActiveList>
					break;
 800c89a:	e009      	b.n	800c8b0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d104      	bne.n	800c8b0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800c8a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8a8:	f7fd fbde 	bl	800a068 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8ac:	e000      	b.n	800c8b0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800c8ae:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8b0:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <prvProcessReceivedCommands+0x128>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f107 0108 	add.w	r1, r7, #8
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe f882 	bl	800a9c4 <xQueueReceive>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f47f af74 	bne.w	800c7b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c8c8:	bf00      	nop
 800c8ca:	3728      	adds	r7, #40	; 0x28
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	20001a9c 	.word	0x20001a9c

0800c8d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8da:	e044      	b.n	800c966 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8dc:	4b2b      	ldr	r3, [pc, #172]	; (800c98c <prvSwitchTimerLists+0xb8>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8e6:	4b29      	ldr	r3, [pc, #164]	; (800c98c <prvSwitchTimerLists+0xb8>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	3304      	adds	r3, #4
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fd f8e7 	bl	8009ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	6938      	ldr	r0, [r7, #16]
 800c900:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	69db      	ldr	r3, [r3, #28]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d12d      	bne.n	800c966 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	699a      	ldr	r2, [r3, #24]
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	4413      	add	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d90e      	bls.n	800c93a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c928:	4b18      	ldr	r3, [pc, #96]	; (800c98c <prvSwitchTimerLists+0xb8>)
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	3304      	adds	r3, #4
 800c930:	4619      	mov	r1, r3
 800c932:	4610      	mov	r0, r2
 800c934:	f7fd f890 	bl	8009a58 <vListInsert>
 800c938:	e015      	b.n	800c966 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c93a:	2300      	movs	r3, #0
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	2300      	movs	r3, #0
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	2100      	movs	r1, #0
 800c944:	6938      	ldr	r0, [r7, #16]
 800c946:	f7ff fdbd 	bl	800c4c4 <xTimerGenericCommand>
 800c94a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d109      	bne.n	800c966 <prvSwitchTimerLists+0x92>
 800c952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c956:	f383 8811 	msr	BASEPRI, r3
 800c95a:	f3bf 8f6f 	isb	sy
 800c95e:	f3bf 8f4f 	dsb	sy
 800c962:	603b      	str	r3, [r7, #0]
 800c964:	e7fe      	b.n	800c964 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c966:	4b09      	ldr	r3, [pc, #36]	; (800c98c <prvSwitchTimerLists+0xb8>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1b5      	bne.n	800c8dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c970:	4b06      	ldr	r3, [pc, #24]	; (800c98c <prvSwitchTimerLists+0xb8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800c976:	4b06      	ldr	r3, [pc, #24]	; (800c990 <prvSwitchTimerLists+0xbc>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a04      	ldr	r2, [pc, #16]	; (800c98c <prvSwitchTimerLists+0xb8>)
 800c97c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c97e:	4a04      	ldr	r2, [pc, #16]	; (800c990 <prvSwitchTimerLists+0xbc>)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6013      	str	r3, [r2, #0]
}
 800c984:	bf00      	nop
 800c986:	3718      	adds	r7, #24
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	20001a94 	.word	0x20001a94
 800c990:	20001a98 	.word	0x20001a98

0800c994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c99a:	f7fd f9ad 	bl	8009cf8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c99e:	4b15      	ldr	r3, [pc, #84]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d120      	bne.n	800c9e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9a6:	4814      	ldr	r0, [pc, #80]	; (800c9f8 <prvCheckForValidListAndQueue+0x64>)
 800c9a8:	f7fd f808 	bl	80099bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9ac:	4813      	ldr	r0, [pc, #76]	; (800c9fc <prvCheckForValidListAndQueue+0x68>)
 800c9ae:	f7fd f805 	bl	80099bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9b2:	4b13      	ldr	r3, [pc, #76]	; (800ca00 <prvCheckForValidListAndQueue+0x6c>)
 800c9b4:	4a10      	ldr	r2, [pc, #64]	; (800c9f8 <prvCheckForValidListAndQueue+0x64>)
 800c9b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9b8:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <prvCheckForValidListAndQueue+0x70>)
 800c9ba:	4a10      	ldr	r2, [pc, #64]	; (800c9fc <prvCheckForValidListAndQueue+0x68>)
 800c9bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9be:	2300      	movs	r3, #0
 800c9c0:	9300      	str	r3, [sp, #0]
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <prvCheckForValidListAndQueue+0x74>)
 800c9c4:	4a11      	ldr	r2, [pc, #68]	; (800ca0c <prvCheckForValidListAndQueue+0x78>)
 800c9c6:	210c      	movs	r1, #12
 800c9c8:	200a      	movs	r0, #10
 800c9ca:	f7fd fcc7 	bl	800a35c <xQueueGenericCreateStatic>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9d4:	4b07      	ldr	r3, [pc, #28]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d005      	beq.n	800c9e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9dc:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <prvCheckForValidListAndQueue+0x60>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	490b      	ldr	r1, [pc, #44]	; (800ca10 <prvCheckForValidListAndQueue+0x7c>)
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f7fe fb76 	bl	800b0d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9e8:	f7fd f9b4 	bl	8009d54 <vPortExitCritical>
}
 800c9ec:	bf00      	nop
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20001a9c 	.word	0x20001a9c
 800c9f8:	20001a6c 	.word	0x20001a6c
 800c9fc:	20001a80 	.word	0x20001a80
 800ca00:	20001a94 	.word	0x20001a94
 800ca04:	20001a98 	.word	0x20001a98
 800ca08:	20001b20 	.word	0x20001b20
 800ca0c:	20001aa8 	.word	0x20001aa8
 800ca10:	0800d484 	.word	0x0800d484

0800ca14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800ca18:	4b27      	ldr	r3, [pc, #156]	; (800cab8 <MX_USB_DEVICE_Init+0xa4>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d124      	bne.n	800ca6c <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca22:	2200      	movs	r2, #0
 800ca24:	4925      	ldr	r1, [pc, #148]	; (800cabc <MX_USB_DEVICE_Init+0xa8>)
 800ca26:	4826      	ldr	r0, [pc, #152]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca28:	f7fb fca0 	bl	800836c <USBD_Init>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d001      	beq.n	800ca36 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800ca32:	f7f3 ff69 	bl	8000908 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800ca36:	4923      	ldr	r1, [pc, #140]	; (800cac4 <MX_USB_DEVICE_Init+0xb0>)
 800ca38:	4821      	ldr	r0, [pc, #132]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca3a:	f7fb fcc2 	bl	80083c2 <USBD_RegisterClass>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800ca44:	f7f3 ff60 	bl	8000908 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800ca48:	491f      	ldr	r1, [pc, #124]	; (800cac8 <MX_USB_DEVICE_Init+0xb4>)
 800ca4a:	481d      	ldr	r0, [pc, #116]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca4c:	f7fb fc78 	bl	8008340 <USBD_CUSTOM_HID_RegisterInterface>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800ca56:	f7f3 ff57 	bl	8000908 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca5a:	4819      	ldr	r0, [pc, #100]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca5c:	f7fb fcca 	bl	80083f4 <USBD_Start>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d01e      	beq.n	800caa4 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800ca66:	f7f3 ff4f 	bl	8000908 <Error_Handler>
 800ca6a:	e01b      	b.n	800caa4 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4913      	ldr	r1, [pc, #76]	; (800cabc <MX_USB_DEVICE_Init+0xa8>)
 800ca70:	4813      	ldr	r0, [pc, #76]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca72:	f7fb fc7b 	bl	800836c <USBD_Init>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800ca7c:	f7f3 ff44 	bl	8000908 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800ca80:	4912      	ldr	r1, [pc, #72]	; (800cacc <MX_USB_DEVICE_Init+0xb8>)
 800ca82:	480f      	ldr	r0, [pc, #60]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca84:	f7fb fc9d 	bl	80083c2 <USBD_RegisterClass>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d001      	beq.n	800ca92 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800ca8e:	f7f3 ff3b 	bl	8000908 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800ca92:	490f      	ldr	r1, [pc, #60]	; (800cad0 <MX_USB_DEVICE_Init+0xbc>)
 800ca94:	480a      	ldr	r0, [pc, #40]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800ca96:	f7fa fa11 	bl	8006ebc <USBD_MSC_RegisterStorage>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800caa0:	f7f3 ff32 	bl	8000908 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800caa4:	4806      	ldr	r0, [pc, #24]	; (800cac0 <MX_USB_DEVICE_Init+0xac>)
 800caa6:	f7fb fca5 	bl	80083f4 <USBD_Start>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	d001      	beq.n	800cab4 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800cab0:	f7f3 ff2a 	bl	8000908 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cab4:	bf00      	nop
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	2000029c 	.word	0x2000029c
 800cabc:	2000022c 	.word	0x2000022c
 800cac0:	200031a0 	.word	0x200031a0
 800cac4:	200000e4 	.word	0x200000e4
 800cac8:	2000021c 	.word	0x2000021c
 800cacc:	20000040 	.word	0x20000040
 800cad0:	20000000 	.word	0x20000000

0800cad4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cad4:	b480      	push	{r7}
 800cad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cad8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cada:	4618      	mov	r0, r3
 800cadc:	46bd      	mov	sp, r7
 800cade:	bc80      	pop	{r7}
 800cae0:	4770      	bx	lr

0800cae2 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cae2:	b480      	push	{r7}
 800cae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cae6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cae8:	4618      	mov	r0, r3
 800caea:	46bd      	mov	sp, r7
 800caec:	bc80      	pop	{r7}
 800caee:	4770      	bx	lr

0800caf0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	460a      	mov	r2, r1
 800cafa:	71fb      	strb	r3, [r7, #7]
 800cafc:	4613      	mov	r3, r2
 800cafe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cb00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bc80      	pop	{r7}
 800cb0a:	4770      	bx	lr

0800cb0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	6039      	str	r1, [r7, #0]
 800cb16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	2212      	movs	r2, #18
 800cb1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb1e:	4b03      	ldr	r3, [pc, #12]	; (800cb2c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bc80      	pop	{r7}
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	20000248 	.word	0x20000248

0800cb30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	6039      	str	r1, [r7, #0]
 800cb3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	2204      	movs	r2, #4
 800cb40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb42:	4b03      	ldr	r3, [pc, #12]	; (800cb50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bc80      	pop	{r7}
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	2000025c 	.word	0x2000025c

0800cb54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	6039      	str	r1, [r7, #0]
 800cb5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb60:	79fb      	ldrb	r3, [r7, #7]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d105      	bne.n	800cb72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	4907      	ldr	r1, [pc, #28]	; (800cb88 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb6a:	4808      	ldr	r0, [pc, #32]	; (800cb8c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb6c:	f7fc fbad 	bl	80092ca <USBD_GetString>
 800cb70:	e004      	b.n	800cb7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	4904      	ldr	r1, [pc, #16]	; (800cb88 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb76:	4805      	ldr	r0, [pc, #20]	; (800cb8c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb78:	f7fc fba7 	bl	80092ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb7c:	4b02      	ldr	r3, [pc, #8]	; (800cb88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20003464 	.word	0x20003464
 800cb8c:	0800d48c 	.word	0x0800d48c

0800cb90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	6039      	str	r1, [r7, #0]
 800cb9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	4904      	ldr	r1, [pc, #16]	; (800cbb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cba0:	4804      	ldr	r0, [pc, #16]	; (800cbb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cba2:	f7fc fb92 	bl	80092ca <USBD_GetString>
  return USBD_StrDesc;
 800cba6:	4b02      	ldr	r3, [pc, #8]	; (800cbb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	20003464 	.word	0x20003464
 800cbb4:	0800d4b0 	.word	0x0800d4b0

0800cbb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	6039      	str	r1, [r7, #0]
 800cbc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	221a      	movs	r2, #26
 800cbc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbca:	f000 f843 	bl	800cc54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbce:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20000260 	.word	0x20000260

0800cbdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	6039      	str	r1, [r7, #0]
 800cbe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cbe8:	79fb      	ldrb	r3, [r7, #7]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	4907      	ldr	r1, [pc, #28]	; (800cc10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbf2:	4808      	ldr	r0, [pc, #32]	; (800cc14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbf4:	f7fc fb69 	bl	80092ca <USBD_GetString>
 800cbf8:	e004      	b.n	800cc04 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	4904      	ldr	r1, [pc, #16]	; (800cc10 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbfe:	4805      	ldr	r0, [pc, #20]	; (800cc14 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc00:	f7fc fb63 	bl	80092ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc04:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20003464 	.word	0x20003464
 800cc14:	0800d4c0 	.word	0x0800d4c0

0800cc18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d105      	bne.n	800cc36 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	4907      	ldr	r1, [pc, #28]	; (800cc4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc2e:	4808      	ldr	r0, [pc, #32]	; (800cc50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc30:	f7fc fb4b 	bl	80092ca <USBD_GetString>
 800cc34:	e004      	b.n	800cc40 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc36:	683a      	ldr	r2, [r7, #0]
 800cc38:	4904      	ldr	r1, [pc, #16]	; (800cc4c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc3a:	4805      	ldr	r0, [pc, #20]	; (800cc50 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc3c:	f7fc fb45 	bl	80092ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc40:	4b02      	ldr	r3, [pc, #8]	; (800cc4c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20003464 	.word	0x20003464
 800cc50:	0800d4d4 	.word	0x0800d4d4

0800cc54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc5a:	4b0f      	ldr	r3, [pc, #60]	; (800cc98 <Get_SerialNum+0x44>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc60:	4b0e      	ldr	r3, [pc, #56]	; (800cc9c <Get_SerialNum+0x48>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc66:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <Get_SerialNum+0x4c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4413      	add	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d009      	beq.n	800cc8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc7a:	2208      	movs	r2, #8
 800cc7c:	4909      	ldr	r1, [pc, #36]	; (800cca4 <Get_SerialNum+0x50>)
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 f814 	bl	800ccac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc84:	2204      	movs	r2, #4
 800cc86:	4908      	ldr	r1, [pc, #32]	; (800cca8 <Get_SerialNum+0x54>)
 800cc88:	68b8      	ldr	r0, [r7, #8]
 800cc8a:	f000 f80f 	bl	800ccac <IntToUnicode>
  }
}
 800cc8e:	bf00      	nop
 800cc90:	3710      	adds	r7, #16
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	1ffff7e8 	.word	0x1ffff7e8
 800cc9c:	1ffff7ec 	.word	0x1ffff7ec
 800cca0:	1ffff7f0 	.word	0x1ffff7f0
 800cca4:	20000262 	.word	0x20000262
 800cca8:	20000272 	.word	0x20000272

0800ccac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	75fb      	strb	r3, [r7, #23]
 800ccc2:	e027      	b.n	800cd14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	0f1b      	lsrs	r3, r3, #28
 800ccc8:	2b09      	cmp	r3, #9
 800ccca:	d80b      	bhi.n	800cce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	68fa      	ldr	r2, [r7, #12]
 800ccd8:	0f12      	lsrs	r2, r2, #28
 800ccda:	b2d2      	uxtb	r2, r2
 800ccdc:	3230      	adds	r2, #48	; 0x30
 800ccde:	b2d2      	uxtb	r2, r2
 800cce0:	701a      	strb	r2, [r3, #0]
 800cce2:	e00a      	b.n	800ccfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	005b      	lsls	r3, r3, #1
 800cce8:	461a      	mov	r2, r3
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	4413      	add	r3, r2
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	0f12      	lsrs	r2, r2, #28
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	3237      	adds	r2, #55	; 0x37
 800ccf6:	b2d2      	uxtb	r2, r2
 800ccf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	011b      	lsls	r3, r3, #4
 800ccfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd00:	7dfb      	ldrb	r3, [r7, #23]
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	3301      	adds	r3, #1
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	4413      	add	r3, r2
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	3301      	adds	r3, #1
 800cd12:	75fb      	strb	r3, [r7, #23]
 800cd14:	7dfa      	ldrb	r2, [r7, #23]
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d3d3      	bcc.n	800ccc4 <IntToUnicode+0x18>
  }
}
 800cd1c:	bf00      	nop
 800cd1e:	371c      	adds	r7, #28
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bc80      	pop	{r7}
 800cd24:	4770      	bx	lr
	...

0800cd28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a0d      	ldr	r2, [pc, #52]	; (800cd6c <HAL_PCD_MspInit+0x44>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d113      	bne.n	800cd62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	; (800cd70 <HAL_PCD_MspInit+0x48>)
 800cd3c:	4b0c      	ldr	r3, [pc, #48]	; (800cd70 <HAL_PCD_MspInit+0x48>)
 800cd3e:	69db      	ldr	r3, [r3, #28]
 800cd40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd44:	61d3      	str	r3, [r2, #28]
 800cd46:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <HAL_PCD_MspInit+0x48>)
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cd52:	2200      	movs	r2, #0
 800cd54:	2105      	movs	r1, #5
 800cd56:	2014      	movs	r0, #20
 800cd58:	f7f4 fa0b 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cd5c:	2014      	movs	r0, #20
 800cd5e:	f7f4 fa24 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cd62:	bf00      	nop
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	40005c00 	.word	0x40005c00
 800cd70:	40021000 	.word	0x40021000

0800cd74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fb fb7a 	bl	8008484 <USBD_LL_SetupStage>
}
 800cd90:	bf00      	nop
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	460b      	mov	r3, r1
 800cda2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cdaa:	78fa      	ldrb	r2, [r7, #3]
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	4613      	mov	r3, r2
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	4413      	add	r3, r2
 800cdb4:	00db      	lsls	r3, r3, #3
 800cdb6:	440b      	add	r3, r1
 800cdb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	78fb      	ldrb	r3, [r7, #3]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	f7fb fbaa 	bl	800851a <USBD_LL_DataOutStage>
}
 800cdc6:	bf00      	nop
 800cdc8:	3708      	adds	r7, #8
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b082      	sub	sp, #8
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cde0:	78fa      	ldrb	r2, [r7, #3]
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	4613      	mov	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	440b      	add	r3, r1
 800cdee:	333c      	adds	r3, #60	; 0x3c
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	78fb      	ldrb	r3, [r7, #3]
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	f7fb fc01 	bl	80085fc <USBD_LL_DataInStage>
}
 800cdfa:	bf00      	nop
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b082      	sub	sp, #8
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fb fd11 	bl	8008838 <USBD_LL_SOF>
}
 800ce16:	bf00      	nop
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b084      	sub	sp, #16
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce26:	2301      	movs	r3, #1
 800ce28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	689b      	ldr	r3, [r3, #8]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d001      	beq.n	800ce36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ce32:	f7f3 fd69 	bl	8000908 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce3c:	7bfa      	ldrb	r2, [r7, #15]
 800ce3e:	4611      	mov	r1, r2
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fb fcc1 	bl	80087c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fb fc7a 	bl	8008746 <USBD_LL_Reset>
}
 800ce52:	bf00      	nop
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
	...

0800ce5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fb fcbb 	bl	80087e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d005      	beq.n	800ce84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce78:	4a04      	ldr	r2, [pc, #16]	; (800ce8c <HAL_PCD_SuspendCallback+0x30>)
 800ce7a:	4b04      	ldr	r3, [pc, #16]	; (800ce8c <HAL_PCD_SuspendCallback+0x30>)
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	f043 0306 	orr.w	r3, r3, #6
 800ce82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce84:	bf00      	nop
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	e000ed00 	.word	0xe000ed00

0800ce90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7fb fcb5 	bl	800880e <USBD_LL_Resume>
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ceb4:	4a23      	ldr	r2, [pc, #140]	; (800cf44 <USBD_LL_Init+0x98>)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a21      	ldr	r2, [pc, #132]	; (800cf44 <USBD_LL_Init+0x98>)
 800cec0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cec4:	4b1f      	ldr	r3, [pc, #124]	; (800cf44 <USBD_LL_Init+0x98>)
 800cec6:	4a20      	ldr	r2, [pc, #128]	; (800cf48 <USBD_LL_Init+0x9c>)
 800cec8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ceca:	4b1e      	ldr	r3, [pc, #120]	; (800cf44 <USBD_LL_Init+0x98>)
 800cecc:	2208      	movs	r2, #8
 800cece:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ced0:	4b1c      	ldr	r3, [pc, #112]	; (800cf44 <USBD_LL_Init+0x98>)
 800ced2:	2202      	movs	r2, #2
 800ced4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ced6:	4b1b      	ldr	r3, [pc, #108]	; (800cf44 <USBD_LL_Init+0x98>)
 800ced8:	2200      	movs	r2, #0
 800ceda:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cedc:	4b19      	ldr	r3, [pc, #100]	; (800cf44 <USBD_LL_Init+0x98>)
 800cede:	2200      	movs	r2, #0
 800cee0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cee2:	4b18      	ldr	r3, [pc, #96]	; (800cf44 <USBD_LL_Init+0x98>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cee8:	4816      	ldr	r0, [pc, #88]	; (800cf44 <USBD_LL_Init+0x98>)
 800ceea:	f7f4 fce3 	bl	80018b4 <HAL_PCD_Init>
 800ceee:	4603      	mov	r3, r0
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cef4:	f7f3 fd08 	bl	8000908 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cefe:	2318      	movs	r3, #24
 800cf00:	2200      	movs	r2, #0
 800cf02:	2100      	movs	r1, #0
 800cf04:	f7f6 f9a3 	bl	800324e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf0e:	2358      	movs	r3, #88	; 0x58
 800cf10:	2200      	movs	r2, #0
 800cf12:	2180      	movs	r1, #128	; 0x80
 800cf14:	f7f6 f99b 	bl	800324e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf1e:	2398      	movs	r3, #152	; 0x98
 800cf20:	2200      	movs	r2, #0
 800cf22:	2181      	movs	r1, #129	; 0x81
 800cf24:	f7f6 f993 	bl	800324e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf2e:	23d8      	movs	r3, #216	; 0xd8
 800cf30:	2200      	movs	r2, #0
 800cf32:	2101      	movs	r1, #1
 800cf34:	f7f6 f98b 	bl	800324e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3708      	adds	r7, #8
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	20003664 	.word	0x20003664
 800cf48:	40005c00 	.word	0x40005c00

0800cf4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7f4 fdb1 	bl	8001aca <HAL_PCD_Start>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 f96e 	bl	800d250 <USBD_Get_USB_Status>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b084      	sub	sp, #16
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	4608      	mov	r0, r1
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4603      	mov	r3, r0
 800cf92:	70fb      	strb	r3, [r7, #3]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70bb      	strb	r3, [r7, #2]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfaa:	78bb      	ldrb	r3, [r7, #2]
 800cfac:	883a      	ldrh	r2, [r7, #0]
 800cfae:	78f9      	ldrb	r1, [r7, #3]
 800cfb0:	f7f4 ff2b 	bl	8001e0a <HAL_PCD_EP_Open>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f000 f948 	bl	800d250 <USBD_Get_USB_Status>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfe8:	78fa      	ldrb	r2, [r7, #3]
 800cfea:	4611      	mov	r1, r2
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7f4 ff72 	bl	8001ed6 <HAL_PCD_EP_Close>
 800cff2:	4603      	mov	r3, r0
 800cff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff6:	7bfb      	ldrb	r3, [r7, #15]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 f929 	bl	800d250 <USBD_Get_USB_Status>
 800cffe:	4603      	mov	r3, r0
 800d000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d002:	7bbb      	ldrb	r3, [r7, #14]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d01c:	2300      	movs	r3, #0
 800d01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d026:	78fa      	ldrb	r2, [r7, #3]
 800d028:	4611      	mov	r1, r2
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7f5 f8e6 	bl	80021fc <HAL_PCD_EP_Flush>
 800d030:	4603      	mov	r3, r0
 800d032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	4618      	mov	r0, r3
 800d038:	f000 f90a 	bl	800d250 <USBD_Get_USB_Status>
 800d03c:	4603      	mov	r3, r0
 800d03e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d040:	7bbb      	ldrb	r3, [r7, #14]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
 800d052:	460b      	mov	r3, r1
 800d054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d05a:	2300      	movs	r3, #0
 800d05c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d064:	78fa      	ldrb	r2, [r7, #3]
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f5 f813 	bl	8002094 <HAL_PCD_EP_SetStall>
 800d06e:	4603      	mov	r3, r0
 800d070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d072:	7bfb      	ldrb	r3, [r7, #15]
 800d074:	4618      	mov	r0, r3
 800d076:	f000 f8eb 	bl	800d250 <USBD_Get_USB_Status>
 800d07a:	4603      	mov	r3, r0
 800d07c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d094:	2300      	movs	r3, #0
 800d096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0a2:	78fa      	ldrb	r2, [r7, #3]
 800d0a4:	4611      	mov	r1, r2
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7f5 f854 	bl	8002154 <HAL_PCD_EP_ClrStall>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f8cc 	bl	800d250 <USBD_Get_USB_Status>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0c6:	b480      	push	{r7}
 800d0c8:	b085      	sub	sp, #20
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0d8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d0da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	da0c      	bge.n	800d0fc <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d0e2:	78fb      	ldrb	r3, [r7, #3]
 800d0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0e8:	68f9      	ldr	r1, [r7, #12]
 800d0ea:	1c5a      	adds	r2, r3, #1
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	440b      	add	r3, r1
 800d0f6:	3302      	adds	r3, #2
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	e00b      	b.n	800d114 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d0fc:	78fb      	ldrb	r3, [r7, #3]
 800d0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d102:	68f9      	ldr	r1, [r7, #12]
 800d104:	4613      	mov	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	00db      	lsls	r3, r3, #3
 800d10c:	440b      	add	r3, r1
 800d10e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d112:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d114:	4618      	mov	r0, r3
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	bc80      	pop	{r7}
 800d11c:	4770      	bx	lr

0800d11e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b084      	sub	sp, #16
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d12e:	2300      	movs	r3, #0
 800d130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d138:	78fa      	ldrb	r2, [r7, #3]
 800d13a:	4611      	mov	r1, r2
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7f4 fe3f 	bl	8001dc0 <HAL_PCD_SetAddress>
 800d142:	4603      	mov	r3, r0
 800d144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d146:	7bfb      	ldrb	r3, [r7, #15]
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f881 	bl	800d250 <USBD_Get_USB_Status>
 800d14e:	4603      	mov	r3, r0
 800d150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d152:	7bbb      	ldrb	r3, [r7, #14]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b086      	sub	sp, #24
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	607a      	str	r2, [r7, #4]
 800d166:	461a      	mov	r2, r3
 800d168:	460b      	mov	r3, r1
 800d16a:	72fb      	strb	r3, [r7, #11]
 800d16c:	4613      	mov	r3, r2
 800d16e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d170:	2300      	movs	r3, #0
 800d172:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d17e:	893b      	ldrh	r3, [r7, #8]
 800d180:	7af9      	ldrb	r1, [r7, #11]
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	f7f4 ff43 	bl	800200e <HAL_PCD_EP_Transmit>
 800d188:	4603      	mov	r3, r0
 800d18a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d18c:	7dfb      	ldrb	r3, [r7, #23]
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 f85e 	bl	800d250 <USBD_Get_USB_Status>
 800d194:	4603      	mov	r3, r0
 800d196:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d198:	7dbb      	ldrb	r3, [r7, #22]
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3718      	adds	r7, #24
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b086      	sub	sp, #24
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	607a      	str	r2, [r7, #4]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	72fb      	strb	r3, [r7, #11]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1c4:	893b      	ldrh	r3, [r7, #8]
 800d1c6:	7af9      	ldrb	r1, [r7, #11]
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	f7f4 fecc 	bl	8001f66 <HAL_PCD_EP_Receive>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 f83b 	bl	800d250 <USBD_Get_USB_Status>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1de:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3718      	adds	r7, #24
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1fa:	78fa      	ldrb	r2, [r7, #3]
 800d1fc:	4611      	mov	r1, r2
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f4 feee 	bl	8001fe0 <HAL_PCD_EP_GetRxCount>
 800d204:	4603      	mov	r3, r0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3708      	adds	r7, #8
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
	...

0800d210 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d218:	4b02      	ldr	r3, [pc, #8]	; (800d224 <USBD_static_malloc+0x14>)
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	bc80      	pop	{r7}
 800d222:	4770      	bx	lr
 800d224:	20001b68 	.word	0x20001b68

0800d228 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]

}
 800d230:	bf00      	nop
 800d232:	370c      	adds	r7, #12
 800d234:	46bd      	mov	sp, r7
 800d236:	bc80      	pop	{r7}
 800d238:	4770      	bx	lr

0800d23a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23a:	b480      	push	{r7}
 800d23c:	b083      	sub	sp, #12
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	460b      	mov	r3, r1
 800d244:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d246:	bf00      	nop
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bc80      	pop	{r7}
 800d24e:	4770      	bx	lr

0800d250 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	2b03      	cmp	r3, #3
 800d262:	d817      	bhi.n	800d294 <USBD_Get_USB_Status+0x44>
 800d264:	a201      	add	r2, pc, #4	; (adr r2, 800d26c <USBD_Get_USB_Status+0x1c>)
 800d266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26a:	bf00      	nop
 800d26c:	0800d27d 	.word	0x0800d27d
 800d270:	0800d283 	.word	0x0800d283
 800d274:	0800d289 	.word	0x0800d289
 800d278:	0800d28f 	.word	0x0800d28f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73fb      	strb	r3, [r7, #15]
    break;
 800d280:	e00b      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d282:	2302      	movs	r3, #2
 800d284:	73fb      	strb	r3, [r7, #15]
    break;
 800d286:	e008      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d288:	2301      	movs	r3, #1
 800d28a:	73fb      	strb	r3, [r7, #15]
    break;
 800d28c:	e005      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d28e:	2302      	movs	r3, #2
 800d290:	73fb      	strb	r3, [r7, #15]
    break;
 800d292:	e002      	b.n	800d29a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d294:	2302      	movs	r3, #2
 800d296:	73fb      	strb	r3, [r7, #15]
    break;
 800d298:	bf00      	nop
  }
  return usb_status;
 800d29a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3714      	adds	r7, #20
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bc80      	pop	{r7}
 800d2a4:	4770      	bx	lr
 800d2a6:	bf00      	nop

0800d2a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d2a8:	480c      	ldr	r0, [pc, #48]	; (800d2dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d2aa:	490d      	ldr	r1, [pc, #52]	; (800d2e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d2ac:	4a0d      	ldr	r2, [pc, #52]	; (800d2e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d2ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d2b0:	e002      	b.n	800d2b8 <LoopCopyDataInit>

0800d2b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d2b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d2b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d2b6:	3304      	adds	r3, #4

0800d2b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d2b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d2ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d2bc:	d3f9      	bcc.n	800d2b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d2be:	4a0a      	ldr	r2, [pc, #40]	; (800d2e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d2c0:	4c0a      	ldr	r4, [pc, #40]	; (800d2ec <LoopFillZerobss+0x22>)
  movs r3, #0
 800d2c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d2c4:	e001      	b.n	800d2ca <LoopFillZerobss>

0800d2c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d2c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d2c8:	3204      	adds	r2, #4

0800d2ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d2ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d2cc:	d3fb      	bcc.n	800d2c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d2ce:	f7f3 fe64 	bl	8000f9a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d2d2:	f000 f80f 	bl	800d2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d2d6:	f7f3 fa97 	bl	8000808 <main>
  bx lr
 800d2da:	4770      	bx	lr
  ldr r0, =_sdata
 800d2dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d2e0:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 800d2e4:	0800d548 	.word	0x0800d548
  ldr r2, =_sbss
 800d2e8:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 800d2ec:	20003950 	.word	0x20003950

0800d2f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d2f0:	e7fe      	b.n	800d2f0 <ADC1_2_IRQHandler>
	...

0800d2f4 <__libc_init_array>:
 800d2f4:	b570      	push	{r4, r5, r6, lr}
 800d2f6:	2500      	movs	r5, #0
 800d2f8:	4e0c      	ldr	r6, [pc, #48]	; (800d32c <__libc_init_array+0x38>)
 800d2fa:	4c0d      	ldr	r4, [pc, #52]	; (800d330 <__libc_init_array+0x3c>)
 800d2fc:	1ba4      	subs	r4, r4, r6
 800d2fe:	10a4      	asrs	r4, r4, #2
 800d300:	42a5      	cmp	r5, r4
 800d302:	d109      	bne.n	800d318 <__libc_init_array+0x24>
 800d304:	f000 f82e 	bl	800d364 <_init>
 800d308:	2500      	movs	r5, #0
 800d30a:	4e0a      	ldr	r6, [pc, #40]	; (800d334 <__libc_init_array+0x40>)
 800d30c:	4c0a      	ldr	r4, [pc, #40]	; (800d338 <__libc_init_array+0x44>)
 800d30e:	1ba4      	subs	r4, r4, r6
 800d310:	10a4      	asrs	r4, r4, #2
 800d312:	42a5      	cmp	r5, r4
 800d314:	d105      	bne.n	800d322 <__libc_init_array+0x2e>
 800d316:	bd70      	pop	{r4, r5, r6, pc}
 800d318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d31c:	4798      	blx	r3
 800d31e:	3501      	adds	r5, #1
 800d320:	e7ee      	b.n	800d300 <__libc_init_array+0xc>
 800d322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d326:	4798      	blx	r3
 800d328:	3501      	adds	r5, #1
 800d32a:	e7f2      	b.n	800d312 <__libc_init_array+0x1e>
 800d32c:	0800d540 	.word	0x0800d540
 800d330:	0800d540 	.word	0x0800d540
 800d334:	0800d540 	.word	0x0800d540
 800d338:	0800d544 	.word	0x0800d544

0800d33c <memcpy>:
 800d33c:	b510      	push	{r4, lr}
 800d33e:	1e43      	subs	r3, r0, #1
 800d340:	440a      	add	r2, r1
 800d342:	4291      	cmp	r1, r2
 800d344:	d100      	bne.n	800d348 <memcpy+0xc>
 800d346:	bd10      	pop	{r4, pc}
 800d348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d34c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d350:	e7f7      	b.n	800d342 <memcpy+0x6>

0800d352 <memset>:
 800d352:	4603      	mov	r3, r0
 800d354:	4402      	add	r2, r0
 800d356:	4293      	cmp	r3, r2
 800d358:	d100      	bne.n	800d35c <memset+0xa>
 800d35a:	4770      	bx	lr
 800d35c:	f803 1b01 	strb.w	r1, [r3], #1
 800d360:	e7f9      	b.n	800d356 <memset+0x4>
	...

0800d364 <_init>:
 800d364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d366:	bf00      	nop
 800d368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d36a:	bc08      	pop	{r3}
 800d36c:	469e      	mov	lr, r3
 800d36e:	4770      	bx	lr

0800d370 <_fini>:
 800d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d372:	bf00      	nop
 800d374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d376:	bc08      	pop	{r3}
 800d378:	469e      	mov	lr, r3
 800d37a:	4770      	bx	lr
