
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d22c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800d33c  0800d33c  0001d33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d500  0800d500  0001d500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d504  0800d504  0001d504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000280  20000000  0800d508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000036d0  20000280  0800d788  00020280  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20003950  0800d788  00023950  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a2fc  00000000  00000000  000202a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000619d  00000000  00000000  0004a5a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b38  00000000  00000000  00050748  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001830  00000000  00000000  00052280  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f82e  00000000  00000000  00053ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008447  00000000  00000000  000632de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006b725  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006bd0  00000000  00000000  0006b7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000280 	.word	0x20000280
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d324 	.word	0x0800d324

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000284 	.word	0x20000284
 800014c:	0800d324 	.word	0x0800d324

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f001 f817 	bl	800118e <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 fbb3 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001b84 	.word	0x20001b84
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	200002a0 	.word	0x200002a0
 80001e0:	200002f4 	.word	0x200002f4

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	200004f4 	.word	0x200004f4
 8000214:	20000548 	.word	0x20000548

08000218 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0b2      	sub	sp, #200	; 0xc8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800022e:	4618      	mov	r0, r3
 8000230:	f009 fa6e 	bl	8009710 <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b50      	ldr	r3, [pc, #320]	; (8000378 <MX_FREERTOS_Init+0x160>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b50      	ldr	r3, [pc, #320]	; (800037c <MX_FREERTOS_Init+0x164>)
 800023c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f009 f9e4 	bl	800961c <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b4a      	ldr	r3, [pc, #296]	; (8000380 <MX_FREERTOS_Init+0x168>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <MX_FREERTOS_Init+0x16c>)
 800025c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f009 f9d4 	bl	800961c <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b44      	ldr	r3, [pc, #272]	; (8000388 <MX_FREERTOS_Init+0x170>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 800027a:	4b44      	ldr	r3, [pc, #272]	; (800038c <MX_FREERTOS_Init+0x174>)
 800027c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 8000286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f009 fadb 	bl	8009848 <osMessageCreate>
 8000292:	4602      	mov	r2, r0
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_FREERTOS_Init+0x178>)
 8000296:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 8000298:	4b3c      	ldr	r3, [pc, #240]	; (800038c <MX_FREERTOS_Init+0x174>)
 800029a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800029e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 80002a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f009 facc 	bl	8009848 <osMessageCreate>
 80002b0:	4602      	mov	r2, r0
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <MX_FREERTOS_Init+0x17c>)
 80002b4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002b6:	4b38      	ldr	r3, [pc, #224]	; (8000398 <MX_FREERTOS_Init+0x180>)
 80002b8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f009 f943 	bl	800955c <osThreadCreate>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <MX_FREERTOS_Init+0x184>)
 80002da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 80002dc:	4b30      	ldr	r3, [pc, #192]	; (80003a0 <MX_FREERTOS_Init+0x188>)
 80002de:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 80002f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f009 f930 	bl	800955c <osThreadCreate>
 80002fc:	4602      	mov	r2, r0
 80002fe:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <MX_FREERTOS_Init+0x18c>)
 8000300:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_FREERTOS_Init+0x190>)
 8000304:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 8000316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f009 f91d 	bl	800955c <osThreadCreate>
 8000322:	4602      	mov	r2, r0
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <MX_FREERTOS_Init+0x194>)
 8000326:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <MX_FREERTOS_Init+0x198>)
 800032a:	f107 0420 	add.w	r4, r7, #32
 800032e:	461d      	mov	r5, r3
 8000330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 800033c:	f107 0320 	add.w	r3, r7, #32
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f009 f90a 	bl	800955c <osThreadCreate>
 8000348:	4602      	mov	r2, r0
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_FREERTOS_Init+0x19c>)
 800034c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_FREERTOS_Init+0x1a0>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	461d      	mov	r5, r3
 8000354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800035c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f009 f8f9 	bl	800955c <osThreadCreate>
 800036a:	4602      	mov	r2, r0
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_FREERTOS_Init+0x1a4>)
 800036e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

}
 8000370:	bf00      	nop
 8000372:	37c8      	adds	r7, #200	; 0xc8
 8000374:	46bd      	mov	sp, r7
 8000376:	bdb0      	pop	{r4, r5, r7, pc}
 8000378:	20001ba4 	.word	0x20001ba4
 800037c:	080004e9 	.word	0x080004e9
 8000380:	20001b9c 	.word	0x20001b9c
 8000384:	08000531 	.word	0x08000531
 8000388:	20001b90 	.word	0x20001b90
 800038c:	0800d33c 	.word	0x0800d33c
 8000390:	20001c18 	.word	0x20001c18
 8000394:	20001b94 	.word	0x20001b94
 8000398:	0800d358 	.word	0x0800d358
 800039c:	20001b8c 	.word	0x20001b8c
 80003a0:	0800d380 	.word	0x0800d380
 80003a4:	20001bac 	.word	0x20001bac
 80003a8:	0800d3a8 	.word	0x0800d3a8
 80003ac:	20001ba8 	.word	0x20001ba8
 80003b0:	0800d3d0 	.word	0x0800d3d0
 80003b4:	20001b98 	.word	0x20001b98
 80003b8:	0800d3fc 	.word	0x0800d3fc
 80003bc:	20001ba0 	.word	0x20001ba0

080003c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003c8:	f00c fb04 	bl	800c9d4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1;//HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <StartDefaultTask+0xc0>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 80003d2:	f00c faff 	bl	800c9d4 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 80003da:	2301      	movs	r3, #1
 80003dc:	73bb      	strb	r3, [r7, #14]

	init_hid();
 80003de:	f000 f9a3 	bl	8000728 <init_hid>

	for (;;) {
		if (tst1) {
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d02a      	beq.n	800043e <StartDefaultTask+0x7e>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	737b      	strb	r3, [r7, #13]
 80003ec:	e022      	b.n	8000434 <StartDefaultTask+0x74>
				keys[i].type = KEYBOARD_TYPE;
 80003ee:	7b7b      	ldrb	r3, [r7, #13]
 80003f0:	4a24      	ldr	r2, [pc, #144]	; (8000484 <StartDefaultTask+0xc4>)
 80003f2:	210f      	movs	r1, #15
 80003f4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
				keys[i].name = 'a' + i;
 80003f8:	7b7b      	ldrb	r3, [r7, #13]
 80003fa:	7b7a      	ldrb	r2, [r7, #13]
 80003fc:	3261      	adds	r2, #97	; 0x61
 80003fe:	b2d1      	uxtb	r1, r2
 8000400:	4a20      	ldr	r2, [pc, #128]	; (8000484 <StartDefaultTask+0xc4>)
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	460a      	mov	r2, r1
 8000408:	705a      	strb	r2, [r3, #1]

				for(uint8_t j = 0; j < STATES_LEN;j++)
 800040a:	2300      	movs	r3, #0
 800040c:	733b      	strb	r3, [r7, #12]
 800040e:	e00b      	b.n	8000428 <StartDefaultTask+0x68>
				  keys[i].states[j] =  (i & 1)?(0xFF):(0xFF);//(0xAA); test1
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	7b3b      	ldrb	r3, [r7, #12]
 8000414:	491b      	ldr	r1, [pc, #108]	; (8000484 <StartDefaultTask+0xc4>)
 8000416:	0092      	lsls	r2, r2, #2
 8000418:	440a      	add	r2, r1
 800041a:	4413      	add	r3, r2
 800041c:	3302      	adds	r3, #2
 800041e:	22ff      	movs	r2, #255	; 0xff
 8000420:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < STATES_LEN;j++)
 8000422:	7b3b      	ldrb	r3, [r7, #12]
 8000424:	3301      	adds	r3, #1
 8000426:	733b      	strb	r3, [r7, #12]
 8000428:	7b3b      	ldrb	r3, [r7, #12]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d9f0      	bls.n	8000410 <StartDefaultTask+0x50>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	3301      	adds	r3, #1
 8000432:	737b      	strb	r3, [r7, #13]
 8000434:	7b7b      	ldrb	r3, [r7, #13]
 8000436:	2b19      	cmp	r3, #25
 8000438:	d9d9      	bls.n	80003ee <StartDefaultTask+0x2e>



			}

			tst1 = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	73bb      	strb	r3, [r7, #14]
		}

		if (tst) {
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d015      	beq.n	8000470 <StartDefaultTask+0xb0>
			//ve_operate();
			for (uint32_t i = 0; i < 255; i++) {
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	e00d      	b.n	8000466 <StartDefaultTask+0xa6>
				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000450:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000454:	7819      	ldrb	r1, [r3, #0]
 8000456:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <StartDefaultTask+0xc8>)
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	4413      	add	r3, r2
 800045c:	460a      	mov	r2, r1
 800045e:	701a      	strb	r2, [r3, #0]
			for (uint32_t i = 0; i < 255; i++) {
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3301      	adds	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	2bfe      	cmp	r3, #254	; 0xfe
 800046a:	d9ee      	bls.n	800044a <StartDefaultTask+0x8a>

			}
			tst = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f009 f8bf 	bl	80095f4 <osDelay>
		vTaskSuspend(NULL);
 8000476:	2000      	movs	r0, #0
 8000478:	f00b f822 	bl	800b4c0 <vTaskSuspend>
		if (tst1) {
 800047c:	e7b1      	b.n	80003e2 <StartDefaultTask+0x22>
 800047e:	bf00      	nop
 8000480:	2000029c 	.word	0x2000029c
 8000484:	20001bb0 	.word	0x20001bb0
 8000488:	20001cd0 	.word	0x20001cd0

0800048c <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f009 f8ad 	bl	80095f4 <osDelay>
		if (hid_usb_init == 1)
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <Start_Ram_MSD_Task+0x50>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d102      	bne.n	80004aa <Start_Ram_MSD_Task+0x1e>
			vTaskSuspend(NULL); //if we are his we dont need it.
 80004a4:	2000      	movs	r0, #0
 80004a6:	f00b f80b 	bl	800b4c0 <vTaskSuspend>

		if (st_info.eof_flg == 1) {
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <Start_Ram_MSD_Task+0x54>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d1ef      	bne.n	8000494 <Start_Ram_MSD_Task+0x8>
			st_info.eof_flg = 0;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <Start_Ram_MSD_Task+0x54>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
			osMutexWait(Ram_MSD_MutexHandle, osWaitForever);
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <Start_Ram_MSD_Task+0x58>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f04f 31ff 	mov.w	r1, #4294967295
 80004c2:	4618      	mov	r0, r3
 80004c4:	f009 f93c 	bl	8009740 <osMutexWait>
			ve_operate(&st_info);
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <Start_Ram_MSD_Task+0x54>)
 80004ca:	f000 fd3b 	bl	8000f44 <ve_operate>
			osMutexRelease(Ram_MSD_MutexHandle);
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <Start_Ram_MSD_Task+0x58>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f009 f982 	bl	80097dc <osMutexRelease>
		osDelay(1);
 80004d8:	e7dc      	b.n	8000494 <Start_Ram_MSD_Task+0x8>
 80004da:	bf00      	nop
 80004dc:	2000029c 	.word	0x2000029c
 80004e0:	20000948 	.word	0x20000948
 80004e4:	20001ba4 	.word	0x20001ba4

080004e8 <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <delay_click_event_tmr_Callback+0x3c>)
 80004f2:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	81fb      	strh	r3, [r7, #14]
 80004f8:	e007      	b.n	800050a <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 80004fa:	89fb      	ldrh	r3, [r7, #14]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	4413      	add	r3, r2
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	3301      	adds	r3, #1
 8000508:	81fb      	strh	r3, [r7, #14]
 800050a:	89fb      	ldrh	r3, [r7, #14]
 800050c:	2b19      	cmp	r3, #25
 800050e:	d9f4      	bls.n	80004fa <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 8000510:	221c      	movs	r2, #28
 8000512:	4905      	ldr	r1, [pc, #20]	; (8000528 <delay_click_event_tmr_Callback+0x40>)
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <delay_click_event_tmr_Callback+0x44>)
 8000516:	f007 fe43 	bl	80081a0 <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20001c1e 	.word	0x20001c1e
 8000528:	20001c1c 	.word	0x20001c1c
 800052c:	200031a0 	.word	0x200031a0

08000530 <periodic_click_event_Callback>:

///////////////////////////////////


/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
//						(uint8_t *) &hid_state.mouseHID, sizeof(mouseHID_t));

	//osDelay(100);
	static int8_t i = 1;
	//hid_state.mouseHID.x+=100;
	hid_state.curr_hid_type = MOUSE_TYPE;
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <periodic_click_event_Callback+0x60>)
 800053a:	220e      	movs	r2, #14
 800053c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000540:	2205      	movs	r2, #5
 8000542:	4914      	ldr	r1, [pc, #80]	; (8000594 <periodic_click_event_Callback+0x64>)
 8000544:	4814      	ldr	r0, [pc, #80]	; (8000598 <periodic_click_event_Callback+0x68>)
 8000546:	f007 fe2b 	bl	80081a0 <USBD_CUSTOM_HID_SendReport>
							(uint8_t *) &hid_state.mouseHID, sizeof(mouseHID_t));
	if(i == 1){
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <periodic_click_event_Callback+0x6c>)
 800054c:	f993 3000 	ldrsb.w	r3, [r3]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d10c      	bne.n	800056e <periodic_click_event_Callback+0x3e>
		i = -1;
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <periodic_click_event_Callback+0x6c>)
 8000556:	22ff      	movs	r2, #255	; 0xff
 8000558:	701a      	strb	r2, [r3, #0]
		hid_state.mouseHID.x+=1;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <periodic_click_event_Callback+0x60>)
 800055c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	3301      	adds	r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	b25a      	sxtb	r2, r3
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <periodic_click_event_Callback+0x60>)
 800056a:	779a      	strb	r2, [r3, #30]

//	kbd_vol_up();
//	osDelay(100);
//	kbd_vol_down();

}
 800056c:	e00b      	b.n	8000586 <periodic_click_event_Callback+0x56>
		i = 1;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <periodic_click_event_Callback+0x6c>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
		hid_state.mouseHID.x-=1;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <periodic_click_event_Callback+0x60>)
 8000576:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	3b01      	subs	r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b25a      	sxtb	r2, r3
 8000582:	4b03      	ldr	r3, [pc, #12]	; (8000590 <periodic_click_event_Callback+0x60>)
 8000584:	779a      	strb	r2, [r3, #30]
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20001c1c 	.word	0x20001c1c
 8000594:	20001c38 	.word	0x20001c38
 8000598:	200031a0 	.word	0x200031a0
 800059c:	20000000 	.word	0x20000000

080005a0 <Start_Hid_Task>:

/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <Start_Hid_Task+0x30>)
 80005aa:	60fb      	str	r3, [r7, #12]
	static uint8_t bit_select = 0x01;
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f009 f821 	bl	80095f4 <osDelay>

		if (hid_usb_init == 1) {
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <Start_Hid_Task+0x34>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f7      	bne.n	80005ac <Start_Hid_Task+0xc>
			osTimerStart(periodic_click_event_tmrHandle, 100000);
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <Start_Hid_Task+0x38>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4906      	ldr	r1, [pc, #24]	; (80005dc <Start_Hid_Task+0x3c>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f009 f85e 	bl	8009684 <osTimerStart>
			vTaskSuspend(NULL);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f00a ff79 	bl	800b4c0 <vTaskSuspend>
		osDelay(100);
 80005ce:	e7ed      	b.n	80005ac <Start_Hid_Task+0xc>
 80005d0:	20001c1e 	.word	0x20001c1e
 80005d4:	2000029c 	.word	0x2000029c
 80005d8:	20001b90 	.word	0x20001b90
 80005dc:	000186a0 	.word	0x000186a0

080005e0 <Start_Usb_Task>:
	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f009 f803 	bl	80095f4 <osDelay>
		vTaskSuspend(NULL);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f00a ff66 	bl	800b4c0 <vTaskSuspend>
		osDelay(1);
 80005f4:	e7f8      	b.n	80005e8 <Start_Usb_Task+0x8>
	...

080005f8 <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 8000600:	2000      	movs	r0, #0
 8000602:	f00a ff5d 	bl	800b4c0 <vTaskSuspend>
	osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f008 fff4 	bl	80095f4 <osDelay>
		event = osMessageGet(Hid_QueueHandle, osWaitForever);
 800060c:	4b41      	ldr	r3, [pc, #260]	; (8000714 <Start_Mouse_Task+0x11c>)
 800060e:	6819      	ldr	r1, [r3, #0]
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	f04f 32ff 	mov.w	r2, #4294967295
 8000618:	4618      	mov	r0, r3
 800061a:	f009 f93f 	bl	800989c <osMessageGet>
		if (event.status == osEventMessage)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2b10      	cmp	r3, #16
 8000622:	d159      	bne.n	80006d8 <Start_Mouse_Task+0xe0>
			switch (event.value.v) {
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	2b0f      	cmp	r3, #15
 8000628:	d856      	bhi.n	80006d8 <Start_Mouse_Task+0xe0>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <Start_Mouse_Task+0x38>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000671 	.word	0x08000671
 8000634:	08000681 	.word	0x08000681
 8000638:	08000691 	.word	0x08000691
 800063c:	080006d9 	.word	0x080006d9
 8000640:	080006a1 	.word	0x080006a1
 8000644:	080006d9 	.word	0x080006d9
 8000648:	080006d9 	.word	0x080006d9
 800064c:	080006d9 	.word	0x080006d9
 8000650:	080006d9 	.word	0x080006d9
 8000654:	080006d9 	.word	0x080006d9
 8000658:	080006d9 	.word	0x080006d9
 800065c:	080006b1 	.word	0x080006b1
 8000660:	080006bb 	.word	0x080006bb
 8000664:	080006c5 	.word	0x080006c5
 8000668:	080006d9 	.word	0x080006d9
 800066c:	080006cf 	.word	0x080006cf
			case M_BUTTON_NOP: {
				hid_state.mouseHID.buttons = M_BUTTON_NOP;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <Start_Mouse_Task+0x120>)
 8000672:	2200      	movs	r2, #0
 8000674:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <Start_Mouse_Task+0x120>)
 8000678:	220e      	movs	r2, #14
 800067a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800067e:	e02b      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case M_BUTTON_1: {
				hid_state.mouseHID.buttons = M_BUTTON_1;
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <Start_Mouse_Task+0x120>)
 8000682:	2201      	movs	r2, #1
 8000684:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <Start_Mouse_Task+0x120>)
 8000688:	220e      	movs	r2, #14
 800068a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800068e:	e023      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case M_BUTTON_2: {
				hid_state.mouseHID.buttons = M_BUTTON_2;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <Start_Mouse_Task+0x120>)
 8000692:	2202      	movs	r2, #2
 8000694:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <Start_Mouse_Task+0x120>)
 8000698:	220e      	movs	r2, #14
 800069a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800069e:	e01b      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case M_BUTTON_3: {
				hid_state.mouseHID.buttons = M_BUTTON_3;
 80006a0:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <Start_Mouse_Task+0x120>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <Start_Mouse_Task+0x120>)
 80006a8:	220e      	movs	r2, #14
 80006aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006ae:	e013      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case WHEEL: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <Start_Mouse_Task+0x120>)
 80006b2:	220e      	movs	r2, #14
 80006b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006b8:	e00e      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case M_X: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <Start_Mouse_Task+0x120>)
 80006bc:	220e      	movs	r2, #14
 80006be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006c2:	e009      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case M_Y: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <Start_Mouse_Task+0x120>)
 80006c6:	220e      	movs	r2, #14
 80006c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006cc:	e004      	b.n	80006d8 <Start_Mouse_Task+0xe0>
			}

			case KEYBOARD_TYPE: {
				hid_state.curr_hid_type = KEYBOARD_TYPE;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <Start_Mouse_Task+0x120>)
 80006d0:	220f      	movs	r2, #15
 80006d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006d6:	bf00      	nop
			}

			}

		if (hid_state.curr_hid_type == MOUSE_TYPE)
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <Start_Mouse_Task+0x120>)
 80006da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80006de:	2b0e      	cmp	r3, #14
 80006e0:	d105      	bne.n	80006ee <Start_Mouse_Task+0xf6>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 80006e2:	2205      	movs	r2, #5
 80006e4:	490d      	ldr	r1, [pc, #52]	; (800071c <Start_Mouse_Task+0x124>)
 80006e6:	480e      	ldr	r0, [pc, #56]	; (8000720 <Start_Mouse_Task+0x128>)
 80006e8:	f007 fd5a 	bl	80081a0 <USBD_CUSTOM_HID_SendReport>
 80006ec:	e78b      	b.n	8000606 <Start_Mouse_Task+0xe>
					(uint8_t *) &hid_state.mouseHID, sizeof(mouseHID_t));
		else if (hid_state.curr_hid_type == KEYBOARD_TYPE) {
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <Start_Mouse_Task+0x120>)
 80006f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d186      	bne.n	8000606 <Start_Mouse_Task+0xe>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 80006f8:	221c      	movs	r2, #28
 80006fa:	4907      	ldr	r1, [pc, #28]	; (8000718 <Start_Mouse_Task+0x120>)
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <Start_Mouse_Task+0x128>)
 80006fe:	f007 fd4f 	bl	80081a0 <USBD_CUSTOM_HID_SendReport>
					sizeof(keyboardHID_t));
			osTimerStart(delay_click_event_tmrHandle, 500);
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <Start_Mouse_Task+0x12c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800070a:	4618      	mov	r0, r3
 800070c:	f008 ffba 	bl	8009684 <osTimerStart>
		osDelay(1);
 8000710:	e779      	b.n	8000606 <Start_Mouse_Task+0xe>
 8000712:	bf00      	nop
 8000714:	20001b94 	.word	0x20001b94
 8000718:	20001c1c 	.word	0x20001c1c
 800071c:	20001c38 	.word	0x20001c38
 8000720:	200031a0 	.word	0x200031a0
 8000724:	20001b9c 	.word	0x20001b9c

08000728 <init_hid>:
	(hid_state.mouseHID.buttons) ?
			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);

}

uint8_t init_hid(void) {
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <init_hid+0x20>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <init_hid+0x20>)
 8000734:	2200      	movs	r2, #0
 8000736:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <init_hid+0x20>)
 800073a:	2202      	movs	r2, #2
 800073c:	771a      	strb	r2, [r3, #28]
}
 800073e:	bf00      	nop
 8000740:	4618      	mov	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20001c1c 	.word	0x20001c1c

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000760:	4a19      	ldr	r2, [pc, #100]	; (80007c8 <MX_GPIO_Init+0x7c>)
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_GPIO_Init+0x7c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_GPIO_Init+0x7c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_GPIO_Init+0x7c>)
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_GPIO_Init+0x7c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_GPIO_Init+0x7c>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4a0d      	ldr	r2, [pc, #52]	; (80007c8 <MX_GPIO_Init+0x7c>)
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_GPIO_Init+0x7c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_GPIO_Init+0x7c>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007a8:	2302      	movs	r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_GPIO_Init+0x80>)
 80007bc:	f000 ff04 	bl	80015c8 <HAL_GPIO_Init>

}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fbcc 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f80d 	bl	80007f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f7ff ffb6 	bl	800074c <MX_GPIO_Init>
  MX_CRC_Init();
 80007e0:	f7ff fcb6 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 80007e4:	f000 f932 	bl	8000a4c <MX_TIM1_Init>
  MX_FATFS_Init();
 80007e8:	f006 f8de 	bl	80069a8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007ec:	f7ff fd14 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80007f0:	f008 fead 	bl	800954e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <main+0x24>

080007f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b094      	sub	sp, #80	; 0x50
 80007fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000800:	2228      	movs	r2, #40	; 0x28
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f00c fd84 	bl	800d312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000826:	2301      	movs	r3, #1
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000842:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fd25 	bl	800329c <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000858:	f000 f83a 	bl	80008d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	230f      	movs	r3, #15
 800085e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2302      	movs	r3, #2
 8000862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2101      	movs	r1, #1
 8000878:	4618      	mov	r0, r3
 800087a:	f002 ff8f 	bl	800379c <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000884:	f000 f824 	bl	80008d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000888:	2310      	movs	r3, #16
 800088a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800088c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000890:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f003 f939 	bl	8003b0c <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008a0:	f000 f816 	bl	80008d0 <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008be:	f000 fb6d 	bl	8000f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40000800 	.word	0x40000800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <Error_Handler+0x6>

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008de:	4a18      	ldr	r2, [pc, #96]	; (8000940 <HAL_MspInit+0x68>)
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_MspInit+0x68>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_MspInit+0x68>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <HAL_MspInit+0x68>)
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_MspInit+0x68>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	61d3      	str	r3, [r2, #28]
 8000902:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_MspInit+0x68>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210f      	movs	r1, #15
 8000912:	f06f 0001 	mvn.w	r0, #1
 8000916:	f000 fc10 	bl	800113a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_MspInit+0x6c>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_MspInit+0x6c>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	40010000 	.word	0x40010000

08000948 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08c      	sub	sp, #48	; 0x30
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000958:	2200      	movs	r2, #0
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	201e      	movs	r0, #30
 800095e:	f000 fbec 	bl	800113a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000962:	201e      	movs	r0, #30
 8000964:	f000 fc05 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <HAL_InitTick+0xa0>)
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <HAL_InitTick+0xa0>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	61d3      	str	r3, [r2, #28]
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_InitTick+0xa0>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000980:	f107 0210 	add.w	r2, r7, #16
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f003 f870 	bl	8003a70 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000990:	f003 f85a 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
 8000994:	4603      	mov	r3, r0
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	4a13      	ldr	r2, [pc, #76]	; (80009ec <HAL_InitTick+0xa4>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	0c9b      	lsrs	r3, r3, #18
 80009a4:	3b01      	subs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_InitTick+0xa8>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <HAL_InitTick+0xac>)
 80009ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <HAL_InitTick+0xa8>)
 80009b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_InitTick+0xa8>)
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_InitTick+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_InitTick+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_InitTick+0xa8>)
 80009ca:	f003 f955 	bl	8003c78 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d104      	bne.n	80009de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <HAL_InitTick+0xa8>)
 80009d6:	f003 f99f 	bl	8003d18 <HAL_TIM_Base_Start_IT>
 80009da:	4603      	mov	r3, r0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3730      	adds	r7, #48	; 0x30
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	431bde83 	.word	0x431bde83
 80009f0:	20001c40 	.word	0x20001c40
 80009f4:	40000800 	.word	0x40000800

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
	...

08000a24 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a2a:	f001 f858 	bl	8001ade <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20003664 	.word	0x20003664

08000a38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM4_IRQHandler+0x10>)
 8000a3e:	f003 f9bd 	bl	8003dbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20001c40 	.word	0x20001c40

08000a4c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <MX_TIM1_Init+0x9c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	4813      	ldr	r0, [pc, #76]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000a96:	f003 f8ef 	bl	8003c78 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f7ff ff16 	bl	80008d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000ab2:	f003 fa8b 	bl	8003fcc <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000abc:	f7ff ff08 	bl	80008d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_TIM1_Init+0x98>)
 8000ace:	f003 fc51 	bl	8004374 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f7ff fefa 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20001c88 	.word	0x20001c88
 8000ae8:	40012c00 	.word	0x40012c00

08000aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40021000 	.word	0x40021000

08000b28 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000b32:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b085      	sub	sp, #20
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2208      	movs	r2, #8
 8000b50:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b58:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000b5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000b70:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000b86:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
	...

08000b94 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	; 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	025b      	lsls	r3, r3, #9
 8000bac:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000bb2:	89bb      	ldrh	r3, [r7, #12]
 8000bb4:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
 8000bba:	e00f      	b.n	8000bdc <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a0c      	ldr	r2, [pc, #48]	; (8000bf4 <STORAGE_Read_FS+0x60>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	68ba      	ldr	r2, [r7, #8]
 8000bce:	4413      	add	r3, r2
 8000bd0:	7dfa      	ldrb	r2, [r7, #23]
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	89bb      	ldrh	r3, [r7, #12]
 8000bde:	025b      	lsls	r3, r3, #9
 8000be0:	461a      	mov	r2, r3
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8e9      	bhi.n	8000bbc <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000be8:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	20001cd0 	.word	0x20001cd0

08000bf8 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	461a      	mov	r2, r3
 8000c04:	4603      	mov	r3, r0
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	e00e      	b.n	8000c3a <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	7dfa      	ldrb	r2, [r7, #23]
 8000c2e:	b2d1      	uxtb	r1, r2
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <STORAGE_Write_FS+0x64>)
 8000c32:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	89bb      	ldrh	r3, [r7, #12]
 8000c3c:	025b      	lsls	r3, r3, #9
 8000c3e:	461a      	mov	r2, r3
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d8ea      	bhi.n	8000c1c <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f814 	bl	8000c74 <eof_check>
	st_info.blk_len = blk_len;
 8000c4c:	89bb      	ldrh	r3, [r7, #12]
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <STORAGE_Write_FS+0x68>)
 8000c50:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000c52:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3720      	adds	r7, #32
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20001cd0 	.word	0x20001cd0
 8000c60:	20000948 	.word	0x20000948

08000c64 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000c68:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <eof_check+0x84>)
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	6812      	ldr	r2, [r2, #0]
 8000c84:	4611      	mov	r1, r2
 8000c86:	8019      	strh	r1, [r3, #0]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	0c12      	lsrs	r2, r2, #16
 8000c8c:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e022      	b.n	8000cdc <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	e017      	b.n	8000ccc <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <eof_check+0x88>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	f107 010c 	add.w	r1, r7, #12
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	440b      	add	r3, r1
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d10e      	bne.n	8000cd4 <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d803      	bhi.n	8000cc4 <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e003      	b.n	8000ccc <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <eof_check+0x8c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e011      	b.n	8000cf0 <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d9e4      	bls.n	8000c9c <eof_check+0x28>
 8000cd2:	e000      	b.n	8000cd6 <eof_check+0x62>
				break;
 8000cd4:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	01db      	lsls	r3, r3, #7
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	441a      	add	r2, r3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8d2      	bhi.n	8000c96 <eof_check+0x22>
			return;
		}	
	}
	
}
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	0800d418 	.word	0x0800d418
 8000cfc:	20001cd0 	.word	0x20001cd0
 8000d00:	20000948 	.word	0x20000948

08000d04 <ve_is_pg_erased>:
/*
*@param uint32_t p_addr the address of the page
*
*/
static uint8_t  ve_is_pg_erased(uint32_t p_addr)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	__IO uint8_t c =0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	72fb      	strb	r3, [r7, #11]
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	e00d      	b.n	8000d32 <ve_is_pg_erased+0x2e>
	{
		c = *((uint8_t *)(p_addr + i));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	72fb      	strb	r3, [r7, #11]
		if( c != 0xFF )
 8000d20:	7afb      	ldrb	r3, [r7, #11]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2bff      	cmp	r3, #255	; 0xff
 8000d26:	d001      	beq.n	8000d2c <ve_is_pg_erased+0x28>
		{
			return 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	e007      	b.n	8000d3c <ve_is_pg_erased+0x38>
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d38:	d3ed      	bcc.n	8000d16 <ve_is_pg_erased+0x12>
		}
		
	}
	
	return 1;
 8000d3a:	2301      	movs	r3, #1
	
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
	...

08000d48 <ve_pgs_prep>:
*
*@param st_info storage information
*
*/
static void ve_pgs_prep(s_usbd_st_info * p_st_info)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	__IO uint8_t pg_num = ( p_st_info->blk_len / 2) + (p_st_info->blk_len & 1);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	085b      	lsrs	r3, r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4413      	add	r3, r2
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	73bb      	strb	r3, [r7, #14]
	
	
	HAL_FLASH_Unlock();
 8000d6a:	f000 fa9d 	bl	80012a8 <HAL_FLASH_Unlock>
	
	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8000d6e:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <ve_pgs_prep+0x8c>)
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <ve_pgs_prep+0x8c>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	61d3      	str	r3, [r2, #28]
	
	/* Get the bank */
	
	EraseInitStruct.NbPages = 1;
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <ve_pgs_prep+0x90>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR;
	EraseInitStruct.Banks     = 3;
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <ve_pgs_prep+0x90>)
 8000d82:	2203      	movs	r2, #3
 8000d84:	605a      	str	r2, [r3, #4]
	
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e017      	b.n	8000dbc <ve_pgs_prep+0x74>
	{
		EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR + FLASH_PAGE_SIZE*pg_curr;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000d92:	3320      	adds	r3, #32
 8000d94:	029b      	lsls	r3, r3, #10
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <ve_pgs_prep+0x90>)
 8000d98:	6093      	str	r3, [r2, #8]
		 
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <ve_pgs_prep+0x90>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffb0 	bl	8000d04 <ve_is_pg_erased>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d104      	bne.n	8000db4 <ve_pgs_prep+0x6c>
			
		
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError_t) != HAL_OK)
 8000daa:	490c      	ldr	r1, [pc, #48]	; (8000ddc <ve_pgs_prep+0x94>)
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <ve_pgs_prep+0x90>)
 8000dae:	f000 fb63 	bl	8001478 <HAL_FLASHEx_Erase>
 8000db2:	e000      	b.n	8000db6 <ve_pgs_prep+0x6e>
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8000db4:	bf00      	nop
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	3301      	adds	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	7bbb      	ldrb	r3, [r7, #14]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3e2      	bcc.n	8000d8c <ve_pgs_prep+0x44>
			//test1 Error_Handler();
		}
	
	}
	
	HAL_FLASH_Lock();
 8000dc6:	f000 fa95 	bl	80012f4 <HAL_FLASH_Lock>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	20000954 	.word	0x20000954
 8000ddc:	20000950 	.word	0x20000950

08000de0 <ve_prg_blks>:
*
*@param st_info storage information
*
*/
static void ve_prg_blks(s_usbd_st_info * p_st_info)
{
 8000de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000de4:	b08f      	sub	sp, #60	; 0x3c
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_FLASH_Unlock();
 8000dea:	f000 fa5d 	bl	80012a8 <HAL_FLASH_Unlock>
	
	
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8000dee:	2300      	movs	r3, #0
 8000df0:	637b      	str	r3, [r7, #52]	; 0x34
 8000df2:	e094      	b.n	8000f1e <ve_prg_blks+0x13e>
//			dword_to_write  = (((uint64_t )ram_msd[j ] << 56 )|((uint64_t )ram_msd[j + 1] << 48 )|
//											  ((uint64_t )ram_msd[j + 2] << 40 )|((uint64_t )ram_msd[j + 3] << 32))|
//										  	(((uint64_t )ram_msd[j + 4] << 24 )|((uint64_t )ram_msd[j + 5] << 16)|
//											  ((uint64_t )ram_msd[j + 6] << 8  )|((uint64_t )ram_msd[j + 7]));
		
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000df4:	4a51      	ldr	r2, [pc, #324]	; (8000f3c <ve_prg_blks+0x15c>)
 8000df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b2d8      	uxtb	r0, r3
 8000dfe:	f04f 0100 	mov.w	r1, #0
 8000e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <ve_prg_blks+0x15c>)
 8000e08:	5c9b      	ldrb	r3, [r3, r2]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f04f 0400 	mov.w	r4, #0
 8000e10:	0226      	lsls	r6, r4, #8
 8000e12:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8000e16:	021d      	lsls	r5, r3, #8
 8000e18:	ea40 0005 	orr.w	r0, r0, r5
 8000e1c:	ea41 0106 	orr.w	r1, r1, r6
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e22:	1c9a      	adds	r2, r3, #2
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <ve_prg_blks+0x15c>)
 8000e26:	5c9b      	ldrb	r3, [r3, r2]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f04f 0400 	mov.w	r4, #0
 8000e2e:	ea4f 4904 	mov.w	r9, r4, lsl #16
 8000e32:	ea49 4913 	orr.w	r9, r9, r3, lsr #16
 8000e36:	ea4f 4803 	mov.w	r8, r3, lsl #16
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000e3a:	ea40 0008 	orr.w	r0, r0, r8
 8000e3e:	ea41 0109 	orr.w	r1, r1, r9
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e44:	1cda      	adds	r2, r3, #3
 8000e46:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <ve_prg_blks+0x15c>)
 8000e48:	5c9b      	ldrb	r3, [r3, r2]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f04f 0400 	mov.w	r4, #0
 8000e50:	0a1a      	lsrs	r2, r3, #8
 8000e52:	627a      	str	r2, [r7, #36]	; 0x24
 8000e54:	061b      	lsls	r3, r3, #24
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8000e5c:	ea4a 0a00 	orr.w	sl, sl, r0
 8000e60:	ea4b 0b01 	orr.w	fp, fp, r1
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	1d1a      	adds	r2, r3, #4
 8000e68:	4b34      	ldr	r3, [pc, #208]	; (8000f3c <ve_prg_blks+0x15c>)
 8000e6a:	5c9b      	ldrb	r3, [r3, r2]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	f04f 0400 	mov.w	r4, #0
 8000e72:	001b      	movs	r3, r3
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7c:	1d5a      	adds	r2, r3, #5
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <ve_prg_blks+0x15c>)
 8000e80:	5c9b      	ldrb	r3, [r3, r2]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f04f 0400 	mov.w	r4, #0
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000e94:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000e98:	ea40 0003 	orr.w	r0, r0, r3
 8000e9c:	ea41 0104 	orr.w	r1, r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	1d9a      	adds	r2, r3, #6
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <ve_prg_blks+0x15c>)
 8000ea6:	5c9b      	ldrb	r3, [r3, r2]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f04f 0400 	mov.w	r4, #0
 8000eae:	041b      	lsls	r3, r3, #16
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 8000eb6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000eba:	ea43 0300 	orr.w	r3, r3, r0
 8000ebe:	ea44 0401 	orr.w	r4, r4, r1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	4621      	mov	r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8000ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec8:	1dda      	adds	r2, r3, #7
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <ve_prg_blks+0x15c>)
 8000ecc:	5c9b      	ldrb	r3, [r3, r2]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f04f 0400 	mov.w	r4, #0
 8000ed4:	061b      	lsls	r3, r3, #24
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	2300      	movs	r3, #0
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000ee0:	ea43 0300 	orr.w	r3, r3, r0
 8000ee4:	ea44 0401 	orr.w	r4, r4, r1
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000ee8:	ea43 030a 	orr.w	r3, r3, sl
 8000eec:	ea44 040b 	orr.w	r4, r4, fp
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000ef0:	4a13      	ldr	r2, [pc, #76]	; (8000f40 <ve_prg_blks+0x160>)
 8000ef2:	e882 0018 	stmia.w	r2, {r3, r4}
		
		if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, VIRT_EEPROM_ADDR+j,  dword_to_write) != HAL_OK)
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ef8:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000efc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <ve_prg_blks+0x160>)
 8000f02:	cb18      	ldmia	r3, {r3, r4}
 8000f04:	461a      	mov	r2, r3
 8000f06:	4623      	mov	r3, r4
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f95d 	bl	80011c8 <HAL_FLASH_Program>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <ve_prg_blks+0x138>
		{
			Error_Handler();
 8000f14:	f7ff fcdc 	bl	80008d0 <Error_Handler>
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8000f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1a:	3308      	adds	r3, #8
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	025a      	lsls	r2, r3, #9
 8000f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f26:	429a      	cmp	r2, r3
 8000f28:	f63f af64 	bhi.w	8000df4 <ve_prg_blks+0x14>
		}
	}
	
	HAL_FLASH_Lock();
 8000f2c:	f000 f9e2 	bl	80012f4 <HAL_FLASH_Lock>
}
 8000f30:	bf00      	nop
 8000f32:	373c      	adds	r7, #60	; 0x3c
 8000f34:	46bd      	mov	sp, r7
 8000f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20001cd0 	.word	0x20001cd0
 8000f40:	20000968 	.word	0x20000968

08000f44 <ve_operate>:



uint8_t ve_operate( s_usbd_st_info * p_st_info )
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	ve_pgs_prep(p_st_info);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fefb 	bl	8000d48 <ve_pgs_prep>
	ve_prg_blks(p_st_info);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff44 	bl	8000de0 <ve_prg_blks>
	return 0;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f8cf 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fcde 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fca4 	bl	80008d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x1c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <HAL_IncTick+0x20>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	2000002c 	.word	0x2000002c
 8000fbc:	20002cd0 	.word	0x20002cd0

08000fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <HAL_GetTick+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20002cd0 	.word	0x20002cd0

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_EnableIRQ+0x34>)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	095b      	lsrs	r3, r3, #5
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	f002 021f 	and.w	r2, r2, #31
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	490d      	ldr	r1, [pc, #52]	; (80010bc <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	683a      	ldr	r2, [r7, #0]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	4909      	ldr	r1, [pc, #36]	; (80010c0 <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	; 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	2201      	movs	r2, #1
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	1e5a      	subs	r2, r3, #1
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	401a      	ands	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110a:	2101      	movs	r1, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	1e59      	subs	r1, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff51 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff66 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ffb4 	bl	80010c4 <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff83 	bl	8001070 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff59 	bl	8001038 <__NVIC_EnableIRQ>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e00e      	b.n	80011be <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	795b      	ldrb	r3, [r3, #5]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d105      	bne.n	80011b6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7fe ffe1 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2201      	movs	r2, #1
 80011ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011e2:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_FLASH_Program+0xd8>)
 80011e4:	7e1b      	ldrb	r3, [r3, #24]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d101      	bne.n	80011ee <HAL_FLASH_Program+0x26>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e054      	b.n	8001298 <HAL_FLASH_Program+0xd0>
 80011ee:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_FLASH_Program+0xd8>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011f8:	f000 f8a8 	bl	800134c <FLASH_WaitForLastOperation>
 80011fc:	4603      	mov	r3, r0
 80011fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d144      	bne.n	8001290 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d102      	bne.n	8001212 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800120c:	2301      	movs	r3, #1
 800120e:	757b      	strb	r3, [r7, #21]
 8001210:	e007      	b.n	8001222 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d102      	bne.n	800121e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001218:	2302      	movs	r3, #2
 800121a:	757b      	strb	r3, [r7, #21]
 800121c:	e001      	b.n	8001222 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800121e:	2304      	movs	r3, #4
 8001220:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001222:	2300      	movs	r3, #0
 8001224:	75bb      	strb	r3, [r7, #22]
 8001226:	e02d      	b.n	8001284 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001228:	7dbb      	ldrb	r3, [r7, #22]
 800122a:	005a      	lsls	r2, r3, #1
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	eb02 0e03 	add.w	lr, r2, r3
 8001232:	7dbb      	ldrb	r3, [r7, #22]
 8001234:	0119      	lsls	r1, r3, #4
 8001236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800123a:	f1c1 0620 	rsb	r6, r1, #32
 800123e:	f1a1 0020 	sub.w	r0, r1, #32
 8001242:	fa22 f401 	lsr.w	r4, r2, r1
 8001246:	fa03 f606 	lsl.w	r6, r3, r6
 800124a:	4334      	orrs	r4, r6
 800124c:	fa23 f000 	lsr.w	r0, r3, r0
 8001250:	4304      	orrs	r4, r0
 8001252:	fa23 f501 	lsr.w	r5, r3, r1
 8001256:	b2a3      	uxth	r3, r4
 8001258:	4619      	mov	r1, r3
 800125a:	4670      	mov	r0, lr
 800125c:	f000 f85a 	bl	8001314 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001260:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001264:	f000 f872 	bl	800134c <FLASH_WaitForLastOperation>
 8001268:	4603      	mov	r3, r0
 800126a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <HAL_FLASH_Program+0xdc>)
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_FLASH_Program+0xdc>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d107      	bne.n	800128e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800127e:	7dbb      	ldrb	r3, [r7, #22]
 8001280:	3301      	adds	r3, #1
 8001282:	75bb      	strb	r3, [r7, #22]
 8001284:	7dba      	ldrb	r2, [r7, #22]
 8001286:	7d7b      	ldrb	r3, [r7, #21]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3cd      	bcc.n	8001228 <HAL_FLASH_Program+0x60>
 800128c:	e000      	b.n	8001290 <HAL_FLASH_Program+0xc8>
      {
        break;
 800128e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <HAL_FLASH_Program+0xd8>)
 8001292:	2200      	movs	r2, #0
 8001294:	761a      	strb	r2, [r3, #24]

  return status;
 8001296:	7dfb      	ldrb	r3, [r7, #23]
}
 8001298:	4618      	mov	r0, r3
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	20002cd8 	.word	0x20002cd8
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_FLASH_Unlock+0x40>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00d      	beq.n	80012da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_FLASH_Unlock+0x40>)
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_FLASH_Unlock+0x44>)
 80012c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <HAL_FLASH_Unlock+0x40>)
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_FLASH_Unlock+0x48>)
 80012c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_FLASH_Unlock+0x40>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80012da:	79fb      	ldrb	r3, [r7, #7]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40022000 	.word	0x40022000
 80012ec:	45670123 	.word	0x45670123
 80012f0:	cdef89ab 	.word	0xcdef89ab

080012f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <HAL_FLASH_Lock+0x1c>)
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_FLASH_Lock+0x1c>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001302:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <FLASH_Program_HalfWord+0x30>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001326:	4a08      	ldr	r2, [pc, #32]	; (8001348 <FLASH_Program_HalfWord+0x34>)
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <FLASH_Program_HalfWord+0x34>)
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	887a      	ldrh	r2, [r7, #2]
 8001336:	801a      	strh	r2, [r3, #0]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20002cd8 	.word	0x20002cd8
 8001348:	40022000 	.word	0x40022000

0800134c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fe34 	bl	8000fc0 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800135a:	e010      	b.n	800137e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001362:	d00c      	beq.n	800137e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <FLASH_WaitForLastOperation+0x2e>
 800136a:	f7ff fe29 	bl	8000fc0 <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad2      	subs	r2, r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	d901      	bls.n	800137e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e025      	b.n	80013ca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <FLASH_WaitForLastOperation+0x88>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1e8      	bne.n	800135c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <FLASH_WaitForLastOperation+0x88>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <FLASH_WaitForLastOperation+0x88>)
 8001398:	2220      	movs	r2, #32
 800139a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <FLASH_WaitForLastOperation+0x88>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10b      	bne.n	80013c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <FLASH_WaitForLastOperation+0x88>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <FLASH_WaitForLastOperation+0x88>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013c0:	f000 f80a 	bl	80013d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <FLASH_SetErrorCode+0x98>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d009      	beq.n	8001402 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80013ee:	4b21      	ldr	r3, [pc, #132]	; (8001474 <FLASH_SetErrorCode+0x9c>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <FLASH_SetErrorCode+0x9c>)
 80013f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <FLASH_SetErrorCode+0x98>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <FLASH_SetErrorCode+0x9c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	4a17      	ldr	r2, [pc, #92]	; (8001474 <FLASH_SetErrorCode+0x9c>)
 8001418:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <FLASH_SetErrorCode+0x98>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800142e:	4b11      	ldr	r3, [pc, #68]	; (8001474 <FLASH_SetErrorCode+0x9c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <FLASH_SetErrorCode+0x9c>)
 8001438:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <FLASH_SetErrorCode+0x98>)
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <FLASH_SetErrorCode+0x98>)
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f240 1201 	movw	r2, #257	; 0x101
 800144c:	4293      	cmp	r3, r2
 800144e:	d106      	bne.n	800145e <FLASH_SetErrorCode+0x86>
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <FLASH_SetErrorCode+0x98>)
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <FLASH_SetErrorCode+0x98>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	61d3      	str	r3, [r2, #28]
}  
 800145c:	e002      	b.n	8001464 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <FLASH_SetErrorCode+0x98>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	60d3      	str	r3, [r2, #12]
}  
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40022000 	.word	0x40022000
 8001474:	20002cd8 	.word	0x20002cd8

08001478 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_FLASHEx_Erase+0xd0>)
 800148c:	7e1b      	ldrb	r3, [r3, #24]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_FLASHEx_Erase+0x1e>
 8001492:	2302      	movs	r3, #2
 8001494:	e053      	b.n	800153e <HAL_FLASHEx_Erase+0xc6>
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <HAL_FLASHEx_Erase+0xd0>)
 8001498:	2201      	movs	r2, #1
 800149a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d116      	bne.n	80014d2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014a8:	f7ff ff50 	bl	800134c <FLASH_WaitForLastOperation>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d141      	bne.n	8001536 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f000 f84c 	bl	8001550 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014bc:	f7ff ff46 	bl	800134c <FLASH_WaitForLastOperation>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80014c4:	4a21      	ldr	r2, [pc, #132]	; (800154c <HAL_FLASHEx_Erase+0xd4>)
 80014c6:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_FLASHEx_Erase+0xd4>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f023 0304 	bic.w	r3, r3, #4
 80014ce:	6113      	str	r3, [r2, #16]
 80014d0:	e031      	b.n	8001536 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80014d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014d6:	f7ff ff39 	bl	800134c <FLASH_WaitForLastOperation>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d12a      	bne.n	8001536 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295
 80014e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	e019      	b.n	8001524 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80014f0:	68b8      	ldr	r0, [r7, #8]
 80014f2:	f000 f849 	bl	8001588 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014fa:	f7ff ff27 	bl	800134c <FLASH_WaitForLastOperation>
 80014fe:	4603      	mov	r3, r0
 8001500:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <HAL_FLASHEx_Erase+0xd4>)
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_FLASHEx_Erase+0xd4>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	f023 0302 	bic.w	r3, r3, #2
 800150c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	601a      	str	r2, [r3, #0]
            break;
 800151a:	e00c      	b.n	8001536 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001522:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	029a      	lsls	r2, r3, #10
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	d8dc      	bhi.n	80014f0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_FLASHEx_Erase+0xd0>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]

  return status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20002cd8 	.word	0x20002cd8
 800154c:	40022000 	.word	0x40022000

08001550 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <FLASH_MassErase+0x30>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <FLASH_MassErase+0x34>)
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <FLASH_MassErase+0x34>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <FLASH_MassErase+0x34>)
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <FLASH_MassErase+0x34>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001574:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20002cd8 	.word	0x20002cd8
 8001584:	40022000 	.word	0x40022000

08001588 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <FLASH_PageErase+0x38>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <FLASH_PageErase+0x3c>)
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <FLASH_PageErase+0x3c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80015a2:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <FLASH_PageErase+0x3c>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <FLASH_PageErase+0x3c>)
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <FLASH_PageErase+0x3c>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20002cd8 	.word	0x20002cd8
 80015c4:	40022000 	.word	0x40022000

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b08b      	sub	sp, #44	; 0x2c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e127      	b.n	800182c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015dc:	2201      	movs	r2, #1
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8116 	bne.w	8001826 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d034      	beq.n	800166c <HAL_GPIO_Init+0xa4>
 8001602:	2b12      	cmp	r3, #18
 8001604:	d80d      	bhi.n	8001622 <HAL_GPIO_Init+0x5a>
 8001606:	2b02      	cmp	r3, #2
 8001608:	d02b      	beq.n	8001662 <HAL_GPIO_Init+0x9a>
 800160a:	2b02      	cmp	r3, #2
 800160c:	d804      	bhi.n	8001618 <HAL_GPIO_Init+0x50>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d031      	beq.n	8001676 <HAL_GPIO_Init+0xae>
 8001612:	2b01      	cmp	r3, #1
 8001614:	d01c      	beq.n	8001650 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001616:	e048      	b.n	80016aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001618:	2b03      	cmp	r3, #3
 800161a:	d043      	beq.n	80016a4 <HAL_GPIO_Init+0xdc>
 800161c:	2b11      	cmp	r3, #17
 800161e:	d01b      	beq.n	8001658 <HAL_GPIO_Init+0x90>
          break;
 8001620:	e043      	b.n	80016aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001622:	4a89      	ldr	r2, [pc, #548]	; (8001848 <HAL_GPIO_Init+0x280>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d026      	beq.n	8001676 <HAL_GPIO_Init+0xae>
 8001628:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_GPIO_Init+0x280>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d806      	bhi.n	800163c <HAL_GPIO_Init+0x74>
 800162e:	4a87      	ldr	r2, [pc, #540]	; (800184c <HAL_GPIO_Init+0x284>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d020      	beq.n	8001676 <HAL_GPIO_Init+0xae>
 8001634:	4a86      	ldr	r2, [pc, #536]	; (8001850 <HAL_GPIO_Init+0x288>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01d      	beq.n	8001676 <HAL_GPIO_Init+0xae>
          break;
 800163a:	e036      	b.n	80016aa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800163c:	4a85      	ldr	r2, [pc, #532]	; (8001854 <HAL_GPIO_Init+0x28c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0xae>
 8001642:	4a85      	ldr	r2, [pc, #532]	; (8001858 <HAL_GPIO_Init+0x290>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d016      	beq.n	8001676 <HAL_GPIO_Init+0xae>
 8001648:	4a84      	ldr	r2, [pc, #528]	; (800185c <HAL_GPIO_Init+0x294>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d013      	beq.n	8001676 <HAL_GPIO_Init+0xae>
          break;
 800164e:	e02c      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e028      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	3304      	adds	r3, #4
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e023      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	3308      	adds	r3, #8
 8001668:	623b      	str	r3, [r7, #32]
          break;
 800166a:	e01e      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	330c      	adds	r3, #12
 8001672:	623b      	str	r3, [r7, #32]
          break;
 8001674:	e019      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800167e:	2304      	movs	r3, #4
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e012      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800168c:	2308      	movs	r3, #8
 800168e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	611a      	str	r2, [r3, #16]
          break;
 8001696:	e008      	b.n	80016aa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001698:	2308      	movs	r3, #8
 800169a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	615a      	str	r2, [r3, #20]
          break;
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
          break;
 80016a8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2bff      	cmp	r3, #255	; 0xff
 80016ae:	d801      	bhi.n	80016b4 <HAL_GPIO_Init+0xec>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	e001      	b.n	80016b8 <HAL_GPIO_Init+0xf0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3304      	adds	r3, #4
 80016b8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d802      	bhi.n	80016c6 <HAL_GPIO_Init+0xfe>
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x104>
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	3b08      	subs	r3, #8
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	210f      	movs	r1, #15
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	6a39      	ldr	r1, [r7, #32]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	431a      	orrs	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 8096 	beq.w	8001826 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016fa:	4a59      	ldr	r2, [pc, #356]	; (8001860 <HAL_GPIO_Init+0x298>)
 80016fc:	4b58      	ldr	r3, [pc, #352]	; (8001860 <HAL_GPIO_Init+0x298>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6193      	str	r3, [r2, #24]
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_GPIO_Init+0x298>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001712:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_GPIO_Init+0x29c>)
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_GPIO_Init+0x19e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4a      	ldr	r2, [pc, #296]	; (800186c <HAL_GPIO_Init+0x2a4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d00d      	beq.n	8001762 <HAL_GPIO_Init+0x19a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a49      	ldr	r2, [pc, #292]	; (8001870 <HAL_GPIO_Init+0x2a8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d007      	beq.n	800175e <HAL_GPIO_Init+0x196>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a48      	ldr	r2, [pc, #288]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d101      	bne.n	800175a <HAL_GPIO_Init+0x192>
 8001756:	2303      	movs	r3, #3
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x1a0>
 800175a:	2304      	movs	r3, #4
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x1a0>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x1a0>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x1a0>
 8001766:	2300      	movs	r3, #0
 8001768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001778:	493a      	ldr	r1, [pc, #232]	; (8001864 <HAL_GPIO_Init+0x29c>)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d006      	beq.n	80017a0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001792:	4939      	ldr	r1, [pc, #228]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001794:	4b38      	ldr	r3, [pc, #224]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
 800179e:	e006      	b.n	80017ae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a0:	4935      	ldr	r1, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017a2:	4b35      	ldr	r3, [pc, #212]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4013      	ands	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ba:	492f      	ldr	r1, [pc, #188]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c8:	492b      	ldr	r1, [pc, #172]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4013      	ands	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e2:	4925      	ldr	r1, [pc, #148]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
 80017ee:	e006      	b.n	80017fe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f0:	4921      	ldr	r1, [pc, #132]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800180a:	491b      	ldr	r1, [pc, #108]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	60cb      	str	r3, [r1, #12]
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001818:	4917      	ldr	r1, [pc, #92]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	4013      	ands	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	3301      	adds	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f47f aed0 	bne.w	80015dc <HAL_GPIO_Init+0x14>
  }
}
 800183c:	bf00      	nop
 800183e:	372c      	adds	r7, #44	; 0x2c
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	10210000 	.word	0x10210000
 800184c:	10110000 	.word	0x10110000
 8001850:	10120000 	.word	0x10120000
 8001854:	10310000 	.word	0x10310000
 8001858:	10320000 	.word	0x10320000
 800185c:	10220000 	.word	0x10220000
 8001860:	40021000 	.word	0x40021000
 8001864:	40010000 	.word	0x40010000
 8001868:	40010800 	.word	0x40010800
 800186c:	40010c00 	.word	0x40010c00
 8001870:	40011000 	.word	0x40011000
 8001874:	40011400 	.word	0x40011400
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b08b      	sub	sp, #44	; 0x2c
 8001880:	af06      	add	r7, sp, #24
 8001882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0fd      	b.n	8001a8a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f00b fa20 	bl	800cce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f002 fdf3 	bl	80044a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	687e      	ldr	r6, [r7, #4]
 80018c2:	466d      	mov	r5, sp
 80018c4:	f106 0410 	add.w	r4, r6, #16
 80018c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	602b      	str	r3, [r5, #0]
 80018d0:	1d33      	adds	r3, r6, #4
 80018d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d4:	6838      	ldr	r0, [r7, #0]
 80018d6:	f002 fdbd 	bl	8004454 <USB_CoreInit>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2202      	movs	r2, #2
 80018e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0ce      	b.n	8001a8a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fdee 	bl	80044d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e04c      	b.n	8001998 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	3301      	adds	r3, #1
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	b298      	uxth	r0, r3
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3336      	adds	r3, #54	; 0x36
 800193c:	4602      	mov	r2, r0
 800193e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	440b      	add	r3, r1
 8001950:	3303      	adds	r3, #3
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001956:	7bfa      	ldrb	r2, [r7, #15]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3338      	adds	r3, #56	; 0x38
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	440b      	add	r3, r1
 8001978:	333c      	adds	r3, #60	; 0x3c
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3340      	adds	r3, #64	; 0x40
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	3301      	adds	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3ad      	bcc.n	80018fe <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e044      	b.n	8001a32 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a16:	7bfa      	ldrb	r2, [r7, #15]
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d3b5      	bcc.n	80019a8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	687e      	ldr	r6, [r7, #4]
 8001a44:	466d      	mov	r5, sp
 8001a46:	f106 0410 	add.w	r4, r6, #16
 8001a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	602b      	str	r3, [r5, #0]
 8001a52:	1d33      	adds	r3, r6, #4
 8001a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a56:	6838      	ldr	r0, [r7, #0]
 8001a58:	f002 fd48 	bl	80044ec <USB_DevInit>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d005      	beq.n	8001a6e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00d      	b.n	8001a8a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f004 fed9 	bl	800683a <USB_DevDisconnect>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_PCD_Start+0x16>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e016      	b.n	8001ad6 <HAL_PCD_Start+0x44>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fcdd 	bl	8004474 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001aba:	2101      	movs	r1, #1
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f00b fb9c 	bl	800d1fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fead 	bl	8006826 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b088      	sub	sp, #32
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 feaf 	bl	800684e <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afa:	d102      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fb8e 	bl	800221e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fea1 	bl	800684e <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	d112      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b24:	b292      	uxth	r2, r2
 8001b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f00b f954 	bl	800cdde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b36:	2100      	movs	r1, #0
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f925 	bl	8001d88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fe83 	bl	800684e <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b52:	d10b      	bne.n	8001b6c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b60:	b292      	uxth	r2, r2
 8001b62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b66:	b292      	uxth	r2, r2
 8001b68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f004 fe6c 	bl	800684e <USB_ReadInterrupts>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b80:	d10b      	bne.n	8001b9a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b94:	b292      	uxth	r2, r2
 8001b96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 fe55 	bl	800684e <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bae:	d126      	bne.n	8001bfe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f022 0204 	bic.w	r2, r2, #4
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6812      	ldr	r2, [r2, #0]
 8001bd0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001bd4:	b292      	uxth	r2, r2
 8001bd6:	f022 0208 	bic.w	r2, r2, #8
 8001bda:	b292      	uxth	r2, r2
 8001bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f00b f935 	bl	800ce50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bf8:	b292      	uxth	r2, r2
 8001bfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 fe23 	bl	800684e <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c12:	f040 8084 	bne.w	8001d1e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	77fb      	strb	r3, [r7, #31]
 8001c1a:	e011      	b.n	8001c40 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c1c:	7ffb      	ldrb	r3, [r7, #31]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	4611      	mov	r1, r2
 8001c24:	7ffa      	ldrb	r2, [r7, #31]
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	440a      	add	r2, r1
 8001c2a:	8812      	ldrh	r2, [r2, #0]
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	f107 0120 	add.w	r1, r7, #32
 8001c34:	440b      	add	r3, r1
 8001c36:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	d9ea      	bls.n	8001c1c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c52:	b292      	uxth	r2, r2
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	b292      	uxth	r2, r2
 8001c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c76:	bf00      	nop
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f6      	beq.n	8001c78 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c96:	b292      	uxth	r2, r2
 8001c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9c:	b292      	uxth	r2, r2
 8001c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	77fb      	strb	r3, [r7, #31]
 8001ca6:	e010      	b.n	8001cca <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	441a      	add	r2, r3
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	f107 0120 	add.w	r1, r7, #32
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001cc2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001cc4:	7ffb      	ldrb	r3, [r7, #31]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	77fb      	strb	r3, [r7, #31]
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	2b07      	cmp	r3, #7
 8001cce:	d9eb      	bls.n	8001ca8 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	f042 0208 	orr.w	r2, r2, #8
 8001ce2:	b292      	uxth	r2, r2
 8001ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001cf4:	b292      	uxth	r2, r2
 8001cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfa:	b292      	uxth	r2, r2
 8001cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d0c:	b292      	uxth	r2, r2
 8001d0e:	f042 0204 	orr.w	r2, r2, #4
 8001d12:	b292      	uxth	r2, r2
 8001d14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f00b f87f 	bl	800ce1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f004 fd93 	bl	800684e <USB_ReadInterrupts>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d32:	d10e      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d40:	b292      	uxth	r2, r2
 8001d42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d46:	b292      	uxth	r2, r2
 8001d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f00b f838 	bl	800cdc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 fd79 	bl	800684e <USB_ReadInterrupts>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d66:	d10b      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d74:	b292      	uxth	r2, r2
 8001d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d7a:	b292      	uxth	r2, r2
 8001d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_PCD_SetAddress+0x1a>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e013      	b.n	8001dca <HAL_PCD_SetAddress+0x42>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fd20 	bl	8006800 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	4608      	mov	r0, r1
 8001ddc:	4611      	mov	r1, r2
 8001dde:	461a      	mov	r2, r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	70fb      	strb	r3, [r7, #3]
 8001de4:	460b      	mov	r3, r1
 8001de6:	803b      	strh	r3, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	da0e      	bge.n	8001e16 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	705a      	strb	r2, [r3, #1]
 8001e14:	e00e      	b.n	8001e34 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	f003 0207 	and.w	r2, r3, #7
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e40:	883a      	ldrh	r2, [r7, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	78ba      	ldrb	r2, [r7, #2]
 8001e4a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e5e:	78bb      	ldrb	r3, [r7, #2]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d102      	bne.n	8001e6a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_PCD_EP_Open+0xa6>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e00e      	b.n	8001e96 <HAL_PCD_EP_Open+0xc4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fb66 	bl	8004558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e94:	7afb      	ldrb	r3, [r7, #11]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da0e      	bge.n	8001ed0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	705a      	strb	r2, [r3, #1]
 8001ece:	e00e      	b.n	8001eee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 0207 	and.w	r2, r3, #7
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_PCD_EP_Close+0x6a>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e00e      	b.n	8001f26 <HAL_PCD_EP_Close+0x88>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f002 fe82 	bl	8004c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f3e:	7afb      	ldrb	r3, [r7, #11]
 8001f40:	f003 0207 	and.w	r2, r3, #7
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6e:	7afb      	ldrb	r3, [r7, #11]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f7a:	7afb      	ldrb	r3, [r7, #11]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6979      	ldr	r1, [r7, #20]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f834 	bl	8004ff8 <USB_EPStartXfer>
 8001f90:	e005      	b.n	8001f9e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6979      	ldr	r1, [r7, #20]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 f82d 	bl	8004ff8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	f003 0207 	and.w	r2, r3, #7
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2201      	movs	r2, #1
 8002020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	b2da      	uxtb	r2, r3
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800202e:	7afb      	ldrb	r3, [r7, #11]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6979      	ldr	r1, [r7, #20]
 800203e:	4618      	mov	r0, r3
 8002040:	f002 ffda 	bl	8004ff8 <USB_EPStartXfer>
 8002044:	e005      	b.n	8002052 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6979      	ldr	r1, [r7, #20]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 ffd3 	bl	8004ff8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002068:	78fb      	ldrb	r3, [r7, #3]
 800206a:	f003 0207 	and.w	r2, r3, #7
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	429a      	cmp	r2, r3
 8002074:	d901      	bls.n	800207a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e04c      	b.n	8002114 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800207a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	da0e      	bge.n	80020a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	705a      	strb	r2, [r3, #1]
 800209e:	e00c      	b.n	80020ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_PCD_EP_SetStall+0x7e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e01c      	b.n	8002114 <HAL_PCD_EP_SetStall+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 fa8c 	bl	8006606 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002102:	4619      	mov	r1, r3
 8002104:	4610      	mov	r0, r2
 8002106:	f004 fbb1 	bl	800686c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	f003 020f 	and.w	r2, r3, #15
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	d901      	bls.n	800213a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e040      	b.n	80021bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800213a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	da0e      	bge.n	8002160 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	705a      	strb	r2, [r3, #1]
 800215e:	e00e      	b.n	800217e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0207 	and.w	r2, r3, #7
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	b2da      	uxtb	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_PCD_EP_ClrStall+0x82>
 800219a:	2302      	movs	r3, #2
 800219c:	e00e      	b.n	80021bc <HAL_PCD_EP_ClrStall+0xa0>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68f9      	ldr	r1, [r7, #12]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f004 fa7a 	bl	80066a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_PCD_EP_Flush+0x1a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e01b      	b.n	8002216 <HAL_PCD_EP_Flush+0x52>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 80021e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da09      	bge.n	8002202 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f002 f996 	bl	800452c <USB_FlushTxFifo>
 8002200:	e004      	b.n	800220c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f99b 	bl	8004542 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b08e      	sub	sp, #56	; 0x38
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002226:	e2ec      	b.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002230:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002232:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800223e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 8161 	bne.w	800250a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002248:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d152      	bne.n	80022f8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800226a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002272:	b29b      	uxth	r3, r3
 8002274:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3328      	adds	r3, #40	; 0x28
 800227a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002284:	b29b      	uxth	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4413      	add	r3, r2
 8002290:	3302      	adds	r3, #2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	441a      	add	r2, r3
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022b6:	2100      	movs	r1, #0
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f00a fd68 	bl	800cd8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 829b 	beq.w	8002802 <PCD_EP_ISR_Handler+0x5e4>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 8296 	bne.w	8002802 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	b292      	uxth	r2, r2
 80022ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022f6:	e284      	b.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002308:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800230a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800230e:	2b00      	cmp	r3, #0
 8002310:	d034      	beq.n	800237c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231a:	b29b      	uxth	r3, r3
 800231c:	461a      	mov	r2, r3
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	4413      	add	r3, r2
 8002326:	3306      	adds	r3, #6
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002350:	b29b      	uxth	r3, r3
 8002352:	f004 fada 	bl	800690a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29a      	uxth	r2, r3
 800235e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002362:	4013      	ands	r3, r2
 8002364:	843b      	strh	r3, [r7, #32]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	8c3a      	ldrh	r2, [r7, #32]
 800236c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002370:	b292      	uxth	r2, r2
 8002372:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f00a fcdd 	bl	800cd34 <HAL_PCD_SetupStageCallback>
 800237a:	e242      	b.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800237c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002380:	2b00      	cmp	r3, #0
 8002382:	f280 823e 	bge.w	8002802 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	b29a      	uxth	r2, r3
 800238e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002392:	4013      	ands	r3, r2
 8002394:	83fb      	strh	r3, [r7, #30]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	8bfa      	ldrh	r2, [r7, #30]
 800239c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a0:	b292      	uxth	r2, r2
 80023a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	3306      	adds	r3, #6
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <PCD_EP_ISR_Handler+0x1ee>
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d015      	beq.n	800240c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	6959      	ldr	r1, [r3, #20]
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	f004 fa8a 	bl	800690a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	441a      	add	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002404:	2100      	movs	r1, #0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f00a fca6 	bl	800cd58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002418:	2b00      	cmp	r3, #0
 800241a:	f040 81f2 	bne.w	8002802 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d112      	bne.n	800246c <PCD_EP_ISR_Handler+0x24e>
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002450:	b29a      	uxth	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002464:	b29a      	uxth	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e02f      	b.n	80024cc <PCD_EP_ISR_Handler+0x2ae>
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b3e      	cmp	r3, #62	; 0x3e
 8002472:	d813      	bhi.n	800249c <PCD_EP_ISR_Handler+0x27e>
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	633b      	str	r3, [r7, #48]	; 0x30
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <PCD_EP_ISR_Handler+0x270>
 8002488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248a:	3301      	adds	r3, #1
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	b29b      	uxth	r3, r3
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	b29a      	uxth	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	801a      	strh	r2, [r3, #0]
 800249a:	e017      	b.n	80024cc <PCD_EP_ISR_Handler+0x2ae>
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <PCD_EP_ISR_Handler+0x298>
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b2:	3b01      	subs	r3, #1
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	029b      	lsls	r3, r3, #10
 80024bc:	b29b      	uxth	r3, r3
 80024be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024dc:	827b      	strh	r3, [r7, #18]
 80024de:	8a7b      	ldrh	r3, [r7, #18]
 80024e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80024e4:	827b      	strh	r3, [r7, #18]
 80024e6:	8a7b      	ldrh	r3, [r7, #18]
 80024e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024ec:	827b      	strh	r3, [r7, #18]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	8a7b      	ldrh	r3, [r7, #18]
 80024f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	b29b      	uxth	r3, r3
 8002506:	8013      	strh	r3, [r2, #0]
 8002508:	e17b      	b.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800251c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002520:	2b00      	cmp	r3, #0
 8002522:	f280 80ea 	bge.w	80026fa <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	b29a      	uxth	r2, r3
 8002538:	f640 738f 	movw	r3, #3983	; 0xf8f
 800253c:	4013      	ands	r3, r2
 800253e:	823b      	strh	r3, [r7, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	8a3a      	ldrh	r2, [r7, #16]
 8002550:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002554:	b292      	uxth	r2, r2
 8002556:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002558:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	7b1b      	ldrb	r3, [r3, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d122      	bne.n	80025bc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257e:	b29b      	uxth	r3, r3
 8002580:	461a      	mov	r2, r3
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	3306      	adds	r3, #6
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80025a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8087 	beq.w	80026b6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	6959      	ldr	r1, [r3, #20]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	88da      	ldrh	r2, [r3, #6]
 80025b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025b6:	f004 f9a8 	bl	800690a <USB_ReadPMA>
 80025ba:	e07c      	b.n	80026b6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	78db      	ldrb	r3, [r3, #3]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d108      	bne.n	80025d6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025c6:	461a      	mov	r2, r3
 80025c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f927 	bl	800281e <HAL_PCD_EP_DB_Receive>
 80025d0:	4603      	mov	r3, r0
 80025d2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80025d4:	e06f      	b.n	80026b6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	81fb      	strh	r3, [r7, #14]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	441a      	add	r2, r3
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800260a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002612:	b29b      	uxth	r3, r3
 8002614:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d021      	beq.n	8002674 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	3302      	adds	r3, #2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4413      	add	r3, r2
 800264e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002658:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800265a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02a      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	6959      	ldr	r1, [r3, #20]
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	891a      	ldrh	r2, [r3, #8]
 800266c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800266e:	f004 f94c 	bl	800690a <USB_ReadPMA>
 8002672:	e020      	b.n	80026b6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	3306      	adds	r3, #6
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800269c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800269e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	895a      	ldrh	r2, [r3, #10]
 80026b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026b2:	f004 f92a 	bl	800690a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026bc:	441a      	add	r2, r3
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026c8:	441a      	add	r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <PCD_EP_ISR_Handler+0x4c2>
 80026d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d206      	bcs.n	80026ee <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f00a fb36 	bl	800cd58 <HAL_PCD_DataOutStageCallback>
 80026ec:	e005      	b.n	80026fa <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fc7f 	bl	8004ff8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80026fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b00      	cmp	r3, #0
 8002702:	d07e      	beq.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002704:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b29b      	uxth	r3, r3
 800272a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	81bb      	strh	r3, [r7, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	441a      	add	r2, r3
 8002742:	89bb      	ldrh	r3, [r7, #12]
 8002744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800274c:	b29b      	uxth	r3, r3
 800274e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	78db      	ldrb	r3, [r3, #3]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d00c      	beq.n	8002772 <PCD_EP_ISR_Handler+0x554>
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	78db      	ldrb	r3, [r3, #3]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002764:	2b02      	cmp	r3, #2
 8002766:	d146      	bne.n	80027f6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d141      	bne.n	80027f6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	3302      	adds	r3, #2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6812      	ldr	r2, [r2, #0]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800279a:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	699a      	ldr	r2, [r3, #24]
 80027a0:	897b      	ldrh	r3, [r7, #10]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d906      	bls.n	80027b4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	1ad2      	subs	r2, r2, r3
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	619a      	str	r2, [r3, #24]
 80027b2:	e002      	b.n	80027ba <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f00a fae0 	bl	800cd8e <HAL_PCD_DataInStageCallback>
 80027ce:	e018      	b.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	897b      	ldrh	r3, [r7, #10]
 80027d6:	441a      	add	r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	69da      	ldr	r2, [r3, #28]
 80027e0:	897b      	ldrh	r3, [r7, #10]
 80027e2:	441a      	add	r2, r3
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fc02 	bl	8004ff8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027f4:	e005      	b.n	8002802 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f91b 	bl	8002a38 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800280a:	b29b      	uxth	r3, r3
 800280c:	b21b      	sxth	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	f6ff ad0a 	blt.w	8002228 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3738      	adds	r7, #56	; 0x38
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b088      	sub	sp, #32
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d07e      	beq.n	8002934 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800283e:	b29b      	uxth	r3, r3
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	3302      	adds	r3, #2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800285e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	8bfb      	ldrh	r3, [r7, #30]
 8002866:	429a      	cmp	r2, r3
 8002868:	d306      	bcc.n	8002878 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	8bfb      	ldrh	r3, [r7, #30]
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	619a      	str	r2, [r3, #24]
 8002876:	e002      	b.n	800287e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d123      	bne.n	80028ce <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a0:	83bb      	strh	r3, [r7, #28]
 80028a2:	8bbb      	ldrh	r3, [r7, #28]
 80028a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028a8:	83bb      	strh	r3, [r7, #28]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	441a      	add	r2, r3
 80028b8:	8bbb      	ldrh	r3, [r7, #28]
 80028ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01f      	beq.n	8002918 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	837b      	strh	r3, [r7, #26]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	8b7b      	ldrh	r3, [r7, #26]
 8002904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002910:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002914:	b29b      	uxth	r3, r3
 8002916:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002918:	8bfb      	ldrh	r3, [r7, #30]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8087 	beq.w	8002a2e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6959      	ldr	r1, [r3, #20]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	891a      	ldrh	r2, [r3, #8]
 800292c:	8bfb      	ldrh	r3, [r7, #30]
 800292e:	f003 ffec 	bl	800690a <USB_ReadPMA>
 8002932:	e07c      	b.n	8002a2e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293c:	b29b      	uxth	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	3306      	adds	r3, #6
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	4413      	add	r3, r2
 8002952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	8bfb      	ldrh	r3, [r7, #30]
 8002964:	429a      	cmp	r2, r3
 8002966:	d306      	bcc.n	8002976 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	8bfb      	ldrh	r3, [r7, #30]
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	619a      	str	r2, [r3, #24]
 8002974:	e002      	b.n	800297c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d123      	bne.n	80029cc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299e:	833b      	strh	r3, [r7, #24]
 80029a0:	8b3b      	ldrh	r3, [r7, #24]
 80029a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029a6:	833b      	strh	r3, [r7, #24]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	441a      	add	r2, r3
 80029b6:	8b3b      	ldrh	r3, [r7, #24]
 80029b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11f      	bne.n	8002a16 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	82fb      	strh	r3, [r7, #22]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	441a      	add	r2, r3
 8002a00:	8afb      	ldrh	r3, [r7, #22]
 8002a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a16:	8bfb      	ldrh	r3, [r7, #30]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6959      	ldr	r1, [r3, #20]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	895a      	ldrh	r2, [r3, #10]
 8002a28:	8bfb      	ldrh	r3, [r7, #30]
 8002a2a:	f003 ff6e 	bl	800690a <USB_ReadPMA>
    }
  }

  return count;
 8002a2e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0a4      	sub	sp, #144	; 0x90
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 81dd 	beq.w	8002e0c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	3302      	adds	r3, #2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a7a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d907      	bls.n	8002a9a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	619a      	str	r2, [r3, #24]
 8002a98:	e002      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f040 80bb 	bne.w	8002c20 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	785b      	ldrb	r3, [r3, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d126      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac6:	4413      	add	r3, r2
 8002ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	011a      	lsls	r2, r3, #4
 8002ad0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	e01a      	b.n	8002b36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d116      	bne.n	8002b36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b1c:	4413      	add	r3, r2
 8002b1e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	011a      	lsls	r2, r3, #4
 8002b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b28:	4413      	add	r3, r2
 8002b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b32:	2200      	movs	r2, #0
 8002b34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d126      	bne.n	8002b92 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b58:	4413      	add	r3, r2
 8002b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b6a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	e017      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	785b      	ldrb	r3, [r3, #1]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d113      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba8:	4413      	add	r3, r2
 8002baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	011a      	lsls	r2, r3, #4
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bba:	663b      	str	r3, [r7, #96]	; 0x60
 8002bbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f00a f8e0 	bl	800cd8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 82f1 	beq.w	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	8013      	strh	r3, [r2, #0]
 8002c1e:	e2cd      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d021      	beq.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c44:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	441a      	add	r2, r3
 8002c56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 82a1 	bne.w	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c82:	441a      	add	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c90:	441a      	add	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6a1a      	ldr	r2, [r3, #32]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d30b      	bcc.n	8002cba <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb2:	1ad2      	subs	r2, r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	621a      	str	r2, [r3, #32]
 8002cb8:	e017      	b.n	8002cea <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002cc2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cd2:	e00a      	b.n	8002cea <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d163      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0x382>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d06:	4413      	add	r3, r2
 8002d08:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	011a      	lsls	r2, r3, #4
 8002d10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d12:	4413      	add	r3, r2
 8002d14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d18:	657b      	str	r3, [r7, #84]	; 0x54
 8002d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d112      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e055      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d4e:	d817      	bhi.n	8002d80 <HAL_PCD_EP_DB_Transmit+0x348>
 8002d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x338>
 8002d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	029b      	lsls	r3, r3, #10
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	e039      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d104      	bne.n	8002da0 <HAL_PCD_EP_DB_Transmit+0x368>
 8002d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e01c      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d118      	bne.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	4413      	add	r3, r2
 8002dd8:	653b      	str	r3, [r7, #80]	; 0x50
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	011a      	lsls	r2, r3, #4
 8002de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de2:	4413      	add	r3, r2
 8002de4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002de8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6959      	ldr	r1, [r3, #20]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	891a      	ldrh	r2, [r3, #8]
 8002e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	f003 fd3c 	bl	8006882 <USB_WritePMA>
 8002e0a:	e1d7      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3306      	adds	r3, #6
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e34:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d307      	bcc.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002e4c:	1ad2      	subs	r2, r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	619a      	str	r2, [r3, #24]
 8002e52:	e002      	b.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2200      	movs	r2, #0
 8002e58:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 80b9 	bne.w	8002fd6 <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d126      	bne.n	8002eba <HAL_PCD_EP_DB_Transmit+0x482>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e80:	4413      	add	r3, r2
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb6:	801a      	strh	r2, [r3, #0]
 8002eb8:	e01a      	b.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d116      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed6:	4413      	add	r3, r2
 8002ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	011a      	lsls	r2, r3, #4
 8002ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	2200      	movs	r2, #0
 8002eee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d126      	bne.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x514>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	637b      	str	r3, [r7, #52]	; 0x34
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f12:	4413      	add	r3, r2
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	011a      	lsls	r2, r3, #4
 8002f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1e:	4413      	add	r3, r2
 8002f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	801a      	strh	r2, [r3, #0]
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	e017      	b.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x544>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	785b      	ldrb	r3, [r3, #1]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d113      	bne.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x544>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f62:	4413      	add	r3, r2
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	011a      	lsls	r2, r3, #4
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	4413      	add	r3, r2
 8002f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f009 ff03 	bl	800cd8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8114 	bne.w	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	8013      	strh	r3, [r2, #0]
 8002fd4:	e0f2      	b.n	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d11f      	bne.n	8003020 <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	853b      	strh	r3, [r7, #40]	; 0x28
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800300c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301c:	b29b      	uxth	r3, r3
 800301e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003026:	2b01      	cmp	r3, #1
 8003028:	f040 80c8 	bne.w	80031bc <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003034:	441a      	add	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003042:	441a      	add	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	429a      	cmp	r2, r3
 8003052:	d30b      	bcc.n	800306c <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003064:	1ad2      	subs	r2, r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	621a      	str	r2, [r3, #32]
 800306a:	e017      	b.n	800309c <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d108      	bne.n	8003086 <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 8003074:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003084:	e00a      	b.n	800309c <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2200      	movs	r2, #0
 8003092:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	785b      	ldrb	r3, [r3, #1]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d163      	bne.n	8003172 <HAL_PCD_EP_DB_Transmit+0x73a>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	4413      	add	r3, r2
 80030c0:	623b      	str	r3, [r7, #32]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	011a      	lsls	r2, r3, #4
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	4413      	add	r3, r2
 80030cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d112      	bne.n	8003100 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	801a      	strh	r2, [r3, #0]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	801a      	strh	r2, [r3, #0]
 80030fe:	e052      	b.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003104:	2b3e      	cmp	r3, #62	; 0x3e
 8003106:	d817      	bhi.n	8003138 <HAL_PCD_EP_DB_Transmit+0x700>
 8003108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_PCD_EP_DB_Transmit+0x6f0>
 800311e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003122:	3301      	adds	r3, #1
 8003124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800312c:	b29b      	uxth	r3, r3
 800312e:	029b      	lsls	r3, r3, #10
 8003130:	b29a      	uxth	r2, r3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	e036      	b.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003138:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2b00      	cmp	r3, #0
 800314c:	d104      	bne.n	8003158 <HAL_PCD_EP_DB_Transmit+0x720>
 800314e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003152:	3b01      	subs	r3, #1
 8003154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800315c:	b29b      	uxth	r3, r3
 800315e:	029b      	lsls	r3, r3, #10
 8003160:	b29b      	uxth	r3, r3
 8003162:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003166:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800316a:	b29a      	uxth	r2, r3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	e019      	b.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d115      	bne.n	80031a6 <HAL_PCD_EP_DB_Transmit+0x76e>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003182:	b29b      	uxth	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	4413      	add	r3, r2
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	011a      	lsls	r2, r3, #4
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	4413      	add	r3, r2
 8003196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6959      	ldr	r1, [r3, #20]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	895a      	ldrh	r2, [r3, #10]
 80031b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f003 fb63 	bl	8006882 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031d6:	82fb      	strh	r3, [r7, #22]
 80031d8:	8afb      	ldrh	r3, [r7, #22]
 80031da:	f083 0310 	eor.w	r3, r3, #16
 80031de:	82fb      	strh	r3, [r7, #22]
 80031e0:	8afb      	ldrh	r3, [r7, #22]
 80031e2:	f083 0320 	eor.w	r3, r3, #32
 80031e6:	82fb      	strh	r3, [r7, #22]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	441a      	add	r2, r3
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003208:	b29b      	uxth	r3, r3
 800320a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3790      	adds	r7, #144	; 0x90
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003216:	b480      	push	{r7}
 8003218:	b087      	sub	sp, #28
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	817b      	strh	r3, [r7, #10]
 8003224:	4613      	mov	r3, r2
 8003226:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003234:	897b      	ldrh	r3, [r7, #10]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e009      	b.n	8003260 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800324c:	897a      	ldrh	r2, [r7, #10]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003260:	893b      	ldrh	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	b29a      	uxth	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	80da      	strh	r2, [r3, #6]
 8003274:	e00b      	b.n	800328e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2201      	movs	r2, #1
 800327a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	b29a      	uxth	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0c1b      	lsrs	r3, r3, #16
 8003288:	b29a      	uxth	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
	...

0800329c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e26c      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8087 	beq.w	80033ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032bc:	4b92      	ldr	r3, [pc, #584]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 030c 	and.w	r3, r3, #12
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d00c      	beq.n	80032e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032c8:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d112      	bne.n	80032fa <HAL_RCC_OscConfig+0x5e>
 80032d4:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	4b89      	ldr	r3, [pc, #548]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06c      	beq.n	80033c8 <HAL_RCC_OscConfig+0x12c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d168      	bne.n	80033c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e246      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x76>
 8003304:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003306:	4b80      	ldr	r3, [pc, #512]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e02e      	b.n	8003370 <HAL_RCC_OscConfig+0xd4>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4a7b      	ldr	r2, [pc, #492]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800331c:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4a78      	ldr	r2, [pc, #480]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003328:	4b77      	ldr	r3, [pc, #476]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e01d      	b.n	8003370 <HAL_RCC_OscConfig+0xd4>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0xbc>
 800333e:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003340:	4b71      	ldr	r3, [pc, #452]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	4a6f      	ldr	r2, [pc, #444]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800334c:	4b6e      	ldr	r3, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e00b      	b.n	8003370 <HAL_RCC_OscConfig+0xd4>
 8003358:	4a6b      	ldr	r2, [pc, #428]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800335a:	4b6b      	ldr	r3, [pc, #428]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4a68      	ldr	r2, [pc, #416]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003366:	4b68      	ldr	r3, [pc, #416]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fe22 	bl	8000fc0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fd fe1e 	bl	8000fc0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1fa      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	4b5d      	ldr	r3, [pc, #372]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0xe4>
 800339e:	e014      	b.n	80033ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fe0e 	bl	8000fc0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fd fe0a 	bl	8000fc0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1e6      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x10c>
 80033c6:	e000      	b.n	80033ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d063      	beq.n	800349e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d6:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 030c 	and.w	r3, r3, #12
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033e2:	4b49      	ldr	r3, [pc, #292]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d11c      	bne.n	8003428 <HAL_RCC_OscConfig+0x18c>
 80033ee:	4b46      	ldr	r3, [pc, #280]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d116      	bne.n	8003428 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	4b43      	ldr	r3, [pc, #268]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x176>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d001      	beq.n	8003412 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e1ba      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003412:	493d      	ldr	r1, [pc, #244]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003414:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	e03a      	b.n	800349e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003430:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCC_OscConfig+0x270>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fd fdc3 	bl	8000fc0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343e:	f7fd fdbf 	bl	8000fc0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e19b      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345c:	492a      	ldr	r1, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]
 8003470:	e015      	b.n	800349e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <HAL_RCC_OscConfig+0x270>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fd fda2 	bl	8000fc0 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003480:	f7fd fd9e 	bl	8000fc0 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e17a      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d03a      	beq.n	8003520 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d019      	beq.n	80034e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b2:	4b17      	ldr	r3, [pc, #92]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b8:	f7fd fd82 	bl	8000fc0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034c0:	f7fd fd7e 	bl	8000fc0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e15a      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034de:	2001      	movs	r0, #1
 80034e0:	f000 faf6 	bl	8003ad0 <RCC_Delay>
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e6:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fd fd68 	bl	8000fc0 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f2:	e00f      	b.n	8003514 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fd fd64 	bl	8000fc0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d908      	bls.n	8003514 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e140      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	42420000 	.word	0x42420000
 8003510:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	4b9e      	ldr	r3, [pc, #632]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e9      	bne.n	80034f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a6 	beq.w	800367a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003532:	4b97      	ldr	r3, [pc, #604]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10d      	bne.n	800355a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800353e:	4a94      	ldr	r2, [pc, #592]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	4b93      	ldr	r3, [pc, #588]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003548:	61d3      	str	r3, [r2, #28]
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003556:	2301      	movs	r3, #1
 8003558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <HAL_RCC_OscConfig+0x4f8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d118      	bne.n	8003598 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003566:	4a8b      	ldr	r2, [pc, #556]	; (8003794 <HAL_RCC_OscConfig+0x4f8>)
 8003568:	4b8a      	ldr	r3, [pc, #552]	; (8003794 <HAL_RCC_OscConfig+0x4f8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fd fd25 	bl	8000fc0 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fd fd21 	bl	8000fc0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e0fd      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b81      	ldr	r3, [pc, #516]	; (8003794 <HAL_RCC_OscConfig+0x4f8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f0      	beq.n	800357a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d106      	bne.n	80035ae <HAL_RCC_OscConfig+0x312>
 80035a0:	4a7b      	ldr	r2, [pc, #492]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	4b7b      	ldr	r3, [pc, #492]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6213      	str	r3, [r2, #32]
 80035ac:	e02d      	b.n	800360a <HAL_RCC_OscConfig+0x36e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x334>
 80035b6:	4a76      	ldr	r2, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035b8:	4b75      	ldr	r3, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6213      	str	r3, [r2, #32]
 80035c2:	4a73      	ldr	r2, [pc, #460]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035c4:	4b72      	ldr	r3, [pc, #456]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f023 0304 	bic.w	r3, r3, #4
 80035cc:	6213      	str	r3, [r2, #32]
 80035ce:	e01c      	b.n	800360a <HAL_RCC_OscConfig+0x36e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	2b05      	cmp	r3, #5
 80035d6:	d10c      	bne.n	80035f2 <HAL_RCC_OscConfig+0x356>
 80035d8:	4a6d      	ldr	r2, [pc, #436]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035da:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6213      	str	r3, [r2, #32]
 80035e4:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035e6:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6213      	str	r3, [r2, #32]
 80035f0:	e00b      	b.n	800360a <HAL_RCC_OscConfig+0x36e>
 80035f2:	4a67      	ldr	r2, [pc, #412]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	6213      	str	r3, [r2, #32]
 80035fe:	4a64      	ldr	r2, [pc, #400]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	4b63      	ldr	r3, [pc, #396]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0304 	bic.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d015      	beq.n	800363e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003612:	f7fd fcd5 	bl	8000fc0 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361a:	f7fd fcd1 	bl	8000fc0 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	f241 3288 	movw	r2, #5000	; 0x1388
 8003628:	4293      	cmp	r3, r2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e0ab      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ee      	beq.n	800361a <HAL_RCC_OscConfig+0x37e>
 800363c:	e014      	b.n	8003668 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fd fcbf 	bl	8000fc0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fd fcbb 	bl	8000fc0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e095      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ee      	bne.n	8003646 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366e:	4a48      	ldr	r2, [pc, #288]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003678:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 8081 	beq.w	8003786 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b08      	cmp	r3, #8
 800368e:	d061      	beq.n	8003754 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d146      	bne.n	8003726 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0x4fc>)
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fd fc8f 	bl	8000fc0 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd fc8b 	bl	8000fc0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e067      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	4b35      	ldr	r3, [pc, #212]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f0      	bne.n	80036a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d108      	bne.n	80036e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ce:	4930      	ldr	r1, [pc, #192]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e0:	482b      	ldr	r0, [pc, #172]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a19      	ldr	r1, [r3, #32]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	430b      	orrs	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x4fc>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fd fc5f 	bl	8000fc0 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fd fc5b 	bl	8000fc0 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e037      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x46a>
 8003724:	e02f      	b.n	8003786 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <HAL_RCC_OscConfig+0x4fc>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fd fc48 	bl	8000fc0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd fc44 	bl	8000fc0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e020      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x498>
 8003752:	e018      	b.n	8003786 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e013      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_OscConfig+0x4f4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	429a      	cmp	r2, r3
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d001      	beq.n	8003786 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	40007000 	.word	0x40007000
 8003798:	42420060 	.word	0x42420060

0800379c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0d0      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0207 	and.w	r2, r3, #7
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d210      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4967      	ldr	r1, [pc, #412]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	4b66      	ldr	r3, [pc, #408]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f023 0207 	bic.w	r2, r3, #7
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b63      	ldr	r3, [pc, #396]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0207 	and.w	r2, r3, #7
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0b8      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4b59      	ldr	r3, [pc, #356]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003810:	4a53      	ldr	r2, [pc, #332]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	4b53      	ldr	r3, [pc, #332]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800381a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381c:	4950      	ldr	r1, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800381e:	4b50      	ldr	r3, [pc, #320]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d040      	beq.n	80038bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	4b47      	ldr	r3, [pc, #284]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d115      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e07f      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e073      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386a:	4b3d      	ldr	r3, [pc, #244]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e06b      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800387a:	4939      	ldr	r1, [pc, #228]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f023 0203 	bic.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4313      	orrs	r3, r2
 800388a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388c:	f7fd fb98 	bl	8000fc0 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	e00a      	b.n	80038aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003894:	f7fd fb94 	bl	8000fc0 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e053      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 020c 	and.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d1eb      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0207 	and.w	r2, r3, #7
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d910      	bls.n	80038ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ca:	4924      	ldr	r1, [pc, #144]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	4b23      	ldr	r3, [pc, #140]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 0207 	bic.w	r2, r3, #7
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0207 	and.w	r2, r3, #7
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d001      	beq.n	80038ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e032      	b.n	8003952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038f8:	4919      	ldr	r1, [pc, #100]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003916:	4912      	ldr	r1, [pc, #72]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392a:	f000 f821 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 800392e:	4601      	mov	r1, r0
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	5cd3      	ldrb	r3, [r2, r3]
 800393e:	fa21 f303 	lsr.w	r3, r1, r3
 8003942:	4a09      	ldr	r2, [pc, #36]	; (8003968 <HAL_RCC_ClockConfig+0x1cc>)
 8003944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1d0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f7fc fffc 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40022000 	.word	0x40022000
 8003960:	40021000 	.word	0x40021000
 8003964:	0800d4d0 	.word	0x0800d4d0
 8003968:	20000024 	.word	0x20000024
 800396c:	20000028 	.word	0x20000028

08003970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	b490      	push	{r4, r7}
 8003972:	b08a      	sub	sp, #40	; 0x28
 8003974:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003976:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003978:	1d3c      	adds	r4, r7, #4
 800397a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800397c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003980:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d002      	beq.n	80039b0 <HAL_RCC_GetSysClockFreq+0x40>
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d003      	beq.n	80039b6 <HAL_RCC_GetSysClockFreq+0x46>
 80039ae:	e02d      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b0:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039b2:	623b      	str	r3, [r7, #32]
      break;
 80039b4:	e02d      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	0c9b      	lsrs	r3, r3, #18
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039c2:	4413      	add	r3, r2
 80039c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d013      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c5b      	lsrs	r3, r3, #17
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80039e2:	4413      	add	r3, r2
 80039e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 80039ee:	fb02 f203 	mul.w	r2, r2, r3
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e004      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4a0c      	ldr	r2, [pc, #48]	; (8003a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	623b      	str	r3, [r7, #32]
      break;
 8003a0a:	e002      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a0e:	623b      	str	r3, [r7, #32]
      break;
 8003a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a12:	6a3b      	ldr	r3, [r7, #32]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc90      	pop	{r4, r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	0800d41c 	.word	0x0800d41c
 8003a24:	0800d42c 	.word	0x0800d42c
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	003d0900 	.word	0x003d0900

08003a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	20000024 	.word	0x20000024

08003a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a4c:	f7ff fff2 	bl	8003a34 <HAL_RCC_GetHCLKFreq>
 8003a50:	4601      	mov	r1, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4a03      	ldr	r2, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a5e:	5cd3      	ldrb	r3, [r2, r3]
 8003a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	0800d4e0 	.word	0x0800d4e0

08003a70 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	220f      	movs	r2, #15
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_RCC_GetClockConfig+0x58>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 0203 	and.w	r2, r3, #3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_RCC_GetClockConfig+0x58>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_GetClockConfig+0x58>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_GetClockConfig+0x58>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_GetClockConfig+0x5c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0207 	and.w	r2, r3, #7
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40022000 	.word	0x40022000

08003ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <RCC_Delay+0x34>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <RCC_Delay+0x38>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0a5b      	lsrs	r3, r3, #9
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aec:	bf00      	nop
  }
  while (Delay --);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	60fa      	str	r2, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f9      	bne.n	8003aec <RCC_Delay+0x1c>
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000024 	.word	0x20000024
 8003b08:	10624dd3 	.word	0x10624dd3

08003b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07d      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4a4c      	ldr	r2, [pc, #304]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	61d3      	str	r3, [r2, #28]
 8003b44:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b60:	4a43      	ldr	r2, [pc, #268]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b62:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fd fa28 	bl	8000fc0 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fd fa24 	bl	8000fc0 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e06d      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d027      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bc6:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d014      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fd f9f3 	bl	8000fc0 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fd f9ef 	bl	8000fc0 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e036      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ee      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c00:	491a      	ldr	r1, [pc, #104]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c30:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c4e:	4907      	ldr	r1, [pc, #28]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	42420440 	.word	0x42420440

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e041      	b.n	8003d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fc ff24 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 fa64 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e03a      	b.n	8003da6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <HAL_TIM_Base_Start_IT+0x98>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00e      	beq.n	8003d70 <HAL_TIM_Base_Start_IT+0x58>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d009      	beq.n	8003d70 <HAL_TIM_Base_Start_IT+0x58>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_TIM_Base_Start_IT+0x58>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d111      	bne.n	8003d94 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d010      	beq.n	8003da4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	e007      	b.n	8003da4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800

08003dbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d122      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d11b      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0202 	mvn.w	r2, #2
 8003de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9a4 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f997 	bl	800413a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f9a6 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d122      	bne.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d11b      	bne.n	8003e6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0204 	mvn.w	r2, #4
 8003e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2202      	movs	r2, #2
 8003e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f97a 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003e58:	e005      	b.n	8003e66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f96d 	bl	800413a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f97c 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d122      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d11b      	bne.n	8003ec0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0208 	mvn.w	r2, #8
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2204      	movs	r2, #4
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f950 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f943 	bl	800413a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f952 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0210 	mvn.w	r2, #16
 8003ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2208      	movs	r2, #8
 8003eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f926 	bl	800414c <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f919 	bl	800413a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f928 	bl	800415e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10e      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0201 	mvn.w	r2, #1
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc fcb6 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d10e      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa6b 	bl	8004442 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d10e      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d107      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8ec 	bl	8004170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d10e      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d107      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0220 	mvn.w	r2, #32
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa36 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIM_ConfigClockSource+0x18>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0a6      	b.n	8004132 <HAL_TIM_ConfigClockSource+0x166>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d067      	beq.n	80040ec <HAL_TIM_ConfigClockSource+0x120>
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d80b      	bhi.n	8004038 <HAL_TIM_ConfigClockSource+0x6c>
 8004020:	2b10      	cmp	r3, #16
 8004022:	d073      	beq.n	800410c <HAL_TIM_ConfigClockSource+0x140>
 8004024:	2b10      	cmp	r3, #16
 8004026:	d802      	bhi.n	800402e <HAL_TIM_ConfigClockSource+0x62>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d06f      	beq.n	800410c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800402c:	e078      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800402e:	2b20      	cmp	r3, #32
 8004030:	d06c      	beq.n	800410c <HAL_TIM_ConfigClockSource+0x140>
 8004032:	2b30      	cmp	r3, #48	; 0x30
 8004034:	d06a      	beq.n	800410c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004036:	e073      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004038:	2b70      	cmp	r3, #112	; 0x70
 800403a:	d00d      	beq.n	8004058 <HAL_TIM_ConfigClockSource+0x8c>
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d804      	bhi.n	800404a <HAL_TIM_ConfigClockSource+0x7e>
 8004040:	2b50      	cmp	r3, #80	; 0x50
 8004042:	d033      	beq.n	80040ac <HAL_TIM_ConfigClockSource+0xe0>
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d041      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004048:	e06a      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	d066      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x152>
 8004050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004054:	d017      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004056:	e063      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	f000 f965 	bl	8004336 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800407a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	609a      	str	r2, [r3, #8]
      break;
 8004084:	e04c      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f000 f94e 	bl	8004336 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	6892      	ldr	r2, [r2, #8]
 80040a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040a8:	609a      	str	r2, [r3, #8]
      break;
 80040aa:	e039      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	461a      	mov	r2, r3
 80040ba:	f000 f8c5 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2150      	movs	r1, #80	; 0x50
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 f91c 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 80040ca:	e029      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	461a      	mov	r2, r3
 80040da:	f000 f8e3 	bl	80042a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2160      	movs	r1, #96	; 0x60
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f90c 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 80040ea:	e019      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f000 f8a5 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2140      	movs	r1, #64	; 0x40
 8004104:	4618      	mov	r0, r3
 8004106:	f000 f8fc 	bl	8004302 <TIM_ITRx_SetConfig>
      break;
 800410a:	e009      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f000 f8f3 	bl	8004302 <TIM_ITRx_SetConfig>
        break;
 800411c:	e000      	b.n	8004120 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800411e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
	...

08004184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a29      	ldr	r2, [pc, #164]	; (800423c <TIM_Base_SetConfig+0xb8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00b      	beq.n	80041b4 <TIM_Base_SetConfig+0x30>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d007      	beq.n	80041b4 <TIM_Base_SetConfig+0x30>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a26      	ldr	r2, [pc, #152]	; (8004240 <TIM_Base_SetConfig+0xbc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_Base_SetConfig+0x30>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a25      	ldr	r2, [pc, #148]	; (8004244 <TIM_Base_SetConfig+0xc0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d108      	bne.n	80041c6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <TIM_Base_SetConfig+0xb8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a19      	ldr	r2, [pc, #100]	; (8004240 <TIM_Base_SetConfig+0xbc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <TIM_Base_SetConfig+0xc0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a07      	ldr	r2, [pc, #28]	; (800423c <TIM_Base_SetConfig+0xb8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800

08004248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 030a 	bic.w	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f023 0210 	bic.w	r2, r3, #16
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	031b      	lsls	r3, r3, #12
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	f043 0307 	orr.w	r3, r3, #7
 8004324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr

08004336 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b087      	sub	sp, #28
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004350:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	021a      	lsls	r2, r3, #8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	431a      	orrs	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	609a      	str	r2, [r3, #8]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004388:	2302      	movs	r3, #2
 800438a:	e046      	b.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d8:	d009      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d004      	beq.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a10      	ldr	r2, [pc, #64]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d10c      	bne.n	8004408 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004454:	b084      	sub	sp, #16
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	f107 0014 	add.w	r0, r7, #20
 8004462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	b004      	add	sp, #16
 8004472:	4770      	bx	lr

08004474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004484:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004488:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	b29a      	uxth	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	bc80      	pop	{r7}
 800449e:	4770      	bx	lr

080044a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	43db      	mvns	r3, r3
 80044bc:	b29b      	uxth	r3, r3
 80044be:	4013      	ands	r3, r2
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr

080044d4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr

080044ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044ec:	b084      	sub	sp, #16
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	f107 0014 	add.w	r0, r7, #20
 80044fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	b004      	add	sp, #16
 800452a:	4770      	bx	lr

0800452c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
	...

08004558 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004558:	b480      	push	{r7}
 800455a:	b09b      	sub	sp, #108	; 0x6c
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	78db      	ldrb	r3, [r3, #3]
 8004586:	2b03      	cmp	r3, #3
 8004588:	d81f      	bhi.n	80045ca <USB_ActivateEndpoint+0x72>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <USB_ActivateEndpoint+0x38>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045d3 	.word	0x080045d3
 800459c:	080045af 	.word	0x080045af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045a8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045ac:	e012      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045ae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045ba:	e00b      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045c8:	e004      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80045d0:	e000      	b.n	80045d4 <USB_ActivateEndpoint+0x7c>
      break;
 80045d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	b29a      	uxth	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004630:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004638:	b29b      	uxth	r3, r3
 800463a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	7b1b      	ldrb	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 8153 	bne.w	80048ec <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	785b      	ldrb	r3, [r3, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 808e 	beq.w	800476c <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	65bb      	str	r3, [r7, #88]	; 0x58
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004660:	4413      	add	r3, r2
 8004662:	65bb      	str	r3, [r7, #88]	; 0x58
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	011a      	lsls	r2, r3, #4
 800466a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800466c:	4413      	add	r3, r2
 800466e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004672:	657b      	str	r3, [r7, #84]	; 0x54
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	88db      	ldrh	r3, [r3, #6]
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	b29b      	uxth	r3, r3
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004682:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004694:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01d      	beq.n	80046dc <USB_ActivateEndpoint+0x184>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80046c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	78db      	ldrb	r3, [r3, #3]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d024      	beq.n	800472e <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80046fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004702:	f083 0320 	eor.w	r3, r3, #32
 8004706:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
 800472c:	e271      	b.n	8004c12 <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004766:	b29b      	uxth	r3, r3
 8004768:	8013      	strh	r3, [r2, #0]
 800476a:	e252      	b.n	8004c12 <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477c:	4413      	add	r3, r2
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	011a      	lsls	r2, r3, #4
 8004786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004788:	4413      	add	r3, r2
 800478a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800478e:	647b      	str	r3, [r7, #68]	; 0x44
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	88db      	ldrh	r3, [r3, #6]
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800479e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b0:	4413      	add	r3, r2
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	011a      	lsls	r2, r3, #4
 80047ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047bc:	4413      	add	r3, r2
 80047be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d112      	bne.n	80047f2 <USB_ActivateEndpoint+0x29a>
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	e02f      	b.n	8004852 <USB_ActivateEndpoint+0x2fa>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b3e      	cmp	r3, #62	; 0x3e
 80047f8:	d813      	bhi.n	8004822 <USB_ActivateEndpoint+0x2ca>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	085b      	lsrs	r3, r3, #1
 8004800:	663b      	str	r3, [r7, #96]	; 0x60
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <USB_ActivateEndpoint+0x2bc>
 800480e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004810:	3301      	adds	r3, #1
 8004812:	663b      	str	r3, [r7, #96]	; 0x60
 8004814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004816:	b29b      	uxth	r3, r3
 8004818:	029b      	lsls	r3, r3, #10
 800481a:	b29a      	uxth	r2, r3
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	801a      	strh	r2, [r3, #0]
 8004820:	e017      	b.n	8004852 <USB_ActivateEndpoint+0x2fa>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	663b      	str	r3, [r7, #96]	; 0x60
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <USB_ActivateEndpoint+0x2e4>
 8004836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004838:	3b01      	subs	r3, #1
 800483a:	663b      	str	r3, [r7, #96]	; 0x60
 800483c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483e:	b29b      	uxth	r3, r3
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	b29b      	uxth	r3, r3
 8004844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484c:	b29a      	uxth	r2, r3
 800484e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004850:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004860:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01b      	beq.n	80048a2 <USB_ActivateEndpoint+0x34a>
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	873b      	strh	r3, [r7, #56]	; 0x38
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800488e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800489e:	b29b      	uxth	r3, r3
 80048a0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	441a      	add	r2, r3
 80048d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80048d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	8013      	strh	r3, [r2, #0]
 80048ea:	e192      	b.n	8004c12 <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004918:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004920:	b29b      	uxth	r3, r3
 8004922:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	633b      	str	r3, [r7, #48]	; 0x30
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800492e:	b29b      	uxth	r3, r3
 8004930:	461a      	mov	r2, r3
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	4413      	add	r3, r2
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	011a      	lsls	r2, r3, #4
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	4413      	add	r3, r2
 8004942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	891b      	ldrh	r3, [r3, #8]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	801a      	strh	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004962:	b29b      	uxth	r3, r3
 8004964:	461a      	mov	r2, r3
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	4413      	add	r3, r2
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	011a      	lsls	r2, r3, #4
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	4413      	add	r3, r2
 8004976:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	895b      	ldrh	r3, [r3, #10]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	b29b      	uxth	r3, r3
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	785b      	ldrb	r3, [r3, #1]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 8091 	bne.w	8004ab8 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80049a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d01b      	beq.n	80049e6 <USB_ActivateEndpoint+0x48e>
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	843b      	strh	r3, [r7, #32]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	8c3b      	ldrh	r3, [r7, #32]
 80049d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	83fb      	strh	r3, [r7, #30]
 80049f4:	8bfb      	ldrh	r3, [r7, #30]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01b      	beq.n	8004a36 <USB_ActivateEndpoint+0x4de>
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a14:	83bb      	strh	r3, [r7, #28]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	441a      	add	r2, r3
 8004a20:	8bbb      	ldrh	r3, [r7, #28]
 8004a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	837b      	strh	r3, [r7, #26]
 8004a4e:	8b7b      	ldrh	r3, [r7, #26]
 8004a50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a54:	837b      	strh	r3, [r7, #26]
 8004a56:	8b7b      	ldrh	r3, [r7, #26]
 8004a58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a5c:	837b      	strh	r3, [r7, #26]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	441a      	add	r2, r3
 8004a68:	8b7b      	ldrh	r3, [r7, #26]
 8004a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a94:	833b      	strh	r3, [r7, #24]
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	441a      	add	r2, r3
 8004aa0:	8b3b      	ldrh	r3, [r7, #24]
 8004aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	8013      	strh	r3, [r2, #0]
 8004ab6:	e0ac      	b.n	8004c12 <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	82fb      	strh	r3, [r7, #22]
 8004ac6:	8afb      	ldrh	r3, [r7, #22]
 8004ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <USB_ActivateEndpoint+0x5b0>
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae6:	82bb      	strh	r3, [r7, #20]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	8abb      	ldrh	r3, [r7, #20]
 8004af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	827b      	strh	r3, [r7, #18]
 8004b16:	8a7b      	ldrh	r3, [r7, #18]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <USB_ActivateEndpoint+0x600>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	823b      	strh	r3, [r7, #16]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	8a3b      	ldrh	r3, [r7, #16]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	78db      	ldrb	r3, [r3, #3]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d020      	beq.n	8004ba2 <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b76:	81fb      	strh	r3, [r7, #14]
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	f083 0320 	eor.w	r3, r3, #32
 8004b7e:	81fb      	strh	r3, [r7, #14]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]
 8004ba0:	e01b      	b.n	8004bda <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb8:	81bb      	strh	r3, [r7, #12]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	89bb      	ldrh	r3, [r7, #12]
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	817b      	strh	r3, [r7, #10]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	441a      	add	r2, r3
 8004bfc:	897b      	ldrh	r3, [r7, #10]
 8004bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	376c      	adds	r7, #108	; 0x6c
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b08d      	sub	sp, #52	; 0x34
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	7b1b      	ldrb	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 808e 	bne.w	8004d50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	785b      	ldrb	r3, [r3, #1]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d044      	beq.n	8004cc6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <USB_DeactivateEndpoint+0x6c>
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	441a      	add	r2, r3
 8004c76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	441a      	add	r2, r3
 8004cae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	8013      	strh	r3, [r2, #0]
 8004cc4:	e192      	b.n	8004fec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <USB_DeactivateEndpoint+0xf6>
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	441a      	add	r2, r3
 8004d00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	441a      	add	r2, r3
 8004d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	8013      	strh	r3, [r2, #0]
 8004d4e:	e14d      	b.n	8004fec <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f040 80a5 	bne.w	8004ea4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01b      	beq.n	8004daa <USB_DeactivateEndpoint+0x18a>
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	843b      	strh	r3, [r7, #32]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8c3b      	ldrh	r3, [r7, #32]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	83fb      	strh	r3, [r7, #30]
 8004db8:	8bfb      	ldrh	r3, [r7, #30]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01b      	beq.n	8004dfa <USB_DeactivateEndpoint+0x1da>
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd8:	83bb      	strh	r3, [r7, #28]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	8bbb      	ldrh	r3, [r7, #28]
 8004de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	837b      	strh	r3, [r7, #26]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	441a      	add	r2, r3
 8004e1c:	8b7b      	ldrh	r3, [r7, #26]
 8004e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	881b      	ldrh	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e48:	833b      	strh	r3, [r7, #24]
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	441a      	add	r2, r3
 8004e54:	8b3b      	ldrh	r3, [r7, #24]
 8004e56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e80:	82fb      	strh	r3, [r7, #22]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	8afb      	ldrh	r3, [r7, #22]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]
 8004ea2:	e0a3      	b.n	8004fec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	881b      	ldrh	r3, [r3, #0]
 8004eb0:	82bb      	strh	r3, [r7, #20]
 8004eb2:	8abb      	ldrh	r3, [r7, #20]
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01b      	beq.n	8004ef4 <USB_DeactivateEndpoint+0x2d4>
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed2:	827b      	strh	r3, [r7, #18]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	8a7b      	ldrh	r3, [r7, #18]
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	823b      	strh	r3, [r7, #16]
 8004f02:	8a3b      	ldrh	r3, [r7, #16]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <USB_DeactivateEndpoint+0x324>
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f22:	81fb      	strh	r3, [r7, #14]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	441a      	add	r2, r3
 8004f2e:	89fb      	ldrh	r3, [r7, #14]
 8004f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5a:	81bb      	strh	r3, [r7, #12]
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	441a      	add	r2, r3
 8004f66:	89bb      	ldrh	r3, [r7, #12]
 8004f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f92:	817b      	strh	r3, [r7, #10]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	897b      	ldrh	r3, [r7, #10]
 8004fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	813b      	strh	r3, [r7, #8]
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	893b      	ldrh	r3, [r7, #8]
 8004fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3734      	adds	r7, #52	; 0x34
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b0ce      	sub	sp, #312	; 0x138
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	6018      	str	r0, [r3, #0]
 8005002:	463b      	mov	r3, r7
 8005004:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005006:	463b      	mov	r3, r7
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	f040 873e 	bne.w	8005e8e <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	d905      	bls.n	800502e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005022:	463b      	mov	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800502c:	e004      	b.n	8005038 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800502e:	463b      	mov	r3, r7
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005038:	463b      	mov	r3, r7
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	7b1b      	ldrb	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d12e      	bne.n	80050a0 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6959      	ldr	r1, [r3, #20]
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	88da      	ldrh	r2, [r3, #6]
 800504e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005052:	b29b      	uxth	r3, r3
 8005054:	1d38      	adds	r0, r7, #4
 8005056:	6800      	ldr	r0, [r0, #0]
 8005058:	f001 fc13 	bl	8006882 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506c:	b29b      	uxth	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005074:	4413      	add	r3, r2
 8005076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	011a      	lsls	r2, r3, #4
 8005082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005086:	4413      	add	r3, r2
 8005088:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800508c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005090:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	f000 bec2 	b.w	8005e24 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050a0:	463b      	mov	r3, r7
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	78db      	ldrb	r3, [r3, #3]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	f040 836a 	bne.w	8005780 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050ac:	463b      	mov	r3, r7
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6a1a      	ldr	r2, [r3, #32]
 80050b2:	463b      	mov	r3, r7
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	f240 830e 	bls.w	80056da <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80050be:	1d3b      	adds	r3, r7, #4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	463b      	mov	r3, r7
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80050dc:	1d3b      	adds	r3, r7, #4
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	463b      	mov	r3, r7
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80050ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050fe:	b29b      	uxth	r3, r3
 8005100:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005102:	463b      	mov	r3, r7
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6a1a      	ldr	r2, [r3, #32]
 8005108:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800510c:	1ad2      	subs	r2, r2, r3
 800510e:	463b      	mov	r3, r7
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	463b      	mov	r3, r7
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 817c 	beq.w	8005428 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005130:	1d3b      	adds	r3, r7, #4
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005138:	463b      	mov	r3, r7
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d16f      	bne.n	8005222 <USB_EPStartXfer+0x22a>
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800515a:	4413      	add	r3, r2
 800515c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005160:	463b      	mov	r3, r7
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	011a      	lsls	r2, r3, #4
 8005168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800516c:	4413      	add	r3, r2
 800516e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005172:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800517a:	2b00      	cmp	r3, #0
 800517c:	d116      	bne.n	80051ac <USB_EPStartXfer+0x1b4>
 800517e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800518a:	b29a      	uxth	r2, r3
 800518c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e05b      	b.n	8005264 <USB_EPStartXfer+0x26c>
 80051ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051b0:	2b3e      	cmp	r3, #62	; 0x3e
 80051b2:	d818      	bhi.n	80051e6 <USB_EPStartXfer+0x1ee>
 80051b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80051be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <USB_EPStartXfer+0x1dc>
 80051ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051ce:	3301      	adds	r3, #1
 80051d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80051d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051d8:	b29b      	uxth	r3, r3
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	b29a      	uxth	r2, r3
 80051de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e03e      	b.n	8005264 <USB_EPStartXfer+0x26c>
 80051e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80051f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <USB_EPStartXfer+0x20e>
 80051fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005200:	3b01      	subs	r3, #1
 8005202:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005206:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800520a:	b29b      	uxth	r3, r3
 800520c:	029b      	lsls	r3, r3, #10
 800520e:	b29b      	uxth	r3, r3
 8005210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005218:	b29a      	uxth	r2, r3
 800521a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e020      	b.n	8005264 <USB_EPStartXfer+0x26c>
 8005222:	463b      	mov	r3, r7
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11b      	bne.n	8005264 <USB_EPStartXfer+0x26c>
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005234:	b29b      	uxth	r3, r3
 8005236:	461a      	mov	r2, r3
 8005238:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800523c:	4413      	add	r3, r2
 800523e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005242:	463b      	mov	r3, r7
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800524e:	4413      	add	r3, r2
 8005250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005258:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800525c:	b29a      	uxth	r2, r3
 800525e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005262:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005264:	463b      	mov	r3, r7
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	895b      	ldrh	r3, [r3, #10]
 800526a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800526e:	463b      	mov	r3, r7
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6959      	ldr	r1, [r3, #20]
 8005274:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005278:	b29b      	uxth	r3, r3
 800527a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800527e:	1d38      	adds	r0, r7, #4
 8005280:	6800      	ldr	r0, [r0, #0]
 8005282:	f001 fafe 	bl	8006882 <USB_WritePMA>
            ep->xfer_buff += len;
 8005286:	463b      	mov	r3, r7
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005290:	441a      	add	r2, r3
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005298:	463b      	mov	r3, r7
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	463b      	mov	r3, r7
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d909      	bls.n	80052bc <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052b2:	1ad2      	subs	r2, r2, r3
 80052b4:	463b      	mov	r3, r7
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	621a      	str	r2, [r3, #32]
 80052ba:	e008      	b.n	80052ce <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 80052bc:	463b      	mov	r3, r7
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	785b      	ldrb	r3, [r3, #1]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d16f      	bne.n	80053b8 <USB_EPStartXfer+0x3c0>
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052e0:	1d3b      	adds	r3, r7, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052f0:	4413      	add	r3, r2
 80052f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	011a      	lsls	r2, r3, #4
 80052fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005302:	4413      	add	r3, r2
 8005304:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800530c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <USB_EPStartXfer+0x34a>
 8005314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005320:	b29a      	uxth	r2, r3
 8005322:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005326:	801a      	strh	r2, [r3, #0]
 8005328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005338:	b29a      	uxth	r2, r3
 800533a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800533e:	801a      	strh	r2, [r3, #0]
 8005340:	e05f      	b.n	8005402 <USB_EPStartXfer+0x40a>
 8005342:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005346:	2b3e      	cmp	r3, #62	; 0x3e
 8005348:	d818      	bhi.n	800537c <USB_EPStartXfer+0x384>
 800534a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005354:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d004      	beq.n	800536a <USB_EPStartXfer+0x372>
 8005360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005364:	3301      	adds	r3, #1
 8005366:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800536a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29a      	uxth	r2, r3
 8005374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e042      	b.n	8005402 <USB_EPStartXfer+0x40a>
 800537c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005386:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <USB_EPStartXfer+0x3a4>
 8005392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005396:	3b01      	subs	r3, #1
 8005398:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800539c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e024      	b.n	8005402 <USB_EPStartXfer+0x40a>
 80053b8:	463b      	mov	r3, r7
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d11f      	bne.n	8005402 <USB_EPStartXfer+0x40a>
 80053c2:	1d3b      	adds	r3, r7, #4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	461a      	mov	r2, r3
 80053d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053da:	4413      	add	r3, r2
 80053dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053ec:	4413      	add	r3, r2
 80053ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005400:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	891b      	ldrh	r3, [r3, #8]
 8005408:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6959      	ldr	r1, [r3, #20]
 8005412:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005416:	b29b      	uxth	r3, r3
 8005418:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800541c:	1d38      	adds	r0, r7, #4
 800541e:	6800      	ldr	r0, [r0, #0]
 8005420:	f001 fa2f 	bl	8006882 <USB_WritePMA>
 8005424:	f000 bcfe 	b.w	8005e24 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d164      	bne.n	80054fc <USB_EPStartXfer+0x504>
 8005432:	1d3b      	adds	r3, r7, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005438:	1d3b      	adds	r3, r7, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005446:	4413      	add	r3, r2
 8005448:	67fb      	str	r3, [r7, #124]	; 0x7c
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	011a      	lsls	r2, r3, #4
 8005452:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005454:	4413      	add	r3, r2
 8005456:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800545a:	67bb      	str	r3, [r7, #120]	; 0x78
 800545c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005460:	2b00      	cmp	r3, #0
 8005462:	d112      	bne.n	800548a <USB_EPStartXfer+0x492>
 8005464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800546e:	b29a      	uxth	r2, r3
 8005470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005472:	801a      	strh	r2, [r3, #0]
 8005474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	b29b      	uxth	r3, r3
 800547a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800547e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005482:	b29a      	uxth	r2, r3
 8005484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005486:	801a      	strh	r2, [r3, #0]
 8005488:	e057      	b.n	800553a <USB_EPStartXfer+0x542>
 800548a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800548e:	2b3e      	cmp	r3, #62	; 0x3e
 8005490:	d817      	bhi.n	80054c2 <USB_EPStartXfer+0x4ca>
 8005492:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800549c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <USB_EPStartXfer+0x4ba>
 80054a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054ac:	3301      	adds	r3, #1
 80054ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	029b      	lsls	r3, r3, #10
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e03b      	b.n	800553a <USB_EPStartXfer+0x542>
 80054c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054c6:	095b      	lsrs	r3, r3, #5
 80054c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d104      	bne.n	80054e2 <USB_EPStartXfer+0x4ea>
 80054d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054dc:	3b01      	subs	r3, #1
 80054de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e01e      	b.n	800553a <USB_EPStartXfer+0x542>
 80054fc:	463b      	mov	r3, r7
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d119      	bne.n	800553a <USB_EPStartXfer+0x542>
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	677b      	str	r3, [r7, #116]	; 0x74
 800550c:	1d3b      	adds	r3, r7, #4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005514:	b29b      	uxth	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800551a:	4413      	add	r3, r2
 800551c:	677b      	str	r3, [r7, #116]	; 0x74
 800551e:	463b      	mov	r3, r7
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	011a      	lsls	r2, r3, #4
 8005526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005528:	4413      	add	r3, r2
 800552a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800552e:	673b      	str	r3, [r7, #112]	; 0x70
 8005530:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005534:	b29a      	uxth	r2, r3
 8005536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800553a:	463b      	mov	r3, r7
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	891b      	ldrh	r3, [r3, #8]
 8005540:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005544:	463b      	mov	r3, r7
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6959      	ldr	r1, [r3, #20]
 800554a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800554e:	b29b      	uxth	r3, r3
 8005550:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005554:	1d38      	adds	r0, r7, #4
 8005556:	6800      	ldr	r0, [r0, #0]
 8005558:	f001 f993 	bl	8006882 <USB_WritePMA>
            ep->xfer_buff += len;
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005566:	441a      	add	r2, r3
 8005568:	463b      	mov	r3, r7
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800556e:	463b      	mov	r3, r7
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6a1a      	ldr	r2, [r3, #32]
 8005574:	463b      	mov	r3, r7
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d909      	bls.n	8005592 <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	463b      	mov	r3, r7
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	621a      	str	r2, [r3, #32]
 8005590:	e008      	b.n	80055a4 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 8005592:	463b      	mov	r3, r7
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055a4:	1d3b      	adds	r3, r7, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055aa:	463b      	mov	r3, r7
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d164      	bne.n	800567e <USB_EPStartXfer+0x686>
 80055b4:	1d3b      	adds	r3, r7, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055ba:	1d3b      	adds	r3, r7, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055c8:	4413      	add	r3, r2
 80055ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	011a      	lsls	r2, r3, #4
 80055d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055d6:	4413      	add	r3, r2
 80055d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055dc:	667b      	str	r3, [r7, #100]	; 0x64
 80055de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d112      	bne.n	800560c <USB_EPStartXfer+0x614>
 80055e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005604:	b29a      	uxth	r2, r3
 8005606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	e054      	b.n	80056b6 <USB_EPStartXfer+0x6be>
 800560c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005610:	2b3e      	cmp	r3, #62	; 0x3e
 8005612:	d817      	bhi.n	8005644 <USB_EPStartXfer+0x64c>
 8005614:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800561e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d004      	beq.n	8005634 <USB_EPStartXfer+0x63c>
 800562a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800562e:	3301      	adds	r3, #1
 8005630:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005634:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005638:	b29b      	uxth	r3, r3
 800563a:	029b      	lsls	r3, r3, #10
 800563c:	b29a      	uxth	r2, r3
 800563e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e038      	b.n	80056b6 <USB_EPStartXfer+0x6be>
 8005644:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800564e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005652:	f003 031f 	and.w	r3, r3, #31
 8005656:	2b00      	cmp	r3, #0
 8005658:	d104      	bne.n	8005664 <USB_EPStartXfer+0x66c>
 800565a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800565e:	3b01      	subs	r3, #1
 8005660:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005664:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005668:	b29b      	uxth	r3, r3
 800566a:	029b      	lsls	r3, r3, #10
 800566c:	b29b      	uxth	r3, r3
 800566e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005672:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005676:	b29a      	uxth	r2, r3
 8005678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800567a:	801a      	strh	r2, [r3, #0]
 800567c:	e01b      	b.n	80056b6 <USB_EPStartXfer+0x6be>
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d116      	bne.n	80056b6 <USB_EPStartXfer+0x6be>
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005690:	b29b      	uxth	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005696:	4413      	add	r3, r2
 8005698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056aa:	663b      	str	r3, [r7, #96]	; 0x60
 80056ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	895b      	ldrh	r3, [r3, #10]
 80056bc:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80056d0:	1d38      	adds	r0, r7, #4
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	f001 f8d5 	bl	8006882 <USB_WritePMA>
 80056d8:	e3a4      	b.n	8005e24 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	441a      	add	r2, r3
 8005710:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800571c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005724:	b29b      	uxth	r3, r3
 8005726:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005728:	1d3b      	adds	r3, r7, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	65bb      	str	r3, [r7, #88]	; 0x58
 800572e:	1d3b      	adds	r3, r7, #4
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005736:	b29b      	uxth	r3, r3
 8005738:	461a      	mov	r2, r3
 800573a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800573c:	4413      	add	r3, r2
 800573e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005740:	463b      	mov	r3, r7
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	011a      	lsls	r2, r3, #4
 8005748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800574a:	4413      	add	r3, r2
 800574c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005750:	657b      	str	r3, [r7, #84]	; 0x54
 8005752:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005756:	b29a      	uxth	r2, r3
 8005758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800575a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800575c:	463b      	mov	r3, r7
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	891b      	ldrh	r3, [r3, #8]
 8005762:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6959      	ldr	r1, [r3, #20]
 800576c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005770:	b29b      	uxth	r3, r3
 8005772:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005776:	1d38      	adds	r0, r7, #4
 8005778:	6800      	ldr	r0, [r0, #0]
 800577a:	f001 f882 	bl	8006882 <USB_WritePMA>
 800577e:	e351      	b.n	8005e24 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	463b      	mov	r3, r7
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	441a      	add	r2, r3
 80057ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80057c4:	463b      	mov	r3, r7
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6a1a      	ldr	r2, [r3, #32]
 80057ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	463b      	mov	r3, r7
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8178 	beq.w	8005ae2 <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	463b      	mov	r3, r7
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d164      	bne.n	80058cc <USB_EPStartXfer+0x8d4>
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	64bb      	str	r3, [r7, #72]	; 0x48
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	4413      	add	r3, r2
 8005818:	64bb      	str	r3, [r7, #72]	; 0x48
 800581a:	463b      	mov	r3, r7
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	011a      	lsls	r2, r3, #4
 8005822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005824:	4413      	add	r3, r2
 8005826:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800582a:	647b      	str	r3, [r7, #68]	; 0x44
 800582c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005830:	2b00      	cmp	r3, #0
 8005832:	d112      	bne.n	800585a <USB_EPStartXfer+0x862>
 8005834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	b29b      	uxth	r3, r3
 800583a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800583e:	b29a      	uxth	r2, r3
 8005840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800584e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005852:	b29a      	uxth	r2, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	e054      	b.n	8005904 <USB_EPStartXfer+0x90c>
 800585a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800585e:	2b3e      	cmp	r3, #62	; 0x3e
 8005860:	d817      	bhi.n	8005892 <USB_EPStartXfer+0x89a>
 8005862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800586c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <USB_EPStartXfer+0x88a>
 8005878:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800587c:	3301      	adds	r3, #1
 800587e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005882:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005886:	b29b      	uxth	r3, r3
 8005888:	029b      	lsls	r3, r3, #10
 800588a:	b29a      	uxth	r2, r3
 800588c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800588e:	801a      	strh	r2, [r3, #0]
 8005890:	e038      	b.n	8005904 <USB_EPStartXfer+0x90c>
 8005892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800589c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058a0:	f003 031f 	and.w	r3, r3, #31
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <USB_EPStartXfer+0x8ba>
 80058a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058ac:	3b01      	subs	r3, #1
 80058ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	e01b      	b.n	8005904 <USB_EPStartXfer+0x90c>
 80058cc:	463b      	mov	r3, r7
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d116      	bne.n	8005904 <USB_EPStartXfer+0x90c>
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058de:	b29b      	uxth	r3, r3
 80058e0:	461a      	mov	r2, r3
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	4413      	add	r3, r2
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e8:	463b      	mov	r3, r7
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	011a      	lsls	r2, r3, #4
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f2:	4413      	add	r3, r2
 80058f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
 80058fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005902:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005904:	463b      	mov	r3, r7
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	895b      	ldrh	r3, [r3, #10]
 800590a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800590e:	463b      	mov	r3, r7
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6959      	ldr	r1, [r3, #20]
 8005914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005918:	b29b      	uxth	r3, r3
 800591a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800591e:	1d38      	adds	r0, r7, #4
 8005920:	6800      	ldr	r0, [r0, #0]
 8005922:	f000 ffae 	bl	8006882 <USB_WritePMA>
          ep->xfer_buff += len;
 8005926:	463b      	mov	r3, r7
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695a      	ldr	r2, [r3, #20]
 800592c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005930:	441a      	add	r2, r3
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6a1a      	ldr	r2, [r3, #32]
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	429a      	cmp	r2, r3
 8005946:	d909      	bls.n	800595c <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6a1a      	ldr	r2, [r3, #32]
 800594e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	621a      	str	r2, [r3, #32]
 800595a:	e008      	b.n	800596e <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 800595c:	463b      	mov	r3, r7
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2200      	movs	r2, #0
 800596c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800596e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8256 	beq.w	8005e24 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005978:	463b      	mov	r3, r7
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d172      	bne.n	8005a68 <USB_EPStartXfer+0xa70>
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	1d3b      	adds	r3, r7, #4
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	4413      	add	r3, r2
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599a:	463b      	mov	r3, r7
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	011a      	lsls	r2, r3, #4
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	4413      	add	r3, r2
 80059a6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d11a      	bne.n	80059ee <USB_EPStartXfer+0x9f6>
 80059b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e067      	b.n	8005abe <USB_EPStartXfer+0xac6>
 80059ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f2:	2b3e      	cmp	r3, #62	; 0x3e
 80059f4:	d819      	bhi.n	8005a2a <USB_EPStartXfer+0xa32>
 80059f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <USB_EPStartXfer+0xa1e>
 8005a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a10:	3301      	adds	r3, #1
 8005a12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e049      	b.n	8005abe <USB_EPStartXfer+0xac6>
 8005a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a34:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <USB_EPStartXfer+0xa52>
 8005a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a44:	3b01      	subs	r3, #1
 8005a46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	029b      	lsls	r3, r3, #10
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	e02a      	b.n	8005abe <USB_EPStartXfer+0xac6>
 8005a68:	463b      	mov	r3, r7
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d125      	bne.n	8005abe <USB_EPStartXfer+0xac6>
 8005a72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a76:	1d3a      	adds	r2, r7, #4
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	1d3b      	adds	r3, r7, #4
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4619      	mov	r1, r3
 8005a88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005a8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	440a      	add	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	463b      	mov	r3, r7
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	011a      	lsls	r2, r3, #4
 8005a9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005abe:	463b      	mov	r3, r7
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	891b      	ldrh	r3, [r3, #8]
 8005ac4:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6959      	ldr	r1, [r3, #20]
 8005ace:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005ad8:	1d38      	adds	r0, r7, #4
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	f000 fed1 	bl	8006882 <USB_WritePMA>
 8005ae0:	e1a0      	b.n	8005e24 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d17a      	bne.n	8005be2 <USB_EPStartXfer+0xbea>
 8005aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005af0:	1d3a      	adds	r2, r7, #4
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	1d3b      	adds	r3, r7, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4619      	mov	r1, r3
 8005b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b06:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	011a      	lsls	r2, r3, #4
 8005b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11a      	bne.n	8005b68 <USB_EPStartXfer+0xb70>
 8005b32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	801a      	strh	r2, [r3, #0]
 8005b66:	e067      	b.n	8005c38 <USB_EPStartXfer+0xc40>
 8005b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b6e:	d819      	bhi.n	8005ba4 <USB_EPStartXfer+0xbac>
 8005b70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <USB_EPStartXfer+0xb98>
 8005b86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	029b      	lsls	r3, r3, #10
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	e049      	b.n	8005c38 <USB_EPStartXfer+0xc40>
 8005ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <USB_EPStartXfer+0xbcc>
 8005bba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	029b      	lsls	r3, r3, #10
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	e02a      	b.n	8005c38 <USB_EPStartXfer+0xc40>
 8005be2:	463b      	mov	r3, r7
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d125      	bne.n	8005c38 <USB_EPStartXfer+0xc40>
 8005bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bf0:	1d3a      	adds	r2, r7, #4
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4619      	mov	r1, r3
 8005c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	463b      	mov	r3, r7
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c24:	f107 0320 	add.w	r3, r7, #32
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	f107 0320 	add.w	r3, r7, #32
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c38:	463b      	mov	r3, r7
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	891b      	ldrh	r3, [r3, #8]
 8005c3e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6959      	ldr	r1, [r3, #20]
 8005c48:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005c52:	1d38      	adds	r0, r7, #4
 8005c54:	6800      	ldr	r0, [r0, #0]
 8005c56:	f000 fe14 	bl	8006882 <USB_WritePMA>
          ep->xfer_buff += len;
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c64:	441a      	add	r2, r3
 8005c66:	463b      	mov	r3, r7
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	463b      	mov	r3, r7
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d909      	bls.n	8005c90 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	463b      	mov	r3, r7
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	621a      	str	r2, [r3, #32]
 8005c8e:	e008      	b.n	8005ca2 <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8005c90:	463b      	mov	r3, r7
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ca2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80bc 	beq.w	8005e24 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cac:	f107 031c 	add.w	r3, r7, #28
 8005cb0:	1d3a      	adds	r2, r7, #4
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d17a      	bne.n	8005db6 <USB_EPStartXfer+0xdbe>
 8005cc0:	f107 0318 	add.w	r3, r7, #24
 8005cc4:	1d3a      	adds	r2, r7, #4
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	1d3b      	adds	r3, r7, #4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f107 0318 	add.w	r3, r7, #24
 8005cda:	f107 0218 	add.w	r2, r7, #24
 8005cde:	6812      	ldr	r2, [r2, #0]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	011a      	lsls	r2, r3, #4
 8005cec:	f107 0318 	add.w	r3, r7, #24
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005cf8:	f107 0314 	add.w	r3, r7, #20
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11a      	bne.n	8005d3c <USB_EPStartXfer+0xd44>
 8005d06:	f107 0314 	add.w	r3, r7, #20
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	f107 0314 	add.w	r3, r7, #20
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	f107 0314 	add.w	r3, r7, #20
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e062      	b.n	8005e02 <USB_EPStartXfer+0xe0a>
 8005d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d40:	2b3e      	cmp	r3, #62	; 0x3e
 8005d42:	d819      	bhi.n	8005d78 <USB_EPStartXfer+0xd80>
 8005d44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <USB_EPStartXfer+0xd6c>
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d5e:	3301      	adds	r3, #1
 8005d60:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e044      	b.n	8005e02 <USB_EPStartXfer+0xe0a>
 8005d78:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d104      	bne.n	8005d98 <USB_EPStartXfer+0xda0>
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d92:	3b01      	subs	r3, #1
 8005d94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f107 0314 	add.w	r3, r7, #20
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	e025      	b.n	8005e02 <USB_EPStartXfer+0xe0a>
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d120      	bne.n	8005e02 <USB_EPStartXfer+0xe0a>
 8005dc0:	1d3b      	adds	r3, r7, #4
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	f107 031c 	add.w	r3, r7, #28
 8005dd0:	f107 021c 	add.w	r2, r7, #28
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	440a      	add	r2, r1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	463b      	mov	r3, r7
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	011a      	lsls	r2, r3, #4
 8005de2:	f107 031c 	add.w	r3, r7, #28
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4413      	add	r3, r2
 8005dea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005dee:	f107 0310 	add.w	r3, r7, #16
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f107 0310 	add.w	r3, r7, #16
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e02:	463b      	mov	r3, r7
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	895b      	ldrh	r3, [r3, #10]
 8005e08:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6959      	ldr	r1, [r3, #20]
 8005e12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005e1c:	1d38      	adds	r0, r7, #4
 8005e1e:	6800      	ldr	r0, [r0, #0]
 8005e20:	f000 fd2f 	bl	8006882 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	463b      	mov	r3, r7
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f107 020e 	add.w	r2, r7, #14
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e42:	8013      	strh	r3, [r2, #0]
 8005e44:	f107 030e 	add.w	r3, r7, #14
 8005e48:	f107 020e 	add.w	r2, r7, #14
 8005e4c:	8812      	ldrh	r2, [r2, #0]
 8005e4e:	f082 0210 	eor.w	r2, r2, #16
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	f107 030e 	add.w	r3, r7, #14
 8005e58:	f107 020e 	add.w	r2, r7, #14
 8005e5c:	8812      	ldrh	r2, [r2, #0]
 8005e5e:	f082 0220 	eor.w	r2, r2, #32
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	1d3b      	adds	r3, r7, #4
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	463b      	mov	r3, r7
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	441a      	add	r2, r3
 8005e72:	f107 030e 	add.w	r3, r7, #14
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
 8005e8c:	e3b5      	b.n	80065fa <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005e8e:	463b      	mov	r3, r7
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	7b1b      	ldrb	r3, [r3, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 8090 	bne.w	8005fba <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	463b      	mov	r3, r7
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d90e      	bls.n	8005ec8 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8005eaa:	463b      	mov	r3, r7
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ebe:	1ad2      	subs	r2, r2, r3
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	619a      	str	r2, [r3, #24]
 8005ec6:	e008      	b.n	8005eda <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ee2:	1d3b      	adds	r3, r7, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ef8:	463b      	mov	r3, r7
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	011a      	lsls	r2, r3, #4
 8005f00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f04:	4413      	add	r3, r2
 8005f06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d116      	bne.n	8005f44 <USB_EPStartXfer+0xf4c>
 8005f16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f40:	801a      	strh	r2, [r3, #0]
 8005f42:	e32c      	b.n	800659e <USB_EPStartXfer+0x15a6>
 8005f44:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f48:	2b3e      	cmp	r3, #62	; 0x3e
 8005f4a:	d818      	bhi.n	8005f7e <USB_EPStartXfer+0xf86>
 8005f4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d004      	beq.n	8005f6c <USB_EPStartXfer+0xf74>
 8005f62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f66:	3301      	adds	r3, #1
 8005f68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f6c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	029b      	lsls	r3, r3, #10
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f7a:	801a      	strh	r2, [r3, #0]
 8005f7c:	e30f      	b.n	800659e <USB_EPStartXfer+0x15a6>
 8005f7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <USB_EPStartXfer+0xfa6>
 8005f94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	029b      	lsls	r3, r3, #10
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	e2f1      	b.n	800659e <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005fba:	463b      	mov	r3, r7
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	78db      	ldrb	r3, [r3, #3]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	f040 818f 	bne.w	80062e4 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d175      	bne.n	80060bc <USB_EPStartXfer+0x10c4>
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe8:	4413      	add	r3, r2
 8005fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005fee:	463b      	mov	r3, r7
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	011a      	lsls	r2, r3, #4
 8005ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d116      	bne.n	800603c <USB_EPStartXfer+0x1044>
 800600e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	e065      	b.n	8006108 <USB_EPStartXfer+0x1110>
 800603c:	463b      	mov	r3, r7
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b3e      	cmp	r3, #62	; 0x3e
 8006044:	d81a      	bhi.n	800607c <USB_EPStartXfer+0x1084>
 8006046:	463b      	mov	r3, r7
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006052:	463b      	mov	r3, r7
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <USB_EPStartXfer+0x1072>
 8006060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006064:	3301      	adds	r3, #1
 8006066:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	b29b      	uxth	r3, r3
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e045      	b.n	8006108 <USB_EPStartXfer+0x1110>
 800607c:	463b      	mov	r3, r7
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006088:	463b      	mov	r3, r7
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <USB_EPStartXfer+0x10a8>
 8006096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609a:	3b01      	subs	r3, #1
 800609c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e025      	b.n	8006108 <USB_EPStartXfer+0x1110>
 80060bc:	463b      	mov	r3, r7
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d120      	bne.n	8006108 <USB_EPStartXfer+0x1110>
 80060c6:	1d3b      	adds	r3, r7, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	461a      	mov	r2, r3
 80060da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060de:	4413      	add	r3, r2
 80060e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80060e4:	463b      	mov	r3, r7
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	011a      	lsls	r2, r3, #4
 80060ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060f0:	4413      	add	r3, r2
 80060f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060fa:	463b      	mov	r3, r7
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006106:	801a      	strh	r2, [r3, #0]
 8006108:	1d3b      	adds	r3, r7, #4
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d175      	bne.n	8006206 <USB_EPStartXfer+0x120e>
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006122:	1d3b      	adds	r3, r7, #4
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006132:	4413      	add	r3, r2
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006138:	463b      	mov	r3, r7
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	011a      	lsls	r2, r3, #4
 8006140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006144:	4413      	add	r3, r2
 8006146:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800614a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800614e:	463b      	mov	r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d116      	bne.n	8006186 <USB_EPStartXfer+0x118e>
 8006158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006164:	b29a      	uxth	r2, r3
 8006166:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800617c:	b29a      	uxth	r2, r3
 800617e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e061      	b.n	800624a <USB_EPStartXfer+0x1252>
 8006186:	463b      	mov	r3, r7
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b3e      	cmp	r3, #62	; 0x3e
 800618e:	d81a      	bhi.n	80061c6 <USB_EPStartXfer+0x11ce>
 8006190:	463b      	mov	r3, r7
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	085b      	lsrs	r3, r3, #1
 8006198:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d004      	beq.n	80061b4 <USB_EPStartXfer+0x11bc>
 80061aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ae:	3301      	adds	r3, #1
 80061b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	029b      	lsls	r3, r3, #10
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e041      	b.n	800624a <USB_EPStartXfer+0x1252>
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061d2:	463b      	mov	r3, r7
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d104      	bne.n	80061ea <USB_EPStartXfer+0x11f2>
 80061e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061e4:	3b01      	subs	r3, #1
 80061e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	029b      	lsls	r3, r3, #10
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006202:	801a      	strh	r2, [r3, #0]
 8006204:	e021      	b.n	800624a <USB_EPStartXfer+0x1252>
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d11c      	bne.n	800624a <USB_EPStartXfer+0x1252>
 8006210:	1d3b      	adds	r3, r7, #4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006218:	b29b      	uxth	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006220:	4413      	add	r3, r2
 8006222:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	011a      	lsls	r2, r3, #4
 800622e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006232:	4413      	add	r3, r2
 8006234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006238:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006248:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 81a4 	beq.w	800659e <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800626a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800626e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <USB_EPStartXfer+0x128a>
 8006276:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10d      	bne.n	800629e <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006282:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 8187 	bne.w	800659e <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 8180 	bne.w	800659e <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	463b      	mov	r3, r7
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b8:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 80062bc:	1d3b      	adds	r3, r7, #4
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	463b      	mov	r3, r7
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]
 80062e2:	e15c      	b.n	800659e <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80062e4:	463b      	mov	r3, r7
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	f040 8155 	bne.w	800659a <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	463b      	mov	r3, r7
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d90e      	bls.n	800631e <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8006300:	463b      	mov	r3, r7
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 800630a:	463b      	mov	r3, r7
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	699a      	ldr	r2, [r3, #24]
 8006310:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006314:	1ad2      	subs	r2, r2, r3
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	619a      	str	r2, [r3, #24]
 800631c:	e008      	b.n	8006330 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8006328:	463b      	mov	r3, r7
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d16f      	bne.n	800641a <USB_EPStartXfer+0x1422>
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006342:	1d3b      	adds	r3, r7, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006352:	4413      	add	r3, r2
 8006354:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	011a      	lsls	r2, r3, #4
 8006360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006364:	4413      	add	r3, r2
 8006366:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800636a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800636e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006372:	2b00      	cmp	r3, #0
 8006374:	d116      	bne.n	80063a4 <USB_EPStartXfer+0x13ac>
 8006376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006382:	b29a      	uxth	r2, r3
 8006384:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800638e:	881b      	ldrh	r3, [r3, #0]
 8006390:	b29b      	uxth	r3, r3
 8006392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e05f      	b.n	8006464 <USB_EPStartXfer+0x146c>
 80063a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063a8:	2b3e      	cmp	r3, #62	; 0x3e
 80063aa:	d818      	bhi.n	80063de <USB_EPStartXfer+0x13e6>
 80063ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <USB_EPStartXfer+0x13d4>
 80063c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c6:	3301      	adds	r3, #1
 80063c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	029b      	lsls	r3, r3, #10
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063da:	801a      	strh	r2, [r3, #0]
 80063dc:	e042      	b.n	8006464 <USB_EPStartXfer+0x146c>
 80063de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063e2:	095b      	lsrs	r3, r3, #5
 80063e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <USB_EPStartXfer+0x1406>
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	3b01      	subs	r3, #1
 80063fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006402:	b29b      	uxth	r3, r3
 8006404:	029b      	lsls	r3, r3, #10
 8006406:	b29b      	uxth	r3, r3
 8006408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800640c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006410:	b29a      	uxth	r2, r3
 8006412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006416:	801a      	strh	r2, [r3, #0]
 8006418:	e024      	b.n	8006464 <USB_EPStartXfer+0x146c>
 800641a:	463b      	mov	r3, r7
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d11f      	bne.n	8006464 <USB_EPStartXfer+0x146c>
 8006424:	1d3b      	adds	r3, r7, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800642c:	1d3b      	adds	r3, r7, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006434:	b29b      	uxth	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	4413      	add	r3, r2
 800643e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006442:	463b      	mov	r3, r7
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800644e:	4413      	add	r3, r2
 8006450:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006454:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006458:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800645c:	b29a      	uxth	r2, r3
 800645e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d16f      	bne.n	8006556 <USB_EPStartXfer+0x155e>
 8006476:	1d3b      	adds	r3, r7, #4
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800648e:	4413      	add	r3, r2
 8006490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	011a      	lsls	r2, r3, #4
 800649c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064a0:	4413      	add	r3, r2
 80064a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d116      	bne.n	80064e0 <USB_EPStartXfer+0x14e8>
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064dc:	801a      	strh	r2, [r3, #0]
 80064de:	e05e      	b.n	800659e <USB_EPStartXfer+0x15a6>
 80064e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064e4:	2b3e      	cmp	r3, #62	; 0x3e
 80064e6:	d818      	bhi.n	800651a <USB_EPStartXfer+0x1522>
 80064e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d004      	beq.n	8006508 <USB_EPStartXfer+0x1510>
 80064fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006502:	3301      	adds	r3, #1
 8006504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006508:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29a      	uxth	r2, r3
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e041      	b.n	800659e <USB_EPStartXfer+0x15a6>
 800651a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <USB_EPStartXfer+0x1542>
 8006530:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006534:	3b01      	subs	r3, #1
 8006536:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800653a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800653e:	b29b      	uxth	r3, r3
 8006540:	029b      	lsls	r3, r3, #10
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654c:	b29a      	uxth	r2, r3
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	801a      	strh	r2, [r3, #0]
 8006554:	e023      	b.n	800659e <USB_EPStartXfer+0x15a6>
 8006556:	463b      	mov	r3, r7
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d11e      	bne.n	800659e <USB_EPStartXfer+0x15a6>
 8006560:	1d3b      	adds	r3, r7, #4
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006568:	b29b      	uxth	r3, r3
 800656a:	461a      	mov	r2, r3
 800656c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006570:	4413      	add	r3, r2
 8006572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006576:	463b      	mov	r3, r7
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006582:	4413      	add	r3, r2
 8006584:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800658c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e001      	b.n	800659e <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e02e      	b.n	80065fc <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800659e:	1d3b      	adds	r3, r7, #4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	463b      	mov	r3, r7
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80065bc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80065c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065c4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80065c8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80065cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	463b      	mov	r3, r7
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	441a      	add	r2, r3
 80065e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80065e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006606:	b480      	push	{r7}
 8006608:	b085      	sub	sp, #20
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d020      	beq.n	800665a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800662e:	81fb      	strh	r3, [r7, #14]
 8006630:	89fb      	ldrh	r3, [r7, #14]
 8006632:	f083 0310 	eor.w	r3, r3, #16
 8006636:	81fb      	strh	r3, [r7, #14]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	89fb      	ldrh	r3, [r7, #14]
 8006644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	b29b      	uxth	r3, r3
 8006656:	8013      	strh	r3, [r2, #0]
 8006658:	e01f      	b.n	800669a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	81bb      	strh	r3, [r7, #12]
 8006672:	89bb      	ldrh	r3, [r7, #12]
 8006674:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006678:	81bb      	strh	r3, [r7, #12]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	441a      	add	r2, r3
 8006684:	89bb      	ldrh	r3, [r7, #12]
 8006686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800668e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006696:	b29b      	uxth	r3, r3
 8006698:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b087      	sub	sp, #28
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	7b1b      	ldrb	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f040 809d 	bne.w	80067f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d04c      	beq.n	800675c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	82fb      	strh	r3, [r7, #22]
 80066d0:	8afb      	ldrh	r3, [r7, #22]
 80066d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01b      	beq.n	8006712 <USB_EPClearStall+0x6c>
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f0:	82bb      	strh	r3, [r7, #20]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8abb      	ldrh	r3, [r7, #20]
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	78db      	ldrb	r3, [r3, #3]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d06c      	beq.n	80067f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	881b      	ldrh	r3, [r3, #0]
 8006726:	b29b      	uxth	r3, r3
 8006728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006730:	827b      	strh	r3, [r7, #18]
 8006732:	8a7b      	ldrh	r3, [r7, #18]
 8006734:	f083 0320 	eor.w	r3, r3, #32
 8006738:	827b      	strh	r3, [r7, #18]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	441a      	add	r2, r3
 8006744:	8a7b      	ldrh	r3, [r7, #18]
 8006746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800674a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800674e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006756:	b29b      	uxth	r3, r3
 8006758:	8013      	strh	r3, [r2, #0]
 800675a:	e04b      	b.n	80067f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	823b      	strh	r3, [r7, #16]
 800676a:	8a3b      	ldrh	r3, [r7, #16]
 800676c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01b      	beq.n	80067ac <USB_EPClearStall+0x106>
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	b29b      	uxth	r3, r3
 8006782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678a:	81fb      	strh	r3, [r7, #14]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	441a      	add	r2, r3
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	81bb      	strh	r3, [r7, #12]
 80067c4:	89bb      	ldrh	r3, [r7, #12]
 80067c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067ca:	81bb      	strh	r3, [r7, #12]
 80067cc:	89bb      	ldrh	r3, [r7, #12]
 80067ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067d2:	81bb      	strh	r3, [r7, #12]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	89bb      	ldrh	r3, [r7, #12]
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d103      	bne.n	800681a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2280      	movs	r2, #128	; 0x80
 8006816:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	bc80      	pop	{r7}
 8006824:	4770      	bx	lr

08006826 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr

0800683a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800685c:	b29b      	uxth	r3, r3
 800685e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006860:	68fb      	ldr	r3, [r7, #12]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	bc80      	pop	{r7}
 800686a:	4770      	bx	lr

0800686c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006882:	b480      	push	{r7}
 8006884:	b08d      	sub	sp, #52	; 0x34
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	4611      	mov	r1, r2
 800688e:	461a      	mov	r2, r3
 8006890:	460b      	mov	r3, r1
 8006892:	80fb      	strh	r3, [r7, #6]
 8006894:	4613      	mov	r3, r2
 8006896:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006898:	88bb      	ldrh	r3, [r7, #4]
 800689a:	3301      	adds	r3, #1
 800689c:	085b      	lsrs	r3, r3, #1
 800689e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	005a      	lsls	r2, r3, #1
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ba:	e01e      	b.n	80068fa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	3301      	adds	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	3302      	adds	r3, #2
 80068e6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	3302      	adds	r3, #2
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	3301      	adds	r3, #1
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	3b01      	subs	r3, #1
 80068f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1dd      	bne.n	80068bc <USB_WritePMA+0x3a>
  }
}
 8006900:	bf00      	nop
 8006902:	3734      	adds	r7, #52	; 0x34
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800690a:	b480      	push	{r7}
 800690c:	b08b      	sub	sp, #44	; 0x2c
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	4611      	mov	r1, r2
 8006916:	461a      	mov	r2, r3
 8006918:	460b      	mov	r3, r1
 800691a:	80fb      	strh	r3, [r7, #6]
 800691c:	4613      	mov	r3, r2
 800691e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006920:	88bb      	ldrh	r3, [r7, #4]
 8006922:	085b      	lsrs	r3, r3, #1
 8006924:	b29b      	uxth	r3, r3
 8006926:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	005a      	lsls	r2, r3, #1
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800693c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
 8006942:	e01b      	b.n	800697c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	3302      	adds	r3, #2
 8006950:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	3301      	adds	r3, #1
 800695e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	b2da      	uxtb	r2, r3
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	3301      	adds	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	3302      	adds	r3, #2
 8006974:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006978:	3b01      	subs	r3, #1
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e0      	bne.n	8006944 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006982:	88bb      	ldrh	r3, [r7, #4]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	701a      	strb	r2, [r3, #0]
  }
}
 800699e:	bf00      	nop
 80069a0:	372c      	adds	r7, #44	; 0x2c
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr

080069a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069ac:	4904      	ldr	r1, [pc, #16]	; (80069c0 <MX_FATFS_Init+0x18>)
 80069ae:	4805      	ldr	r0, [pc, #20]	; (80069c4 <MX_FATFS_Init+0x1c>)
 80069b0:	f002 fd96 	bl	80094e0 <FATFS_LinkDriver>
 80069b4:	4603      	mov	r3, r0
 80069b6:	461a      	mov	r2, r3
 80069b8:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <MX_FATFS_Init+0x20>)
 80069ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069bc:	bf00      	nop
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20002cf8 	.word	0x20002cf8
 80069c4:	20000030 	.word	0x20000030
 80069c8:	20002cfc 	.word	0x20002cfc

080069cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	4603      	mov	r3, r0
 80069d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <USER_initialize+0x20>)
 80069d8:	2201      	movs	r2, #1
 80069da:	701a      	strb	r2, [r3, #0]
    return Stat;
 80069dc:	4b03      	ldr	r3, [pc, #12]	; (80069ec <USER_initialize+0x20>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bc80      	pop	{r7}
 80069ea:	4770      	bx	lr
 80069ec:	2000002d 	.word	0x2000002d

080069f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <USER_status+0x20>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a00:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <USER_status+0x20>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	2000002d 	.word	0x2000002d

08006a14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	607a      	str	r2, [r7, #4]
 8006a1e:	603b      	str	r3, [r7, #0]
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006a24:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006a40:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr

08006a4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	4603      	mov	r3, r0
 8006a54:	603a      	str	r2, [r7, #0]
 8006a56:	71fb      	strb	r3, [r7, #7]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
    return res;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7c1b      	ldrb	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d115      	bne.n	8006aac <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a84:	2202      	movs	r2, #2
 8006a86:	2101      	movs	r1, #1
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f006 fa5a 	bl	800cf42 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006a96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	2181      	movs	r1, #129	; 0x81
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f006 fa4f 	bl	800cf42 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006aaa:	e012      	b.n	8006ad2 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006aac:	2340      	movs	r3, #64	; 0x40
 8006aae:	2202      	movs	r2, #2
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f006 fa45 	bl	800cf42 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006ac0:	2340      	movs	r3, #64	; 0x40
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	2181      	movs	r1, #129	; 0x81
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f006 fa3b 	bl	800cf42 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006ad2:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006ad6:	f006 fb7b 	bl	800d1d0 <USBD_static_malloc>
 8006ada:	4602      	mov	r2, r0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006aec:	2302      	movs	r3, #2
 8006aee:	e003      	b.n	8006af8 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9d9 	bl	8006ea8 <MSC_BOT_Init>

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f006 fa3d 	bl	800cf8e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006b1c:	2181      	movs	r1, #129	; 0x81
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f006 fa35 	bl	800cf8e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa06 	bl	8006f3c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d009      	beq.n	8006b4e <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b40:	4618      	mov	r0, r3
 8006b42:	f006 fb51 	bl	800d1e8 <USBD_static_free>
    pdev->pClassData  = NULL;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b68:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04d      	beq.n	8006c1a <USBD_MSC_Setup+0xc2>
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	f040 8113 	bne.w	8006daa <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	785b      	ldrb	r3, [r3, #1]
 8006b88:	2bfe      	cmp	r3, #254	; 0xfe
 8006b8a:	d002      	beq.n	8006b92 <USBD_MSC_Setup+0x3a>
 8006b8c:	2bff      	cmp	r3, #255	; 0xff
 8006b8e:	d024      	beq.n	8006bda <USBD_MSC_Setup+0x82>
 8006b90:	e03b      	b.n	8006c0a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	885b      	ldrh	r3, [r3, #2]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d118      	bne.n	8006bcc <USBD_MSC_Setup+0x74>
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d114      	bne.n	8006bcc <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da0f      	bge.n	8006bcc <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	4798      	blx	r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f002 fbbd 	bl	8009344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bca:	e025      	b.n	8006c18 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f002 fb4e 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8006bd8:	e01e      	b.n	8006c18 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	885b      	ldrh	r3, [r3, #2]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10c      	bne.n	8006bfc <USBD_MSC_Setup+0xa4>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	88db      	ldrh	r3, [r3, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d108      	bne.n	8006bfc <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	db03      	blt.n	8006bfc <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f987 	bl	8006f08 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bfa:	e00d      	b.n	8006c18 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f002 fb36 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c04:	2302      	movs	r3, #2
 8006c06:	75fb      	strb	r3, [r7, #23]
          break;
 8006c08:	e006      	b.n	8006c18 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 fb2f 	bl	8009270 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c12:	2302      	movs	r3, #2
 8006c14:	75fb      	strb	r3, [r7, #23]
          break;
 8006c16:	bf00      	nop
      }
      break;
 8006c18:	e0ce      	b.n	8006db8 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b0b      	cmp	r3, #11
 8006c20:	f200 80bb 	bhi.w	8006d9a <USBD_MSC_Setup+0x242>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <USBD_MSC_Setup+0xd4>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c5d 	.word	0x08006c5d
 8006c30:	08006cd3 	.word	0x08006cd3
 8006c34:	08006d9b 	.word	0x08006d9b
 8006c38:	08006d9b 	.word	0x08006d9b
 8006c3c:	08006d9b 	.word	0x08006d9b
 8006c40:	08006d9b 	.word	0x08006d9b
 8006c44:	08006d9b 	.word	0x08006d9b
 8006c48:	08006d9b 	.word	0x08006d9b
 8006c4c:	08006d9b 	.word	0x08006d9b
 8006c50:	08006d9b 	.word	0x08006d9b
 8006c54:	08006c85 	.word	0x08006c85
 8006c58:	08006cad 	.word	0x08006cad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d107      	bne.n	8006c76 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c66:	f107 030e 	add.w	r3, r7, #14
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 fb68 	bl	8009344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c74:	e098      	b.n	8006da8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f002 faf9 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	75fb      	strb	r3, [r7, #23]
          break;
 8006c82:	e091      	b.n	8006da8 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d107      	bne.n	8006c9e <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3304      	adds	r3, #4
 8006c92:	2201      	movs	r2, #1
 8006c94:	4619      	mov	r1, r3
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f002 fb54 	bl	8009344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c9c:	e084      	b.n	8006da8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f002 fae5 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8006caa:	e07d      	b.n	8006da8 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d106      	bne.n	8006cc4 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	885b      	ldrh	r3, [r3, #2]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc2:	e071      	b.n	8006da8 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 fad2 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd0:	e06a      	b.n	8006da8 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	889b      	ldrh	r3, [r3, #4]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f006 f976 	bl	800cfcc <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	889b      	ldrh	r3, [r3, #4]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f006 f950 	bl	800cf8e <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	889b      	ldrh	r3, [r3, #4]
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	da23      	bge.n	8006d40 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	889b      	ldrh	r3, [r3, #4]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 020f 	and.w	r2, r3, #15
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3318      	adds	r3, #24
 8006d10:	2200      	movs	r2, #0
 8006d12:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	7c1b      	ldrb	r3, [r3, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d107      	bne.n	8006d2c <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d20:	2202      	movs	r2, #2
 8006d22:	2181      	movs	r1, #129	; 0x81
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f006 f90c 	bl	800cf42 <USBD_LL_OpenEP>
 8006d2a:	e005      	b.n	8006d38 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006d2c:	2340      	movs	r3, #64	; 0x40
 8006d2e:	2202      	movs	r2, #2
 8006d30:	2181      	movs	r1, #129	; 0x81
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f006 f905 	bl	800cf42 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d3e:	e024      	b.n	8006d8a <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	889b      	ldrh	r3, [r3, #4]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	f003 020f 	and.w	r2, r3, #15
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	7c1b      	ldrb	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f006 f8e7 	bl	800cf42 <USBD_LL_OpenEP>
 8006d74:	e005      	b.n	8006d82 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	2202      	movs	r2, #2
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f006 f8e0 	bl	800cf42 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	889b      	ldrh	r3, [r3, #4]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa50 	bl	8007238 <MSC_BOT_CplClrFeature>
          break;
 8006d98:	e006      	b.n	8006da8 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f002 fa67 	bl	8009270 <USBD_CtlError>
          ret = USBD_FAIL;
 8006da2:	2302      	movs	r3, #2
 8006da4:	75fb      	strb	r3, [r7, #23]
          break;
 8006da6:	bf00      	nop
      }
      break;
 8006da8:	e006      	b.n	8006db8 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 fa5f 	bl	8009270 <USBD_CtlError>
      ret = USBD_FAIL;
 8006db2:	2302      	movs	r3, #2
 8006db4:	75fb      	strb	r3, [r7, #23]
      break;
 8006db6:	bf00      	nop
  }

  return ret;
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop

08006dc4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f8c1 	bl	8006f5c <MSC_BOT_DataIn>

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 f8e2 	bl	8006fbe <MSC_BOT_DataOut>

  return USBD_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006e12:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	2000007c 	.word	0x2000007c

08006e24 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006e32:	4b03      	ldr	r3, [pc, #12]	; (8006e40 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bc80      	pop	{r7}
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	2000009c 	.word	0x2000009c

08006e44 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006e52:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bc80      	pop	{r7}
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	200000bc 	.word	0x200000bc

08006e64 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	220a      	movs	r2, #10
 8006e70:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006e72:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	200000dc 	.word	0x200000dc

08006e84 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bc80      	pop	{r7}
 8006ea6:	4770      	bx	lr

08006ea8 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb6:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2000      	movs	r0, #0
 8006ede:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f006 f872 	bl	800cfcc <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006ee8:	2181      	movs	r1, #129	; 0x81
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f006 f86e 	bl	800cfcc <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006ef6:	231f      	movs	r3, #31
 8006ef8:	2101      	movs	r1, #1
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f006 f931 	bl	800d162 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f16:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2201      	movs	r2, #1
 8006f22:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f2a:	231f      	movs	r3, #31
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f006 f917 	bl	800d162 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4a:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	721a      	strb	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	7a1b      	ldrb	r3, [r3, #8]
 8006f74:	2b02      	cmp	r3, #2
 8006f76:	d004      	beq.n	8006f82 <MSC_BOT_DataIn+0x26>
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	db19      	blt.n	8006fb0 <MSC_BOT_DataIn+0x54>
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	dc17      	bgt.n	8006fb0 <MSC_BOT_DataIn+0x54>
 8006f80:	e011      	b.n	8006fa6 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006f8e:	461a      	mov	r2, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f979 	bl	8007288 <SCSI_ProcessCmd>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	da0b      	bge.n	8006fb4 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 f8f0 	bl	8007184 <MSC_BOT_SendCSW>
      }
      break;
 8006fa4:	e006      	b.n	8006fb4 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f8eb 	bl	8007184 <MSC_BOT_SendCSW>
      break;
 8006fae:	e002      	b.n	8006fb6 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <MSC_BOT_DataIn+0x5a>
      break;
 8006fb4:	bf00      	nop
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	7a1b      	ldrb	r3, [r3, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <MSC_BOT_DataOut+0x22>
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d004      	beq.n	8006fe8 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006fde:	e015      	b.n	800700c <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f817 	bl	8007014 <MSC_BOT_CBW_Decode>
      break;
 8006fe6:	e011      	b.n	800700c <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f946 	bl	8007288 <SCSI_ProcessCmd>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da03      	bge.n	800700a <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007002:	2101      	movs	r1, #1
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8bd 	bl	8007184 <MSC_BOT_SendCSW>
      break;
 800700a:	bf00      	nop
  }
}
 800700c:	bf00      	nop
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007022:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800703c:	2101      	movs	r1, #1
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f006 f8b2 	bl	800d1a8 <USBD_LL_GetRxDataSize>
 8007044:	4603      	mov	r3, r0
 8007046:	2b1f      	cmp	r3, #31
 8007048:	d114      	bne.n	8007074 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007050:	4a32      	ldr	r2, [pc, #200]	; (800711c <MSC_BOT_CBW_Decode+0x108>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10e      	bne.n	8007074 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800705c:	2b01      	cmp	r3, #1
 800705e:	d809      	bhi.n	8007074 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 8007066:	2b00      	cmp	r3, #0
 8007068:	d004      	beq.n	8007074 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8007070:	2b10      	cmp	r3, #16
 8007072:	d90e      	bls.n	8007092 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800707a:	2320      	movs	r3, #32
 800707c:	2205      	movs	r2, #5
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fc48 	bl	8007914 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2202      	movs	r2, #2
 8007088:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8a6 	bl	80071dc <MSC_BOT_Abort>
 8007090:	e041      	b.n	8007116 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800709e:	461a      	mov	r2, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f8f1 	bl	8007288 <SCSI_ProcessCmd>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da0c      	bge.n	80070c6 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	7a1b      	ldrb	r3, [r3, #8]
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	d104      	bne.n	80070be <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80070b4:	2101      	movs	r1, #1
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f864 	bl	8007184 <MSC_BOT_SendCSW>
 80070bc:	e02b      	b.n	8007116 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f88c 	bl	80071dc <MSC_BOT_Abort>
 80070c4:	e027      	b.n	8007116 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	7a1b      	ldrb	r3, [r3, #8]
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d022      	beq.n	8007114 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d01e      	beq.n	8007114 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d01a      	beq.n	8007114 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	895b      	ldrh	r3, [r3, #10]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d009      	beq.n	80070fa <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f103 010c 	add.w	r1, r3, #12
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	895b      	ldrh	r3, [r3, #10]
 80070f0:	461a      	mov	r2, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f814 	bl	8007120 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80070f8:	e00d      	b.n	8007116 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	895b      	ldrh	r3, [r3, #10]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007102:	2100      	movs	r1, #0
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f83d 	bl	8007184 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800710a:	e004      	b.n	8007116 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f865 	bl	80071dc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007112:	e000      	b.n	8007116 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007114:	bf00      	nop
    }
  }
}
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	43425355 	.word	0x43425355

08007120 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007134:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	429a      	cmp	r2, r3
 8007140:	d204      	bcs.n	800714c <MSC_BOT_SendData+0x2c>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007148:	b29b      	uxth	r3, r3
 800714a:	e000      	b.n	800714e <MSC_BOT_SendData+0x2e>
 800714c:	88fb      	ldrh	r3, [r7, #6]
 800714e:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007156:	88fb      	ldrh	r3, [r7, #6]
 8007158:	1ad2      	subs	r2, r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2204      	movs	r2, #4
 800716c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800716e:	8a7b      	ldrh	r3, [r7, #18]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	2181      	movs	r1, #129	; 0x81
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f005 ffd1 	bl	800d11c <USBD_LL_Transmit>
}
 800717a:	bf00      	nop
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007196:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4a0f      	ldr	r2, [pc, #60]	; (80071d8 <MSC_BOT_SendCSW+0x54>)
 800719c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	78fa      	ldrb	r2, [r7, #3]
 80071a4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 80071b4:	230d      	movs	r3, #13
 80071b6:	2181      	movs	r1, #129	; 0x81
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f005 ffaf 	bl	800d11c <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 80071c4:	231f      	movs	r3, #31
 80071c6:	2101      	movs	r1, #1
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f005 ffca 	bl	800d162 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80071ce:	bf00      	nop
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	53425355 	.word	0x53425355

080071dc <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ea:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10c      	bne.n	8007210 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007208:	2101      	movs	r1, #1
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f005 fefd 	bl	800d00a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007210:	2181      	movs	r1, #129	; 0x81
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f005 fef9 	bl	800d00a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	7a5b      	ldrb	r3, [r3, #9]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d107      	bne.n	8007230 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007226:	231f      	movs	r3, #31
 8007228:	2101      	movs	r1, #1
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f005 ff99 	bl	800d162 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7a5b      	ldrb	r3, [r3, #9]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d107      	bne.n	8007264 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007254:	2181      	movs	r1, #129	; 0x81
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f005 fed7 	bl	800d00a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	725a      	strb	r2, [r3, #9]
 8007262:	e00d      	b.n	8007280 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007268:	2b00      	cmp	r3, #0
 800726a:	da08      	bge.n	800727e <MSC_BOT_CplClrFeature+0x46>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	7a5b      	ldrb	r3, [r3, #9]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d004      	beq.n	800727e <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007274:	2101      	movs	r1, #1
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7ff ff84 	bl	8007184 <MSC_BOT_SendCSW>
 800727c:	e000      	b.n	8007280 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 800727e:	bf00      	nop
  }
}
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	460b      	mov	r3, r1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b5a      	cmp	r3, #90	; 0x5a
 800729c:	f200 810e 	bhi.w	80074bc <SCSI_ProcessCmd+0x234>
 80072a0:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <SCSI_ProcessCmd+0x20>)
 80072a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a6:	bf00      	nop
 80072a8:	08007415 	.word	0x08007415
 80072ac:	080074bd 	.word	0x080074bd
 80072b0:	080074bd 	.word	0x080074bd
 80072b4:	08007423 	.word	0x08007423
 80072b8:	080074bd 	.word	0x080074bd
 80072bc:	080074bd 	.word	0x080074bd
 80072c0:	080074bd 	.word	0x080074bd
 80072c4:	080074bd 	.word	0x080074bd
 80072c8:	080074bd 	.word	0x080074bd
 80072cc:	080074bd 	.word	0x080074bd
 80072d0:	080074bd 	.word	0x080074bd
 80072d4:	080074bd 	.word	0x080074bd
 80072d8:	080074bd 	.word	0x080074bd
 80072dc:	080074bd 	.word	0x080074bd
 80072e0:	080074bd 	.word	0x080074bd
 80072e4:	080074bd 	.word	0x080074bd
 80072e8:	080074bd 	.word	0x080074bd
 80072ec:	080074bd 	.word	0x080074bd
 80072f0:	08007431 	.word	0x08007431
 80072f4:	080074bd 	.word	0x080074bd
 80072f8:	080074bd 	.word	0x080074bd
 80072fc:	080074bd 	.word	0x080074bd
 8007300:	080074bd 	.word	0x080074bd
 8007304:	080074bd 	.word	0x080074bd
 8007308:	080074bd 	.word	0x080074bd
 800730c:	080074bd 	.word	0x080074bd
 8007310:	0800745b 	.word	0x0800745b
 8007314:	0800743f 	.word	0x0800743f
 8007318:	080074bd 	.word	0x080074bd
 800731c:	080074bd 	.word	0x080074bd
 8007320:	0800744d 	.word	0x0800744d
 8007324:	080074bd 	.word	0x080074bd
 8007328:	080074bd 	.word	0x080074bd
 800732c:	080074bd 	.word	0x080074bd
 8007330:	080074bd 	.word	0x080074bd
 8007334:	08007477 	.word	0x08007477
 8007338:	080074bd 	.word	0x080074bd
 800733c:	08007485 	.word	0x08007485
 8007340:	080074bd 	.word	0x080074bd
 8007344:	080074bd 	.word	0x080074bd
 8007348:	08007493 	.word	0x08007493
 800734c:	080074bd 	.word	0x080074bd
 8007350:	080074a1 	.word	0x080074a1
 8007354:	080074bd 	.word	0x080074bd
 8007358:	080074bd 	.word	0x080074bd
 800735c:	080074bd 	.word	0x080074bd
 8007360:	080074bd 	.word	0x080074bd
 8007364:	080074af 	.word	0x080074af
 8007368:	080074bd 	.word	0x080074bd
 800736c:	080074bd 	.word	0x080074bd
 8007370:	080074bd 	.word	0x080074bd
 8007374:	080074bd 	.word	0x080074bd
 8007378:	080074bd 	.word	0x080074bd
 800737c:	080074bd 	.word	0x080074bd
 8007380:	080074bd 	.word	0x080074bd
 8007384:	080074bd 	.word	0x080074bd
 8007388:	080074bd 	.word	0x080074bd
 800738c:	080074bd 	.word	0x080074bd
 8007390:	080074bd 	.word	0x080074bd
 8007394:	080074bd 	.word	0x080074bd
 8007398:	080074bd 	.word	0x080074bd
 800739c:	080074bd 	.word	0x080074bd
 80073a0:	080074bd 	.word	0x080074bd
 80073a4:	080074bd 	.word	0x080074bd
 80073a8:	080074bd 	.word	0x080074bd
 80073ac:	080074bd 	.word	0x080074bd
 80073b0:	080074bd 	.word	0x080074bd
 80073b4:	080074bd 	.word	0x080074bd
 80073b8:	080074bd 	.word	0x080074bd
 80073bc:	080074bd 	.word	0x080074bd
 80073c0:	080074bd 	.word	0x080074bd
 80073c4:	080074bd 	.word	0x080074bd
 80073c8:	080074bd 	.word	0x080074bd
 80073cc:	080074bd 	.word	0x080074bd
 80073d0:	080074bd 	.word	0x080074bd
 80073d4:	080074bd 	.word	0x080074bd
 80073d8:	080074bd 	.word	0x080074bd
 80073dc:	080074bd 	.word	0x080074bd
 80073e0:	080074bd 	.word	0x080074bd
 80073e4:	080074bd 	.word	0x080074bd
 80073e8:	080074bd 	.word	0x080074bd
 80073ec:	080074bd 	.word	0x080074bd
 80073f0:	080074bd 	.word	0x080074bd
 80073f4:	080074bd 	.word	0x080074bd
 80073f8:	080074bd 	.word	0x080074bd
 80073fc:	080074bd 	.word	0x080074bd
 8007400:	080074bd 	.word	0x080074bd
 8007404:	080074bd 	.word	0x080074bd
 8007408:	080074bd 	.word	0x080074bd
 800740c:	080074bd 	.word	0x080074bd
 8007410:	08007469 	.word	0x08007469
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4619      	mov	r1, r3
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f85c 	bl	80074d8 <SCSI_TestUnitReady>
      break;
 8007420:	e055      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4619      	mov	r1, r3
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fa09 	bl	8007840 <SCSI_RequestSense>
      break;
 800742e:	e04e      	b.n	80074ce <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007430:	7afb      	ldrb	r3, [r7, #11]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	4619      	mov	r1, r3
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f888 	bl	800754c <SCSI_Inquiry>
      break;
 800743c:	e047      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	4619      	mov	r1, r3
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f000 fa9e 	bl	8007986 <SCSI_StartStopUnit>
      break;
 800744a:	e040      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4619      	mov	r1, r3
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fa97 	bl	8007986 <SCSI_StartStopUnit>
      break;
 8007458:	e039      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f99d 	bl	80077a0 <SCSI_ModeSense6>
      break;
 8007466:	e032      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007468:	7afb      	ldrb	r3, [r7, #11]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	4619      	mov	r1, r3
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f9be 	bl	80077f0 <SCSI_ModeSense10>
      break;
 8007474:	e02b      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	4619      	mov	r1, r3
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f92a 	bl	80076d6 <SCSI_ReadFormatCapacity>
      break;
 8007482:	e024      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 8007484:	7afb      	ldrb	r3, [r7, #11]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	4619      	mov	r1, r3
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f8bc 	bl	8007608 <SCSI_ReadCapacity10>
      break;
 8007490:	e01d      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 8007492:	7afb      	ldrb	r3, [r7, #11]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	4619      	mov	r1, r3
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 fa88 	bl	80079ae <SCSI_Read10>
      break;
 800749e:	e016      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80074a0:	7afb      	ldrb	r3, [r7, #11]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4619      	mov	r1, r3
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fb0d 	bl	8007ac6 <SCSI_Write10>
      break;
 80074ac:	e00f      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fbb6 	bl	8007c26 <SCSI_Verify10>
      break;
 80074ba:	e008      	b.n	80074ce <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80074bc:	7af9      	ldrb	r1, [r7, #11]
 80074be:	2320      	movs	r3, #32
 80074c0:	2205      	movs	r2, #5
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 fa26 	bl	8007914 <SCSI_SenseCode>
      return -1;
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	e000      	b.n	80074d0 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	460b      	mov	r3, r1
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ec:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80074fe:	2320      	movs	r3, #32
 8007500:	2205      	movs	r2, #5
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fa06 	bl	8007914 <SCSI_SenseCode>

    return -1;
 8007508:	f04f 33ff 	mov.w	r3, #4294967295
 800750c:	e019      	b.n	8007542 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	7afa      	ldrb	r2, [r7, #11]
 8007518:	4610      	mov	r0, r2
 800751a:	4798      	blx	r3
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007522:	7af9      	ldrb	r1, [r7, #11]
 8007524:	233a      	movs	r3, #58	; 0x3a
 8007526:	2202      	movs	r2, #2
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f9f3 	bl	8007914 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2205      	movs	r2, #5
 8007532:	721a      	strb	r2, [r3, #8]

    return -1;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	e003      	b.n	8007542 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2200      	movs	r2, #0
 800753e:	815a      	strh	r2, [r3, #10]

  return 0;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 800754c:	b480      	push	{r7}
 800754e:	b089      	sub	sp, #36	; 0x24
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	460b      	mov	r3, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007560:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3301      	adds	r3, #1
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d014      	beq.n	800759a <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007570:	2307      	movs	r3, #7
 8007572:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	8bfa      	ldrh	r2, [r7, #30]
 8007578:	815a      	strh	r2, [r3, #10]

    while (len)
 800757a:	e00a      	b.n	8007592 <SCSI_Inquiry+0x46>
    {
      len--;
 800757c:	8bfb      	ldrh	r3, [r7, #30]
 800757e:	3b01      	subs	r3, #1
 8007580:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 8007582:	8bfb      	ldrh	r3, [r7, #30]
 8007584:	8bfa      	ldrh	r2, [r7, #30]
 8007586:	491f      	ldr	r1, [pc, #124]	; (8007604 <SCSI_Inquiry+0xb8>)
 8007588:	5c89      	ldrb	r1, [r1, r2]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	4413      	add	r3, r2
 800758e:	460a      	mov	r2, r1
 8007590:	731a      	strb	r2, [r3, #12]
    while (len)
 8007592:	8bfb      	ldrh	r3, [r7, #30]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1f1      	bne.n	800757c <SCSI_Inquiry+0x30>
 8007598:	e02e      	b.n	80075f8 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a0:	69d9      	ldr	r1, [r3, #28]
 80075a2:	7afa      	ldrb	r2, [r7, #11]
 80075a4:	4613      	mov	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	3304      	adds	r3, #4
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3305      	adds	r3, #5
 80075ba:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	8bfa      	ldrh	r2, [r7, #30]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d303      	bcc.n	80075d2 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	8bfa      	ldrh	r2, [r7, #30]
 80075d6:	815a      	strh	r2, [r3, #10]

    while (len)
 80075d8:	e00b      	b.n	80075f2 <SCSI_Inquiry+0xa6>
    {
      len--;
 80075da:	8bfb      	ldrh	r3, [r7, #30]
 80075dc:	3b01      	subs	r3, #1
 80075de:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80075e0:	8bfb      	ldrh	r3, [r7, #30]
 80075e2:	8bfa      	ldrh	r2, [r7, #30]
 80075e4:	6979      	ldr	r1, [r7, #20]
 80075e6:	440a      	add	r2, r1
 80075e8:	7811      	ldrb	r1, [r2, #0]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	4413      	add	r3, r2
 80075ee:	460a      	mov	r2, r1
 80075f0:	731a      	strb	r2, [r3, #12]
    while (len)
 80075f2:	8bfb      	ldrh	r3, [r7, #30]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f0      	bne.n	80075da <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3724      	adds	r7, #36	; 0x24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	0800d4e8 	.word	0x0800d4e8

08007608 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	460b      	mov	r3, r1
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	697a      	ldr	r2, [r7, #20]
 8007628:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8007632:	7af8      	ldrb	r0, [r7, #11]
 8007634:	4798      	blx	r3
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d008      	beq.n	800764e <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800763c:	7af9      	ldrb	r1, [r7, #11]
 800763e:	233a      	movs	r3, #58	; 0x3a
 8007640:	2202      	movs	r2, #2
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 f966 	bl	8007914 <SCSI_SenseCode>
    return -1;
 8007648:	f04f 33ff 	mov.w	r3, #4294967295
 800764c:	e03f      	b.n	80076ce <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007654:	3b01      	subs	r3, #1
 8007656:	0e1b      	lsrs	r3, r3, #24
 8007658:	b2da      	uxtb	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007664:	3b01      	subs	r3, #1
 8007666:	0c1b      	lsrs	r3, r3, #16
 8007668:	b2da      	uxtb	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007674:	3b01      	subs	r3, #1
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	b2da      	uxtb	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007684:	b2db      	uxtb	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b2da      	uxtb	r2, r3
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007694:	161b      	asrs	r3, r3, #24
 8007696:	b2da      	uxtb	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076a2:	141b      	asrs	r3, r3, #16
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2208      	movs	r2, #8
 80076ca:	815a      	strh	r2, [r3, #10]
    return 0;
 80076cc:	2300      	movs	r3, #0
  }
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b088      	sub	sp, #32
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	460b      	mov	r3, r1
 80076e0:	607a      	str	r2, [r7, #4]
 80076e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ea:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 80076ec:	2300      	movs	r3, #0
 80076ee:	83fb      	strh	r3, [r7, #30]
 80076f0:	e007      	b.n	8007702 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80076f2:	8bfb      	ldrh	r3, [r7, #30]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	4413      	add	r3, r2
 80076f8:	2200      	movs	r2, #0
 80076fa:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 80076fc:	8bfb      	ldrh	r3, [r7, #30]
 80076fe:	3301      	adds	r3, #1
 8007700:	83fb      	strh	r3, [r7, #30]
 8007702:	8bfb      	ldrh	r3, [r7, #30]
 8007704:	2b0b      	cmp	r3, #11
 8007706:	d9f4      	bls.n	80076f2 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f107 0216 	add.w	r2, r7, #22
 8007714:	f107 0110 	add.w	r1, r7, #16
 8007718:	7af8      	ldrb	r0, [r7, #11]
 800771a:	4798      	blx	r3
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d008      	beq.n	8007734 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007722:	7af9      	ldrb	r1, [r7, #11]
 8007724:	233a      	movs	r3, #58	; 0x3a
 8007726:	2202      	movs	r2, #2
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f8f3 	bl	8007914 <SCSI_SenseCode>
    return -1;
 800772e:	f04f 33ff 	mov.w	r3, #4294967295
 8007732:	e030      	b.n	8007796 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	2208      	movs	r2, #8
 8007738:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3b01      	subs	r3, #1
 800773e:	0e1b      	lsrs	r3, r3, #24
 8007740:	b2da      	uxtb	r2, r3
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3b01      	subs	r3, #1
 800774a:	0c1b      	lsrs	r3, r3, #16
 800774c:	b2da      	uxtb	r2, r3
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3b01      	subs	r3, #1
 8007756:	0a1b      	lsrs	r3, r3, #8
 8007758:	b2da      	uxtb	r2, r3
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	b2db      	uxtb	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b2da      	uxtb	r2, r3
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2202      	movs	r2, #2
 800776e:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007770:	8afb      	ldrh	r3, [r7, #22]
 8007772:	141b      	asrs	r3, r3, #16
 8007774:	b2da      	uxtb	r2, r3
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800777a:	8afb      	ldrh	r3, [r7, #22]
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	b29b      	uxth	r3, r3
 8007780:	b2da      	uxtb	r2, r3
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007786:	8afb      	ldrh	r3, [r7, #22]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	220c      	movs	r2, #12
 8007792:	815a      	strh	r2, [r3, #10]
    return 0;
 8007794:	2300      	movs	r3, #0
  }
}
 8007796:	4618      	mov	r0, r3
 8007798:	3720      	adds	r7, #32
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	460b      	mov	r3, r1
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b4:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80077b6:	2308      	movs	r3, #8
 80077b8:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	8afa      	ldrh	r2, [r7, #22]
 80077be:	815a      	strh	r2, [r3, #10]

  while (len)
 80077c0:	e00a      	b.n	80077d8 <SCSI_ModeSense6+0x38>
  {
    len--;
 80077c2:	8afb      	ldrh	r3, [r7, #22]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80077c8:	8afb      	ldrh	r3, [r7, #22]
 80077ca:	8afa      	ldrh	r2, [r7, #22]
 80077cc:	4907      	ldr	r1, [pc, #28]	; (80077ec <SCSI_ModeSense6+0x4c>)
 80077ce:	5c89      	ldrb	r1, [r1, r2]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4413      	add	r3, r2
 80077d4:	460a      	mov	r2, r1
 80077d6:	731a      	strb	r2, [r3, #12]
  while (len)
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f1      	bne.n	80077c2 <SCSI_ModeSense6+0x22>
  }
  return 0;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bc80      	pop	{r7}
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	0800d4f0 	.word	0x0800d4f0

080077f0 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	460b      	mov	r3, r1
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 80077fe:	2308      	movs	r3, #8
 8007800:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007808:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	8afa      	ldrh	r2, [r7, #22]
 800780e:	815a      	strh	r2, [r3, #10]

  while (len)
 8007810:	e00a      	b.n	8007828 <SCSI_ModeSense10+0x38>
  {
    len--;
 8007812:	8afb      	ldrh	r3, [r7, #22]
 8007814:	3b01      	subs	r3, #1
 8007816:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007818:	8afb      	ldrh	r3, [r7, #22]
 800781a:	8afa      	ldrh	r2, [r7, #22]
 800781c:	4907      	ldr	r1, [pc, #28]	; (800783c <SCSI_ModeSense10+0x4c>)
 800781e:	5c89      	ldrb	r1, [r1, r2]
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	460a      	mov	r2, r1
 8007826:	731a      	strb	r2, [r3, #12]
  while (len)
 8007828:	8afb      	ldrh	r3, [r7, #22]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f1      	bne.n	8007812 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	bc80      	pop	{r7}
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	0800d4f8 	.word	0x0800d4f8

08007840 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	460b      	mov	r3, r1
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007854:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007856:	2300      	movs	r3, #0
 8007858:	75fb      	strb	r3, [r7, #23]
 800785a:	e007      	b.n	800786c <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4413      	add	r3, r2
 8007862:	2200      	movs	r2, #0
 8007864:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	3301      	adds	r3, #1
 800786a:	75fb      	strb	r3, [r7, #23]
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b11      	cmp	r3, #17
 8007870:	d9f4      	bls.n	800785c <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	2270      	movs	r2, #112	; 0x70
 8007876:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	220c      	movs	r2, #12
 800787c:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800788a:	429a      	cmp	r2, r3
 800788c:	d02e      	beq.n	80078ec <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	3347      	adds	r3, #71	; 0x47
 8007898:	00db      	lsls	r3, r3, #3
 800789a:	4413      	add	r3, r2
 800789c:	791a      	ldrb	r2, [r3, #4]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	3347      	adds	r3, #71	; 0x47
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	4413      	add	r3, r2
 80078b0:	7a5a      	ldrb	r2, [r3, #9]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	3347      	adds	r3, #71	; 0x47
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	4413      	add	r3, r2
 80078c4:	7a1a      	ldrb	r2, [r3, #8]
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078d0:	3301      	adds	r3, #1
 80078d2:	b2da      	uxtb	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078e0:	2b04      	cmp	r3, #4
 80078e2:	d103      	bne.n	80078ec <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2212      	movs	r2, #18
 80078f0:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3304      	adds	r3, #4
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b12      	cmp	r3, #18
 80078fa:	d805      	bhi.n	8007908 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3304      	adds	r3, #4
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	b29a      	uxth	r2, r3
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	bc80      	pop	{r7}
 8007912:	4770      	bx	lr

08007914 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	4608      	mov	r0, r1
 800791e:	4611      	mov	r1, r2
 8007920:	461a      	mov	r2, r3
 8007922:	4603      	mov	r3, r0
 8007924:	70fb      	strb	r3, [r7, #3]
 8007926:	460b      	mov	r3, r1
 8007928:	70bb      	strb	r3, [r7, #2]
 800792a:	4613      	mov	r3, r2
 800792c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007934:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	3347      	adds	r3, #71	; 0x47
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	4413      	add	r3, r2
 8007944:	78ba      	ldrb	r2, [r7, #2]
 8007946:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	3347      	adds	r3, #71	; 0x47
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007960:	3301      	adds	r3, #1
 8007962:	b2da      	uxtb	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 8007970:	2b04      	cmp	r3, #4
 8007972:	d103      	bne.n	800797c <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 800797c:	bf00      	nop
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	bc80      	pop	{r7}
 8007984:	4770      	bx	lr

08007986 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007986:	b480      	push	{r7}
 8007988:	b087      	sub	sp, #28
 800798a:	af00      	add	r7, sp, #0
 800798c:	60f8      	str	r0, [r7, #12]
 800798e:	460b      	mov	r3, r1
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800799a:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	815a      	strh	r2, [r3, #10]
  return 0;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr

080079ae <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	460b      	mov	r3, r1
 80079b8:	607a      	str	r2, [r7, #4]
 80079ba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	7a1b      	ldrb	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d16e      	bne.n	8007aaa <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80079d2:	b25b      	sxtb	r3, r3
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db0a      	blt.n	80079ee <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80079de:	2320      	movs	r3, #32
 80079e0:	2205      	movs	r2, #5
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff ff96 	bl	8007914 <SCSI_SenseCode>
      return -1;
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ec:	e067      	b.n	8007abe <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	7afa      	ldrb	r2, [r7, #11]
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007a02:	7af9      	ldrb	r1, [r7, #11]
 8007a04:	233a      	movs	r3, #58	; 0x3a
 8007a06:	2202      	movs	r2, #2
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff ff83 	bl	8007914 <SCSI_SenseCode>
      return -1;
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a12:	e054      	b.n	8007abe <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3302      	adds	r3, #2
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3303      	adds	r3, #3
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a24:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007a2e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	3205      	adds	r2, #5
 8007a34:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007a36:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3307      	adds	r3, #7
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	3208      	adds	r2, #8
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a60:	7af9      	ldrb	r1, [r7, #11]
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f912 	bl	8007c8c <SCSI_CheckAddressRange>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da02      	bge.n	8007a74 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a72:	e024      	b.n	8007abe <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2202      	movs	r2, #2
 8007a78:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007a8c:	fb01 f303 	mul.w	r3, r1, r3
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d00a      	beq.n	8007aaa <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007a9a:	2320      	movs	r3, #32
 8007a9c:	2205      	movs	r2, #5
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff ff38 	bl	8007914 <SCSI_SenseCode>
      return -1;
 8007aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa8:	e009      	b.n	8007abe <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab0:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f90a 	bl	8007cd0 <SCSI_ProcessRead>
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b086      	sub	sp, #24
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ada:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	7a1b      	ldrb	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f040 8096 	bne.w	8007c12 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	da0a      	bge.n	8007b08 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007af8:	2320      	movs	r3, #32
 8007afa:	2205      	movs	r2, #5
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff ff09 	bl	8007914 <SCSI_SenseCode>
      return -1;
 8007b02:	f04f 33ff 	mov.w	r3, #4294967295
 8007b06:	e08a      	b.n	8007c1e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	7afa      	ldrb	r2, [r7, #11]
 8007b12:	4610      	mov	r0, r2
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d008      	beq.n	8007b2e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b1c:	7af9      	ldrb	r1, [r7, #11]
 8007b1e:	233a      	movs	r3, #58	; 0x3a
 8007b20:	2202      	movs	r2, #2
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff fef6 	bl	8007914 <SCSI_SenseCode>
      return -1;
 8007b28:	f04f 33ff 	mov.w	r3, #4294967295
 8007b2c:	e077      	b.n	8007c1e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	7afa      	ldrb	r2, [r7, #11]
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d008      	beq.n	8007b54 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007b42:	7af9      	ldrb	r1, [r7, #11]
 8007b44:	2327      	movs	r3, #39	; 0x27
 8007b46:	2202      	movs	r2, #2
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7ff fee3 	bl	8007914 <SCSI_SenseCode>
      return -1;
 8007b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b52:	e064      	b.n	8007c1e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3302      	adds	r3, #2
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3303      	adds	r3, #3
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b64:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b6e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	3205      	adds	r2, #5
 8007b74:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007b76:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3307      	adds	r3, #7
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	3208      	adds	r2, #8
 8007b8a:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ba0:	7af9      	ldrb	r1, [r7, #11]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f872 	bl	8007c8c <SCSI_CheckAddressRange>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da02      	bge.n	8007bb4 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	e034      	b.n	8007c1e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007bc0:	fb02 f303 	mul.w	r3, r2, r3
 8007bc4:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d00a      	beq.n	8007be8 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007bd8:	2320      	movs	r3, #32
 8007bda:	2205      	movs	r2, #5
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff fe99 	bl	8007914 <SCSI_SenseCode>
      return -1;
 8007be2:	f04f 33ff 	mov.w	r3, #4294967295
 8007be6:	e01a      	b.n	8007c1e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bee:	bf28      	it	cs
 8007bf0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007bf4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f103 020c 	add.w	r2, r3, #12
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2101      	movs	r1, #1
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f005 faaa 	bl	800d162 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e005      	b.n	8007c1e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	4619      	mov	r1, r3
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f8ce 	bl	8007db8 <SCSI_ProcessWrite>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	607a      	str	r2, [r7, #4]
 8007c32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c3a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007c4a:	7af9      	ldrb	r1, [r7, #11]
 8007c4c:	2324      	movs	r3, #36	; 0x24
 8007c4e:	2205      	movs	r2, #5
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7ff fe5f 	bl	8007914 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	e013      	b.n	8007c84 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c68:	7af9      	ldrb	r1, [r7, #11]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f80e 	bl	8007c8c <SCSI_CheckAddressRange>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da02      	bge.n	8007c7c <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007c76:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7a:	e003      	b.n	8007c84 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	815a      	strh	r2, [r3, #10]
  return 0;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	607a      	str	r2, [r7, #4]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca2:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	441a      	add	r2, r3
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d908      	bls.n	8007cc6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007cb4:	7af9      	ldrb	r1, [r7, #11]
 8007cb6:	2321      	movs	r3, #33	; 0x21
 8007cb8:	2205      	movs	r2, #5
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f7ff fe2a 	bl	8007914 <SCSI_SenseCode>
    return -1;
 8007cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc4:	e000      	b.n	8007cc8 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007cf0:	fb02 f303 	mul.w	r3, r2, r3
 8007cf4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfc:	bf28      	it	cs
 8007cfe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d02:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d0a:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d1e:	4618      	mov	r0, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	78f8      	ldrb	r0, [r7, #3]
 8007d2a:	47a0      	blx	r4
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da08      	bge.n	8007d44 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007d32:	78f9      	ldrb	r1, [r7, #3]
 8007d34:	2311      	movs	r3, #17
 8007d36:	2204      	movs	r2, #4
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fdeb 	bl	8007914 <SCSI_SenseCode>
    return -1;
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	e035      	b.n	8007db0 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f103 020c 	add.w	r2, r3, #12
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2181      	movs	r1, #129	; 0x81
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f005 f9e3 	bl	800d11c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d62:	4619      	mov	r1, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d7e:	4619      	mov	r1, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	1ad2      	subs	r2, r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2203      	movs	r2, #3
 8007dac:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd90      	pop	{r4, r7, pc}

08007db8 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dca:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007dd8:	fb02 f303 	mul.w	r3, r2, r3
 8007ddc:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de4:	bf28      	it	cs
 8007de6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007dea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df2:	695c      	ldr	r4, [r3, #20]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f103 010c 	add.w	r1, r3, #12
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e06:	4618      	mov	r0, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	78f8      	ldrb	r0, [r7, #3]
 8007e12:	47a0      	blx	r4
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da08      	bge.n	8007e2c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007e1a:	78f9      	ldrb	r1, [r7, #3]
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	2204      	movs	r2, #4
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fd77 	bl	8007914 <SCSI_SenseCode>

    return -1;
 8007e26:	f04f 33ff 	mov.w	r3, #4294967295
 8007e2a:	e045      	b.n	8007eb8 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e40:	441a      	add	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e54:	4619      	mov	r1, r3
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	1ad2      	subs	r2, r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d104      	bne.n	8007e88 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff f97f 	bl	8007184 <MSC_BOT_SendCSW>
 8007e86:	e016      	b.n	8007eb6 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007e94:	fb02 f303 	mul.w	r3, r2, r3
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e9c:	bf28      	it	cs
 8007e9e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007ea2:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f103 020c 	add.w	r2, r3, #12
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2101      	movs	r1, #1
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f005 f956 	bl	800d162 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd90      	pop	{r4, r7, pc}

08007ec0 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	2181      	movs	r1, #129	; 0x81
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f005 f833 	bl	800cf42 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	2203      	movs	r2, #3
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f005 f82a 	bl	800cf42 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007ef6:	2018      	movs	r0, #24
 8007ef8:	f005 f96a 	bl	800d1d0 <USBD_static_malloc>
 8007efc:	4602      	mov	r2, r0
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d102      	bne.n	8007f14 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e011      	b.n	8007f38 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f1a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	2302      	movs	r3, #2
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f005 f915 	bl	800d162 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007f4e:	2181      	movs	r1, #129	; 0x81
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f005 f81c 	bl	800cf8e <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f005 f815 	bl	800cf8e <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00e      	beq.n	8007f94 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f86:	4618      	mov	r0, r3
 8007f88:	f005 f92e 	bl	800d1e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
	...

08007fa0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d051      	beq.n	8008072 <USBD_CUSTOM_HID_Setup+0xd2>
 8007fce:	2b20      	cmp	r3, #32
 8007fd0:	f040 80d8 	bne.w	8008184 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	785b      	ldrb	r3, [r3, #1]
 8007fd8:	3b02      	subs	r3, #2
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d841      	bhi.n	8008062 <USBD_CUSTOM_HID_Setup+0xc2>
 8007fde:	a201      	add	r2, pc, #4	; (adr r2, 8007fe4 <USBD_CUSTOM_HID_Setup+0x44>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	0800801b 	.word	0x0800801b
 8007fec:	08008063 	.word	0x08008063
 8007ff0:	08008063 	.word	0x08008063
 8007ff4:	08008063 	.word	0x08008063
 8007ff8:	08008063 	.word	0x08008063
 8007ffc:	08008063 	.word	0x08008063
 8008000:	0800804d 	.word	0x0800804d
 8008004:	0800802b 	.word	0x0800802b
 8008008:	0800800d 	.word	0x0800800d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	461a      	mov	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	605a      	str	r2, [r3, #4]
          break;
 8008018:	e02a      	b.n	8008070 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	3304      	adds	r3, #4
 800801e:	2201      	movs	r2, #1
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f001 f98e 	bl	8009344 <USBD_CtlSendData>
          break;
 8008028:	e022      	b.n	8008070 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	885b      	ldrh	r3, [r3, #2]
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	b29b      	uxth	r3, r3
 8008032:	b2db      	uxtb	r3, r3
 8008034:	461a      	mov	r2, r3
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	609a      	str	r2, [r3, #8]
          break;
 800803a:	e019      	b.n	8008070 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	3308      	adds	r3, #8
 8008040:	2201      	movs	r2, #1
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 f97d 	bl	8009344 <USBD_CtlSendData>
          break;
 800804a:	e011      	b.n	8008070 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	2201      	movs	r2, #1
 8008050:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008052:	6939      	ldr	r1, [r7, #16]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	88db      	ldrh	r3, [r3, #6]
 8008058:	461a      	mov	r2, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f001 f9a0 	bl	80093a0 <USBD_CtlPrepareRx>
          break;
 8008060:	e006      	b.n	8008070 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f903 	bl	8009270 <USBD_CtlError>
          ret = USBD_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	75fb      	strb	r3, [r7, #23]
          break;
 800806e:	bf00      	nop
      }
      break;
 8008070:	e08f      	b.n	8008192 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b0b      	cmp	r3, #11
 8008078:	d87c      	bhi.n	8008174 <USBD_CUSTOM_HID_Setup+0x1d4>
 800807a:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <USBD_CUSTOM_HID_Setup+0xe0>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080b1 	.word	0x080080b1
 8008084:	08008175 	.word	0x08008175
 8008088:	08008175 	.word	0x08008175
 800808c:	08008175 	.word	0x08008175
 8008090:	08008175 	.word	0x08008175
 8008094:	08008175 	.word	0x08008175
 8008098:	080080d9 	.word	0x080080d9
 800809c:	08008175 	.word	0x08008175
 80080a0:	08008175 	.word	0x08008175
 80080a4:	08008175 	.word	0x08008175
 80080a8:	08008127 	.word	0x08008127
 80080ac:	0800814f 	.word	0x0800814f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d107      	bne.n	80080ca <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80080ba:	f107 030e 	add.w	r3, r7, #14
 80080be:	2202      	movs	r2, #2
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f93e 	bl	8009344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080c8:	e05b      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 f8cf 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 80080d2:	2302      	movs	r3, #2
 80080d4:	75fb      	strb	r3, [r7, #23]
          break;
 80080d6:	e054      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	885b      	ldrh	r3, [r3, #2]
 80080dc:	0a1b      	lsrs	r3, r3, #8
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b22      	cmp	r3, #34	; 0x22
 80080e2:	d10b      	bne.n	80080fc <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	88db      	ldrh	r3, [r3, #6]
 80080e8:	2b5f      	cmp	r3, #95	; 0x5f
 80080ea:	bf28      	it	cs
 80080ec:	235f      	movcs	r3, #95	; 0x5f
 80080ee:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	e00d      	b.n	8008118 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	885b      	ldrh	r3, [r3, #2]
 8008100:	0a1b      	lsrs	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
 8008104:	2b21      	cmp	r3, #33	; 0x21
 8008106:	d107      	bne.n	8008118 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <USBD_CUSTOM_HID_Setup+0x1fc>)
 800810a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	88db      	ldrh	r3, [r3, #6]
 8008110:	2b09      	cmp	r3, #9
 8008112:	bf28      	it	cs
 8008114:	2309      	movcs	r3, #9
 8008116:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008118:	8bfb      	ldrh	r3, [r7, #30]
 800811a:	461a      	mov	r2, r3
 800811c:	69b9      	ldr	r1, [r7, #24]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 f910 	bl	8009344 <USBD_CtlSendData>
          break;
 8008124:	e02d      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800812c:	2b03      	cmp	r3, #3
 800812e:	d107      	bne.n	8008140 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	330c      	adds	r3, #12
 8008134:	2201      	movs	r2, #1
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 f903 	bl	8009344 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800813e:	e020      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 f894 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 8008148:	2302      	movs	r3, #2
 800814a:	75fb      	strb	r3, [r7, #23]
          break;
 800814c:	e019      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008154:	2b03      	cmp	r3, #3
 8008156:	d106      	bne.n	8008166 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	885b      	ldrh	r3, [r3, #2]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	461a      	mov	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008164:	e00d      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f881 	bl	8009270 <USBD_CtlError>
            ret = USBD_FAIL;
 800816e:	2302      	movs	r3, #2
 8008170:	75fb      	strb	r3, [r7, #23]
          break;
 8008172:	e006      	b.n	8008182 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 f87a 	bl	8009270 <USBD_CtlError>
          ret = USBD_FAIL;
 800817c:	2302      	movs	r3, #2
 800817e:	75fb      	strb	r3, [r7, #23]
          break;
 8008180:	bf00      	nop
      }
      break;
 8008182:	e006      	b.n	8008192 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 f872 	bl	8009270 <USBD_CtlError>
      ret = USBD_FAIL;
 800818c:	2302      	movs	r3, #2
 800818e:	75fb      	strb	r3, [r7, #23]
      break;
 8008190:	bf00      	nop
  }
  return ret;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3720      	adds	r7, #32
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	200001a4 	.word	0x200001a4

080081a0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d10f      	bne.n	80081e0 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2201      	movs	r2, #1
 80081cc:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	2181      	movs	r1, #129	; 0x81
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f004 ffa1 	bl	800d11c <USBD_LL_Transmit>
 80081da:	e001      	b.n	80081e0 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2229      	movs	r2, #41	; 0x29
 80081f8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80081fa:	4b03      	ldr	r3, [pc, #12]	; (8008208 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000120 	.word	0x20000120

0800820c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2229      	movs	r2, #41	; 0x29
 8008218:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	2000014c 	.word	0x2000014c

0800822c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2229      	movs	r2, #41	; 0x29
 8008238:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800823c:	4618      	mov	r0, r3
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000178 	.word	0x20000178

0800824c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800825e:	2200      	movs	r2, #0
 8008260:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr

0800826e <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	7810      	ldrb	r0, [r2, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	7852      	ldrb	r2, [r2, #1]
 8008292:	4611      	mov	r1, r2
 8008294:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	2302      	movs	r3, #2
 800829a:	2101      	movs	r1, #1
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f004 ff60 	bl	800d162 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ba:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d10c      	bne.n	80082de <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	7810      	ldrb	r0, [r2, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	7852      	ldrb	r2, [r2, #1]
 80082d4:	4611      	mov	r1, r2
 80082d6:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	220a      	movs	r2, #10
 80082f4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80082f6:	4b03      	ldr	r3, [pc, #12]	; (8008304 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	200001b0 	.word	0x200001b0

08008308 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d005      	beq.n	8008328 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008328:	7bfb      	ldrb	r3, [r7, #15]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	bc80      	pop	{r7}
 8008332:	4770      	bx	lr

08008334 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008348:	2302      	movs	r3, #2
 800834a:	e01a      	b.n	8008382 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	79fa      	ldrb	r2, [r7, #7]
 8008378:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f004 fd76 	bl	800ce6c <USBD_LL_Init>

  return USBD_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800838a:	b480      	push	{r7}
 800838c:	b085      	sub	sp, #20
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d006      	beq.n	80083ac <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
 80083aa:	e001      	b.n	80083b0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80083ac:	2302      	movs	r3, #2
 80083ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f004 fda1 	bl	800cf0c <USBD_LL_Start>

  return USBD_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083f4:	2302      	movs	r3, #2
 80083f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00c      	beq.n	800841c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	4611      	mov	r1, r2
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800841c:	7bfb      	ldrb	r3, [r7, #15]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3

  return USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 feca 	bl	80091f8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008472:	461a      	mov	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008480:	f003 031f 	and.w	r3, r3, #31
 8008484:	2b01      	cmp	r3, #1
 8008486:	d00c      	beq.n	80084a2 <USBD_LL_SetupStage+0x56>
 8008488:	2b01      	cmp	r3, #1
 800848a:	d302      	bcc.n	8008492 <USBD_LL_SetupStage+0x46>
 800848c:	2b02      	cmp	r3, #2
 800848e:	d010      	beq.n	80084b2 <USBD_LL_SetupStage+0x66>
 8008490:	e017      	b.n	80084c2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 f9ca 	bl	8008834 <USBD_StdDevReq>
      break;
 80084a0:	e01a      	b.n	80084d8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa2c 	bl	8008908 <USBD_StdItfReq>
      break;
 80084b0:	e012      	b.n	80084d8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa6a 	bl	8008994 <USBD_StdEPReq>
      break;
 80084c0:	e00a      	b.n	80084d8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80084c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f004 fd9a 	bl	800d00a <USBD_LL_StallEP>
      break;
 80084d6:	bf00      	nop
  }

  return USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b086      	sub	sp, #24
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	460b      	mov	r3, r1
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084f0:	7afb      	ldrb	r3, [r7, #11]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d14b      	bne.n	800858e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008504:	2b03      	cmp	r3, #3
 8008506:	d134      	bne.n	8008572 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	429a      	cmp	r2, r3
 8008512:	d919      	bls.n	8008548 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	1ad2      	subs	r2, r2, r3
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800852a:	429a      	cmp	r2, r3
 800852c:	d203      	bcs.n	8008536 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008532:	b29b      	uxth	r3, r3
 8008534:	e002      	b.n	800853c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800853a:	b29b      	uxth	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 ff4b 	bl	80093dc <USBD_CtlContinueRx>
 8008546:	e038      	b.n	80085ba <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00a      	beq.n	800856a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800855a:	2b03      	cmp	r3, #3
 800855c:	d105      	bne.n	800856a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 ff48 	bl	8009400 <USBD_CtlSendStatus>
 8008570:	e023      	b.n	80085ba <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008578:	2b05      	cmp	r3, #5
 800857a:	d11e      	bne.n	80085ba <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008584:	2100      	movs	r1, #0
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f004 fd3f 	bl	800d00a <USBD_LL_StallEP>
 800858c:	e015      	b.n	80085ba <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00d      	beq.n	80085b6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d108      	bne.n	80085b6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	7afa      	ldrb	r2, [r7, #11]
 80085ae:	4611      	mov	r1, r2
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	4798      	blx	r3
 80085b4:	e001      	b.n	80085ba <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085b6:	2302      	movs	r3, #2
 80085b8:	e000      	b.n	80085bc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	460b      	mov	r3, r1
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d17f      	bne.n	80086d8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3314      	adds	r3, #20
 80085dc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d15c      	bne.n	80086a2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d915      	bls.n	8008620 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	1ad2      	subs	r2, r2, r3
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 feb5 	bl	800937c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008612:	2300      	movs	r3, #0
 8008614:	2200      	movs	r2, #0
 8008616:	2100      	movs	r1, #0
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f004 fda2 	bl	800d162 <USBD_LL_PrepareReceive>
 800861e:	e04e      	b.n	80086be <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	6912      	ldr	r2, [r2, #16]
 8008628:	fbb3 f1f2 	udiv	r1, r3, r2
 800862c:	fb02 f201 	mul.w	r2, r2, r1
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d11c      	bne.n	8008670 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	689a      	ldr	r2, [r3, #8]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800863e:	429a      	cmp	r2, r3
 8008640:	d316      	bcc.n	8008670 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800864c:	429a      	cmp	r2, r3
 800864e:	d20f      	bcs.n	8008670 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008650:	2200      	movs	r2, #0
 8008652:	2100      	movs	r1, #0
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fe91 	bl	800937c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008662:	2300      	movs	r3, #0
 8008664:	2200      	movs	r2, #0
 8008666:	2100      	movs	r1, #0
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f004 fd7a 	bl	800d162 <USBD_LL_PrepareReceive>
 800866e:	e026      	b.n	80086be <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008682:	2b03      	cmp	r3, #3
 8008684:	d105      	bne.n	8008692 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008692:	2180      	movs	r1, #128	; 0x80
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f004 fcb8 	bl	800d00a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fec3 	bl	8009426 <USBD_CtlReceiveStatus>
 80086a0:	e00d      	b.n	80086be <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	d004      	beq.n	80086b6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d103      	bne.n	80086be <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80086b6:	2180      	movs	r1, #128	; 0x80
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f004 fca6 	bl	800d00a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d11d      	bne.n	8008704 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff fe83 	bl	80083d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086d6:	e015      	b.n	8008704 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00d      	beq.n	8008700 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d108      	bne.n	8008700 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	7afa      	ldrb	r2, [r7, #11]
 80086f8:	4611      	mov	r1, r2
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	4798      	blx	r3
 80086fe:	e001      	b.n	8008704 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008700:	2302      	movs	r3, #2
 8008702:	e000      	b.n	8008706 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	2200      	movs	r2, #0
 800871a:	2100      	movs	r1, #0
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f004 fc10 	bl	800cf42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2240      	movs	r2, #64	; 0x40
 800872e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008732:	2340      	movs	r3, #64	; 0x40
 8008734:	2200      	movs	r2, #0
 8008736:	2180      	movs	r1, #128	; 0x80
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f004 fc02 	bl	800cf42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2240      	movs	r2, #64	; 0x40
 8008748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6852      	ldr	r2, [r2, #4]
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	4611      	mov	r1, r2
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
  }

  return USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr

080087ae <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2204      	movs	r2, #4
 80087c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr

080087d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d105      	bne.n	80087f4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880e:	2b03      	cmp	r3, #3
 8008810:	d10b      	bne.n	800882a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800884a:	2b20      	cmp	r3, #32
 800884c:	d004      	beq.n	8008858 <USBD_StdDevReq+0x24>
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	d002      	beq.n	8008858 <USBD_StdDevReq+0x24>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d008      	beq.n	8008868 <USBD_StdDevReq+0x34>
 8008856:	e04c      	b.n	80088f2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	4798      	blx	r3
      break;
 8008866:	e049      	b.n	80088fc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	785b      	ldrb	r3, [r3, #1]
 800886c:	2b09      	cmp	r3, #9
 800886e:	d83a      	bhi.n	80088e6 <USBD_StdDevReq+0xb2>
 8008870:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <USBD_StdDevReq+0x44>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	080088c9 	.word	0x080088c9
 800887c:	080088dd 	.word	0x080088dd
 8008880:	080088e7 	.word	0x080088e7
 8008884:	080088d3 	.word	0x080088d3
 8008888:	080088e7 	.word	0x080088e7
 800888c:	080088ab 	.word	0x080088ab
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088e7 	.word	0x080088e7
 8008898:	080088bf 	.word	0x080088bf
 800889c:	080088b5 	.word	0x080088b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f9d4 	bl	8008c50 <USBD_GetDescriptor>
          break;
 80088a8:	e022      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80088aa:	6839      	ldr	r1, [r7, #0]
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fb37 	bl	8008f20 <USBD_SetAddress>
          break;
 80088b2:	e01d      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fb74 	bl	8008fa4 <USBD_SetConfig>
          break;
 80088bc:	e018      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fbfd 	bl	80090c0 <USBD_GetConfig>
          break;
 80088c6:	e013      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80088c8:	6839      	ldr	r1, [r7, #0]
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fc2c 	bl	8009128 <USBD_GetStatus>
          break;
 80088d0:	e00e      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 fc5a 	bl	800918e <USBD_SetFeature>
          break;
 80088da:	e009      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80088dc:	6839      	ldr	r1, [r7, #0]
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 fc69 	bl	80091b6 <USBD_ClrFeature>
          break;
 80088e4:	e004      	b.n	80088f0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fcc1 	bl	8009270 <USBD_CtlError>
          break;
 80088ee:	bf00      	nop
      }
      break;
 80088f0:	e004      	b.n	80088fc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80088f2:	6839      	ldr	r1, [r7, #0]
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fcbb 	bl	8009270 <USBD_CtlError>
      break;
 80088fa:	bf00      	nop
  }

  return ret;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop

08008908 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800891e:	2b20      	cmp	r3, #32
 8008920:	d003      	beq.n	800892a <USBD_StdItfReq+0x22>
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d001      	beq.n	800892a <USBD_StdItfReq+0x22>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d12a      	bne.n	8008980 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	3b01      	subs	r3, #1
 8008932:	2b02      	cmp	r3, #2
 8008934:	d81d      	bhi.n	8008972 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	889b      	ldrh	r3, [r3, #4]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	d813      	bhi.n	8008968 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d110      	bne.n	800897c <USBD_StdItfReq+0x74>
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10d      	bne.n	800897c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fd4d 	bl	8009400 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008966:	e009      	b.n	800897c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fc80 	bl	8009270 <USBD_CtlError>
          break;
 8008970:	e004      	b.n	800897c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc7b 	bl	8009270 <USBD_CtlError>
          break;
 800897a:	e000      	b.n	800897e <USBD_StdItfReq+0x76>
          break;
 800897c:	bf00      	nop
      }
      break;
 800897e:	e004      	b.n	800898a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fc74 	bl	8009270 <USBD_CtlError>
      break;
 8008988:	bf00      	nop
  }

  return USBD_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	889b      	ldrh	r3, [r3, #4]
 80089a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d004      	beq.n	80089be <USBD_StdEPReq+0x2a>
 80089b4:	2b40      	cmp	r3, #64	; 0x40
 80089b6:	d002      	beq.n	80089be <USBD_StdEPReq+0x2a>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d008      	beq.n	80089ce <USBD_StdEPReq+0x3a>
 80089bc:	e13d      	b.n	8008c3a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	4798      	blx	r3
      break;
 80089cc:	e13a      	b.n	8008c44 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d10a      	bne.n	80089f0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
 80089e8:	4603      	mov	r3, r0
 80089ea:	73fb      	strb	r3, [r7, #15]

        return ret;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
 80089ee:	e12a      	b.n	8008c46 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	785b      	ldrb	r3, [r3, #1]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d03e      	beq.n	8008a76 <USBD_StdEPReq+0xe2>
 80089f8:	2b03      	cmp	r3, #3
 80089fa:	d002      	beq.n	8008a02 <USBD_StdEPReq+0x6e>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d070      	beq.n	8008ae2 <USBD_StdEPReq+0x14e>
 8008a00:	e115      	b.n	8008c2e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d002      	beq.n	8008a12 <USBD_StdEPReq+0x7e>
 8008a0c:	2b03      	cmp	r3, #3
 8008a0e:	d015      	beq.n	8008a3c <USBD_StdEPReq+0xa8>
 8008a10:	e02b      	b.n	8008a6a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00c      	beq.n	8008a32 <USBD_StdEPReq+0x9e>
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	2b80      	cmp	r3, #128	; 0x80
 8008a1c:	d009      	beq.n	8008a32 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f004 faf1 	bl	800d00a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a28:	2180      	movs	r1, #128	; 0x80
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f004 faed 	bl	800d00a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a30:	e020      	b.n	8008a74 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fc1b 	bl	8009270 <USBD_CtlError>
              break;
 8008a3a:	e01b      	b.n	8008a74 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	885b      	ldrh	r3, [r3, #2]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10e      	bne.n	8008a62 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008a44:	7bbb      	ldrb	r3, [r7, #14]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <USBD_StdEPReq+0xce>
 8008a4a:	7bbb      	ldrb	r3, [r7, #14]
 8008a4c:	2b80      	cmp	r3, #128	; 0x80
 8008a4e:	d008      	beq.n	8008a62 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	88db      	ldrh	r3, [r3, #6]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f004 fad4 	bl	800d00a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fccc 	bl	8009400 <USBD_CtlSendStatus>

              break;
 8008a68:	e004      	b.n	8008a74 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fbff 	bl	8009270 <USBD_CtlError>
              break;
 8008a72:	bf00      	nop
          }
          break;
 8008a74:	e0e0      	b.n	8008c38 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d002      	beq.n	8008a86 <USBD_StdEPReq+0xf2>
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d015      	beq.n	8008ab0 <USBD_StdEPReq+0x11c>
 8008a84:	e026      	b.n	8008ad4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00c      	beq.n	8008aa6 <USBD_StdEPReq+0x112>
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	2b80      	cmp	r3, #128	; 0x80
 8008a90:	d009      	beq.n	8008aa6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f004 fab7 	bl	800d00a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a9c:	2180      	movs	r1, #128	; 0x80
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f004 fab3 	bl	800d00a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008aa4:	e01c      	b.n	8008ae0 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fbe1 	bl	8009270 <USBD_CtlError>
              break;
 8008aae:	e017      	b.n	8008ae0 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	885b      	ldrh	r3, [r3, #2]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d112      	bne.n	8008ade <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f004 fabe 	bl	800d048 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fc97 	bl	8009400 <USBD_CtlSendStatus>
              }
              break;
 8008ad2:	e004      	b.n	8008ade <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fbca 	bl	8009270 <USBD_CtlError>
              break;
 8008adc:	e000      	b.n	8008ae0 <USBD_StdEPReq+0x14c>
              break;
 8008ade:	bf00      	nop
          }
          break;
 8008ae0:	e0aa      	b.n	8008c38 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d002      	beq.n	8008af2 <USBD_StdEPReq+0x15e>
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	d032      	beq.n	8008b56 <USBD_StdEPReq+0x1c2>
 8008af0:	e097      	b.n	8008c22 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d007      	beq.n	8008b08 <USBD_StdEPReq+0x174>
 8008af8:	7bbb      	ldrb	r3, [r7, #14]
 8008afa:	2b80      	cmp	r3, #128	; 0x80
 8008afc:	d004      	beq.n	8008b08 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fbb5 	bl	8009270 <USBD_CtlError>
                break;
 8008b06:	e091      	b.n	8008c2c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da0b      	bge.n	8008b28 <USBD_StdEPReq+0x194>
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	3310      	adds	r3, #16
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	3304      	adds	r3, #4
 8008b26:	e00b      	b.n	8008b40 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	3304      	adds	r3, #4
 8008b40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fbf8 	bl	8009344 <USBD_CtlSendData>
              break;
 8008b54:	e06a      	b.n	8008c2c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da11      	bge.n	8008b82 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	f003 020f 	and.w	r2, r3, #15
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	3318      	adds	r3, #24
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d117      	bne.n	8008ba8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fb78 	bl	8009270 <USBD_CtlError>
                  break;
 8008b80:	e054      	b.n	8008c2c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
 8008b84:	f003 020f 	and.w	r2, r3, #15
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	4413      	add	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	440b      	add	r3, r1
 8008b94:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d104      	bne.n	8008ba8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fb65 	bl	8009270 <USBD_CtlError>
                  break;
 8008ba6:	e041      	b.n	8008c2c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	da0b      	bge.n	8008bc8 <USBD_StdEPReq+0x234>
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	3310      	adds	r3, #16
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	e00b      	b.n	8008be0 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	3304      	adds	r3, #4
 8008be0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <USBD_StdEPReq+0x25a>
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b80      	cmp	r3, #128	; 0x80
 8008bec:	d103      	bne.n	8008bf6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	e00e      	b.n	8008c14 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f004 fa43 	bl	800d086 <USBD_LL_IsStallEP>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	e002      	b.n	8008c14 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2202      	movs	r2, #2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fb92 	bl	8009344 <USBD_CtlSendData>
              break;
 8008c20:	e004      	b.n	8008c2c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fb23 	bl	8009270 <USBD_CtlError>
              break;
 8008c2a:	bf00      	nop
          }
          break;
 8008c2c:	e004      	b.n	8008c38 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fb1d 	bl	8009270 <USBD_CtlError>
          break;
 8008c36:	bf00      	nop
      }
      break;
 8008c38:	e004      	b.n	8008c44 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fb17 	bl	8009270 <USBD_CtlError>
      break;
 8008c42:	bf00      	nop
  }

  return ret;
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	885b      	ldrh	r3, [r3, #2]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	2b06      	cmp	r3, #6
 8008c72:	f200 8128 	bhi.w	8008ec6 <USBD_GetDescriptor+0x276>
 8008c76:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_GetDescriptor+0x2c>)
 8008c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7c:	08008c99 	.word	0x08008c99
 8008c80:	08008cb1 	.word	0x08008cb1
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008ec7 	.word	0x08008ec7
 8008c8c:	08008ec7 	.word	0x08008ec7
 8008c90:	08008e67 	.word	0x08008e67
 8008c94:	08008e93 	.word	0x08008e93
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7c12      	ldrb	r2, [r2, #16]
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
      break;
 8008cae:	e112      	b.n	8008ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	7c1b      	ldrb	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10d      	bne.n	8008cd4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cd2:	e100      	b.n	8008ed6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	f107 0208 	add.w	r2, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	2202      	movs	r2, #2
 8008cec:	701a      	strb	r2, [r3, #0]
      break;
 8008cee:	e0f2      	b.n	8008ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b05      	cmp	r3, #5
 8008cf8:	f200 80ac 	bhi.w	8008e54 <USBD_GetDescriptor+0x204>
 8008cfc:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <USBD_GetDescriptor+0xb4>)
 8008cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d02:	bf00      	nop
 8008d04:	08008d1d 	.word	0x08008d1d
 8008d08:	08008d51 	.word	0x08008d51
 8008d0c:	08008d85 	.word	0x08008d85
 8008d10:	08008db9 	.word	0x08008db9
 8008d14:	08008ded 	.word	0x08008ded
 8008d18:	08008e21 	.word	0x08008e21
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	7c12      	ldrb	r2, [r2, #16]
 8008d34:	f107 0108 	add.w	r1, r7, #8
 8008d38:	4610      	mov	r0, r2
 8008d3a:	4798      	blx	r3
 8008d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3e:	e091      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fa94 	bl	8009270 <USBD_CtlError>
            err++;
 8008d48:	7afb      	ldrb	r3, [r7, #11]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4e:	e089      	b.n	8008e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	7c12      	ldrb	r2, [r2, #16]
 8008d68:	f107 0108 	add.w	r1, r7, #8
 8008d6c:	4610      	mov	r0, r2
 8008d6e:	4798      	blx	r3
 8008d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d72:	e077      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fa7a 	bl	8009270 <USBD_CtlError>
            err++;
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	72fb      	strb	r3, [r7, #11]
          break;
 8008d82:	e06f      	b.n	8008e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7c12      	ldrb	r2, [r2, #16]
 8008d9c:	f107 0108 	add.w	r1, r7, #8
 8008da0:	4610      	mov	r0, r2
 8008da2:	4798      	blx	r3
 8008da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008da6:	e05d      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa60 	bl	8009270 <USBD_CtlError>
            err++;
 8008db0:	7afb      	ldrb	r3, [r7, #11]
 8008db2:	3301      	adds	r3, #1
 8008db4:	72fb      	strb	r3, [r7, #11]
          break;
 8008db6:	e055      	b.n	8008e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00b      	beq.n	8008ddc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	7c12      	ldrb	r2, [r2, #16]
 8008dd0:	f107 0108 	add.w	r1, r7, #8
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	4798      	blx	r3
 8008dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dda:	e043      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa46 	bl	8009270 <USBD_CtlError>
            err++;
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	3301      	adds	r3, #1
 8008de8:	72fb      	strb	r3, [r7, #11]
          break;
 8008dea:	e03b      	b.n	8008e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d00b      	beq.n	8008e10 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	7c12      	ldrb	r2, [r2, #16]
 8008e04:	f107 0108 	add.w	r1, r7, #8
 8008e08:	4610      	mov	r0, r2
 8008e0a:	4798      	blx	r3
 8008e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e0e:	e029      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fa2c 	bl	8009270 <USBD_CtlError>
            err++;
 8008e18:	7afb      	ldrb	r3, [r7, #11]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e1e:	e021      	b.n	8008e64 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	7c12      	ldrb	r2, [r2, #16]
 8008e38:	f107 0108 	add.w	r1, r7, #8
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	4798      	blx	r3
 8008e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e42:	e00f      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa12 	bl	8009270 <USBD_CtlError>
            err++;
 8008e4c:	7afb      	ldrb	r3, [r7, #11]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	72fb      	strb	r3, [r7, #11]
          break;
 8008e52:	e007      	b.n	8008e64 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa0a 	bl	8009270 <USBD_CtlError>
          err++;
 8008e5c:	7afb      	ldrb	r3, [r7, #11]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008e62:	e038      	b.n	8008ed6 <USBD_GetDescriptor+0x286>
 8008e64:	e037      	b.n	8008ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	7c1b      	ldrb	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d109      	bne.n	8008e82 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	f107 0208 	add.w	r2, r7, #8
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4798      	blx	r3
 8008e7e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e80:	e029      	b.n	8008ed6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f9f3 	bl	8009270 <USBD_CtlError>
        err++;
 8008e8a:	7afb      	ldrb	r3, [r7, #11]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8008e90:	e021      	b.n	8008ed6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7c1b      	ldrb	r3, [r3, #16]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10d      	bne.n	8008eb6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	f107 0208 	add.w	r2, r7, #8
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4798      	blx	r3
 8008eaa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	2207      	movs	r2, #7
 8008eb2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eb4:	e00f      	b.n	8008ed6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 f9d9 	bl	8009270 <USBD_CtlError>
        err++;
 8008ebe:	7afb      	ldrb	r3, [r7, #11]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ec4:	e007      	b.n	8008ed6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9d1 	bl	8009270 <USBD_CtlError>
      err++;
 8008ece:	7afb      	ldrb	r3, [r7, #11]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8008ed4:	bf00      	nop
  }

  if (err != 0U)
 8008ed6:	7afb      	ldrb	r3, [r7, #11]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d11c      	bne.n	8008f16 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008edc:	893b      	ldrh	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d011      	beq.n	8008f06 <USBD_GetDescriptor+0x2b6>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	88db      	ldrh	r3, [r3, #6]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00d      	beq.n	8008f06 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	88da      	ldrh	r2, [r3, #6]
 8008eee:	893b      	ldrh	r3, [r7, #8]
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	bf28      	it	cs
 8008ef4:	4613      	movcs	r3, r2
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008efa:	893b      	ldrh	r3, [r7, #8]
 8008efc:	461a      	mov	r2, r3
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa1f 	bl	8009344 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	88db      	ldrh	r3, [r3, #6]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d104      	bne.n	8008f18 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa76 	bl	8009400 <USBD_CtlSendStatus>
 8008f14:	e000      	b.n	8008f18 <USBD_GetDescriptor+0x2c8>
    return;
 8008f16:	bf00      	nop
    }
  }
}
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop

08008f20 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	889b      	ldrh	r3, [r3, #4]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d130      	bne.n	8008f94 <USBD_SetAddress+0x74>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	88db      	ldrh	r3, [r3, #6]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d12c      	bne.n	8008f94 <USBD_SetAddress+0x74>
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	885b      	ldrh	r3, [r3, #2]
 8008f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8008f40:	d828      	bhi.n	8008f94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	885b      	ldrh	r3, [r3, #2]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d104      	bne.n	8008f62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f988 	bl	8009270 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f60:	e01c      	b.n	8008f9c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	7bfa      	ldrb	r2, [r7, #15]
 8008f66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f004 f8b5 	bl	800d0de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fa43 	bl	8009400 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d004      	beq.n	8008f8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f88:	e008      	b.n	8008f9c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f92:	e003      	b.n	8008f9c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f94:	6839      	ldr	r1, [r7, #0]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 f96a 	bl	8009270 <USBD_CtlError>
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	885b      	ldrh	r3, [r3, #2]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	4b41      	ldr	r3, [pc, #260]	; (80090bc <USBD_SetConfig+0x118>)
 8008fb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fb8:	4b40      	ldr	r3, [pc, #256]	; (80090bc <USBD_SetConfig+0x118>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d904      	bls.n	8008fca <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f954 	bl	8009270 <USBD_CtlError>
 8008fc8:	e075      	b.n	80090b6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d002      	beq.n	8008fda <USBD_SetConfig+0x36>
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d023      	beq.n	8009020 <USBD_SetConfig+0x7c>
 8008fd8:	e062      	b.n	80090a0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008fda:	4b38      	ldr	r3, [pc, #224]	; (80090bc <USBD_SetConfig+0x118>)
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d01a      	beq.n	8009018 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008fe2:	4b36      	ldr	r3, [pc, #216]	; (80090bc <USBD_SetConfig+0x118>)
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2203      	movs	r2, #3
 8008ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ff4:	4b31      	ldr	r3, [pc, #196]	; (80090bc <USBD_SetConfig+0x118>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff f9f4 	bl	80083e8 <USBD_SetClassConfig>
 8009000:	4603      	mov	r3, r0
 8009002:	2b02      	cmp	r3, #2
 8009004:	d104      	bne.n	8009010 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009006:	6839      	ldr	r1, [r7, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f931 	bl	8009270 <USBD_CtlError>
            return;
 800900e:	e052      	b.n	80090b6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f9f5 	bl	8009400 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009016:	e04e      	b.n	80090b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9f1 	bl	8009400 <USBD_CtlSendStatus>
        break;
 800901e:	e04a      	b.n	80090b6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009020:	4b26      	ldr	r3, [pc, #152]	; (80090bc <USBD_SetConfig+0x118>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d112      	bne.n	800904e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009030:	4b22      	ldr	r3, [pc, #136]	; (80090bc <USBD_SetConfig+0x118>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800903a:	4b20      	ldr	r3, [pc, #128]	; (80090bc <USBD_SetConfig+0x118>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7ff f9f0 	bl	8008426 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f9da 	bl	8009400 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800904c:	e033      	b.n	80090b6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800904e:	4b1b      	ldr	r3, [pc, #108]	; (80090bc <USBD_SetConfig+0x118>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d01d      	beq.n	8009098 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7ff f9de 	bl	8008426 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800906a:	4b14      	ldr	r3, [pc, #80]	; (80090bc <USBD_SetConfig+0x118>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009074:	4b11      	ldr	r3, [pc, #68]	; (80090bc <USBD_SetConfig+0x118>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff f9b4 	bl	80083e8 <USBD_SetClassConfig>
 8009080:	4603      	mov	r3, r0
 8009082:	2b02      	cmp	r3, #2
 8009084:	d104      	bne.n	8009090 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8f1 	bl	8009270 <USBD_CtlError>
            return;
 800908e:	e012      	b.n	80090b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9b5 	bl	8009400 <USBD_CtlSendStatus>
        break;
 8009096:	e00e      	b.n	80090b6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f9b1 	bl	8009400 <USBD_CtlSendStatus>
        break;
 800909e:	e00a      	b.n	80090b6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f8e4 	bl	8009270 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <USBD_SetConfig+0x118>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7ff f9b9 	bl	8008426 <USBD_ClrClassConfig>
        break;
 80090b4:	bf00      	nop
    }
  }
}
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000970 	.word	0x20000970

080090c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	88db      	ldrh	r3, [r3, #6]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d004      	beq.n	80090dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f8cb 	bl	8009270 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090da:	e021      	b.n	8009120 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	db17      	blt.n	8009116 <USBD_GetConfig+0x56>
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	dd02      	ble.n	80090f0 <USBD_GetConfig+0x30>
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d00b      	beq.n	8009106 <USBD_GetConfig+0x46>
 80090ee:	e012      	b.n	8009116 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	3308      	adds	r3, #8
 80090fa:	2201      	movs	r2, #1
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f920 	bl	8009344 <USBD_CtlSendData>
        break;
 8009104:	e00c      	b.n	8009120 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	3304      	adds	r3, #4
 800910a:	2201      	movs	r2, #1
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f918 	bl	8009344 <USBD_CtlSendData>
        break;
 8009114:	e004      	b.n	8009120 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f8a9 	bl	8009270 <USBD_CtlError>
        break;
 800911e:	bf00      	nop
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009138:	3b01      	subs	r3, #1
 800913a:	2b02      	cmp	r3, #2
 800913c:	d81e      	bhi.n	800917c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b02      	cmp	r3, #2
 8009144:	d004      	beq.n	8009150 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f891 	bl	8009270 <USBD_CtlError>
        break;
 800914e:	e01a      	b.n	8009186 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f043 0202 	orr.w	r2, r3, #2
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	330c      	adds	r3, #12
 8009170:	2202      	movs	r2, #2
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f8e5 	bl	8009344 <USBD_CtlSendData>
      break;
 800917a:	e004      	b.n	8009186 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f876 	bl	8009270 <USBD_CtlError>
      break;
 8009184:	bf00      	nop
  }
}
 8009186:	bf00      	nop
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	885b      	ldrh	r3, [r3, #2]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d106      	bne.n	80091ae <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f929 	bl	8009400 <USBD_CtlSendStatus>
  }
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d80b      	bhi.n	80091e4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	885b      	ldrh	r3, [r3, #2]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d10c      	bne.n	80091ee <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f90f 	bl	8009400 <USBD_CtlSendStatus>
      }
      break;
 80091e2:	e004      	b.n	80091ee <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f842 	bl	8009270 <USBD_CtlError>
      break;
 80091ec:	e000      	b.n	80091f0 <USBD_ClrFeature+0x3a>
      break;
 80091ee:	bf00      	nop
  }
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781a      	ldrb	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	785a      	ldrb	r2, [r3, #1]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	3302      	adds	r3, #2
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	b29a      	uxth	r2, r3
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	3303      	adds	r3, #3
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	b29b      	uxth	r3, r3
 8009226:	4413      	add	r3, r2
 8009228:	b29a      	uxth	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	3304      	adds	r3, #4
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	b29a      	uxth	r2, r3
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	3305      	adds	r3, #5
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	b29b      	uxth	r3, r3
 800923e:	021b      	lsls	r3, r3, #8
 8009240:	b29b      	uxth	r3, r3
 8009242:	4413      	add	r3, r2
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	3306      	adds	r3, #6
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b29a      	uxth	r2, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	3307      	adds	r3, #7
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	021b      	lsls	r3, r3, #8
 800925c:	b29b      	uxth	r3, r3
 800925e:	4413      	add	r3, r2
 8009260:	b29a      	uxth	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	80da      	strh	r2, [r3, #6]

}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800927a:	2180      	movs	r1, #128	; 0x80
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f003 fec4 	bl	800d00a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009282:	2100      	movs	r1, #0
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f003 fec0 	bl	800d00a <USBD_LL_StallEP>
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b086      	sub	sp, #24
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800929e:	2300      	movs	r3, #0
 80092a0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d032      	beq.n	800930e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f834 	bl	8009316 <USBD_GetLen>
 80092ae:	4603      	mov	r3, r0
 80092b0:	3301      	adds	r3, #1
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	b29a      	uxth	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	1c5a      	adds	r2, r3, #1
 80092c0:	75fa      	strb	r2, [r7, #23]
 80092c2:	461a      	mov	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	4413      	add	r3, r2
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	7812      	ldrb	r2, [r2, #0]
 80092cc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	75fa      	strb	r2, [r7, #23]
 80092d4:	461a      	mov	r2, r3
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4413      	add	r3, r2
 80092da:	2203      	movs	r2, #3
 80092dc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80092de:	e012      	b.n	8009306 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80092e0:	7dfb      	ldrb	r3, [r7, #23]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	75fa      	strb	r2, [r7, #23]
 80092e6:	461a      	mov	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	441a      	add	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	1c59      	adds	r1, r3, #1
 80092f0:	60f9      	str	r1, [r7, #12]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	75fa      	strb	r2, [r7, #23]
 80092fc:	461a      	mov	r2, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	4413      	add	r3, r2
 8009302:	2200      	movs	r2, #0
 8009304:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e8      	bne.n	80092e0 <USBD_GetString+0x4e>
    }
  }
}
 800930e:	bf00      	nop
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009322:	e005      	b.n	8009330 <USBD_GetLen+0x1a>
  {
    len++;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	3301      	adds	r3, #1
 8009328:	73fb      	strb	r3, [r7, #15]
    buf++;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3301      	adds	r3, #1
 800932e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1f5      	bne.n	8009324 <USBD_GetLen+0xe>
  }

  return len;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2202      	movs	r2, #2
 8009356:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800935a:	88fa      	ldrh	r2, [r7, #6]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009360:	88fa      	ldrh	r2, [r7, #6]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009366:	88fb      	ldrh	r3, [r7, #6]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	2100      	movs	r1, #0
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f003 fed5 	bl	800d11c <USBD_LL_Transmit>

  return USBD_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	2100      	movs	r1, #0
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f003 fec3 	bl	800d11c <USBD_LL_Transmit>

  return USBD_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	60b9      	str	r1, [r7, #8]
 80093aa:	4613      	mov	r3, r2
 80093ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2203      	movs	r2, #3
 80093b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80093b6:	88fa      	ldrh	r2, [r7, #6]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80093be:	88fa      	ldrh	r2, [r7, #6]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	2100      	movs	r1, #0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f003 fec8 	bl	800d162 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	2100      	movs	r1, #0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f003 feb6 	bl	800d162 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2204      	movs	r2, #4
 800940c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009410:	2300      	movs	r3, #0
 8009412:	2200      	movs	r2, #0
 8009414:	2100      	movs	r1, #0
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f003 fe80 	bl	800d11c <USBD_LL_Transmit>

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2205      	movs	r2, #5
 8009432:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	2100      	movs	r1, #0
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f003 fe90 	bl	800d162 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	4613      	mov	r3, r2
 8009458:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800945a:	2301      	movs	r3, #1
 800945c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009462:	4b1e      	ldr	r3, [pc, #120]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 8009464:	7a5b      	ldrb	r3, [r3, #9]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b01      	cmp	r3, #1
 800946a:	d831      	bhi.n	80094d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800946c:	4b1b      	ldr	r3, [pc, #108]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 800946e:	7a5b      	ldrb	r3, [r3, #9]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	4b19      	ldr	r3, [pc, #100]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 8009476:	2100      	movs	r1, #0
 8009478:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800947a:	4b18      	ldr	r3, [pc, #96]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 800947c:	7a5b      	ldrb	r3, [r3, #9]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	4a16      	ldr	r2, [pc, #88]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800948a:	4b14      	ldr	r3, [pc, #80]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 800948c:	7a5b      	ldrb	r3, [r3, #9]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 8009494:	4413      	add	r3, r2
 8009496:	79fa      	ldrb	r2, [r7, #7]
 8009498:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800949a:	4b10      	ldr	r3, [pc, #64]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 800949c:	7a5b      	ldrb	r3, [r3, #9]
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	1c5a      	adds	r2, r3, #1
 80094a2:	b2d1      	uxtb	r1, r2
 80094a4:	4a0d      	ldr	r2, [pc, #52]	; (80094dc <FATFS_LinkDriverEx+0x90>)
 80094a6:	7251      	strb	r1, [r2, #9]
 80094a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80094aa:	7dbb      	ldrb	r3, [r7, #22]
 80094ac:	3330      	adds	r3, #48	; 0x30
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	3301      	adds	r3, #1
 80094b8:	223a      	movs	r2, #58	; 0x3a
 80094ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	3302      	adds	r3, #2
 80094c0:	222f      	movs	r2, #47	; 0x2f
 80094c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	3303      	adds	r3, #3
 80094c8:	2200      	movs	r2, #0
 80094ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr
 80094dc:	20000974 	.word	0x20000974

080094e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80094ea:	2200      	movs	r2, #0
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff ffac 	bl	800944c <FATFS_LinkDriverEx>
 80094f4:	4603      	mov	r3, r0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80094fe:	b480      	push	{r7}
 8009500:	b085      	sub	sp, #20
 8009502:	af00      	add	r7, sp, #0
 8009504:	4603      	mov	r3, r0
 8009506:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800950c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009510:	2b84      	cmp	r3, #132	; 0x84
 8009512:	d005      	beq.n	8009520 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009514:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4413      	add	r3, r2
 800951c:	3303      	adds	r3, #3
 800951e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009520:	68fb      	ldr	r3, [r7, #12]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	bc80      	pop	{r7}
 800952a:	4770      	bx	lr

0800952c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009532:	f3ef 8305 	mrs	r3, IPSR
 8009536:	607b      	str	r3, [r7, #4]
  return(result);
 8009538:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800953a:	2b00      	cmp	r3, #0
 800953c:	bf14      	ite	ne
 800953e:	2301      	movne	r3, #1
 8009540:	2300      	moveq	r3, #0
 8009542:	b2db      	uxtb	r3, r3
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009552:	f002 f847 	bl	800b5e4 <vTaskStartScheduler>
  
  return osOK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	bd80      	pop	{r7, pc}

0800955c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800955c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800955e:	b089      	sub	sp, #36	; 0x24
 8009560:	af04      	add	r7, sp, #16
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d020      	beq.n	80095b0 <osThreadCreate+0x54>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01c      	beq.n	80095b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	685c      	ldr	r4, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681d      	ldr	r5, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	691e      	ldr	r6, [r3, #16]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009588:	4618      	mov	r0, r3
 800958a:	f7ff ffb8 	bl	80094fe <makeFreeRtosPriority>
 800958e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009598:	9202      	str	r2, [sp, #8]
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	9100      	str	r1, [sp, #0]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	4632      	mov	r2, r6
 80095a2:	4629      	mov	r1, r5
 80095a4:	4620      	mov	r0, r4
 80095a6:	f001 fdd1 	bl	800b14c <xTaskCreateStatic>
 80095aa:	4603      	mov	r3, r0
 80095ac:	60fb      	str	r3, [r7, #12]
 80095ae:	e01c      	b.n	80095ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685c      	ldr	r4, [r3, #4]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095bc:	b29e      	uxth	r6, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff ff9a 	bl	80094fe <makeFreeRtosPriority>
 80095ca:	4602      	mov	r2, r0
 80095cc:	f107 030c 	add.w	r3, r7, #12
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	9200      	str	r2, [sp, #0]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	4632      	mov	r2, r6
 80095d8:	4629      	mov	r1, r5
 80095da:	4620      	mov	r0, r4
 80095dc:	f001 fe0f 	bl	800b1fe <xTaskCreate>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d001      	beq.n	80095ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	e000      	b.n	80095ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80095ea:	68fb      	ldr	r3, [r7, #12]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <osDelay+0x16>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	e000      	b.n	800960c <osDelay+0x18>
 800960a:	2301      	movs	r3, #1
 800960c:	4618      	mov	r0, r3
 800960e:	f001 ff23 	bl	800b458 <vTaskDelay>
  
  return osOK;
 8009612:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af02      	add	r7, sp, #8
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	460b      	mov	r3, r1
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d013      	beq.n	800965a <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8009632:	7afb      	ldrb	r3, [r7, #11]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <osTimerCreate+0x20>
 8009638:	2101      	movs	r1, #1
 800963a:	e000      	b.n	800963e <osTimerCreate+0x22>
 800963c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8009646:	9201      	str	r2, [sp, #4]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	460a      	mov	r2, r1
 800964e:	2101      	movs	r1, #1
 8009650:	480b      	ldr	r0, [pc, #44]	; (8009680 <osTimerCreate+0x64>)
 8009652:	f002 feaa 	bl	800c3aa <xTimerCreateStatic>
 8009656:	4603      	mov	r3, r0
 8009658:	e00e      	b.n	8009678 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800965a:	7afb      	ldrb	r3, [r7, #11]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d101      	bne.n	8009664 <osTimerCreate+0x48>
 8009660:	2201      	movs	r2, #1
 8009662:	e000      	b.n	8009666 <osTimerCreate+0x4a>
 8009664:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2101      	movs	r1, #1
 8009670:	4803      	ldr	r0, [pc, #12]	; (8009680 <osTimerCreate+0x64>)
 8009672:	f002 fe79 	bl	800c368 <xTimerCreate>
 8009676:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}
 8009680:	0800d430 	.word	0x0800d430

08009684 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b088      	sub	sp, #32
 8009688:	af02      	add	r7, sp, #8
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <osTimerStart+0x20>
    ticks = 1;
 80096a0:	2301      	movs	r3, #1
 80096a2:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80096a4:	f7ff ff42 	bl	800952c <inHandlerMode>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d01b      	beq.n	80096e6 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80096ae:	f107 020c 	add.w	r2, r7, #12
 80096b2:	2300      	movs	r3, #0
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	4613      	mov	r3, r2
 80096b8:	693a      	ldr	r2, [r7, #16]
 80096ba:	2109      	movs	r1, #9
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 fee1 	bl	800c484 <xTimerGenericCommand>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d002      	beq.n	80096ce <osTimerStart+0x4a>
    {
      result = osErrorOS;
 80096c8:	23ff      	movs	r3, #255	; 0xff
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e018      	b.n	8009700 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d015      	beq.n	8009700 <osTimerStart+0x7c>
 80096d4:	4b0d      	ldr	r3, [pc, #52]	; (800970c <osTimerStart+0x88>)
 80096d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	f3bf 8f6f 	isb	sy
 80096e4:	e00c      	b.n	8009700 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80096e6:	2300      	movs	r3, #0
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	2104      	movs	r1, #4
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f002 fec7 	bl	800c484 <xTimerGenericCommand>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d001      	beq.n	8009700 <osTimerStart+0x7c>
      result = osErrorOS;
 80096fc:	23ff      	movs	r3, #255	; 0xff
 80096fe:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8009700:	697b      	ldr	r3, [r7, #20]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d007      	beq.n	8009730 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	4619      	mov	r1, r3
 8009726:	2001      	movs	r0, #1
 8009728:	f000 fef8 	bl	800a51c <xQueueCreateMutexStatic>
 800972c:	4603      	mov	r3, r0
 800972e:	e003      	b.n	8009738 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009730:	2001      	movs	r0, #1
 8009732:	f000 fedb 	bl	800a4ec <xQueueCreateMutex>
 8009736:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009738:	4618      	mov	r0, r3
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800974a:	2300      	movs	r3, #0
 800974c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <osMutexWait+0x18>
    return osErrorParameter;
 8009754:	2380      	movs	r3, #128	; 0x80
 8009756:	e03a      	b.n	80097ce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009762:	d103      	bne.n	800976c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009764:	f04f 33ff 	mov.w	r3, #4294967295
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	e009      	b.n	8009780 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d006      	beq.n	8009780 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <osMutexWait+0x40>
      ticks = 1;
 800977c:	2301      	movs	r3, #1
 800977e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009780:	f7ff fed4 	bl	800952c <inHandlerMode>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d017      	beq.n	80097ba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	461a      	mov	r2, r3
 8009790:	2100      	movs	r1, #0
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 fada 	bl	800ad4c <xQueueReceiveFromISR>
 8009798:	4603      	mov	r3, r0
 800979a:	2b01      	cmp	r3, #1
 800979c:	d001      	beq.n	80097a2 <osMutexWait+0x62>
      return osErrorOS;
 800979e:	23ff      	movs	r3, #255	; 0xff
 80097a0:	e015      	b.n	80097ce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d011      	beq.n	80097cc <osMutexWait+0x8c>
 80097a8:	4b0b      	ldr	r3, [pc, #44]	; (80097d8 <osMutexWait+0x98>)
 80097aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ae:	601a      	str	r2, [r3, #0]
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	e008      	b.n	80097cc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80097ba:	68f9      	ldr	r1, [r7, #12]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f001 f9bd 	bl	800ab3c <xQueueSemaphoreTake>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d001      	beq.n	80097cc <osMutexWait+0x8c>
    return osErrorOS;
 80097c8:	23ff      	movs	r3, #255	; 0xff
 80097ca:	e000      	b.n	80097ce <osMutexWait+0x8e>
  }
  
  return osOK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	e000ed04 	.word	0xe000ed04

080097dc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80097ec:	f7ff fe9e 	bl	800952c <inHandlerMode>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d016      	beq.n	8009824 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80097f6:	f107 0308 	add.w	r3, r7, #8
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 f837 	bl	800a870 <xQueueGiveFromISR>
 8009802:	4603      	mov	r3, r0
 8009804:	2b01      	cmp	r3, #1
 8009806:	d001      	beq.n	800980c <osMutexRelease+0x30>
      return osErrorOS;
 8009808:	23ff      	movs	r3, #255	; 0xff
 800980a:	e017      	b.n	800983c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d013      	beq.n	800983a <osMutexRelease+0x5e>
 8009812:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <osMutexRelease+0x68>)
 8009814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	e00a      	b.n	800983a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009824:	2300      	movs	r3, #0
 8009826:	2200      	movs	r2, #0
 8009828:	2100      	movs	r1, #0
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fe92 	bl	800a554 <xQueueGenericSend>
 8009830:	4603      	mov	r3, r0
 8009832:	2b01      	cmp	r3, #1
 8009834:	d001      	beq.n	800983a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009836:	23ff      	movs	r3, #255	; 0xff
 8009838:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800983a:	68fb      	ldr	r3, [r7, #12]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	e000ed04 	.word	0xe000ed04

08009848 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af02      	add	r7, sp, #8
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d012      	beq.n	8009880 <osMessageCreate+0x38>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00e      	beq.n	8009880 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6859      	ldr	r1, [r3, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689a      	ldr	r2, [r3, #8]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	68dc      	ldr	r4, [r3, #12]
 8009872:	2300      	movs	r3, #0
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	4623      	mov	r3, r4
 8009878:	f000 fd50 	bl	800a31c <xQueueGenericCreateStatic>
 800987c:	4603      	mov	r3, r0
 800987e:	e008      	b.n	8009892 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	4619      	mov	r1, r3
 800988c:	f000 fdb8 	bl	800a400 <xQueueGenericCreate>
 8009890:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	bd90      	pop	{r4, r7, pc}
	...

0800989c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800989c:	b590      	push	{r4, r7, lr}
 800989e:	b08b      	sub	sp, #44	; 0x2c
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80098b6:	2380      	movs	r3, #128	; 0x80
 80098b8:	617b      	str	r3, [r7, #20]
    return event;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	461c      	mov	r4, r3
 80098be:	f107 0314 	add.w	r3, r7, #20
 80098c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098ca:	e054      	b.n	8009976 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80098cc:	2300      	movs	r3, #0
 80098ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098da:	d103      	bne.n	80098e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80098dc:	f04f 33ff 	mov.w	r3, #4294967295
 80098e0:	627b      	str	r3, [r7, #36]	; 0x24
 80098e2:	e009      	b.n	80098f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d006      	beq.n	80098f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d101      	bne.n	80098f8 <osMessageGet+0x5c>
      ticks = 1;
 80098f4:	2301      	movs	r3, #1
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80098f8:	f7ff fe18 	bl	800952c <inHandlerMode>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01c      	beq.n	800993c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009902:	f107 0220 	add.w	r2, r7, #32
 8009906:	f107 0314 	add.w	r3, r7, #20
 800990a:	3304      	adds	r3, #4
 800990c:	4619      	mov	r1, r3
 800990e:	68b8      	ldr	r0, [r7, #8]
 8009910:	f001 fa1c 	bl	800ad4c <xQueueReceiveFromISR>
 8009914:	4603      	mov	r3, r0
 8009916:	2b01      	cmp	r3, #1
 8009918:	d102      	bne.n	8009920 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800991a:	2310      	movs	r3, #16
 800991c:	617b      	str	r3, [r7, #20]
 800991e:	e001      	b.n	8009924 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009920:	2300      	movs	r3, #0
 8009922:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d01d      	beq.n	8009966 <osMessageGet+0xca>
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <osMessageGet+0xe4>)
 800992c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	e014      	b.n	8009966 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800993c:	f107 0314 	add.w	r3, r7, #20
 8009940:	3304      	adds	r3, #4
 8009942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009944:	4619      	mov	r1, r3
 8009946:	68b8      	ldr	r0, [r7, #8]
 8009948:	f001 f81c 	bl	800a984 <xQueueReceive>
 800994c:	4603      	mov	r3, r0
 800994e:	2b01      	cmp	r3, #1
 8009950:	d102      	bne.n	8009958 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009952:	2310      	movs	r3, #16
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	e006      	b.n	8009966 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	2b00      	cmp	r3, #0
 800995c:	d101      	bne.n	8009962 <osMessageGet+0xc6>
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <osMessageGet+0xc8>
 8009962:	2340      	movs	r3, #64	; 0x40
 8009964:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	461c      	mov	r4, r3
 800996a:	f107 0314 	add.w	r3, r7, #20
 800996e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	372c      	adds	r7, #44	; 0x2c
 800997a:	46bd      	mov	sp, r7
 800997c:	bd90      	pop	{r4, r7, pc}
 800997e:	bf00      	nop
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f103 0208 	add.w	r2, r3, #8
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f04f 32ff 	mov.w	r2, #4294967295
 800999c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f103 0208 	add.w	r2, r3, #8
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f103 0208 	add.w	r2, r3, #8
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr

080099c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr

080099da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	601a      	str	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr

08009a20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a36:	d103      	bne.n	8009a40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e00c      	b.n	8009a5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3308      	adds	r3, #8
 8009a44:	60fb      	str	r3, [r7, #12]
 8009a46:	e002      	b.n	8009a4e <vListInsert+0x2e>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d9f6      	bls.n	8009a48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	601a      	str	r2, [r3, #0]
}
 8009a86:	bf00      	nop
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr

08009a90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	6892      	ldr	r2, [r2, #8]
 8009aa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6852      	ldr	r2, [r2, #4]
 8009ab0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d103      	bne.n	8009ac4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	1e5a      	subs	r2, r3, #1
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bc80      	pop	{r7}
 8009ae0:	4770      	bx	lr
	...

08009ae4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	3b04      	subs	r3, #4
 8009af4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3b04      	subs	r3, #4
 8009b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f023 0201 	bic.w	r2, r3, #1
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3b04      	subs	r3, #4
 8009b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b14:	4a08      	ldr	r2, [pc, #32]	; (8009b38 <pxPortInitialiseStack+0x54>)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3b14      	subs	r3, #20
 8009b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3b20      	subs	r3, #32
 8009b2a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bc80      	pop	{r7}
 8009b36:	4770      	bx	lr
 8009b38:	08009b3d 	.word	0x08009b3d

08009b3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <prvTaskExitError+0x4c>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d009      	beq.n	8009b64 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	e7fe      	b.n	8009b62 <prvTaskExitError+0x26>
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b76:	bf00      	nop
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0fc      	beq.n	8009b78 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bc80      	pop	{r7}
 8009b86:	4770      	bx	lr
 8009b88:	200001bc 	.word	0x200001bc
 8009b8c:	00000000 	.word	0x00000000

08009b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b90:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <pxCurrentTCBConst2>)
 8009b92:	6819      	ldr	r1, [r3, #0]
 8009b94:	6808      	ldr	r0, [r1, #0]
 8009b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b9a:	f380 8809 	msr	PSP, r0
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	f04f 0000 	mov.w	r0, #0
 8009ba6:	f380 8811 	msr	BASEPRI, r0
 8009baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8009bae:	4770      	bx	lr

08009bb0 <pxCurrentTCBConst2>:
 8009bb0:	20001940 	.word	0x20001940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop

08009bb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009bb8:	4806      	ldr	r0, [pc, #24]	; (8009bd4 <prvPortStartFirstTask+0x1c>)
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	6800      	ldr	r0, [r0, #0]
 8009bbe:	f380 8808 	msr	MSP, r0
 8009bc2:	b662      	cpsie	i
 8009bc4:	b661      	cpsie	f
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	df00      	svc	0
 8009bd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009bd2:	bf00      	nop
 8009bd4:	e000ed08 	.word	0xe000ed08

08009bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009bde:	4b31      	ldr	r3, [pc, #196]	; (8009ca4 <xPortStartScheduler+0xcc>)
 8009be0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	22ff      	movs	r2, #255	; 0xff
 8009bee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	4b29      	ldr	r3, [pc, #164]	; (8009ca8 <xPortStartScheduler+0xd0>)
 8009c04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c06:	4b29      	ldr	r3, [pc, #164]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c08:	2207      	movs	r2, #7
 8009c0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c0c:	e009      	b.n	8009c22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c0e:	4b27      	ldr	r3, [pc, #156]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	4a25      	ldr	r2, [pc, #148]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	d0ef      	beq.n	8009c0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c2e:	4b1f      	ldr	r3, [pc, #124]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f1c3 0307 	rsb	r3, r3, #7
 8009c36:	2b04      	cmp	r3, #4
 8009c38:	d009      	beq.n	8009c4e <xPortStartScheduler+0x76>
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	60bb      	str	r3, [r7, #8]
 8009c4c:	e7fe      	b.n	8009c4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c4e:	4b17      	ldr	r3, [pc, #92]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	4a15      	ldr	r2, [pc, #84]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c58:	4b14      	ldr	r3, [pc, #80]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c60:	4a12      	ldr	r2, [pc, #72]	; (8009cac <xPortStartScheduler+0xd4>)
 8009c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c6c:	4a10      	ldr	r2, [pc, #64]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c6e:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c78:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <xPortStartScheduler+0xd8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c84:	f000 f8b0 	bl	8009de8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <xPortStartScheduler+0xdc>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c8e:	f7ff ff93 	bl	8009bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c92:	f001 fe7f 	bl	800b994 <vTaskSwitchContext>
	prvTaskExitError();
 8009c96:	f7ff ff51 	bl	8009b3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}
 8009ca4:	e000e400 	.word	0xe000e400
 8009ca8:	20000980 	.word	0x20000980
 8009cac:	20000984 	.word	0x20000984
 8009cb0:	e000ed20 	.word	0xe000ed20
 8009cb4:	200001bc 	.word	0x200001bc

08009cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <vPortEnterCritical+0x54>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	4a0d      	ldr	r2, [pc, #52]	; (8009d0c <vPortEnterCritical+0x54>)
 8009cd8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cda:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <vPortEnterCritical+0x54>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d10e      	bne.n	8009d00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	; (8009d10 <vPortEnterCritical+0x58>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d009      	beq.n	8009d00 <vPortEnterCritical+0x48>
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	f383 8811 	msr	BASEPRI, r3
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	f3bf 8f4f 	dsb	sy
 8009cfc:	603b      	str	r3, [r7, #0]
 8009cfe:	e7fe      	b.n	8009cfe <vPortEnterCritical+0x46>
	}
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bc80      	pop	{r7}
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	200001bc 	.word	0x200001bc
 8009d10:	e000ed04 	.word	0xe000ed04

08009d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d1a:	4b10      	ldr	r3, [pc, #64]	; (8009d5c <vPortExitCritical+0x48>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d109      	bne.n	8009d36 <vPortExitCritical+0x22>
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	e7fe      	b.n	8009d34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <vPortExitCritical+0x48>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	4a07      	ldr	r2, [pc, #28]	; (8009d5c <vPortExitCritical+0x48>)
 8009d3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d40:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <vPortExitCritical+0x48>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d104      	bne.n	8009d52 <vPortExitCritical+0x3e>
 8009d48:	2300      	movs	r3, #0
 8009d4a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bc80      	pop	{r7}
 8009d5a:	4770      	bx	lr
 8009d5c:	200001bc 	.word	0x200001bc

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b0d      	ldr	r3, [pc, #52]	; (8009da0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d70:	6010      	str	r0, [r2, #0]
 8009d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009d76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d7a:	f380 8811 	msr	BASEPRI, r0
 8009d7e:	f001 fe09 	bl	800b994 <vTaskSwitchContext>
 8009d82:	f04f 0000 	mov.w	r0, #0
 8009d86:	f380 8811 	msr	BASEPRI, r0
 8009d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009d8e:	6819      	ldr	r1, [r3, #0]
 8009d90:	6808      	ldr	r0, [r1, #0]
 8009d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009d96:	f380 8809 	msr	PSP, r0
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	4770      	bx	lr

08009da0 <pxCurrentTCBConst>:
 8009da0:	20001940 	.word	0x20001940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dc0:	f001 fd2c 	bl	800b81c <xTaskIncrementTick>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d003      	beq.n	8009dd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <SysTick_Handler+0x3c>)
 8009dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009de8:	b480      	push	{r7}
 8009dea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <vPortSetupTimerInterrupt+0x30>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009df2:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <vPortSetupTimerInterrupt+0x34>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009df8:	4a09      	ldr	r2, [pc, #36]	; (8009e20 <vPortSetupTimerInterrupt+0x38>)
 8009dfa:	4b0a      	ldr	r3, [pc, #40]	; (8009e24 <vPortSetupTimerInterrupt+0x3c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	490a      	ldr	r1, [pc, #40]	; (8009e28 <vPortSetupTimerInterrupt+0x40>)
 8009e00:	fba1 1303 	umull	r1, r3, r1, r3
 8009e04:	099b      	lsrs	r3, r3, #6
 8009e06:	3b01      	subs	r3, #1
 8009e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e0a:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <vPortSetupTimerInterrupt+0x30>)
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	601a      	str	r2, [r3, #0]
}
 8009e10:	bf00      	nop
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bc80      	pop	{r7}
 8009e16:	4770      	bx	lr
 8009e18:	e000e010 	.word	0xe000e010
 8009e1c:	e000e018 	.word	0xe000e018
 8009e20:	e000e014 	.word	0xe000e014
 8009e24:	20000024 	.word	0x20000024
 8009e28:	10624dd3 	.word	0x10624dd3

08009e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e32:	f3ef 8305 	mrs	r3, IPSR
 8009e36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2b0f      	cmp	r3, #15
 8009e3c:	d913      	bls.n	8009e66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e3e:	4a15      	ldr	r2, [pc, #84]	; (8009e94 <vPortValidateInterruptPriority+0x68>)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e48:	4b13      	ldr	r3, [pc, #76]	; (8009e98 <vPortValidateInterruptPriority+0x6c>)
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	7afa      	ldrb	r2, [r7, #11]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d209      	bcs.n	8009e66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	607b      	str	r3, [r7, #4]
 8009e64:	e7fe      	b.n	8009e64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e66:	4b0d      	ldr	r3, [pc, #52]	; (8009e9c <vPortValidateInterruptPriority+0x70>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ea0 <vPortValidateInterruptPriority+0x74>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d909      	bls.n	8009e8a <vPortValidateInterruptPriority+0x5e>
 8009e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	e7fe      	b.n	8009e88 <vPortValidateInterruptPriority+0x5c>
	}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bc80      	pop	{r7}
 8009e92:	4770      	bx	lr
 8009e94:	e000e3f0 	.word	0xe000e3f0
 8009e98:	20000980 	.word	0x20000980
 8009e9c:	e000ed0c 	.word	0xe000ed0c
 8009ea0:	20000984 	.word	0x20000984

08009ea4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	; 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009eac:	2300      	movs	r3, #0
 8009eae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009eb0:	f001 fbfc 	bl	800b6ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009eb4:	4b57      	ldr	r3, [pc, #348]	; (800a014 <pvPortMalloc+0x170>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ebc:	f000 f90c 	bl	800a0d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ec0:	4b55      	ldr	r3, [pc, #340]	; (800a018 <pvPortMalloc+0x174>)
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f040 808c 	bne.w	8009fe6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d01c      	beq.n	8009f0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009ed4:	2208      	movs	r2, #8
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4413      	add	r3, r2
 8009eda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f003 0307 	and.w	r3, r3, #7
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d013      	beq.n	8009f0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	3308      	adds	r3, #8
 8009eee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d009      	beq.n	8009f0e <pvPortMalloc+0x6a>
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e7fe      	b.n	8009f0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d068      	beq.n	8009fe6 <pvPortMalloc+0x142>
 8009f14:	4b41      	ldr	r3, [pc, #260]	; (800a01c <pvPortMalloc+0x178>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d863      	bhi.n	8009fe6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f1e:	4b40      	ldr	r3, [pc, #256]	; (800a020 <pvPortMalloc+0x17c>)
 8009f20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f22:	4b3f      	ldr	r3, [pc, #252]	; (800a020 <pvPortMalloc+0x17c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f28:	e004      	b.n	8009f34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d203      	bcs.n	8009f46 <pvPortMalloc+0xa2>
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1f1      	bne.n	8009f2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f46:	4b33      	ldr	r3, [pc, #204]	; (800a014 <pvPortMalloc+0x170>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d04a      	beq.n	8009fe6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2208      	movs	r2, #8
 8009f56:	4413      	add	r3, r2
 8009f58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	1ad2      	subs	r2, r2, r3
 8009f6a:	2308      	movs	r3, #8
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d91e      	bls.n	8009fb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4413      	add	r3, r2
 8009f78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	f003 0307 	and.w	r3, r3, #7
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d009      	beq.n	8009f98 <pvPortMalloc+0xf4>
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	e7fe      	b.n	8009f96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009faa:	69b8      	ldr	r0, [r7, #24]
 8009fac:	f000 f8f6 	bl	800a19c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fb0:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <pvPortMalloc+0x178>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	4a18      	ldr	r2, [pc, #96]	; (800a01c <pvPortMalloc+0x178>)
 8009fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fbe:	4b17      	ldr	r3, [pc, #92]	; (800a01c <pvPortMalloc+0x178>)
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4b18      	ldr	r3, [pc, #96]	; (800a024 <pvPortMalloc+0x180>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d203      	bcs.n	8009fd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fca:	4b14      	ldr	r3, [pc, #80]	; (800a01c <pvPortMalloc+0x178>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a15      	ldr	r2, [pc, #84]	; (800a024 <pvPortMalloc+0x180>)
 8009fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	4b10      	ldr	r3, [pc, #64]	; (800a018 <pvPortMalloc+0x174>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fe6:	f001 fb6f 	bl	800b6c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	f003 0307 	and.w	r3, r3, #7
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d009      	beq.n	800a008 <pvPortMalloc+0x164>
 8009ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	e7fe      	b.n	800a006 <pvPortMalloc+0x162>
	return pvReturn;
 800a008:	69fb      	ldr	r3, [r7, #28]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3728      	adds	r7, #40	; 0x28
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	20001930 	.word	0x20001930
 800a018:	2000193c 	.word	0x2000193c
 800a01c:	20001934 	.word	0x20001934
 800a020:	20001928 	.word	0x20001928
 800a024:	20001938 	.word	0x20001938

0800a028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d046      	beq.n	800a0c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a03a:	2308      	movs	r3, #8
 800a03c:	425b      	negs	r3, r3
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	4b20      	ldr	r3, [pc, #128]	; (800a0d0 <vPortFree+0xa8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4013      	ands	r3, r2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d109      	bne.n	800a06a <vPortFree+0x42>
 800a056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05a:	f383 8811 	msr	BASEPRI, r3
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f3bf 8f4f 	dsb	sy
 800a066:	60fb      	str	r3, [r7, #12]
 800a068:	e7fe      	b.n	800a068 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <vPortFree+0x5e>
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	60bb      	str	r3, [r7, #8]
 800a084:	e7fe      	b.n	800a084 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <vPortFree+0xa8>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4013      	ands	r3, r2
 800a090:	2b00      	cmp	r3, #0
 800a092:	d019      	beq.n	800a0c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d115      	bne.n	800a0c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <vPortFree+0xa8>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	43db      	mvns	r3, r3
 800a0a6:	401a      	ands	r2, r3
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0ac:	f001 fafe 	bl	800b6ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	4b07      	ldr	r3, [pc, #28]	; (800a0d4 <vPortFree+0xac>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	4a06      	ldr	r2, [pc, #24]	; (800a0d4 <vPortFree+0xac>)
 800a0bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0be:	6938      	ldr	r0, [r7, #16]
 800a0c0:	f000 f86c 	bl	800a19c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a0c4:	f001 fb00 	bl	800b6c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0c8:	bf00      	nop
 800a0ca:	3718      	adds	r7, #24
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	2000193c 	.word	0x2000193c
 800a0d4:	20001934 	.word	0x20001934

0800a0d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0de:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a0e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0e4:	4b27      	ldr	r3, [pc, #156]	; (800a184 <prvHeapInit+0xac>)
 800a0e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f003 0307 	and.w	r3, r3, #7
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00c      	beq.n	800a10c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3307      	adds	r3, #7
 800a0f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f023 0307 	bic.w	r3, r3, #7
 800a0fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	4a1f      	ldr	r2, [pc, #124]	; (800a184 <prvHeapInit+0xac>)
 800a108:	4413      	add	r3, r2
 800a10a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a110:	4a1d      	ldr	r2, [pc, #116]	; (800a188 <prvHeapInit+0xb0>)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a116:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <prvHeapInit+0xb0>)
 800a118:	2200      	movs	r2, #0
 800a11a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4413      	add	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a124:	2208      	movs	r2, #8
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	1a9b      	subs	r3, r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f023 0307 	bic.w	r3, r3, #7
 800a132:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4a15      	ldr	r2, [pc, #84]	; (800a18c <prvHeapInit+0xb4>)
 800a138:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a13a:	4b14      	ldr	r3, [pc, #80]	; (800a18c <prvHeapInit+0xb4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2200      	movs	r2, #0
 800a140:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a142:	4b12      	ldr	r3, [pc, #72]	; (800a18c <prvHeapInit+0xb4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	2200      	movs	r2, #0
 800a148:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a158:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <prvHeapInit+0xb4>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <prvHeapInit+0xb8>)
 800a166:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	4a09      	ldr	r2, [pc, #36]	; (800a194 <prvHeapInit+0xbc>)
 800a16e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a170:	4b09      	ldr	r3, [pc, #36]	; (800a198 <prvHeapInit+0xc0>)
 800a172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a176:	601a      	str	r2, [r3, #0]
}
 800a178:	bf00      	nop
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bc80      	pop	{r7}
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	20000988 	.word	0x20000988
 800a188:	20001928 	.word	0x20001928
 800a18c:	20001930 	.word	0x20001930
 800a190:	20001938 	.word	0x20001938
 800a194:	20001934 	.word	0x20001934
 800a198:	2000193c 	.word	0x2000193c

0800a19c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1a4:	4b27      	ldr	r3, [pc, #156]	; (800a244 <prvInsertBlockIntoFreeList+0xa8>)
 800a1a6:	60fb      	str	r3, [r7, #12]
 800a1a8:	e002      	b.n	800a1b0 <prvInsertBlockIntoFreeList+0x14>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d3f7      	bcc.n	800a1aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	441a      	add	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d108      	bne.n	800a1de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	441a      	add	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	441a      	add	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d118      	bne.n	800a224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <prvInsertBlockIntoFreeList+0xac>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d00d      	beq.n	800a21a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685a      	ldr	r2, [r3, #4]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	441a      	add	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	e008      	b.n	800a22c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a21a:	4b0b      	ldr	r3, [pc, #44]	; (800a248 <prvInsertBlockIntoFreeList+0xac>)
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	e003      	b.n	800a22c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d002      	beq.n	800a23a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	bc80      	pop	{r7}
 800a242:	4770      	bx	lr
 800a244:	20001928 	.word	0x20001928
 800a248:	20001930 	.word	0x20001930

0800a24c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d109      	bne.n	800a274 <xQueueGenericReset+0x28>
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	60bb      	str	r3, [r7, #8]
 800a272:	e7fe      	b.n	800a272 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a274:	f7ff fd20 	bl	8009cb8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a280:	68f9      	ldr	r1, [r7, #12]
 800a282:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a284:	fb01 f303 	mul.w	r3, r1, r3
 800a288:	441a      	add	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	68f9      	ldr	r1, [r7, #12]
 800a2a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2aa:	fb01 f303 	mul.w	r3, r1, r3
 800a2ae:	441a      	add	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	22ff      	movs	r2, #255	; 0xff
 800a2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	22ff      	movs	r2, #255	; 0xff
 800a2c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d114      	bne.n	800a2f4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	691b      	ldr	r3, [r3, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d01a      	beq.n	800a308 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3310      	adds	r3, #16
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 fc04 	bl	800bae4 <xTaskRemoveFromEventList>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d012      	beq.n	800a308 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2e2:	4b0d      	ldr	r3, [pc, #52]	; (800a318 <xQueueGenericReset+0xcc>)
 800a2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	e009      	b.n	800a308 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	3310      	adds	r3, #16
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f7ff fb43 	bl	8009984 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3324      	adds	r3, #36	; 0x24
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fb3e 	bl	8009984 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a308:	f7ff fd04 	bl	8009d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a30c:	2301      	movs	r3, #1
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	e000ed04 	.word	0xe000ed04

0800a31c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08e      	sub	sp, #56	; 0x38
 800a320:	af02      	add	r7, sp, #8
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d109      	bne.n	800a344 <xQueueGenericCreateStatic+0x28>
 800a330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
 800a342:	e7fe      	b.n	800a342 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d109      	bne.n	800a35e <xQueueGenericCreateStatic+0x42>
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24
 800a35c:	e7fe      	b.n	800a35c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <xQueueGenericCreateStatic+0x4e>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <xQueueGenericCreateStatic+0x52>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e000      	b.n	800a370 <xQueueGenericCreateStatic+0x54>
 800a36e:	2300      	movs	r3, #0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d109      	bne.n	800a388 <xQueueGenericCreateStatic+0x6c>
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	623b      	str	r3, [r7, #32]
 800a386:	e7fe      	b.n	800a386 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <xQueueGenericCreateStatic+0x78>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <xQueueGenericCreateStatic+0x7c>
 800a394:	2301      	movs	r3, #1
 800a396:	e000      	b.n	800a39a <xQueueGenericCreateStatic+0x7e>
 800a398:	2300      	movs	r3, #0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <xQueueGenericCreateStatic+0x96>
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	61fb      	str	r3, [r7, #28]
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3b2:	2348      	movs	r3, #72	; 0x48
 800a3b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b48      	cmp	r3, #72	; 0x48
 800a3ba:	d009      	beq.n	800a3d0 <xQueueGenericCreateStatic+0xb4>
 800a3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	61bb      	str	r3, [r7, #24]
 800a3ce:	e7fe      	b.n	800a3ce <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00d      	beq.n	800a3f6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f842 	bl	800a47a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3730      	adds	r7, #48	; 0x30
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08a      	sub	sp, #40	; 0x28
 800a404:	af02      	add	r7, sp, #8
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d109      	bne.n	800a428 <xQueueGenericCreate+0x28>
 800a414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	613b      	str	r3, [r7, #16]
 800a426:	e7fe      	b.n	800a426 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	e004      	b.n	800a43e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	fb02 f303 	mul.w	r3, r2, r3
 800a43c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	3348      	adds	r3, #72	; 0x48
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff fd2e 	bl	8009ea4 <pvPortMalloc>
 800a448:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00f      	beq.n	800a470 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	3348      	adds	r3, #72	; 0x48
 800a454:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a45e:	79fa      	ldrb	r2, [r7, #7]
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	4613      	mov	r3, r2
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 f805 	bl	800a47a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a470:	69bb      	ldr	r3, [r7, #24]
	}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b084      	sub	sp, #16
 800a47e:	af00      	add	r7, sp, #0
 800a480:	60f8      	str	r0, [r7, #12]
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]
 800a486:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d103      	bne.n	800a496 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e002      	b.n	800a49c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4a8:	2101      	movs	r1, #1
 800a4aa:	69b8      	ldr	r0, [r7, #24]
 800a4ac:	f7ff fece 	bl	800a24c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4b0:	bf00      	nop
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00e      	beq.n	800a4e4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f838 	bl	800a554 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	617b      	str	r3, [r7, #20]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	461a      	mov	r2, r3
 800a502:	6939      	ldr	r1, [r7, #16]
 800a504:	6978      	ldr	r0, [r7, #20]
 800a506:	f7ff ff7b 	bl	800a400 <xQueueGenericCreate>
 800a50a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f7ff ffd3 	bl	800a4b8 <prvInitialiseMutex>

		return pxNewQueue;
 800a512:	68fb      	ldr	r3, [r7, #12]
	}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af02      	add	r7, sp, #8
 800a522:	4603      	mov	r3, r0
 800a524:	6039      	str	r1, [r7, #0]
 800a526:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a528:	2301      	movs	r3, #1
 800a52a:	617b      	str	r3, [r7, #20]
 800a52c:	2300      	movs	r3, #0
 800a52e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a530:	79fb      	ldrb	r3, [r7, #7]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2200      	movs	r2, #0
 800a538:	6939      	ldr	r1, [r7, #16]
 800a53a:	6978      	ldr	r0, [r7, #20]
 800a53c:	f7ff feee 	bl	800a31c <xQueueGenericCreateStatic>
 800a540:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f7ff ffb8 	bl	800a4b8 <prvInitialiseMutex>

		return pxNewQueue;
 800a548:	68fb      	ldr	r3, [r7, #12]
	}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3718      	adds	r7, #24
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b08e      	sub	sp, #56	; 0x38
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a562:	2300      	movs	r3, #0
 800a564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d109      	bne.n	800a584 <xQueueGenericSend+0x30>
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	62bb      	str	r3, [r7, #40]	; 0x28
 800a582:	e7fe      	b.n	800a582 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <xQueueGenericSend+0x3e>
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <xQueueGenericSend+0x42>
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <xQueueGenericSend+0x44>
 800a596:	2300      	movs	r3, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <xQueueGenericSend+0x5c>
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	627b      	str	r3, [r7, #36]	; 0x24
 800a5ae:	e7fe      	b.n	800a5ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d103      	bne.n	800a5be <xQueueGenericSend+0x6a>
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d101      	bne.n	800a5c2 <xQueueGenericSend+0x6e>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e000      	b.n	800a5c4 <xQueueGenericSend+0x70>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d109      	bne.n	800a5dc <xQueueGenericSend+0x88>
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	623b      	str	r3, [r7, #32]
 800a5da:	e7fe      	b.n	800a5da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5dc:	f001 fc3c 	bl	800be58 <xTaskGetSchedulerState>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <xQueueGenericSend+0x98>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <xQueueGenericSend+0x9c>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <xQueueGenericSend+0x9e>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d109      	bne.n	800a60a <xQueueGenericSend+0xb6>
 800a5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fa:	f383 8811 	msr	BASEPRI, r3
 800a5fe:	f3bf 8f6f 	isb	sy
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	e7fe      	b.n	800a608 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a60a:	f7ff fb55 	bl	8009cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <xQueueGenericSend+0xcc>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d129      	bne.n	800a674 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	68b9      	ldr	r1, [r7, #8]
 800a624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a626:	f000 fc25 	bl	800ae74 <prvCopyDataToQueue>
 800a62a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d010      	beq.n	800a656 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	3324      	adds	r3, #36	; 0x24
 800a638:	4618      	mov	r0, r3
 800a63a:	f001 fa53 	bl	800bae4 <xTaskRemoveFromEventList>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d013      	beq.n	800a66c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a644:	4b3f      	ldr	r3, [pc, #252]	; (800a744 <xQueueGenericSend+0x1f0>)
 800a646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a64a:	601a      	str	r2, [r3, #0]
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	e00a      	b.n	800a66c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d007      	beq.n	800a66c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a65c:	4b39      	ldr	r3, [pc, #228]	; (800a744 <xQueueGenericSend+0x1f0>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a66c:	f7ff fb52 	bl	8009d14 <vPortExitCritical>
				return pdPASS;
 800a670:	2301      	movs	r3, #1
 800a672:	e063      	b.n	800a73c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d103      	bne.n	800a682 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a67a:	f7ff fb4b 	bl	8009d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	e05c      	b.n	800a73c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a684:	2b00      	cmp	r3, #0
 800a686:	d106      	bne.n	800a696 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a688:	f107 0314 	add.w	r3, r7, #20
 800a68c:	4618      	mov	r0, r3
 800a68e:	f001 fa8b 	bl	800bba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a692:	2301      	movs	r3, #1
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a696:	f7ff fb3d 	bl	8009d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a69a:	f001 f807 	bl	800b6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a69e:	f7ff fb0b 	bl	8009cb8 <vPortEnterCritical>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ae:	d103      	bne.n	800a6b8 <xQueueGenericSend+0x164>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6be:	b25b      	sxtb	r3, r3
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c4:	d103      	bne.n	800a6ce <xQueueGenericSend+0x17a>
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6ce:	f7ff fb21 	bl	8009d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6d2:	1d3a      	adds	r2, r7, #4
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	4611      	mov	r1, r2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 fa7a 	bl	800bbd4 <xTaskCheckForTimeOut>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d124      	bne.n	800a730 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6e8:	f000 fcbc 	bl	800b064 <prvIsQueueFull>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d018      	beq.n	800a724 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f001 f9a4 	bl	800ba48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a702:	f000 fc47 	bl	800af94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a706:	f000 ffdf 	bl	800b6c8 <xTaskResumeAll>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f47f af7c 	bne.w	800a60a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a712:	4b0c      	ldr	r3, [pc, #48]	; (800a744 <xQueueGenericSend+0x1f0>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	e772      	b.n	800a60a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a726:	f000 fc35 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a72a:	f000 ffcd 	bl	800b6c8 <xTaskResumeAll>
 800a72e:	e76c      	b.n	800a60a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a732:	f000 fc2f 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a736:	f000 ffc7 	bl	800b6c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a73a:	2300      	movs	r3, #0
		}
	}
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3738      	adds	r7, #56	; 0x38
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b08e      	sub	sp, #56	; 0x38
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
 800a754:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d109      	bne.n	800a774 <xQueueGenericSendFromISR+0x2c>
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	627b      	str	r3, [r7, #36]	; 0x24
 800a772:	e7fe      	b.n	800a772 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <xQueueGenericSendFromISR+0x3a>
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <xQueueGenericSendFromISR+0x3e>
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <xQueueGenericSendFromISR+0x40>
 800a786:	2300      	movs	r3, #0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d109      	bne.n	800a7a0 <xQueueGenericSendFromISR+0x58>
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	623b      	str	r3, [r7, #32]
 800a79e:	e7fe      	b.n	800a79e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b02      	cmp	r3, #2
 800a7a4:	d103      	bne.n	800a7ae <xQueueGenericSendFromISR+0x66>
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d101      	bne.n	800a7b2 <xQueueGenericSendFromISR+0x6a>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e000      	b.n	800a7b4 <xQueueGenericSendFromISR+0x6c>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d109      	bne.n	800a7cc <xQueueGenericSendFromISR+0x84>
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	61fb      	str	r3, [r7, #28]
 800a7ca:	e7fe      	b.n	800a7ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7cc:	f7ff fb2e 	bl	8009e2c <vPortValidateInterruptPriority>
	__asm volatile
 800a7d0:	f3ef 8211 	mrs	r2, BASEPRI
 800a7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d8:	f383 8811 	msr	BASEPRI, r3
 800a7dc:	f3bf 8f6f 	isb	sy
 800a7e0:	f3bf 8f4f 	dsb	sy
 800a7e4:	61ba      	str	r2, [r7, #24]
 800a7e6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a7e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d302      	bcc.n	800a7fe <xQueueGenericSendFromISR+0xb6>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d12c      	bne.n	800a858 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a80e:	f000 fb31 	bl	800ae74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a812:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81a:	d112      	bne.n	800a842 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d016      	beq.n	800a852 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	3324      	adds	r3, #36	; 0x24
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 f95b 	bl	800bae4 <xTaskRemoveFromEventList>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00e      	beq.n	800a852 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00b      	beq.n	800a852 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e007      	b.n	800a852 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a846:	3301      	adds	r3, #1
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	b25a      	sxtb	r2, r3
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a852:	2301      	movs	r3, #1
 800a854:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a856:	e001      	b.n	800a85c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a858:	2300      	movs	r3, #0
 800a85a:	637b      	str	r3, [r7, #52]	; 0x34
 800a85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3738      	adds	r7, #56	; 0x38
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b08e      	sub	sp, #56	; 0x38
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a880:	2b00      	cmp	r3, #0
 800a882:	d109      	bne.n	800a898 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	623b      	str	r3, [r7, #32]
 800a896:	e7fe      	b.n	800a896 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d009      	beq.n	800a8b4 <xQueueGiveFromISR+0x44>
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	61fb      	str	r3, [r7, #28]
 800a8b2:	e7fe      	b.n	800a8b2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d103      	bne.n	800a8c4 <xQueueGiveFromISR+0x54>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <xQueueGiveFromISR+0x58>
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e000      	b.n	800a8ca <xQueueGiveFromISR+0x5a>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d109      	bne.n	800a8e2 <xQueueGiveFromISR+0x72>
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	61bb      	str	r3, [r7, #24]
 800a8e0:	e7fe      	b.n	800a8e0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8e2:	f7ff faa3 	bl	8009e2c <vPortValidateInterruptPriority>
	__asm volatile
 800a8e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	617a      	str	r2, [r7, #20]
 800a8fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a8fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a900:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a906:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	429a      	cmp	r2, r3
 800a910:	d92b      	bls.n	800a96a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91e:	1c5a      	adds	r2, r3, #1
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a924:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92c:	d112      	bne.n	800a954 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	d016      	beq.n	800a964 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a938:	3324      	adds	r3, #36	; 0x24
 800a93a:	4618      	mov	r0, r3
 800a93c:	f001 f8d2 	bl	800bae4 <xTaskRemoveFromEventList>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00e      	beq.n	800a964 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e007      	b.n	800a964 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a958:	3301      	adds	r3, #1
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	b25a      	sxtb	r2, r3
 800a95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a964:	2301      	movs	r3, #1
 800a966:	637b      	str	r3, [r7, #52]	; 0x34
 800a968:	e001      	b.n	800a96e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	637b      	str	r3, [r7, #52]	; 0x34
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3738      	adds	r7, #56	; 0x38
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
	...

0800a984 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b08c      	sub	sp, #48	; 0x30
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a990:	2300      	movs	r3, #0
 800a992:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d109      	bne.n	800a9b2 <xQueueReceive+0x2e>
	__asm volatile
 800a99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	f3bf 8f6f 	isb	sy
 800a9aa:	f3bf 8f4f 	dsb	sy
 800a9ae:	623b      	str	r3, [r7, #32]
 800a9b0:	e7fe      	b.n	800a9b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d103      	bne.n	800a9c0 <xQueueReceive+0x3c>
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <xQueueReceive+0x40>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e000      	b.n	800a9c6 <xQueueReceive+0x42>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <xQueueReceive+0x5a>
 800a9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	61fb      	str	r3, [r7, #28]
 800a9dc:	e7fe      	b.n	800a9dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9de:	f001 fa3b 	bl	800be58 <xTaskGetSchedulerState>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <xQueueReceive+0x6a>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <xQueueReceive+0x6e>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e000      	b.n	800a9f4 <xQueueReceive+0x70>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d109      	bne.n	800aa0c <xQueueReceive+0x88>
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	e7fe      	b.n	800aa0a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa0c:	f7ff f954 	bl	8009cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01f      	beq.n	800aa5c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa1c:	68b9      	ldr	r1, [r7, #8]
 800aa1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa20:	f000 fa92 	bl	800af48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	1e5a      	subs	r2, r3, #1
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	691b      	ldr	r3, [r3, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00f      	beq.n	800aa54 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	3310      	adds	r3, #16
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f001 f853 	bl	800bae4 <xTaskRemoveFromEventList>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa44:	4b3c      	ldr	r3, [pc, #240]	; (800ab38 <xQueueReceive+0x1b4>)
 800aa46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa54:	f7ff f95e 	bl	8009d14 <vPortExitCritical>
				return pdPASS;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e069      	b.n	800ab30 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d103      	bne.n	800aa6a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa62:	f7ff f957 	bl	8009d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e062      	b.n	800ab30 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d106      	bne.n	800aa7e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa70:	f107 0310 	add.w	r3, r7, #16
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 f897 	bl	800bba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa7e:	f7ff f949 	bl	8009d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa82:	f000 fe13 	bl	800b6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa86:	f7ff f917 	bl	8009cb8 <vPortEnterCritical>
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	d103      	bne.n	800aaa0 <xQueueReceive+0x11c>
 800aa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaa6:	b25b      	sxtb	r3, r3
 800aaa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaac:	d103      	bne.n	800aab6 <xQueueReceive+0x132>
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aab6:	f7ff f92d 	bl	8009d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aaba:	1d3a      	adds	r2, r7, #4
 800aabc:	f107 0310 	add.w	r3, r7, #16
 800aac0:	4611      	mov	r1, r2
 800aac2:	4618      	mov	r0, r3
 800aac4:	f001 f886 	bl	800bbd4 <xTaskCheckForTimeOut>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d123      	bne.n	800ab16 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad0:	f000 fab2 	bl	800b038 <prvIsQueueEmpty>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d017      	beq.n	800ab0a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	3324      	adds	r3, #36	; 0x24
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	4611      	mov	r1, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 ffb0 	bl	800ba48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaea:	f000 fa53 	bl	800af94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaee:	f000 fdeb 	bl	800b6c8 <xTaskResumeAll>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d189      	bne.n	800aa0c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <xQueueReceive+0x1b4>)
 800aafa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafe:	601a      	str	r2, [r3, #0]
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	e780      	b.n	800aa0c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0c:	f000 fa42 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab10:	f000 fdda 	bl	800b6c8 <xTaskResumeAll>
 800ab14:	e77a      	b.n	800aa0c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab18:	f000 fa3c 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab1c:	f000 fdd4 	bl	800b6c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab22:	f000 fa89 	bl	800b038 <prvIsQueueEmpty>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f43f af6f 	beq.w	800aa0c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3730      	adds	r7, #48	; 0x30
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08e      	sub	sp, #56	; 0x38
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d109      	bne.n	800ab6c <xQueueSemaphoreTake+0x30>
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	623b      	str	r3, [r7, #32]
 800ab6a:	e7fe      	b.n	800ab6a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d009      	beq.n	800ab88 <xQueueSemaphoreTake+0x4c>
 800ab74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	61fb      	str	r3, [r7, #28]
 800ab86:	e7fe      	b.n	800ab86 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab88:	f001 f966 	bl	800be58 <xTaskGetSchedulerState>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d102      	bne.n	800ab98 <xQueueSemaphoreTake+0x5c>
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <xQueueSemaphoreTake+0x60>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e000      	b.n	800ab9e <xQueueSemaphoreTake+0x62>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d109      	bne.n	800abb6 <xQueueSemaphoreTake+0x7a>
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	61bb      	str	r3, [r7, #24]
 800abb4:	e7fe      	b.n	800abb4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800abb6:	f7ff f87f 	bl	8009cb8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800abba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abbe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d024      	beq.n	800ac10 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	1e5a      	subs	r2, r3, #1
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abcc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d104      	bne.n	800abe0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800abd6:	f001 fb05 	bl	800c1e4 <pvTaskIncrementMutexHeldCount>
 800abda:	4602      	mov	r2, r0
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00f      	beq.n	800ac08 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	3310      	adds	r3, #16
 800abec:	4618      	mov	r0, r3
 800abee:	f000 ff79 	bl	800bae4 <xTaskRemoveFromEventList>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d007      	beq.n	800ac08 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abf8:	4b53      	ldr	r3, [pc, #332]	; (800ad48 <xQueueSemaphoreTake+0x20c>)
 800abfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfe:	601a      	str	r2, [r3, #0]
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac08:	f7ff f884 	bl	8009d14 <vPortExitCritical>
				return pdPASS;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e096      	b.n	800ad3e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d110      	bne.n	800ac38 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d009      	beq.n	800ac30 <xQueueSemaphoreTake+0xf4>
 800ac1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac20:	f383 8811 	msr	BASEPRI, r3
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	617b      	str	r3, [r7, #20]
 800ac2e:	e7fe      	b.n	800ac2e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac30:	f7ff f870 	bl	8009d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac34:	2300      	movs	r3, #0
 800ac36:	e082      	b.n	800ad3e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d106      	bne.n	800ac4c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac3e:	f107 030c 	add.w	r3, r7, #12
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 ffb0 	bl	800bba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac4c:	f7ff f862 	bl	8009d14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac50:	f000 fd2c 	bl	800b6ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac54:	f7ff f830 	bl	8009cb8 <vPortEnterCritical>
 800ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac5e:	b25b      	sxtb	r3, r3
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac64:	d103      	bne.n	800ac6e <xQueueSemaphoreTake+0x132>
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac74:	b25b      	sxtb	r3, r3
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d103      	bne.n	800ac84 <xQueueSemaphoreTake+0x148>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac84:	f7ff f846 	bl	8009d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac88:	463a      	mov	r2, r7
 800ac8a:	f107 030c 	add.w	r3, r7, #12
 800ac8e:	4611      	mov	r1, r2
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 ff9f 	bl	800bbd4 <xTaskCheckForTimeOut>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d132      	bne.n	800ad02 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac9e:	f000 f9cb 	bl	800b038 <prvIsQueueEmpty>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d026      	beq.n	800acf6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800acb0:	f7ff f802 	bl	8009cb8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 f8eb 	bl	800be94 <xTaskPriorityInherit>
 800acbe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800acc0:	f7ff f828 	bl	8009d14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	3324      	adds	r3, #36	; 0x24
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f000 febb 	bl	800ba48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acd4:	f000 f95e 	bl	800af94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acd8:	f000 fcf6 	bl	800b6c8 <xTaskResumeAll>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f47f af69 	bne.w	800abb6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ace4:	4b18      	ldr	r3, [pc, #96]	; (800ad48 <xQueueSemaphoreTake+0x20c>)
 800ace6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	e75f      	b.n	800abb6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800acf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acf8:	f000 f94c 	bl	800af94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acfc:	f000 fce4 	bl	800b6c8 <xTaskResumeAll>
 800ad00:	e759      	b.n	800abb6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad04:	f000 f946 	bl	800af94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad08:	f000 fcde 	bl	800b6c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad0e:	f000 f993 	bl	800b038 <prvIsQueueEmpty>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f43f af4e 	beq.w	800abb6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00d      	beq.n	800ad3c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ad20:	f7fe ffca 	bl	8009cb8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad26:	f000 f88e 	bl	800ae46 <prvGetDisinheritPriorityAfterTimeout>
 800ad2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad32:	4618      	mov	r0, r3
 800ad34:	f001 f9b8 	bl	800c0a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad38:	f7fe ffec 	bl	8009d14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3738      	adds	r7, #56	; 0x38
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	e000ed04 	.word	0xe000ed04

0800ad4c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08e      	sub	sp, #56	; 0x38
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d109      	bne.n	800ad76 <xQueueReceiveFromISR+0x2a>
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	623b      	str	r3, [r7, #32]
 800ad74:	e7fe      	b.n	800ad74 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d103      	bne.n	800ad84 <xQueueReceiveFromISR+0x38>
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <xQueueReceiveFromISR+0x3c>
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <xQueueReceiveFromISR+0x3e>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <xQueueReceiveFromISR+0x56>
 800ad8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	61fb      	str	r3, [r7, #28]
 800ada0:	e7fe      	b.n	800ada0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ada2:	f7ff f843 	bl	8009e2c <vPortValidateInterruptPriority>
	__asm volatile
 800ada6:	f3ef 8211 	mrs	r2, BASEPRI
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	61ba      	str	r2, [r7, #24]
 800adbc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800adbe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d02f      	beq.n	800ae2e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800adce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800add4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800add8:	68b9      	ldr	r1, [r7, #8]
 800adda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800addc:	f000 f8b4 	bl	800af48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	1e5a      	subs	r2, r3, #1
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ade8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf0:	d112      	bne.n	800ae18 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d016      	beq.n	800ae28 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	3310      	adds	r3, #16
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fe70 	bl	800bae4 <xTaskRemoveFromEventList>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00e      	beq.n	800ae28 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	601a      	str	r2, [r3, #0]
 800ae16:	e007      	b.n	800ae28 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	b25a      	sxtb	r2, r3
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae2c:	e001      	b.n	800ae32 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3738      	adds	r7, #56	; 0x38
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae46:	b480      	push	{r7}
 800ae48:	b085      	sub	sp, #20
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d006      	beq.n	800ae64 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f1c3 0307 	rsb	r3, r3, #7
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e001      	b.n	800ae68 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae68:	68fb      	ldr	r3, [r7, #12]
	}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bc80      	pop	{r7}
 800ae72:	4770      	bx	lr

0800ae74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae80:	2300      	movs	r3, #0
 800ae82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10d      	bne.n	800aeae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d14d      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 f87e 	bl	800bfa0 <xTaskPriorityDisinherit>
 800aea4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	605a      	str	r2, [r3, #4]
 800aeac:	e043      	b.n	800af36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d119      	bne.n	800aee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6898      	ldr	r0, [r3, #8]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebc:	461a      	mov	r2, r3
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	f002 fa1c 	bl	800d2fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	689a      	ldr	r2, [r3, #8]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aecc:	441a      	add	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	689a      	ldr	r2, [r3, #8]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d32b      	bcc.n	800af36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	609a      	str	r2, [r3, #8]
 800aee6:	e026      	b.n	800af36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	68d8      	ldr	r0, [r3, #12]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef0:	461a      	mov	r2, r3
 800aef2:	68b9      	ldr	r1, [r7, #8]
 800aef4:	f002 fa02 	bl	800d2fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af00:	425b      	negs	r3, r3
 800af02:	441a      	add	r2, r3
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d207      	bcs.n	800af24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	685a      	ldr	r2, [r3, #4]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	425b      	negs	r3, r3
 800af1e:	441a      	add	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b02      	cmp	r3, #2
 800af28:	d105      	bne.n	800af36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3b01      	subs	r3, #1
 800af34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af3e:	697b      	ldr	r3, [r7, #20]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	441a      	add	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d303      	bcc.n	800af7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68d9      	ldr	r1, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af84:	461a      	mov	r2, r3
 800af86:	6838      	ldr	r0, [r7, #0]
 800af88:	f002 f9b8 	bl	800d2fc <memcpy>
	}
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af9c:	f7fe fe8c 	bl	8009cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afa8:	e011      	b.n	800afce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3324      	adds	r3, #36	; 0x24
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fd94 	bl	800bae4 <xTaskRemoveFromEventList>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d001      	beq.n	800afc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afc2:	f000 fe67 	bl	800bc94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	3b01      	subs	r3, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dce9      	bgt.n	800afaa <prvUnlockQueue+0x16>
 800afd6:	e000      	b.n	800afda <prvUnlockQueue+0x46>
					break;
 800afd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	22ff      	movs	r2, #255	; 0xff
 800afde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afe2:	f7fe fe97 	bl	8009d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afe6:	f7fe fe67 	bl	8009cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aff2:	e011      	b.n	800b018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	691b      	ldr	r3, [r3, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d012      	beq.n	800b022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3310      	adds	r3, #16
 800b000:	4618      	mov	r0, r3
 800b002:	f000 fd6f 	bl	800bae4 <xTaskRemoveFromEventList>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d001      	beq.n	800b010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b00c:	f000 fe42 	bl	800bc94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	3b01      	subs	r3, #1
 800b014:	b2db      	uxtb	r3, r3
 800b016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dce9      	bgt.n	800aff4 <prvUnlockQueue+0x60>
 800b020:	e000      	b.n	800b024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	22ff      	movs	r2, #255	; 0xff
 800b028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b02c:	f7fe fe72 	bl	8009d14 <vPortExitCritical>
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b040:	f7fe fe3a 	bl	8009cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	e001      	b.n	800b056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b056:	f7fe fe5d 	bl	8009d14 <vPortExitCritical>

	return xReturn;
 800b05a:	68fb      	ldr	r3, [r7, #12]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b06c:	f7fe fe24 	bl	8009cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b078:	429a      	cmp	r2, r3
 800b07a:	d102      	bne.n	800b082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b07c:	2301      	movs	r3, #1
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	e001      	b.n	800b086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b086:	f7fe fe45 	bl	8009d14 <vPortExitCritical>

	return xReturn;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60fb      	str	r3, [r7, #12]
 800b0a2:	e014      	b.n	800b0ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b0a4:	4a0e      	ldr	r2, [pc, #56]	; (800b0e0 <vQueueAddToRegistry+0x4c>)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10b      	bne.n	800b0c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b0b0:	490b      	ldr	r1, [pc, #44]	; (800b0e0 <vQueueAddToRegistry+0x4c>)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0ba:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <vQueueAddToRegistry+0x4c>)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	00db      	lsls	r3, r3, #3
 800b0c0:	4413      	add	r3, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0c6:	e005      	b.n	800b0d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	60fb      	str	r3, [r7, #12]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b07      	cmp	r3, #7
 800b0d2:	d9e7      	bls.n	800b0a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bc80      	pop	{r7}
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	20003160 	.word	0x20003160

0800b0e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0f4:	f7fe fde0 	bl	8009cb8 <vPortEnterCritical>
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0fe:	b25b      	sxtb	r3, r3
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b104:	d103      	bne.n	800b10e <vQueueWaitForMessageRestricted+0x2a>
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b114:	b25b      	sxtb	r3, r3
 800b116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b11a:	d103      	bne.n	800b124 <vQueueWaitForMessageRestricted+0x40>
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b124:	f7fe fdf6 	bl	8009d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d106      	bne.n	800b13e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	3324      	adds	r3, #36	; 0x24
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	68b9      	ldr	r1, [r7, #8]
 800b138:	4618      	mov	r0, r3
 800b13a:	f000 fca9 	bl	800ba90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b13e:	6978      	ldr	r0, [r7, #20]
 800b140:	f7ff ff28 	bl	800af94 <prvUnlockQueue>
	}
 800b144:	bf00      	nop
 800b146:	3718      	adds	r7, #24
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08e      	sub	sp, #56	; 0x38
 800b150:	af04      	add	r7, sp, #16
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
 800b158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d109      	bne.n	800b174 <xTaskCreateStatic+0x28>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	623b      	str	r3, [r7, #32]
 800b172:	e7fe      	b.n	800b172 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <xTaskCreateStatic+0x42>
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	61fb      	str	r3, [r7, #28]
 800b18c:	e7fe      	b.n	800b18c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b18e:	2354      	movs	r3, #84	; 0x54
 800b190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b54      	cmp	r3, #84	; 0x54
 800b196:	d009      	beq.n	800b1ac <xTaskCreateStatic+0x60>
 800b198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	61bb      	str	r3, [r7, #24]
 800b1aa:	e7fe      	b.n	800b1aa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d01e      	beq.n	800b1f0 <xTaskCreateStatic+0xa4>
 800b1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d01b      	beq.n	800b1f0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9303      	str	r3, [sp, #12]
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	9302      	str	r3, [sp, #8]
 800b1d2:	f107 0314 	add.w	r3, r7, #20
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 f850 	bl	800b288 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1ea:	f000 f8cb 	bl	800b384 <prvAddNewTaskToReadyList>
 800b1ee:	e001      	b.n	800b1f4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1f4:	697b      	ldr	r3, [r7, #20]
	}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3728      	adds	r7, #40	; 0x28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b08c      	sub	sp, #48	; 0x30
 800b202:	af04      	add	r7, sp, #16
 800b204:	60f8      	str	r0, [r7, #12]
 800b206:	60b9      	str	r1, [r7, #8]
 800b208:	603b      	str	r3, [r7, #0]
 800b20a:	4613      	mov	r3, r2
 800b20c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b20e:	88fb      	ldrh	r3, [r7, #6]
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4618      	mov	r0, r3
 800b214:	f7fe fe46 	bl	8009ea4 <pvPortMalloc>
 800b218:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00e      	beq.n	800b23e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b220:	2054      	movs	r0, #84	; 0x54
 800b222:	f7fe fe3f 	bl	8009ea4 <pvPortMalloc>
 800b226:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d003      	beq.n	800b236 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	631a      	str	r2, [r3, #48]	; 0x30
 800b234:	e005      	b.n	800b242 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b236:	6978      	ldr	r0, [r7, #20]
 800b238:	f7fe fef6 	bl	800a028 <vPortFree>
 800b23c:	e001      	b.n	800b242 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b23e:	2300      	movs	r3, #0
 800b240:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b242:	69fb      	ldr	r3, [r7, #28]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d017      	beq.n	800b278 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b250:	88fa      	ldrh	r2, [r7, #6]
 800b252:	2300      	movs	r3, #0
 800b254:	9303      	str	r3, [sp, #12]
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	9302      	str	r3, [sp, #8]
 800b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	68b9      	ldr	r1, [r7, #8]
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 f80e 	bl	800b288 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b26c:	69f8      	ldr	r0, [r7, #28]
 800b26e:	f000 f889 	bl	800b384 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b272:	2301      	movs	r3, #1
 800b274:	61bb      	str	r3, [r7, #24]
 800b276:	e002      	b.n	800b27e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b278:	f04f 33ff 	mov.w	r3, #4294967295
 800b27c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b27e:	69bb      	ldr	r3, [r7, #24]
	}
 800b280:	4618      	mov	r0, r3
 800b282:	3720      	adds	r7, #32
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	f023 0307 	bic.w	r3, r3, #7
 800b2ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	f003 0307 	and.w	r3, r3, #7
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <prvInitialiseNewTask+0x46>
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	617b      	str	r3, [r7, #20]
 800b2cc:	e7fe      	b.n	800b2cc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	61fb      	str	r3, [r7, #28]
 800b2d2:	e012      	b.n	800b2fa <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	4413      	add	r3, r2
 800b2da:	7819      	ldrb	r1, [r3, #0]
 800b2dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	3334      	adds	r3, #52	; 0x34
 800b2e4:	460a      	mov	r2, r1
 800b2e6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d006      	beq.n	800b302 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	61fb      	str	r3, [r7, #28]
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	2b0f      	cmp	r3, #15
 800b2fe:	d9e9      	bls.n	800b2d4 <prvInitialiseNewTask+0x4c>
 800b300:	e000      	b.n	800b304 <prvInitialiseNewTask+0x7c>
		{
			break;
 800b302:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b306:	2200      	movs	r2, #0
 800b308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	2b06      	cmp	r3, #6
 800b310:	d901      	bls.n	800b316 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b312:	2306      	movs	r3, #6
 800b314:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b31a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b320:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	2200      	movs	r2, #0
 800b326:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	3304      	adds	r3, #4
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fb48 	bl	80099c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	3318      	adds	r3, #24
 800b336:	4618      	mov	r0, r3
 800b338:	f7fe fb43 	bl	80099c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b340:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	f1c3 0207 	rsb	r2, r3, #7
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b350:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	2200      	movs	r2, #0
 800b356:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	68f9      	ldr	r1, [r7, #12]
 800b364:	69b8      	ldr	r0, [r7, #24]
 800b366:	f7fe fbbd 	bl	8009ae4 <pxPortInitialiseStack>
 800b36a:	4602      	mov	r2, r0
 800b36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b37a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b37c:	bf00      	nop
 800b37e:	3720      	adds	r7, #32
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b38c:	f7fe fc94 	bl	8009cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b390:	4b2a      	ldr	r3, [pc, #168]	; (800b43c <prvAddNewTaskToReadyList+0xb8>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3301      	adds	r3, #1
 800b396:	4a29      	ldr	r2, [pc, #164]	; (800b43c <prvAddNewTaskToReadyList+0xb8>)
 800b398:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b39a:	4b29      	ldr	r3, [pc, #164]	; (800b440 <prvAddNewTaskToReadyList+0xbc>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d109      	bne.n	800b3b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3a2:	4a27      	ldr	r2, [pc, #156]	; (800b440 <prvAddNewTaskToReadyList+0xbc>)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3a8:	4b24      	ldr	r3, [pc, #144]	; (800b43c <prvAddNewTaskToReadyList+0xb8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d110      	bne.n	800b3d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b3b0:	f000 fc94 	bl	800bcdc <prvInitialiseTaskLists>
 800b3b4:	e00d      	b.n	800b3d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b3b6:	4b23      	ldr	r3, [pc, #140]	; (800b444 <prvAddNewTaskToReadyList+0xc0>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d109      	bne.n	800b3d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3be:	4b20      	ldr	r3, [pc, #128]	; (800b440 <prvAddNewTaskToReadyList+0xbc>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d802      	bhi.n	800b3d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3cc:	4a1c      	ldr	r2, [pc, #112]	; (800b440 <prvAddNewTaskToReadyList+0xbc>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <prvAddNewTaskToReadyList+0xc4>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	4a1b      	ldr	r2, [pc, #108]	; (800b448 <prvAddNewTaskToReadyList+0xc4>)
 800b3da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	409a      	lsls	r2, r3
 800b3e4:	4b19      	ldr	r3, [pc, #100]	; (800b44c <prvAddNewTaskToReadyList+0xc8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	4a18      	ldr	r2, [pc, #96]	; (800b44c <prvAddNewTaskToReadyList+0xc8>)
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4a15      	ldr	r2, [pc, #84]	; (800b450 <prvAddNewTaskToReadyList+0xcc>)
 800b3fc:	441a      	add	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	3304      	adds	r3, #4
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f7fe fae8 	bl	80099da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b40a:	f7fe fc83 	bl	8009d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b40e:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <prvAddNewTaskToReadyList+0xc0>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00e      	beq.n	800b434 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b416:	4b0a      	ldr	r3, [pc, #40]	; (800b440 <prvAddNewTaskToReadyList+0xbc>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b420:	429a      	cmp	r2, r3
 800b422:	d207      	bcs.n	800b434 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b424:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <prvAddNewTaskToReadyList+0xd0>)
 800b426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b42a:	601a      	str	r2, [r3, #0]
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b434:	bf00      	nop
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	20001a40 	.word	0x20001a40
 800b440:	20001940 	.word	0x20001940
 800b444:	20001a4c 	.word	0x20001a4c
 800b448:	20001a5c 	.word	0x20001a5c
 800b44c:	20001a48 	.word	0x20001a48
 800b450:	20001944 	.word	0x20001944
 800b454:	e000ed04 	.word	0xe000ed04

0800b458 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d016      	beq.n	800b498 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b46a:	4b13      	ldr	r3, [pc, #76]	; (800b4b8 <vTaskDelay+0x60>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <vTaskDelay+0x2e>
 800b472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	60bb      	str	r3, [r7, #8]
 800b484:	e7fe      	b.n	800b484 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b486:	f000 f911 	bl	800b6ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b48a:	2100      	movs	r1, #0
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 febd 	bl	800c20c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b492:	f000 f919 	bl	800b6c8 <xTaskResumeAll>
 800b496:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d107      	bne.n	800b4ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b49e:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <vTaskDelay+0x64>)
 800b4a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	f3bf 8f4f 	dsb	sy
 800b4aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4ae:	bf00      	nop
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20001a68 	.word	0x20001a68
 800b4bc:	e000ed04 	.word	0xe000ed04

0800b4c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b4c8:	f7fe fbf6 	bl	8009cb8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <vTaskSuspend+0x18>
 800b4d2:	4b3c      	ldr	r3, [pc, #240]	; (800b5c4 <vTaskSuspend+0x104>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	e000      	b.n	800b4da <vTaskSuspend+0x1a>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fe fad5 	bl	8009a90 <uxListRemove>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d115      	bne.n	800b518 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4f0:	4935      	ldr	r1, [pc, #212]	; (800b5c8 <vTaskSuspend+0x108>)
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10a      	bne.n	800b518 <vTaskSuspend+0x58>
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b506:	2201      	movs	r2, #1
 800b508:	fa02 f303 	lsl.w	r3, r2, r3
 800b50c:	43da      	mvns	r2, r3
 800b50e:	4b2f      	ldr	r3, [pc, #188]	; (800b5cc <vTaskSuspend+0x10c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4013      	ands	r3, r2
 800b514:	4a2d      	ldr	r2, [pc, #180]	; (800b5cc <vTaskSuspend+0x10c>)
 800b516:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d004      	beq.n	800b52a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	3318      	adds	r3, #24
 800b524:	4618      	mov	r0, r3
 800b526:	f7fe fab3 	bl	8009a90 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3304      	adds	r3, #4
 800b52e:	4619      	mov	r1, r3
 800b530:	4827      	ldr	r0, [pc, #156]	; (800b5d0 <vTaskSuspend+0x110>)
 800b532:	f7fe fa52 	bl	80099da <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d103      	bne.n	800b54a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b54a:	f7fe fbe3 	bl	8009d14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b54e:	4b21      	ldr	r3, [pc, #132]	; (800b5d4 <vTaskSuspend+0x114>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d005      	beq.n	800b562 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b556:	f7fe fbaf 	bl	8009cb8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b55a:	f000 fc59 	bl	800be10 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b55e:	f7fe fbd9 	bl	8009d14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b562:	4b18      	ldr	r3, [pc, #96]	; (800b5c4 <vTaskSuspend+0x104>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d126      	bne.n	800b5ba <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800b56c:	4b19      	ldr	r3, [pc, #100]	; (800b5d4 <vTaskSuspend+0x114>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d016      	beq.n	800b5a2 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b574:	4b18      	ldr	r3, [pc, #96]	; (800b5d8 <vTaskSuspend+0x118>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d009      	beq.n	800b590 <vTaskSuspend+0xd0>
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	60bb      	str	r3, [r7, #8]
 800b58e:	e7fe      	b.n	800b58e <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800b590:	4b12      	ldr	r3, [pc, #72]	; (800b5dc <vTaskSuspend+0x11c>)
 800b592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5a0:	e00b      	b.n	800b5ba <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b5a2:	4b0b      	ldr	r3, [pc, #44]	; (800b5d0 <vTaskSuspend+0x110>)
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	4b0e      	ldr	r3, [pc, #56]	; (800b5e0 <vTaskSuspend+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d103      	bne.n	800b5b6 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <vTaskSuspend+0x104>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
	}
 800b5b4:	e001      	b.n	800b5ba <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800b5b6:	f000 f9ed 	bl	800b994 <vTaskSwitchContext>
	}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20001940 	.word	0x20001940
 800b5c8:	20001944 	.word	0x20001944
 800b5cc:	20001a48 	.word	0x20001a48
 800b5d0:	20001a2c 	.word	0x20001a2c
 800b5d4:	20001a4c 	.word	0x20001a4c
 800b5d8:	20001a68 	.word	0x20001a68
 800b5dc:	e000ed04 	.word	0xe000ed04
 800b5e0:	20001a40 	.word	0x20001a40

0800b5e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08a      	sub	sp, #40	; 0x28
 800b5e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b5f2:	463a      	mov	r2, r7
 800b5f4:	1d39      	adds	r1, r7, #4
 800b5f6:	f107 0308 	add.w	r3, r7, #8
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7f4 fdda 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b600:	6839      	ldr	r1, [r7, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	9202      	str	r2, [sp, #8]
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	2300      	movs	r3, #0
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	2300      	movs	r3, #0
 800b610:	460a      	mov	r2, r1
 800b612:	4920      	ldr	r1, [pc, #128]	; (800b694 <vTaskStartScheduler+0xb0>)
 800b614:	4820      	ldr	r0, [pc, #128]	; (800b698 <vTaskStartScheduler+0xb4>)
 800b616:	f7ff fd99 	bl	800b14c <xTaskCreateStatic>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b1f      	ldr	r3, [pc, #124]	; (800b69c <vTaskStartScheduler+0xb8>)
 800b61e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b620:	4b1e      	ldr	r3, [pc, #120]	; (800b69c <vTaskStartScheduler+0xb8>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b628:	2301      	movs	r3, #1
 800b62a:	617b      	str	r3, [r7, #20]
 800b62c:	e001      	b.n	800b632 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b62e:	2300      	movs	r3, #0
 800b630:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d102      	bne.n	800b63e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b638:	f000 fe4e 	bl	800c2d8 <xTimerCreateTimerTask>
 800b63c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d115      	bne.n	800b670 <vTaskStartScheduler+0x8c>
 800b644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <vTaskStartScheduler+0xbc>)
 800b658:	f04f 32ff 	mov.w	r2, #4294967295
 800b65c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b65e:	4b11      	ldr	r3, [pc, #68]	; (800b6a4 <vTaskStartScheduler+0xc0>)
 800b660:	2201      	movs	r2, #1
 800b662:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b664:	4b10      	ldr	r3, [pc, #64]	; (800b6a8 <vTaskStartScheduler+0xc4>)
 800b666:	2200      	movs	r2, #0
 800b668:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b66a:	f7fe fab5 	bl	8009bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b66e:	e00d      	b.n	800b68c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b676:	d109      	bne.n	800b68c <vTaskStartScheduler+0xa8>
 800b678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	60fb      	str	r3, [r7, #12]
 800b68a:	e7fe      	b.n	800b68a <vTaskStartScheduler+0xa6>
}
 800b68c:	bf00      	nop
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	0800d434 	.word	0x0800d434
 800b698:	0800bcad 	.word	0x0800bcad
 800b69c:	20001a64 	.word	0x20001a64
 800b6a0:	20001a60 	.word	0x20001a60
 800b6a4:	20001a4c 	.word	0x20001a4c
 800b6a8:	20001a44 	.word	0x20001a44

0800b6ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b6b0:	4b04      	ldr	r3, [pc, #16]	; (800b6c4 <vTaskSuspendAll+0x18>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	4a03      	ldr	r2, [pc, #12]	; (800b6c4 <vTaskSuspendAll+0x18>)
 800b6b8:	6013      	str	r3, [r2, #0]
}
 800b6ba:	bf00      	nop
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	20001a68 	.word	0x20001a68

0800b6c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6d6:	4b41      	ldr	r3, [pc, #260]	; (800b7dc <xTaskResumeAll+0x114>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d109      	bne.n	800b6f2 <xTaskResumeAll+0x2a>
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	e7fe      	b.n	800b6f0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b6f2:	f7fe fae1 	bl	8009cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b6f6:	4b39      	ldr	r3, [pc, #228]	; (800b7dc <xTaskResumeAll+0x114>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	4a37      	ldr	r2, [pc, #220]	; (800b7dc <xTaskResumeAll+0x114>)
 800b6fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b700:	4b36      	ldr	r3, [pc, #216]	; (800b7dc <xTaskResumeAll+0x114>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d161      	bne.n	800b7cc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b708:	4b35      	ldr	r3, [pc, #212]	; (800b7e0 <xTaskResumeAll+0x118>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d05d      	beq.n	800b7cc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b710:	e02e      	b.n	800b770 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b712:	4b34      	ldr	r3, [pc, #208]	; (800b7e4 <xTaskResumeAll+0x11c>)
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3318      	adds	r3, #24
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe f9b6 	bl	8009a90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3304      	adds	r3, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fe f9b1 	bl	8009a90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	2201      	movs	r2, #1
 800b734:	409a      	lsls	r2, r3
 800b736:	4b2c      	ldr	r3, [pc, #176]	; (800b7e8 <xTaskResumeAll+0x120>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	4a2a      	ldr	r2, [pc, #168]	; (800b7e8 <xTaskResumeAll+0x120>)
 800b73e:	6013      	str	r3, [r2, #0]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4a27      	ldr	r2, [pc, #156]	; (800b7ec <xTaskResumeAll+0x124>)
 800b74e:	441a      	add	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3304      	adds	r3, #4
 800b754:	4619      	mov	r1, r3
 800b756:	4610      	mov	r0, r2
 800b758:	f7fe f93f 	bl	80099da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b760:	4b23      	ldr	r3, [pc, #140]	; (800b7f0 <xTaskResumeAll+0x128>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b766:	429a      	cmp	r2, r3
 800b768:	d302      	bcc.n	800b770 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b76a:	4b22      	ldr	r3, [pc, #136]	; (800b7f4 <xTaskResumeAll+0x12c>)
 800b76c:	2201      	movs	r2, #1
 800b76e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b770:	4b1c      	ldr	r3, [pc, #112]	; (800b7e4 <xTaskResumeAll+0x11c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1cc      	bne.n	800b712 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b77e:	f000 fb47 	bl	800be10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b782:	4b1d      	ldr	r3, [pc, #116]	; (800b7f8 <xTaskResumeAll+0x130>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d010      	beq.n	800b7b0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b78e:	f000 f845 	bl	800b81c <xTaskIncrementTick>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b798:	4b16      	ldr	r3, [pc, #88]	; (800b7f4 <xTaskResumeAll+0x12c>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1f1      	bne.n	800b78e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b7aa:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <xTaskResumeAll+0x130>)
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7b0:	4b10      	ldr	r3, [pc, #64]	; (800b7f4 <xTaskResumeAll+0x12c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d009      	beq.n	800b7cc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7bc:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <xTaskResumeAll+0x134>)
 800b7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c2:	601a      	str	r2, [r3, #0]
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7cc:	f7fe faa2 	bl	8009d14 <vPortExitCritical>

	return xAlreadyYielded;
 800b7d0:	68bb      	ldr	r3, [r7, #8]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3710      	adds	r7, #16
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	20001a68 	.word	0x20001a68
 800b7e0:	20001a40 	.word	0x20001a40
 800b7e4:	20001a00 	.word	0x20001a00
 800b7e8:	20001a48 	.word	0x20001a48
 800b7ec:	20001944 	.word	0x20001944
 800b7f0:	20001940 	.word	0x20001940
 800b7f4:	20001a54 	.word	0x20001a54
 800b7f8:	20001a50 	.word	0x20001a50
 800b7fc:	e000ed04 	.word	0xe000ed04

0800b800 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b806:	4b04      	ldr	r3, [pc, #16]	; (800b818 <xTaskGetTickCount+0x18>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b80c:	687b      	ldr	r3, [r7, #4]
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr
 800b818:	20001a44 	.word	0x20001a44

0800b81c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b086      	sub	sp, #24
 800b820:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b822:	2300      	movs	r3, #0
 800b824:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b826:	4b50      	ldr	r3, [pc, #320]	; (800b968 <xTaskIncrementTick+0x14c>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f040 808c 	bne.w	800b948 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b830:	4b4e      	ldr	r3, [pc, #312]	; (800b96c <xTaskIncrementTick+0x150>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b838:	4a4c      	ldr	r2, [pc, #304]	; (800b96c <xTaskIncrementTick+0x150>)
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d11f      	bne.n	800b884 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b844:	4b4a      	ldr	r3, [pc, #296]	; (800b970 <xTaskIncrementTick+0x154>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d009      	beq.n	800b862 <xTaskIncrementTick+0x46>
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	e7fe      	b.n	800b860 <xTaskIncrementTick+0x44>
 800b862:	4b43      	ldr	r3, [pc, #268]	; (800b970 <xTaskIncrementTick+0x154>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	60fb      	str	r3, [r7, #12]
 800b868:	4b42      	ldr	r3, [pc, #264]	; (800b974 <xTaskIncrementTick+0x158>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a40      	ldr	r2, [pc, #256]	; (800b970 <xTaskIncrementTick+0x154>)
 800b86e:	6013      	str	r3, [r2, #0]
 800b870:	4a40      	ldr	r2, [pc, #256]	; (800b974 <xTaskIncrementTick+0x158>)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	4b40      	ldr	r3, [pc, #256]	; (800b978 <xTaskIncrementTick+0x15c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3301      	adds	r3, #1
 800b87c:	4a3e      	ldr	r2, [pc, #248]	; (800b978 <xTaskIncrementTick+0x15c>)
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	f000 fac6 	bl	800be10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b884:	4b3d      	ldr	r3, [pc, #244]	; (800b97c <xTaskIncrementTick+0x160>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d34d      	bcc.n	800b92a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b88e:	4b38      	ldr	r3, [pc, #224]	; (800b970 <xTaskIncrementTick+0x154>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <xTaskIncrementTick+0x80>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <xTaskIncrementTick+0x82>
 800b89c:	2300      	movs	r3, #0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a2:	4b36      	ldr	r3, [pc, #216]	; (800b97c <xTaskIncrementTick+0x160>)
 800b8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a8:	601a      	str	r2, [r3, #0]
					break;
 800b8aa:	e03e      	b.n	800b92a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b8ac:	4b30      	ldr	r3, [pc, #192]	; (800b970 <xTaskIncrementTick+0x154>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d203      	bcs.n	800b8cc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8c4:	4a2d      	ldr	r2, [pc, #180]	; (800b97c <xTaskIncrementTick+0x160>)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6013      	str	r3, [r2, #0]
						break;
 800b8ca:	e02e      	b.n	800b92a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7fe f8dd 	bl	8009a90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d004      	beq.n	800b8e8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	3318      	adds	r3, #24
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fe f8d4 	bl	8009a90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	409a      	lsls	r2, r3
 800b8f0:	4b23      	ldr	r3, [pc, #140]	; (800b980 <xTaskIncrementTick+0x164>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	4a22      	ldr	r2, [pc, #136]	; (800b980 <xTaskIncrementTick+0x164>)
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4a1f      	ldr	r2, [pc, #124]	; (800b984 <xTaskIncrementTick+0x168>)
 800b908:	441a      	add	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7fe f862 	bl	80099da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91a:	4b1b      	ldr	r3, [pc, #108]	; (800b988 <xTaskIncrementTick+0x16c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b920:	429a      	cmp	r2, r3
 800b922:	d3b4      	bcc.n	800b88e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b924:	2301      	movs	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b928:	e7b1      	b.n	800b88e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b92a:	4b17      	ldr	r3, [pc, #92]	; (800b988 <xTaskIncrementTick+0x16c>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b930:	4914      	ldr	r1, [pc, #80]	; (800b984 <xTaskIncrementTick+0x168>)
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d907      	bls.n	800b952 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b942:	2301      	movs	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
 800b946:	e004      	b.n	800b952 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b948:	4b10      	ldr	r3, [pc, #64]	; (800b98c <xTaskIncrementTick+0x170>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3301      	adds	r3, #1
 800b94e:	4a0f      	ldr	r2, [pc, #60]	; (800b98c <xTaskIncrementTick+0x170>)
 800b950:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b952:	4b0f      	ldr	r3, [pc, #60]	; (800b990 <xTaskIncrementTick+0x174>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b95a:	2301      	movs	r3, #1
 800b95c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b95e:	697b      	ldr	r3, [r7, #20]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	20001a68 	.word	0x20001a68
 800b96c:	20001a44 	.word	0x20001a44
 800b970:	200019f8 	.word	0x200019f8
 800b974:	200019fc 	.word	0x200019fc
 800b978:	20001a58 	.word	0x20001a58
 800b97c:	20001a60 	.word	0x20001a60
 800b980:	20001a48 	.word	0x20001a48
 800b984:	20001944 	.word	0x20001944
 800b988:	20001940 	.word	0x20001940
 800b98c:	20001a50 	.word	0x20001a50
 800b990:	20001a54 	.word	0x20001a54

0800b994 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b087      	sub	sp, #28
 800b998:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b99a:	4b26      	ldr	r3, [pc, #152]	; (800ba34 <vTaskSwitchContext+0xa0>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b9a2:	4b25      	ldr	r3, [pc, #148]	; (800ba38 <vTaskSwitchContext+0xa4>)
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b9a8:	e03e      	b.n	800ba28 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b9aa:	4b23      	ldr	r3, [pc, #140]	; (800ba38 <vTaskSwitchContext+0xa4>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b9b0:	4b22      	ldr	r3, [pc, #136]	; (800ba3c <vTaskSwitchContext+0xa8>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	fab3 f383 	clz	r3, r3
 800b9bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b9be:	7afb      	ldrb	r3, [r7, #11]
 800b9c0:	f1c3 031f 	rsb	r3, r3, #31
 800b9c4:	617b      	str	r3, [r7, #20]
 800b9c6:	491e      	ldr	r1, [pc, #120]	; (800ba40 <vTaskSwitchContext+0xac>)
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	4413      	add	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	440b      	add	r3, r1
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d109      	bne.n	800b9ee <vTaskSwitchContext+0x5a>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	607b      	str	r3, [r7, #4]
 800b9ec:	e7fe      	b.n	800b9ec <vTaskSwitchContext+0x58>
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4a11      	ldr	r2, [pc, #68]	; (800ba40 <vTaskSwitchContext+0xac>)
 800b9fa:	4413      	add	r3, r2
 800b9fc:	613b      	str	r3, [r7, #16]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	605a      	str	r2, [r3, #4]
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	685a      	ldr	r2, [r3, #4]
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d104      	bne.n	800ba1e <vTaskSwitchContext+0x8a>
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	4a07      	ldr	r2, [pc, #28]	; (800ba44 <vTaskSwitchContext+0xb0>)
 800ba26:	6013      	str	r3, [r2, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bc80      	pop	{r7}
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20001a68 	.word	0x20001a68
 800ba38:	20001a54 	.word	0x20001a54
 800ba3c:	20001a48 	.word	0x20001a48
 800ba40:	20001944 	.word	0x20001944
 800ba44:	20001940 	.word	0x20001940

0800ba48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d109      	bne.n	800ba6c <vTaskPlaceOnEventList+0x24>
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	60fb      	str	r3, [r7, #12]
 800ba6a:	e7fe      	b.n	800ba6a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba6c:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <vTaskPlaceOnEventList+0x44>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3318      	adds	r3, #24
 800ba72:	4619      	mov	r1, r3
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f7fd ffd3 	bl	8009a20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba7a:	2101      	movs	r1, #1
 800ba7c:	6838      	ldr	r0, [r7, #0]
 800ba7e:	f000 fbc5 	bl	800c20c <prvAddCurrentTaskToDelayedList>
}
 800ba82:	bf00      	nop
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	20001940 	.word	0x20001940

0800ba90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d109      	bne.n	800bab6 <vTaskPlaceOnEventListRestricted+0x26>
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	617b      	str	r3, [r7, #20]
 800bab4:	e7fe      	b.n	800bab4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bab6:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <vTaskPlaceOnEventListRestricted+0x50>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3318      	adds	r3, #24
 800babc:	4619      	mov	r1, r3
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7fd ff8b 	bl	80099da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800baca:	f04f 33ff 	mov.w	r3, #4294967295
 800bace:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bad0:	6879      	ldr	r1, [r7, #4]
 800bad2:	68b8      	ldr	r0, [r7, #8]
 800bad4:	f000 fb9a 	bl	800c20c <prvAddCurrentTaskToDelayedList>
	}
 800bad8:	bf00      	nop
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20001940 	.word	0x20001940

0800bae4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d109      	bne.n	800bb0e <xTaskRemoveFromEventList+0x2a>
 800bafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bafe:	f383 8811 	msr	BASEPRI, r3
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	60fb      	str	r3, [r7, #12]
 800bb0c:	e7fe      	b.n	800bb0c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	3318      	adds	r3, #24
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fd ffbc 	bl	8009a90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb18:	4b1d      	ldr	r3, [pc, #116]	; (800bb90 <xTaskRemoveFromEventList+0xac>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d11c      	bne.n	800bb5a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	3304      	adds	r3, #4
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7fd ffb3 	bl	8009a90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2e:	2201      	movs	r2, #1
 800bb30:	409a      	lsls	r2, r3
 800bb32:	4b18      	ldr	r3, [pc, #96]	; (800bb94 <xTaskRemoveFromEventList+0xb0>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	4a16      	ldr	r2, [pc, #88]	; (800bb94 <xTaskRemoveFromEventList+0xb0>)
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4a13      	ldr	r2, [pc, #76]	; (800bb98 <xTaskRemoveFromEventList+0xb4>)
 800bb4a:	441a      	add	r2, r3
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	4610      	mov	r0, r2
 800bb54:	f7fd ff41 	bl	80099da <vListInsertEnd>
 800bb58:	e005      	b.n	800bb66 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	3318      	adds	r3, #24
 800bb5e:	4619      	mov	r1, r3
 800bb60:	480e      	ldr	r0, [pc, #56]	; (800bb9c <xTaskRemoveFromEventList+0xb8>)
 800bb62:	f7fd ff3a 	bl	80099da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6a:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <xTaskRemoveFromEventList+0xbc>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d905      	bls.n	800bb80 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb74:	2301      	movs	r3, #1
 800bb76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb78:	4b0a      	ldr	r3, [pc, #40]	; (800bba4 <xTaskRemoveFromEventList+0xc0>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	e001      	b.n	800bb84 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bb84:	697b      	ldr	r3, [r7, #20]
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20001a68 	.word	0x20001a68
 800bb94:	20001a48 	.word	0x20001a48
 800bb98:	20001944 	.word	0x20001944
 800bb9c:	20001a00 	.word	0x20001a00
 800bba0:	20001940 	.word	0x20001940
 800bba4:	20001a54 	.word	0x20001a54

0800bba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbb0:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <vTaskInternalSetTimeOutState+0x24>)
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <vTaskInternalSetTimeOutState+0x28>)
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	605a      	str	r2, [r3, #4]
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bc80      	pop	{r7}
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	20001a58 	.word	0x20001a58
 800bbd0:	20001a44 	.word	0x20001a44

0800bbd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d109      	bne.n	800bbf8 <xTaskCheckForTimeOut+0x24>
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	613b      	str	r3, [r7, #16]
 800bbf6:	e7fe      	b.n	800bbf6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d109      	bne.n	800bc12 <xTaskCheckForTimeOut+0x3e>
 800bbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	60fb      	str	r3, [r7, #12]
 800bc10:	e7fe      	b.n	800bc10 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bc12:	f7fe f851 	bl	8009cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc16:	4b1d      	ldr	r3, [pc, #116]	; (800bc8c <xTaskCheckForTimeOut+0xb8>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	69ba      	ldr	r2, [r7, #24]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d102      	bne.n	800bc36 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc30:	2300      	movs	r3, #0
 800bc32:	61fb      	str	r3, [r7, #28]
 800bc34:	e023      	b.n	800bc7e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <xTaskCheckForTimeOut+0xbc>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d007      	beq.n	800bc52 <xTaskCheckForTimeOut+0x7e>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d802      	bhi.n	800bc52 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	61fb      	str	r3, [r7, #28]
 800bc50:	e015      	b.n	800bc7e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d90b      	bls.n	800bc74 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	1ad2      	subs	r2, r2, r3
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff ff9d 	bl	800bba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	61fb      	str	r3, [r7, #28]
 800bc72:	e004      	b.n	800bc7e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	2200      	movs	r2, #0
 800bc78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc7e:	f7fe f849 	bl	8009d14 <vPortExitCritical>

	return xReturn;
 800bc82:	69fb      	ldr	r3, [r7, #28]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3720      	adds	r7, #32
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20001a44 	.word	0x20001a44
 800bc90:	20001a58 	.word	0x20001a58

0800bc94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc98:	4b03      	ldr	r3, [pc, #12]	; (800bca8 <vTaskMissedYield+0x14>)
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	601a      	str	r2, [r3, #0]
}
 800bc9e:	bf00      	nop
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bc80      	pop	{r7}
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20001a54 	.word	0x20001a54

0800bcac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcb4:	f000 f852 	bl	800bd5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcb8:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <prvIdleTask+0x28>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d9f9      	bls.n	800bcb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcc0:	4b05      	ldr	r3, [pc, #20]	; (800bcd8 <prvIdleTask+0x2c>)
 800bcc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc6:	601a      	str	r2, [r3, #0]
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcd0:	e7f0      	b.n	800bcb4 <prvIdleTask+0x8>
 800bcd2:	bf00      	nop
 800bcd4:	20001944 	.word	0x20001944
 800bcd8:	e000ed04 	.word	0xe000ed04

0800bcdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bce2:	2300      	movs	r3, #0
 800bce4:	607b      	str	r3, [r7, #4]
 800bce6:	e00c      	b.n	800bd02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	4613      	mov	r3, r2
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4a12      	ldr	r2, [pc, #72]	; (800bd3c <prvInitialiseTaskLists+0x60>)
 800bcf4:	4413      	add	r3, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd fe44 	bl	8009984 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	607b      	str	r3, [r7, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b06      	cmp	r3, #6
 800bd06:	d9ef      	bls.n	800bce8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd08:	480d      	ldr	r0, [pc, #52]	; (800bd40 <prvInitialiseTaskLists+0x64>)
 800bd0a:	f7fd fe3b 	bl	8009984 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd0e:	480d      	ldr	r0, [pc, #52]	; (800bd44 <prvInitialiseTaskLists+0x68>)
 800bd10:	f7fd fe38 	bl	8009984 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd14:	480c      	ldr	r0, [pc, #48]	; (800bd48 <prvInitialiseTaskLists+0x6c>)
 800bd16:	f7fd fe35 	bl	8009984 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd1a:	480c      	ldr	r0, [pc, #48]	; (800bd4c <prvInitialiseTaskLists+0x70>)
 800bd1c:	f7fd fe32 	bl	8009984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd20:	480b      	ldr	r0, [pc, #44]	; (800bd50 <prvInitialiseTaskLists+0x74>)
 800bd22:	f7fd fe2f 	bl	8009984 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd26:	4b0b      	ldr	r3, [pc, #44]	; (800bd54 <prvInitialiseTaskLists+0x78>)
 800bd28:	4a05      	ldr	r2, [pc, #20]	; (800bd40 <prvInitialiseTaskLists+0x64>)
 800bd2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <prvInitialiseTaskLists+0x7c>)
 800bd2e:	4a05      	ldr	r2, [pc, #20]	; (800bd44 <prvInitialiseTaskLists+0x68>)
 800bd30:	601a      	str	r2, [r3, #0]
}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
 800bd3a:	bf00      	nop
 800bd3c:	20001944 	.word	0x20001944
 800bd40:	200019d0 	.word	0x200019d0
 800bd44:	200019e4 	.word	0x200019e4
 800bd48:	20001a00 	.word	0x20001a00
 800bd4c:	20001a14 	.word	0x20001a14
 800bd50:	20001a2c 	.word	0x20001a2c
 800bd54:	200019f8 	.word	0x200019f8
 800bd58:	200019fc 	.word	0x200019fc

0800bd5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd62:	e019      	b.n	800bd98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd64:	f7fd ffa8 	bl	8009cb8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bd68:	4b0f      	ldr	r3, [pc, #60]	; (800bda8 <prvCheckTasksWaitingTermination+0x4c>)
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	68db      	ldr	r3, [r3, #12]
 800bd6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3304      	adds	r3, #4
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fd fe8b 	bl	8009a90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd7a:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <prvCheckTasksWaitingTermination+0x50>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <prvCheckTasksWaitingTermination+0x50>)
 800bd82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd84:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <prvCheckTasksWaitingTermination+0x54>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <prvCheckTasksWaitingTermination+0x54>)
 800bd8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd8e:	f7fd ffc1 	bl	8009d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f80e 	bl	800bdb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd98:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <prvCheckTasksWaitingTermination+0x54>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e1      	bne.n	800bd64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bda0:	bf00      	nop
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	20001a14 	.word	0x20001a14
 800bdac:	20001a40 	.word	0x20001a40
 800bdb0:	20001a28 	.word	0x20001a28

0800bdb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d108      	bne.n	800bdd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe f92c 	bl	800a028 <vPortFree>
				vPortFree( pxTCB );
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7fe f929 	bl	800a028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdd6:	e017      	b.n	800be08 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d103      	bne.n	800bdea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7fe f920 	bl	800a028 <vPortFree>
	}
 800bde8:	e00e      	b.n	800be08 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d009      	beq.n	800be08 <prvDeleteTCB+0x54>
 800bdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e7fe      	b.n	800be06 <prvDeleteTCB+0x52>
	}
 800be08:	bf00      	nop
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be16:	4b0e      	ldr	r3, [pc, #56]	; (800be50 <prvResetNextTaskUnblockTime+0x40>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <prvResetNextTaskUnblockTime+0x14>
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <prvResetNextTaskUnblockTime+0x16>
 800be24:	2300      	movs	r3, #0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d004      	beq.n	800be34 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be2a:	4b0a      	ldr	r3, [pc, #40]	; (800be54 <prvResetNextTaskUnblockTime+0x44>)
 800be2c:	f04f 32ff 	mov.w	r2, #4294967295
 800be30:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be32:	e008      	b.n	800be46 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be34:	4b06      	ldr	r3, [pc, #24]	; (800be50 <prvResetNextTaskUnblockTime+0x40>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	4a04      	ldr	r2, [pc, #16]	; (800be54 <prvResetNextTaskUnblockTime+0x44>)
 800be44:	6013      	str	r3, [r2, #0]
}
 800be46:	bf00      	nop
 800be48:	370c      	adds	r7, #12
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bc80      	pop	{r7}
 800be4e:	4770      	bx	lr
 800be50:	200019f8 	.word	0x200019f8
 800be54:	20001a60 	.word	0x20001a60

0800be58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be5e:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <xTaskGetSchedulerState+0x34>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d102      	bne.n	800be6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be66:	2301      	movs	r3, #1
 800be68:	607b      	str	r3, [r7, #4]
 800be6a:	e008      	b.n	800be7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be6c:	4b08      	ldr	r3, [pc, #32]	; (800be90 <xTaskGetSchedulerState+0x38>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d102      	bne.n	800be7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be74:	2302      	movs	r3, #2
 800be76:	607b      	str	r3, [r7, #4]
 800be78:	e001      	b.n	800be7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be7a:	2300      	movs	r3, #0
 800be7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be7e:	687b      	ldr	r3, [r7, #4]
	}
 800be80:	4618      	mov	r0, r3
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	bc80      	pop	{r7}
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	20001a4c 	.word	0x20001a4c
 800be90:	20001a68 	.word	0x20001a68

0800be94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d06e      	beq.n	800bf88 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beae:	4b39      	ldr	r3, [pc, #228]	; (800bf94 <xTaskPriorityInherit+0x100>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d25e      	bcs.n	800bf76 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	db06      	blt.n	800bece <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bec0:	4b34      	ldr	r3, [pc, #208]	; (800bf94 <xTaskPriorityInherit+0x100>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec6:	f1c3 0207 	rsb	r2, r3, #7
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	6959      	ldr	r1, [r3, #20]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	4a2e      	ldr	r2, [pc, #184]	; (800bf98 <xTaskPriorityInherit+0x104>)
 800bee0:	4413      	add	r3, r2
 800bee2:	4299      	cmp	r1, r3
 800bee4:	d101      	bne.n	800beea <xTaskPriorityInherit+0x56>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e000      	b.n	800beec <xTaskPriorityInherit+0x58>
 800beea:	2300      	movs	r3, #0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d03a      	beq.n	800bf66 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	3304      	adds	r3, #4
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fd fdcb 	bl	8009a90 <uxListRemove>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d115      	bne.n	800bf2c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf04:	4924      	ldr	r1, [pc, #144]	; (800bf98 <xTaskPriorityInherit+0x104>)
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	440b      	add	r3, r1
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <xTaskPriorityInherit+0x98>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf20:	43da      	mvns	r2, r3
 800bf22:	4b1e      	ldr	r3, [pc, #120]	; (800bf9c <xTaskPriorityInherit+0x108>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4013      	ands	r3, r2
 800bf28:	4a1c      	ldr	r2, [pc, #112]	; (800bf9c <xTaskPriorityInherit+0x108>)
 800bf2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf2c:	4b19      	ldr	r3, [pc, #100]	; (800bf94 <xTaskPriorityInherit+0x100>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	409a      	lsls	r2, r3
 800bf3e:	4b17      	ldr	r3, [pc, #92]	; (800bf9c <xTaskPriorityInherit+0x108>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	4a15      	ldr	r2, [pc, #84]	; (800bf9c <xTaskPriorityInherit+0x108>)
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4a10      	ldr	r2, [pc, #64]	; (800bf98 <xTaskPriorityInherit+0x104>)
 800bf56:	441a      	add	r2, r3
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fd fd3b 	bl	80099da <vListInsertEnd>
 800bf64:	e004      	b.n	800bf70 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf66:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <xTaskPriorityInherit+0x100>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	e008      	b.n	800bf88 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf7a:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <xTaskPriorityInherit+0x100>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d201      	bcs.n	800bf88 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf88:	68fb      	ldr	r3, [r7, #12]
	}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20001940 	.word	0x20001940
 800bf98:	20001944 	.word	0x20001944
 800bf9c:	20001a48 	.word	0x20001a48

0800bfa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d06c      	beq.n	800c090 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfb6:	4b39      	ldr	r3, [pc, #228]	; (800c09c <xTaskPriorityDisinherit+0xfc>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d009      	beq.n	800bfd4 <xTaskPriorityDisinherit+0x34>
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	e7fe      	b.n	800bfd2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d109      	bne.n	800bff0 <xTaskPriorityDisinherit+0x50>
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	60bb      	str	r3, [r7, #8]
 800bfee:	e7fe      	b.n	800bfee <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bff4:	1e5a      	subs	r2, r3, #1
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c002:	429a      	cmp	r2, r3
 800c004:	d044      	beq.n	800c090 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d140      	bne.n	800c090 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	3304      	adds	r3, #4
 800c012:	4618      	mov	r0, r3
 800c014:	f7fd fd3c 	bl	8009a90 <uxListRemove>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d115      	bne.n	800c04a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c022:	491f      	ldr	r1, [pc, #124]	; (800c0a0 <xTaskPriorityDisinherit+0x100>)
 800c024:	4613      	mov	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	440b      	add	r3, r1
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xTaskPriorityDisinherit+0xaa>
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	2201      	movs	r2, #1
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	43da      	mvns	r2, r3
 800c040:	4b18      	ldr	r3, [pc, #96]	; (800c0a4 <xTaskPriorityDisinherit+0x104>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4013      	ands	r3, r2
 800c046:	4a17      	ldr	r2, [pc, #92]	; (800c0a4 <xTaskPriorityDisinherit+0x104>)
 800c048:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c056:	f1c3 0207 	rsb	r2, r3, #7
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c062:	2201      	movs	r2, #1
 800c064:	409a      	lsls	r2, r3
 800c066:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <xTaskPriorityDisinherit+0x104>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	4a0d      	ldr	r2, [pc, #52]	; (800c0a4 <xTaskPriorityDisinherit+0x104>)
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4a08      	ldr	r2, [pc, #32]	; (800c0a0 <xTaskPriorityDisinherit+0x100>)
 800c07e:	441a      	add	r2, r3
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	3304      	adds	r3, #4
 800c084:	4619      	mov	r1, r3
 800c086:	4610      	mov	r0, r2
 800c088:	f7fd fca7 	bl	80099da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c08c:	2301      	movs	r3, #1
 800c08e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c090:	697b      	ldr	r3, [r7, #20]
	}
 800c092:	4618      	mov	r0, r3
 800c094:	3718      	adds	r7, #24
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop
 800c09c:	20001940 	.word	0x20001940
 800c0a0:	20001944 	.word	0x20001944
 800c0a4:	20001a48 	.word	0x20001a48

0800c0a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b088      	sub	sp, #32
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 8086 	beq.w	800c1ce <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d109      	bne.n	800c0de <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	e7fe      	b.n	800c0dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d202      	bcs.n	800c0ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	61fb      	str	r3, [r7, #28]
 800c0ec:	e002      	b.n	800c0f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d067      	beq.n	800c1ce <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	429a      	cmp	r2, r3
 800c106:	d162      	bne.n	800c1ce <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c108:	4b33      	ldr	r3, [pc, #204]	; (800c1d8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	69ba      	ldr	r2, [r7, #24]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d109      	bne.n	800c126 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	60bb      	str	r3, [r7, #8]
 800c124:	e7fe      	b.n	800c124 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c12a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	69fa      	ldr	r2, [r7, #28]
 800c130:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	db04      	blt.n	800c144 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	f1c3 0207 	rsb	r2, r3, #7
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	6959      	ldr	r1, [r3, #20]
 800c148:	693a      	ldr	r2, [r7, #16]
 800c14a:	4613      	mov	r3, r2
 800c14c:	009b      	lsls	r3, r3, #2
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4a22      	ldr	r2, [pc, #136]	; (800c1dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c154:	4413      	add	r3, r2
 800c156:	4299      	cmp	r1, r3
 800c158:	d101      	bne.n	800c15e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c15e:	2300      	movs	r3, #0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d034      	beq.n	800c1ce <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	3304      	adds	r3, #4
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fd fc91 	bl	8009a90 <uxListRemove>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d115      	bne.n	800c1a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c178:	4918      	ldr	r1, [pc, #96]	; (800c1dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c17a:	4613      	mov	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	440b      	add	r3, r1
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10a      	bne.n	800c1a0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18e:	2201      	movs	r2, #1
 800c190:	fa02 f303 	lsl.w	r3, r2, r3
 800c194:	43da      	mvns	r2, r3
 800c196:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4013      	ands	r3, r2
 800c19c:	4a10      	ldr	r2, [pc, #64]	; (800c1e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c19e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	409a      	lsls	r2, r3
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	; (800c1e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	4a0c      	ldr	r2, [pc, #48]	; (800c1e0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4a07      	ldr	r2, [pc, #28]	; (800c1dc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c1c0:	441a      	add	r2, r3
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	f7fd fc06 	bl	80099da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1ce:	bf00      	nop
 800c1d0:	3720      	adds	r7, #32
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20001940 	.word	0x20001940
 800c1dc:	20001944 	.word	0x20001944
 800c1e0:	20001a48 	.word	0x20001a48

0800c1e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c1e4:	b480      	push	{r7}
 800c1e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1e8:	4b07      	ldr	r3, [pc, #28]	; (800c208 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d004      	beq.n	800c1fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c1f0:	4b05      	ldr	r3, [pc, #20]	; (800c208 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1f6:	3201      	adds	r2, #1
 800c1f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c1fa:	4b03      	ldr	r3, [pc, #12]	; (800c208 <pvTaskIncrementMutexHeldCount+0x24>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
	}
 800c1fe:	4618      	mov	r0, r3
 800c200:	46bd      	mov	sp, r7
 800c202:	bc80      	pop	{r7}
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	20001940 	.word	0x20001940

0800c20c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c216:	4b29      	ldr	r3, [pc, #164]	; (800c2bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c21c:	4b28      	ldr	r3, [pc, #160]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3304      	adds	r3, #4
 800c222:	4618      	mov	r0, r3
 800c224:	f7fd fc34 	bl	8009a90 <uxListRemove>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d10b      	bne.n	800c246 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c22e:	4b24      	ldr	r3, [pc, #144]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c234:	2201      	movs	r2, #1
 800c236:	fa02 f303 	lsl.w	r3, r2, r3
 800c23a:	43da      	mvns	r2, r3
 800c23c:	4b21      	ldr	r3, [pc, #132]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4013      	ands	r3, r2
 800c242:	4a20      	ldr	r2, [pc, #128]	; (800c2c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c244:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c24c:	d10a      	bne.n	800c264 <prvAddCurrentTaskToDelayedList+0x58>
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d007      	beq.n	800c264 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c254:	4b1a      	ldr	r3, [pc, #104]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	3304      	adds	r3, #4
 800c25a:	4619      	mov	r1, r3
 800c25c:	481a      	ldr	r0, [pc, #104]	; (800c2c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c25e:	f7fd fbbc 	bl	80099da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c262:	e026      	b.n	800c2b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4413      	add	r3, r2
 800c26a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c26c:	4b14      	ldr	r3, [pc, #80]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d209      	bcs.n	800c290 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c27c:	4b13      	ldr	r3, [pc, #76]	; (800c2cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3304      	adds	r3, #4
 800c286:	4619      	mov	r1, r3
 800c288:	4610      	mov	r0, r2
 800c28a:	f7fd fbc9 	bl	8009a20 <vListInsert>
}
 800c28e:	e010      	b.n	800c2b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c290:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7fd fbbf 	bl	8009a20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2a2:	4b0c      	ldr	r3, [pc, #48]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68ba      	ldr	r2, [r7, #8]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d202      	bcs.n	800c2b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c2ac:	4a09      	ldr	r2, [pc, #36]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	6013      	str	r3, [r2, #0]
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20001a44 	.word	0x20001a44
 800c2c0:	20001940 	.word	0x20001940
 800c2c4:	20001a48 	.word	0x20001a48
 800c2c8:	20001a2c 	.word	0x20001a2c
 800c2cc:	200019fc 	.word	0x200019fc
 800c2d0:	200019f8 	.word	0x200019f8
 800c2d4:	20001a60 	.word	0x20001a60

0800c2d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2e2:	f000 fb37 	bl	800c954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2e6:	4b1c      	ldr	r3, [pc, #112]	; (800c358 <xTimerCreateTimerTask+0x80>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d021      	beq.n	800c332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c2f6:	1d3a      	adds	r2, r7, #4
 800c2f8:	f107 0108 	add.w	r1, r7, #8
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	4618      	mov	r0, r3
 800c302:	f7f3 ff6f 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	9202      	str	r2, [sp, #8]
 800c30e:	9301      	str	r3, [sp, #4]
 800c310:	2302      	movs	r3, #2
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	2300      	movs	r3, #0
 800c316:	460a      	mov	r2, r1
 800c318:	4910      	ldr	r1, [pc, #64]	; (800c35c <xTimerCreateTimerTask+0x84>)
 800c31a:	4811      	ldr	r0, [pc, #68]	; (800c360 <xTimerCreateTimerTask+0x88>)
 800c31c:	f7fe ff16 	bl	800b14c <xTaskCreateStatic>
 800c320:	4602      	mov	r2, r0
 800c322:	4b10      	ldr	r3, [pc, #64]	; (800c364 <xTimerCreateTimerTask+0x8c>)
 800c324:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c326:	4b0f      	ldr	r3, [pc, #60]	; (800c364 <xTimerCreateTimerTask+0x8c>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c32e:	2301      	movs	r3, #1
 800c330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d109      	bne.n	800c34c <xTimerCreateTimerTask+0x74>
 800c338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33c:	f383 8811 	msr	BASEPRI, r3
 800c340:	f3bf 8f6f 	isb	sy
 800c344:	f3bf 8f4f 	dsb	sy
 800c348:	613b      	str	r3, [r7, #16]
 800c34a:	e7fe      	b.n	800c34a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c34c:	697b      	ldr	r3, [r7, #20]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	20001a9c 	.word	0x20001a9c
 800c35c:	0800d43c 	.word	0x0800d43c
 800c360:	0800c59d 	.word	0x0800c59d
 800c364:	20001aa0 	.word	0x20001aa0

0800c368 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b088      	sub	sp, #32
 800c36c:	af02      	add	r7, sp, #8
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c376:	202c      	movs	r0, #44	; 0x2c
 800c378:	f7fd fd94 	bl	8009ea4 <pvPortMalloc>
 800c37c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d00d      	beq.n	800c3a0 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	68b9      	ldr	r1, [r7, #8]
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f000 f844 	bl	800c420 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c3a0:	697b      	ldr	r3, [r7, #20]
	}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3718      	adds	r7, #24
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b08a      	sub	sp, #40	; 0x28
 800c3ae:	af02      	add	r7, sp, #8
 800c3b0:	60f8      	str	r0, [r7, #12]
 800c3b2:	60b9      	str	r1, [r7, #8]
 800c3b4:	607a      	str	r2, [r7, #4]
 800c3b6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c3b8:	232c      	movs	r3, #44	; 0x2c
 800c3ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2b2c      	cmp	r3, #44	; 0x2c
 800c3c0:	d009      	beq.n	800c3d6 <xTimerCreateStatic+0x2c>
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	61bb      	str	r3, [r7, #24]
 800c3d4:	e7fe      	b.n	800c3d4 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d109      	bne.n	800c3f0 <xTimerCreateStatic+0x46>
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	f383 8811 	msr	BASEPRI, r3
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	617b      	str	r3, [r7, #20]
 800c3ee:	e7fe      	b.n	800c3ee <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00d      	beq.n	800c416 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	9300      	str	r3, [sp, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	68b9      	ldr	r1, [r7, #8]
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f000 f809 	bl	800c420 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c416:	69fb      	ldr	r3, [r7, #28]
	}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <prvInitialiseNewTimer+0x28>
 800c434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	e7fe      	b.n	800c446 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d015      	beq.n	800c47a <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c44e:	f000 fa81 	bl	800c954 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	6a3a      	ldr	r2, [r7, #32]
 800c46e:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c472:	3304      	adds	r3, #4
 800c474:	4618      	mov	r0, r3
 800c476:	f7fd faa4 	bl	80099c2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c47a:	bf00      	nop
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
	...

0800c484 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08a      	sub	sp, #40	; 0x28
 800c488:	af00      	add	r7, sp, #0
 800c48a:	60f8      	str	r0, [r7, #12]
 800c48c:	60b9      	str	r1, [r7, #8]
 800c48e:	607a      	str	r2, [r7, #4]
 800c490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c492:	2300      	movs	r3, #0
 800c494:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d109      	bne.n	800c4b0 <xTimerGenericCommand+0x2c>
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	623b      	str	r3, [r7, #32]
 800c4ae:	e7fe      	b.n	800c4ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4b0:	4b19      	ldr	r3, [pc, #100]	; (800c518 <xTimerGenericCommand+0x94>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d02a      	beq.n	800c50e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	2b05      	cmp	r3, #5
 800c4c8:	dc18      	bgt.n	800c4fc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4ca:	f7ff fcc5 	bl	800be58 <xTaskGetSchedulerState>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	d109      	bne.n	800c4e8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4d4:	4b10      	ldr	r3, [pc, #64]	; (800c518 <xTimerGenericCommand+0x94>)
 800c4d6:	6818      	ldr	r0, [r3, #0]
 800c4d8:	f107 0114 	add.w	r1, r7, #20
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4e0:	f7fe f838 	bl	800a554 <xQueueGenericSend>
 800c4e4:	6278      	str	r0, [r7, #36]	; 0x24
 800c4e6:	e012      	b.n	800c50e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4e8:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <xTimerGenericCommand+0x94>)
 800c4ea:	6818      	ldr	r0, [r3, #0]
 800c4ec:	f107 0114 	add.w	r1, r7, #20
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f7fe f82e 	bl	800a554 <xQueueGenericSend>
 800c4f8:	6278      	str	r0, [r7, #36]	; 0x24
 800c4fa:	e008      	b.n	800c50e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4fc:	4b06      	ldr	r3, [pc, #24]	; (800c518 <xTimerGenericCommand+0x94>)
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	f107 0114 	add.w	r1, r7, #20
 800c504:	2300      	movs	r3, #0
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	f7fe f91e 	bl	800a748 <xQueueGenericSendFromISR>
 800c50c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c510:	4618      	mov	r0, r3
 800c512:	3728      	adds	r7, #40	; 0x28
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	20001a9c 	.word	0x20001a9c

0800c51c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af02      	add	r7, sp, #8
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c526:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <prvProcessExpiredTimer+0x7c>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	3304      	adds	r3, #4
 800c534:	4618      	mov	r0, r3
 800c536:	f7fd faab 	bl	8009a90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	69db      	ldr	r3, [r3, #28]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d121      	bne.n	800c586 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	699a      	ldr	r2, [r3, #24]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	18d1      	adds	r1, r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	683a      	ldr	r2, [r7, #0]
 800c54e:	6978      	ldr	r0, [r7, #20]
 800c550:	f000 f8c8 	bl	800c6e4 <prvInsertTimerInActiveList>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d015      	beq.n	800c586 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c55a:	2300      	movs	r3, #0
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	2300      	movs	r3, #0
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	2100      	movs	r1, #0
 800c564:	6978      	ldr	r0, [r7, #20]
 800c566:	f7ff ff8d 	bl	800c484 <xTimerGenericCommand>
 800c56a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d109      	bne.n	800c586 <prvProcessExpiredTimer+0x6a>
 800c572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	60fb      	str	r3, [r7, #12]
 800c584:	e7fe      	b.n	800c584 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	6978      	ldr	r0, [r7, #20]
 800c58c:	4798      	blx	r3
}
 800c58e:	bf00      	nop
 800c590:	3718      	adds	r7, #24
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20001a94 	.word	0x20001a94

0800c59c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5a4:	f107 0308 	add.w	r3, r7, #8
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 f857 	bl	800c65c <prvGetNextExpireTime>
 800c5ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 f803 	bl	800c5c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5ba:	f000 f8d5 	bl	800c768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5be:	e7f1      	b.n	800c5a4 <prvTimerTask+0x8>

0800c5c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5ca:	f7ff f86f 	bl	800b6ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5ce:	f107 0308 	add.w	r3, r7, #8
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 f866 	bl	800c6a4 <prvSampleTimeNow>
 800c5d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d130      	bne.n	800c642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d10a      	bne.n	800c5fc <prvProcessTimerOrBlockTask+0x3c>
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d806      	bhi.n	800c5fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5ee:	f7ff f86b 	bl	800b6c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5f2:	68f9      	ldr	r1, [r7, #12]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff ff91 	bl	800c51c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5fa:	e024      	b.n	800c646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d008      	beq.n	800c614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c602:	4b13      	ldr	r3, [pc, #76]	; (800c650 <prvProcessTimerOrBlockTask+0x90>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	bf0c      	ite	eq
 800c60c:	2301      	moveq	r3, #1
 800c60e:	2300      	movne	r3, #0
 800c610:	b2db      	uxtb	r3, r3
 800c612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c614:	4b0f      	ldr	r3, [pc, #60]	; (800c654 <prvProcessTimerOrBlockTask+0x94>)
 800c616:	6818      	ldr	r0, [r3, #0]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	4619      	mov	r1, r3
 800c622:	f7fe fd5f 	bl	800b0e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c626:	f7ff f84f 	bl	800b6c8 <xTaskResumeAll>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c630:	4b09      	ldr	r3, [pc, #36]	; (800c658 <prvProcessTimerOrBlockTask+0x98>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
}
 800c640:	e001      	b.n	800c646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c642:	f7ff f841 	bl	800b6c8 <xTaskResumeAll>
}
 800c646:	bf00      	nop
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	20001a98 	.word	0x20001a98
 800c654:	20001a9c 	.word	0x20001a9c
 800c658:	e000ed04 	.word	0xe000ed04

0800c65c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c664:	4b0e      	ldr	r3, [pc, #56]	; (800c6a0 <prvGetNextExpireTime+0x44>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	bf0c      	ite	eq
 800c66e:	2301      	moveq	r3, #1
 800c670:	2300      	movne	r3, #0
 800c672:	b2db      	uxtb	r3, r3
 800c674:	461a      	mov	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d105      	bne.n	800c68e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c682:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <prvGetNextExpireTime+0x44>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	60fb      	str	r3, [r7, #12]
 800c68c:	e001      	b.n	800c692 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c68e:	2300      	movs	r3, #0
 800c690:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c692:	68fb      	ldr	r3, [r7, #12]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	bc80      	pop	{r7}
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	20001a94 	.word	0x20001a94

0800c6a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6ac:	f7ff f8a8 	bl	800b800 <xTaskGetTickCount>
 800c6b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6b2:	4b0b      	ldr	r3, [pc, #44]	; (800c6e0 <prvSampleTimeNow+0x3c>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68fa      	ldr	r2, [r7, #12]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d205      	bcs.n	800c6c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6bc:	f000 f8ea 	bl	800c894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	601a      	str	r2, [r3, #0]
 800c6c6:	e002      	b.n	800c6ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6ce:	4a04      	ldr	r2, [pc, #16]	; (800c6e0 <prvSampleTimeNow+0x3c>)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20001aa4 	.word	0x20001aa4

0800c6e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	429a      	cmp	r2, r3
 800c708:	d812      	bhi.n	800c730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	1ad2      	subs	r2, r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	429a      	cmp	r2, r3
 800c716:	d302      	bcc.n	800c71e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c718:	2301      	movs	r3, #1
 800c71a:	617b      	str	r3, [r7, #20]
 800c71c:	e01b      	b.n	800c756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c71e:	4b10      	ldr	r3, [pc, #64]	; (800c760 <prvInsertTimerInActiveList+0x7c>)
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3304      	adds	r3, #4
 800c726:	4619      	mov	r1, r3
 800c728:	4610      	mov	r0, r2
 800c72a:	f7fd f979 	bl	8009a20 <vListInsert>
 800c72e:	e012      	b.n	800c756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	429a      	cmp	r2, r3
 800c736:	d206      	bcs.n	800c746 <prvInsertTimerInActiveList+0x62>
 800c738:	68ba      	ldr	r2, [r7, #8]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d302      	bcc.n	800c746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c740:	2301      	movs	r3, #1
 800c742:	617b      	str	r3, [r7, #20]
 800c744:	e007      	b.n	800c756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c746:	4b07      	ldr	r3, [pc, #28]	; (800c764 <prvInsertTimerInActiveList+0x80>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f7fd f965 	bl	8009a20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c756:	697b      	ldr	r3, [r7, #20]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20001a98 	.word	0x20001a98
 800c764:	20001a94 	.word	0x20001a94

0800c768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b08c      	sub	sp, #48	; 0x30
 800c76c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c76e:	e07f      	b.n	800c870 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	db7c      	blt.n	800c870 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	695b      	ldr	r3, [r3, #20]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d004      	beq.n	800c78c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c784:	3304      	adds	r3, #4
 800c786:	4618      	mov	r0, r3
 800c788:	f7fd f982 	bl	8009a90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c78c:	1d3b      	adds	r3, r7, #4
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff ff88 	bl	800c6a4 <prvSampleTimeNow>
 800c794:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2b09      	cmp	r3, #9
 800c79a:	d868      	bhi.n	800c86e <prvProcessReceivedCommands+0x106>
 800c79c:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <prvProcessReceivedCommands+0x3c>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7cd 	.word	0x0800c7cd
 800c7a8:	0800c7cd 	.word	0x0800c7cd
 800c7ac:	0800c7cd 	.word	0x0800c7cd
 800c7b0:	0800c871 	.word	0x0800c871
 800c7b4:	0800c827 	.word	0x0800c827
 800c7b8:	0800c85d 	.word	0x0800c85d
 800c7bc:	0800c7cd 	.word	0x0800c7cd
 800c7c0:	0800c7cd 	.word	0x0800c7cd
 800c7c4:	0800c871 	.word	0x0800c871
 800c7c8:	0800c827 	.word	0x0800c827
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	18d1      	adds	r1, r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	6a3a      	ldr	r2, [r7, #32]
 800c7d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7da:	f7ff ff83 	bl	800c6e4 <prvInsertTimerInActiveList>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d045      	beq.n	800c870 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d13d      	bne.n	800c870 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	441a      	add	r2, r3
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	2300      	movs	r3, #0
 800c802:	2100      	movs	r1, #0
 800c804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c806:	f7ff fe3d 	bl	800c484 <xTimerGenericCommand>
 800c80a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d12e      	bne.n	800c870 <prvProcessReceivedCommands+0x108>
 800c812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c816:	f383 8811 	msr	BASEPRI, r3
 800c81a:	f3bf 8f6f 	isb	sy
 800c81e:	f3bf 8f4f 	dsb	sy
 800c822:	61bb      	str	r3, [r7, #24]
 800c824:	e7fe      	b.n	800c824 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d109      	bne.n	800c848 <prvProcessReceivedCommands+0xe0>
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	617b      	str	r3, [r7, #20]
 800c846:	e7fe      	b.n	800c846 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	699a      	ldr	r2, [r3, #24]
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	18d1      	adds	r1, r2, r3
 800c850:	6a3b      	ldr	r3, [r7, #32]
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c856:	f7ff ff45 	bl	800c6e4 <prvInsertTimerInActiveList>
					break;
 800c85a:	e009      	b.n	800c870 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c862:	2b00      	cmp	r3, #0
 800c864:	d104      	bne.n	800c870 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800c866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c868:	f7fd fbde 	bl	800a028 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c86c:	e000      	b.n	800c870 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800c86e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c870:	4b07      	ldr	r3, [pc, #28]	; (800c890 <prvProcessReceivedCommands+0x128>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f107 0108 	add.w	r1, r7, #8
 800c878:	2200      	movs	r2, #0
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe f882 	bl	800a984 <xQueueReceive>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	f47f af74 	bne.w	800c770 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c888:	bf00      	nop
 800c88a:	3728      	adds	r7, #40	; 0x28
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20001a9c 	.word	0x20001a9c

0800c894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b088      	sub	sp, #32
 800c898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c89a:	e044      	b.n	800c926 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c89c:	4b2b      	ldr	r3, [pc, #172]	; (800c94c <prvSwitchTimerLists+0xb8>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68db      	ldr	r3, [r3, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a6:	4b29      	ldr	r3, [pc, #164]	; (800c94c <prvSwitchTimerLists+0xb8>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	3304      	adds	r3, #4
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fd f8eb 	bl	8009a90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	6938      	ldr	r0, [r7, #16]
 800c8c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	69db      	ldr	r3, [r3, #28]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d12d      	bne.n	800c926 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	699a      	ldr	r2, [r3, #24]
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d90e      	bls.n	800c8fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	68fa      	ldr	r2, [r7, #12]
 800c8e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8e8:	4b18      	ldr	r3, [pc, #96]	; (800c94c <prvSwitchTimerLists+0xb8>)
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	3304      	adds	r3, #4
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4610      	mov	r0, r2
 800c8f4:	f7fd f894 	bl	8009a20 <vListInsert>
 800c8f8:	e015      	b.n	800c926 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	2300      	movs	r3, #0
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	2100      	movs	r1, #0
 800c904:	6938      	ldr	r0, [r7, #16]
 800c906:	f7ff fdbd 	bl	800c484 <xTimerGenericCommand>
 800c90a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d109      	bne.n	800c926 <prvSwitchTimerLists+0x92>
 800c912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	603b      	str	r3, [r7, #0]
 800c924:	e7fe      	b.n	800c924 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c926:	4b09      	ldr	r3, [pc, #36]	; (800c94c <prvSwitchTimerLists+0xb8>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1b5      	bne.n	800c89c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c930:	4b06      	ldr	r3, [pc, #24]	; (800c94c <prvSwitchTimerLists+0xb8>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800c936:	4b06      	ldr	r3, [pc, #24]	; (800c950 <prvSwitchTimerLists+0xbc>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a04      	ldr	r2, [pc, #16]	; (800c94c <prvSwitchTimerLists+0xb8>)
 800c93c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c93e:	4a04      	ldr	r2, [pc, #16]	; (800c950 <prvSwitchTimerLists+0xbc>)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6013      	str	r3, [r2, #0]
}
 800c944:	bf00      	nop
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	20001a94 	.word	0x20001a94
 800c950:	20001a98 	.word	0x20001a98

0800c954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c95a:	f7fd f9ad 	bl	8009cb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c95e:	4b15      	ldr	r3, [pc, #84]	; (800c9b4 <prvCheckForValidListAndQueue+0x60>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d120      	bne.n	800c9a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c966:	4814      	ldr	r0, [pc, #80]	; (800c9b8 <prvCheckForValidListAndQueue+0x64>)
 800c968:	f7fd f80c 	bl	8009984 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c96c:	4813      	ldr	r0, [pc, #76]	; (800c9bc <prvCheckForValidListAndQueue+0x68>)
 800c96e:	f7fd f809 	bl	8009984 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c972:	4b13      	ldr	r3, [pc, #76]	; (800c9c0 <prvCheckForValidListAndQueue+0x6c>)
 800c974:	4a10      	ldr	r2, [pc, #64]	; (800c9b8 <prvCheckForValidListAndQueue+0x64>)
 800c976:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c978:	4b12      	ldr	r3, [pc, #72]	; (800c9c4 <prvCheckForValidListAndQueue+0x70>)
 800c97a:	4a10      	ldr	r2, [pc, #64]	; (800c9bc <prvCheckForValidListAndQueue+0x68>)
 800c97c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c97e:	2300      	movs	r3, #0
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <prvCheckForValidListAndQueue+0x74>)
 800c984:	4a11      	ldr	r2, [pc, #68]	; (800c9cc <prvCheckForValidListAndQueue+0x78>)
 800c986:	210c      	movs	r1, #12
 800c988:	200a      	movs	r0, #10
 800c98a:	f7fd fcc7 	bl	800a31c <xQueueGenericCreateStatic>
 800c98e:	4602      	mov	r2, r0
 800c990:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <prvCheckForValidListAndQueue+0x60>)
 800c992:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c994:	4b07      	ldr	r3, [pc, #28]	; (800c9b4 <prvCheckForValidListAndQueue+0x60>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d005      	beq.n	800c9a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c99c:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <prvCheckForValidListAndQueue+0x60>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	490b      	ldr	r1, [pc, #44]	; (800c9d0 <prvCheckForValidListAndQueue+0x7c>)
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fb76 	bl	800b094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9a8:	f7fd f9b4 	bl	8009d14 <vPortExitCritical>
}
 800c9ac:	bf00      	nop
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20001a9c 	.word	0x20001a9c
 800c9b8:	20001a6c 	.word	0x20001a6c
 800c9bc:	20001a80 	.word	0x20001a80
 800c9c0:	20001a94 	.word	0x20001a94
 800c9c4:	20001a98 	.word	0x20001a98
 800c9c8:	20001b20 	.word	0x20001b20
 800c9cc:	20001aa8 	.word	0x20001aa8
 800c9d0:	0800d444 	.word	0x0800d444

0800c9d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800c9d8:	4b27      	ldr	r3, [pc, #156]	; (800ca78 <MX_USB_DEVICE_Init+0xa4>)
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d124      	bne.n	800ca2c <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4925      	ldr	r1, [pc, #148]	; (800ca7c <MX_USB_DEVICE_Init+0xa8>)
 800c9e6:	4826      	ldr	r0, [pc, #152]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800c9e8:	f7fb fca4 	bl	8008334 <USBD_Init>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800c9f2:	f7f3 ff6d 	bl	80008d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800c9f6:	4923      	ldr	r1, [pc, #140]	; (800ca84 <MX_USB_DEVICE_Init+0xb0>)
 800c9f8:	4821      	ldr	r0, [pc, #132]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800c9fa:	f7fb fcc6 	bl	800838a <USBD_RegisterClass>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d001      	beq.n	800ca08 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800ca04:	f7f3 ff64 	bl	80008d0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800ca08:	491f      	ldr	r1, [pc, #124]	; (800ca88 <MX_USB_DEVICE_Init+0xb4>)
 800ca0a:	481d      	ldr	r0, [pc, #116]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800ca0c:	f7fb fc7c 	bl	8008308 <USBD_CUSTOM_HID_RegisterInterface>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800ca16:	f7f3 ff5b 	bl	80008d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca1a:	4819      	ldr	r0, [pc, #100]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800ca1c:	f7fb fcce 	bl	80083bc <USBD_Start>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d01e      	beq.n	800ca64 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800ca26:	f7f3 ff53 	bl	80008d0 <Error_Handler>
 800ca2a:	e01b      	b.n	800ca64 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	4913      	ldr	r1, [pc, #76]	; (800ca7c <MX_USB_DEVICE_Init+0xa8>)
 800ca30:	4813      	ldr	r0, [pc, #76]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800ca32:	f7fb fc7f 	bl	8008334 <USBD_Init>
 800ca36:	4603      	mov	r3, r0
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d001      	beq.n	800ca40 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800ca3c:	f7f3 ff48 	bl	80008d0 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800ca40:	4912      	ldr	r1, [pc, #72]	; (800ca8c <MX_USB_DEVICE_Init+0xb8>)
 800ca42:	480f      	ldr	r0, [pc, #60]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800ca44:	f7fb fca1 	bl	800838a <USBD_RegisterClass>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d001      	beq.n	800ca52 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800ca4e:	f7f3 ff3f 	bl	80008d0 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800ca52:	490f      	ldr	r1, [pc, #60]	; (800ca90 <MX_USB_DEVICE_Init+0xbc>)
 800ca54:	480a      	ldr	r0, [pc, #40]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800ca56:	f7fa fa15 	bl	8006e84 <USBD_MSC_RegisterStorage>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800ca60:	f7f3 ff36 	bl	80008d0 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ca64:	4806      	ldr	r0, [pc, #24]	; (800ca80 <MX_USB_DEVICE_Init+0xac>)
 800ca66:	f7fb fca9 	bl	80083bc <USBD_Start>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d001      	beq.n	800ca74 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800ca70:	f7f3 ff2e 	bl	80008d0 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca74:	bf00      	nop
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	2000029c 	.word	0x2000029c
 800ca7c:	20000230 	.word	0x20000230
 800ca80:	200031a0 	.word	0x200031a0
 800ca84:	200000e8 	.word	0x200000e8
 800ca88:	20000220 	.word	0x20000220
 800ca8c:	20000044 	.word	0x20000044
 800ca90:	20000004 	.word	0x20000004

0800ca94 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bc80      	pop	{r7}
 800caa0:	4770      	bx	lr

0800caa2 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800caa2:	b480      	push	{r7}
 800caa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800caa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	46bd      	mov	sp, r7
 800caac:	bc80      	pop	{r7}
 800caae:	4770      	bx	lr

0800cab0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	4603      	mov	r3, r0
 800cab8:	460a      	mov	r2, r1
 800caba:	71fb      	strb	r3, [r7, #7]
 800cabc:	4613      	mov	r3, r2
 800cabe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cac0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bc80      	pop	{r7}
 800caca:	4770      	bx	lr

0800cacc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	4603      	mov	r3, r0
 800cad4:	6039      	str	r1, [r7, #0]
 800cad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2212      	movs	r2, #18
 800cadc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cade:	4b03      	ldr	r3, [pc, #12]	; (800caec <USBD_FS_DeviceDescriptor+0x20>)
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bc80      	pop	{r7}
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	2000024c 	.word	0x2000024c

0800caf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	4603      	mov	r3, r0
 800caf8:	6039      	str	r1, [r7, #0]
 800cafa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2204      	movs	r2, #4
 800cb00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb02:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bc80      	pop	{r7}
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	20000260 	.word	0x20000260

0800cb14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	6039      	str	r1, [r7, #0]
 800cb1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb20:	79fb      	ldrb	r3, [r7, #7]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d105      	bne.n	800cb32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	4907      	ldr	r1, [pc, #28]	; (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb2a:	4808      	ldr	r0, [pc, #32]	; (800cb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb2c:	f7fc fbb1 	bl	8009292 <USBD_GetString>
 800cb30:	e004      	b.n	800cb3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	4904      	ldr	r1, [pc, #16]	; (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb36:	4805      	ldr	r0, [pc, #20]	; (800cb4c <USBD_FS_ProductStrDescriptor+0x38>)
 800cb38:	f7fc fbab 	bl	8009292 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb3c:	4b02      	ldr	r3, [pc, #8]	; (800cb48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3708      	adds	r7, #8
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	20003464 	.word	0x20003464
 800cb4c:	0800d44c 	.word	0x0800d44c

0800cb50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	6039      	str	r1, [r7, #0]
 800cb5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	4904      	ldr	r1, [pc, #16]	; (800cb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb60:	4804      	ldr	r0, [pc, #16]	; (800cb74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb62:	f7fc fb96 	bl	8009292 <USBD_GetString>
  return USBD_StrDesc;
 800cb66:	4b02      	ldr	r3, [pc, #8]	; (800cb70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	20003464 	.word	0x20003464
 800cb74:	0800d46c 	.word	0x0800d46c

0800cb78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	221a      	movs	r2, #26
 800cb88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb8a:	f000 f843 	bl	800cc14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb8e:	4b02      	ldr	r3, [pc, #8]	; (800cb98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}
 800cb98:	20000264 	.word	0x20000264

0800cb9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cba8:	79fb      	ldrb	r3, [r7, #7]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	4907      	ldr	r1, [pc, #28]	; (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbb2:	4808      	ldr	r0, [pc, #32]	; (800cbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbb4:	f7fc fb6d 	bl	8009292 <USBD_GetString>
 800cbb8:	e004      	b.n	800cbc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	4904      	ldr	r1, [pc, #16]	; (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbbe:	4805      	ldr	r0, [pc, #20]	; (800cbd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbc0:	f7fc fb67 	bl	8009292 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbc4:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	20003464 	.word	0x20003464
 800cbd4:	0800d480 	.word	0x0800d480

0800cbd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	4907      	ldr	r1, [pc, #28]	; (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbee:	4808      	ldr	r0, [pc, #32]	; (800cc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbf0:	f7fc fb4f 	bl	8009292 <USBD_GetString>
 800cbf4:	e004      	b.n	800cc00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4904      	ldr	r1, [pc, #16]	; (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbfa:	4805      	ldr	r0, [pc, #20]	; (800cc10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbfc:	f7fc fb49 	bl	8009292 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3708      	adds	r7, #8
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20003464 	.word	0x20003464
 800cc10:	0800d494 	.word	0x0800d494

0800cc14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc1a:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <Get_SerialNum+0x44>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc20:	4b0e      	ldr	r3, [pc, #56]	; (800cc5c <Get_SerialNum+0x48>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <Get_SerialNum+0x4c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d009      	beq.n	800cc4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc3a:	2208      	movs	r2, #8
 800cc3c:	4909      	ldr	r1, [pc, #36]	; (800cc64 <Get_SerialNum+0x50>)
 800cc3e:	68f8      	ldr	r0, [r7, #12]
 800cc40:	f000 f814 	bl	800cc6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc44:	2204      	movs	r2, #4
 800cc46:	4908      	ldr	r1, [pc, #32]	; (800cc68 <Get_SerialNum+0x54>)
 800cc48:	68b8      	ldr	r0, [r7, #8]
 800cc4a:	f000 f80f 	bl	800cc6c <IntToUnicode>
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	1ffff7e8 	.word	0x1ffff7e8
 800cc5c:	1ffff7ec 	.word	0x1ffff7ec
 800cc60:	1ffff7f0 	.word	0x1ffff7f0
 800cc64:	20000266 	.word	0x20000266
 800cc68:	20000276 	.word	0x20000276

0800cc6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b087      	sub	sp, #28
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	60f8      	str	r0, [r7, #12]
 800cc74:	60b9      	str	r1, [r7, #8]
 800cc76:	4613      	mov	r3, r2
 800cc78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc7e:	2300      	movs	r3, #0
 800cc80:	75fb      	strb	r3, [r7, #23]
 800cc82:	e027      	b.n	800ccd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	0f1b      	lsrs	r3, r3, #28
 800cc88:	2b09      	cmp	r3, #9
 800cc8a:	d80b      	bhi.n	800cca4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc8c:	7dfb      	ldrb	r3, [r7, #23]
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	461a      	mov	r2, r3
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4413      	add	r3, r2
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	0f12      	lsrs	r2, r2, #28
 800cc9a:	b2d2      	uxtb	r2, r2
 800cc9c:	3230      	adds	r2, #48	; 0x30
 800cc9e:	b2d2      	uxtb	r2, r2
 800cca0:	701a      	strb	r2, [r3, #0]
 800cca2:	e00a      	b.n	800ccba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	461a      	mov	r2, r3
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	4413      	add	r3, r2
 800ccae:	68fa      	ldr	r2, [r7, #12]
 800ccb0:	0f12      	lsrs	r2, r2, #28
 800ccb2:	b2d2      	uxtb	r2, r2
 800ccb4:	3237      	adds	r2, #55	; 0x37
 800ccb6:	b2d2      	uxtb	r2, r2
 800ccb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	011b      	lsls	r3, r3, #4
 800ccbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	4413      	add	r3, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	75fb      	strb	r3, [r7, #23]
 800ccd4:	7dfa      	ldrb	r2, [r7, #23]
 800ccd6:	79fb      	ldrb	r3, [r7, #7]
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d3d3      	bcc.n	800cc84 <IntToUnicode+0x18>
  }
}
 800ccdc:	bf00      	nop
 800ccde:	371c      	adds	r7, #28
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bc80      	pop	{r7}
 800cce4:	4770      	bx	lr
	...

0800cce8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a0d      	ldr	r2, [pc, #52]	; (800cd2c <HAL_PCD_MspInit+0x44>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d113      	bne.n	800cd22 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ccfa:	4a0d      	ldr	r2, [pc, #52]	; (800cd30 <HAL_PCD_MspInit+0x48>)
 800ccfc:	4b0c      	ldr	r3, [pc, #48]	; (800cd30 <HAL_PCD_MspInit+0x48>)
 800ccfe:	69db      	ldr	r3, [r3, #28]
 800cd00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd04:	61d3      	str	r3, [r2, #28]
 800cd06:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <HAL_PCD_MspInit+0x48>)
 800cd08:	69db      	ldr	r3, [r3, #28]
 800cd0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cd12:	2200      	movs	r2, #0
 800cd14:	2105      	movs	r1, #5
 800cd16:	2014      	movs	r0, #20
 800cd18:	f7f4 fa0f 	bl	800113a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cd1c:	2014      	movs	r0, #20
 800cd1e:	f7f4 fa28 	bl	8001172 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	40005c00 	.word	0x40005c00
 800cd30:	40021000 	.word	0x40021000

0800cd34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4610      	mov	r0, r2
 800cd4c:	f7fb fb7e 	bl	800844c <USBD_LL_SetupStage>
}
 800cd50:	bf00      	nop
 800cd52:	3708      	adds	r7, #8
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cd6a:	78fa      	ldrb	r2, [r7, #3]
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	440b      	add	r3, r1
 800cd78:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	78fb      	ldrb	r3, [r7, #3]
 800cd80:	4619      	mov	r1, r3
 800cd82:	f7fb fbae 	bl	80084e2 <USBD_LL_DataOutStage>
}
 800cd86:	bf00      	nop
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b082      	sub	sp, #8
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	460b      	mov	r3, r1
 800cd98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cda0:	78fa      	ldrb	r2, [r7, #3]
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	4613      	mov	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	440b      	add	r3, r1
 800cdae:	333c      	adds	r3, #60	; 0x3c
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	78fb      	ldrb	r3, [r7, #3]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	f7fb fc05 	bl	80085c4 <USBD_LL_DataInStage>
}
 800cdba:	bf00      	nop
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b082      	sub	sp, #8
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fb fd15 	bl	8008800 <USBD_LL_SOF>
}
 800cdd6:	bf00      	nop
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cde6:	2301      	movs	r3, #1
 800cde8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d001      	beq.n	800cdf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cdf2:	f7f3 fd6d 	bl	80008d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cdfc:	7bfa      	ldrb	r2, [r7, #15]
 800cdfe:	4611      	mov	r1, r2
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fb fcc5 	bl	8008790 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fb fc7e 	bl	800870e <USBD_LL_Reset>
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
	...

0800ce1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7fb fcbf 	bl	80087ae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce38:	4a04      	ldr	r2, [pc, #16]	; (800ce4c <HAL_PCD_SuspendCallback+0x30>)
 800ce3a:	4b04      	ldr	r3, [pc, #16]	; (800ce4c <HAL_PCD_SuspendCallback+0x30>)
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	f043 0306 	orr.w	r3, r3, #6
 800ce42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	e000ed00 	.word	0xe000ed00

0800ce50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fb fcb9 	bl	80087d6 <USBD_LL_Resume>
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ce74:	4a23      	ldr	r2, [pc, #140]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a21      	ldr	r2, [pc, #132]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ce84:	4b1f      	ldr	r3, [pc, #124]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce86:	4a20      	ldr	r2, [pc, #128]	; (800cf08 <USBD_LL_Init+0x9c>)
 800ce88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ce8a:	4b1e      	ldr	r3, [pc, #120]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce8c:	2208      	movs	r2, #8
 800ce8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ce90:	4b1c      	ldr	r3, [pc, #112]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce92:	2202      	movs	r2, #2
 800ce94:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce96:	4b1b      	ldr	r3, [pc, #108]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce9c:	4b19      	ldr	r3, [pc, #100]	; (800cf04 <USBD_LL_Init+0x98>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cea2:	4b18      	ldr	r3, [pc, #96]	; (800cf04 <USBD_LL_Init+0x98>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cea8:	4816      	ldr	r0, [pc, #88]	; (800cf04 <USBD_LL_Init+0x98>)
 800ceaa:	f7f4 fce7 	bl	800187c <HAL_PCD_Init>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d001      	beq.n	800ceb8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ceb4:	f7f3 fd0c 	bl	80008d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cebe:	2318      	movs	r3, #24
 800cec0:	2200      	movs	r2, #0
 800cec2:	2100      	movs	r1, #0
 800cec4:	f7f6 f9a7 	bl	8003216 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cece:	2358      	movs	r3, #88	; 0x58
 800ced0:	2200      	movs	r2, #0
 800ced2:	2180      	movs	r1, #128	; 0x80
 800ced4:	f7f6 f99f 	bl	8003216 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cede:	2398      	movs	r3, #152	; 0x98
 800cee0:	2200      	movs	r2, #0
 800cee2:	2181      	movs	r1, #129	; 0x81
 800cee4:	f7f6 f997 	bl	8003216 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ceee:	23d8      	movs	r3, #216	; 0xd8
 800cef0:	2200      	movs	r2, #0
 800cef2:	2101      	movs	r1, #1
 800cef4:	f7f6 f98f 	bl	8003216 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20003664 	.word	0x20003664
 800cf08:	40005c00 	.word	0x40005c00

0800cf0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7f4 fdb5 	bl	8001a92 <HAL_PCD_Start>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf2c:	7bfb      	ldrb	r3, [r7, #15]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 f96e 	bl	800d210 <USBD_Get_USB_Status>
 800cf34:	4603      	mov	r3, r0
 800cf36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf38:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
 800cf4a:	4608      	mov	r0, r1
 800cf4c:	4611      	mov	r1, r2
 800cf4e:	461a      	mov	r2, r3
 800cf50:	4603      	mov	r3, r0
 800cf52:	70fb      	strb	r3, [r7, #3]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70bb      	strb	r3, [r7, #2]
 800cf58:	4613      	mov	r3, r2
 800cf5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf6a:	78bb      	ldrb	r3, [r7, #2]
 800cf6c:	883a      	ldrh	r2, [r7, #0]
 800cf6e:	78f9      	ldrb	r1, [r7, #3]
 800cf70:	f7f4 ff2f 	bl	8001dd2 <HAL_PCD_EP_Open>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 f948 	bl	800d210 <USBD_Get_USB_Status>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b084      	sub	sp, #16
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
 800cf96:	460b      	mov	r3, r1
 800cf98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfa8:	78fa      	ldrb	r2, [r7, #3]
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f4 ff76 	bl	8001e9e <HAL_PCD_EP_Close>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 f929 	bl	800d210 <USBD_Get_USB_Status>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfe6:	78fa      	ldrb	r2, [r7, #3]
 800cfe8:	4611      	mov	r1, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7f5 f8ea 	bl	80021c4 <HAL_PCD_EP_Flush>
 800cff0:	4603      	mov	r3, r0
 800cff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 f90a 	bl	800d210 <USBD_Get_USB_Status>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d000:	7bbb      	ldrb	r3, [r7, #14]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b084      	sub	sp, #16
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
 800d012:	460b      	mov	r3, r1
 800d014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d024:	78fa      	ldrb	r2, [r7, #3]
 800d026:	4611      	mov	r1, r2
 800d028:	4618      	mov	r0, r3
 800d02a:	f7f5 f817 	bl	800205c <HAL_PCD_EP_SetStall>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	4618      	mov	r0, r3
 800d036:	f000 f8eb 	bl	800d210 <USBD_Get_USB_Status>
 800d03a:	4603      	mov	r3, r0
 800d03c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d03e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	460b      	mov	r3, r1
 800d052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d062:	78fa      	ldrb	r2, [r7, #3]
 800d064:	4611      	mov	r1, r2
 800d066:	4618      	mov	r0, r3
 800d068:	f7f5 f858 	bl	800211c <HAL_PCD_EP_ClrStall>
 800d06c:	4603      	mov	r3, r0
 800d06e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d070:	7bfb      	ldrb	r3, [r7, #15]
 800d072:	4618      	mov	r0, r3
 800d074:	f000 f8cc 	bl	800d210 <USBD_Get_USB_Status>
 800d078:	4603      	mov	r3, r0
 800d07a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d07c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d086:	b480      	push	{r7}
 800d088:	b085      	sub	sp, #20
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	460b      	mov	r3, r1
 800d090:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d098:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d09a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	da0c      	bge.n	800d0bc <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d0a2:	78fb      	ldrb	r3, [r7, #3]
 800d0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a8:	68f9      	ldr	r1, [r7, #12]
 800d0aa:	1c5a      	adds	r2, r3, #1
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	440b      	add	r3, r1
 800d0b6:	3302      	adds	r3, #2
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	e00b      	b.n	800d0d4 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d0bc:	78fb      	ldrb	r3, [r7, #3]
 800d0be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0c2:	68f9      	ldr	r1, [r7, #12]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	00db      	lsls	r3, r3, #3
 800d0cc:	440b      	add	r3, r1
 800d0ce:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d0d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bc80      	pop	{r7}
 800d0dc:	4770      	bx	lr

0800d0de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0f8:	78fa      	ldrb	r2, [r7, #3]
 800d0fa:	4611      	mov	r1, r2
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7f4 fe43 	bl	8001d88 <HAL_PCD_SetAddress>
 800d102:	4603      	mov	r3, r0
 800d104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d106:	7bfb      	ldrb	r3, [r7, #15]
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 f881 	bl	800d210 <USBD_Get_USB_Status>
 800d10e:	4603      	mov	r3, r0
 800d110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d112:	7bbb      	ldrb	r3, [r7, #14]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b086      	sub	sp, #24
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	607a      	str	r2, [r7, #4]
 800d126:	461a      	mov	r2, r3
 800d128:	460b      	mov	r3, r1
 800d12a:	72fb      	strb	r3, [r7, #11]
 800d12c:	4613      	mov	r3, r2
 800d12e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d13e:	893b      	ldrh	r3, [r7, #8]
 800d140:	7af9      	ldrb	r1, [r7, #11]
 800d142:	687a      	ldr	r2, [r7, #4]
 800d144:	f7f4 ff47 	bl	8001fd6 <HAL_PCD_EP_Transmit>
 800d148:	4603      	mov	r3, r0
 800d14a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d14c:	7dfb      	ldrb	r3, [r7, #23]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 f85e 	bl	800d210 <USBD_Get_USB_Status>
 800d154:	4603      	mov	r3, r0
 800d156:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d158:	7dbb      	ldrb	r3, [r7, #22]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3718      	adds	r7, #24
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b086      	sub	sp, #24
 800d166:	af00      	add	r7, sp, #0
 800d168:	60f8      	str	r0, [r7, #12]
 800d16a:	607a      	str	r2, [r7, #4]
 800d16c:	461a      	mov	r2, r3
 800d16e:	460b      	mov	r3, r1
 800d170:	72fb      	strb	r3, [r7, #11]
 800d172:	4613      	mov	r3, r2
 800d174:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d184:	893b      	ldrh	r3, [r7, #8]
 800d186:	7af9      	ldrb	r1, [r7, #11]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	f7f4 fed0 	bl	8001f2e <HAL_PCD_EP_Receive>
 800d18e:	4603      	mov	r3, r0
 800d190:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d192:	7dfb      	ldrb	r3, [r7, #23]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 f83b 	bl	800d210 <USBD_Get_USB_Status>
 800d19a:	4603      	mov	r3, r0
 800d19c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d19e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1ba:	78fa      	ldrb	r2, [r7, #3]
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f4 fef2 	bl	8001fa8 <HAL_PCD_EP_GetRxCount>
 800d1c4:	4603      	mov	r3, r0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
	...

0800d1d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d1d8:	4b02      	ldr	r3, [pc, #8]	; (800d1e4 <USBD_static_malloc+0x14>)
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	370c      	adds	r7, #12
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bc80      	pop	{r7}
 800d1e2:	4770      	bx	lr
 800d1e4:	20001b68 	.word	0x20001b68

0800d1e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]

}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bc80      	pop	{r7}
 800d1f8:	4770      	bx	lr

0800d1fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1fa:	b480      	push	{r7}
 800d1fc:	b083      	sub	sp, #12
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d206:	bf00      	nop
 800d208:	370c      	adds	r7, #12
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bc80      	pop	{r7}
 800d20e:	4770      	bx	lr

0800d210 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	2b03      	cmp	r3, #3
 800d222:	d817      	bhi.n	800d254 <USBD_Get_USB_Status+0x44>
 800d224:	a201      	add	r2, pc, #4	; (adr r2, 800d22c <USBD_Get_USB_Status+0x1c>)
 800d226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d22a:	bf00      	nop
 800d22c:	0800d23d 	.word	0x0800d23d
 800d230:	0800d243 	.word	0x0800d243
 800d234:	0800d249 	.word	0x0800d249
 800d238:	0800d24f 	.word	0x0800d24f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
    break;
 800d240:	e00b      	b.n	800d25a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d242:	2302      	movs	r3, #2
 800d244:	73fb      	strb	r3, [r7, #15]
    break;
 800d246:	e008      	b.n	800d25a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d248:	2301      	movs	r3, #1
 800d24a:	73fb      	strb	r3, [r7, #15]
    break;
 800d24c:	e005      	b.n	800d25a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d24e:	2302      	movs	r3, #2
 800d250:	73fb      	strb	r3, [r7, #15]
    break;
 800d252:	e002      	b.n	800d25a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d254:	2302      	movs	r3, #2
 800d256:	73fb      	strb	r3, [r7, #15]
    break;
 800d258:	bf00      	nop
  }
  return usb_status;
 800d25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	bc80      	pop	{r7}
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop

0800d268 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d268:	480c      	ldr	r0, [pc, #48]	; (800d29c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d26a:	490d      	ldr	r1, [pc, #52]	; (800d2a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d26c:	4a0d      	ldr	r2, [pc, #52]	; (800d2a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d26e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d270:	e002      	b.n	800d278 <LoopCopyDataInit>

0800d272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d276:	3304      	adds	r3, #4

0800d278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d27a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d27c:	d3f9      	bcc.n	800d272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d27e:	4a0a      	ldr	r2, [pc, #40]	; (800d2a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d280:	4c0a      	ldr	r4, [pc, #40]	; (800d2ac <LoopFillZerobss+0x22>)
  movs r3, #0
 800d282:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d284:	e001      	b.n	800d28a <LoopFillZerobss>

0800d286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d288:	3204      	adds	r2, #4

0800d28a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d28a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d28c:	d3fb      	bcc.n	800d286 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d28e:	f7f3 fe68 	bl	8000f62 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d292:	f000 f80f 	bl	800d2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d296:	f7f3 fa9b 	bl	80007d0 <main>
  bx lr
 800d29a:	4770      	bx	lr
  ldr r0, =_sdata
 800d29c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d2a0:	20000280 	.word	0x20000280
  ldr r2, =_sidata
 800d2a4:	0800d508 	.word	0x0800d508
  ldr r2, =_sbss
 800d2a8:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 800d2ac:	20003950 	.word	0x20003950

0800d2b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d2b0:	e7fe      	b.n	800d2b0 <ADC1_2_IRQHandler>
	...

0800d2b4 <__libc_init_array>:
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	2500      	movs	r5, #0
 800d2b8:	4e0c      	ldr	r6, [pc, #48]	; (800d2ec <__libc_init_array+0x38>)
 800d2ba:	4c0d      	ldr	r4, [pc, #52]	; (800d2f0 <__libc_init_array+0x3c>)
 800d2bc:	1ba4      	subs	r4, r4, r6
 800d2be:	10a4      	asrs	r4, r4, #2
 800d2c0:	42a5      	cmp	r5, r4
 800d2c2:	d109      	bne.n	800d2d8 <__libc_init_array+0x24>
 800d2c4:	f000 f82e 	bl	800d324 <_init>
 800d2c8:	2500      	movs	r5, #0
 800d2ca:	4e0a      	ldr	r6, [pc, #40]	; (800d2f4 <__libc_init_array+0x40>)
 800d2cc:	4c0a      	ldr	r4, [pc, #40]	; (800d2f8 <__libc_init_array+0x44>)
 800d2ce:	1ba4      	subs	r4, r4, r6
 800d2d0:	10a4      	asrs	r4, r4, #2
 800d2d2:	42a5      	cmp	r5, r4
 800d2d4:	d105      	bne.n	800d2e2 <__libc_init_array+0x2e>
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}
 800d2d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2dc:	4798      	blx	r3
 800d2de:	3501      	adds	r5, #1
 800d2e0:	e7ee      	b.n	800d2c0 <__libc_init_array+0xc>
 800d2e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d2e6:	4798      	blx	r3
 800d2e8:	3501      	adds	r5, #1
 800d2ea:	e7f2      	b.n	800d2d2 <__libc_init_array+0x1e>
 800d2ec:	0800d500 	.word	0x0800d500
 800d2f0:	0800d500 	.word	0x0800d500
 800d2f4:	0800d500 	.word	0x0800d500
 800d2f8:	0800d504 	.word	0x0800d504

0800d2fc <memcpy>:
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	1e43      	subs	r3, r0, #1
 800d300:	440a      	add	r2, r1
 800d302:	4291      	cmp	r1, r2
 800d304:	d100      	bne.n	800d308 <memcpy+0xc>
 800d306:	bd10      	pop	{r4, pc}
 800d308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d30c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d310:	e7f7      	b.n	800d302 <memcpy+0x6>

0800d312 <memset>:
 800d312:	4603      	mov	r3, r0
 800d314:	4402      	add	r2, r0
 800d316:	4293      	cmp	r3, r2
 800d318:	d100      	bne.n	800d31c <memset+0xa>
 800d31a:	4770      	bx	lr
 800d31c:	f803 1b01 	strb.w	r1, [r3], #1
 800d320:	e7f9      	b.n	800d316 <memset+0x4>
	...

0800d324 <_init>:
 800d324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d326:	bf00      	nop
 800d328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d32a:	bc08      	pop	{r3}
 800d32c:	469e      	mov	lr, r3
 800d32e:	4770      	bx	lr

0800d330 <_fini>:
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	bf00      	nop
 800d334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d336:	bc08      	pop	{r3}
 800d338:	469e      	mov	lr, r3
 800d33a:	4770      	bx	lr
