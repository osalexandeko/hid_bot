
hidbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d28c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800d39c  0800d39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d560  0800d560  0001d560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800d564  0800d564  0001d564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000284  20000000  0800d568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000036d0  20000288  0800d7ec  00020288  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20003958  0800d7ec  00023958  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002a33f  00000000  00000000  000202ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000619d  00000000  00000000  0004a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b38  00000000  00000000  00050790  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001830  00000000  00000000  000522c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f858  00000000  00000000  00053af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00008447  00000000  00000000  00063350  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0006b797  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00006bd4  00000000  00000000  0006b814  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000288 	.word	0x20000288
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d384 	.word	0x0800d384

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000028c 	.word	0x2000028c
 800014c:	0800d384 	.word	0x0800d384

08000150 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000154:	4b06      	ldr	r3, [pc, #24]	; (8000170 <MX_CRC_Init+0x20>)
 8000156:	4a07      	ldr	r2, [pc, #28]	; (8000174 <MX_CRC_Init+0x24>)
 8000158:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800015a:	4805      	ldr	r0, [pc, #20]	; (8000170 <MX_CRC_Init+0x20>)
 800015c:	f001 f847 	bl	80011ee <HAL_CRC_Init>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000166:	f000 fbe3 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	20001b8c 	.word	0x20001b8c
 8000174:	40023000 	.word	0x40023000

08000178 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000178:	b480      	push	{r7}
 800017a:	b085      	sub	sp, #20
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_CRC_MspInit+0x34>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d10b      	bne.n	80001a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018c:	4b08      	ldr	r3, [pc, #32]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 800018e:	695b      	ldr	r3, [r3, #20]
 8000190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000194:	6153      	str	r3, [r2, #20]
 8000196:	4b06      	ldr	r3, [pc, #24]	; (80001b0 <HAL_CRC_MspInit+0x38>)
 8000198:	695b      	ldr	r3, [r3, #20]
 800019a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800019e:	60fb      	str	r3, [r7, #12]
 80001a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40023000 	.word	0x40023000
 80001b0:	40021000 	.word	0x40021000

080001b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	4a06      	ldr	r2, [pc, #24]	; (80001dc <vApplicationGetIdleTaskMemory+0x28>)
 80001c4:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	4a05      	ldr	r2, [pc, #20]	; (80001e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80001ca:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2280      	movs	r2, #128	; 0x80
 80001d0:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	200002a8 	.word	0x200002a8
 80001e0:	200002fc 	.word	0x200002fc

080001e4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	60f8      	str	r0, [r7, #12]
 80001ec:	60b9      	str	r1, [r7, #8]
 80001ee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <vApplicationGetTimerTaskMemory+0x2c>)
 80001f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <vApplicationGetTimerTaskMemory+0x30>)
 80001fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000202:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000204:	bf00      	nop
 8000206:	3714      	adds	r7, #20
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	200004fc 	.word	0x200004fc
 8000214:	20000550 	.word	0x20000550

08000218 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000218:	b5b0      	push	{r4, r5, r7, lr}
 800021a:	b0b2      	sub	sp, #200	; 0xc8
 800021c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
	osMutexDef(Ram_MSD_Mutex);
 800021e:	2300      	movs	r3, #0
 8000220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000224:	2300      	movs	r3, #0
 8000226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	Ram_MSD_MutexHandle = osMutexCreate(osMutex(Ram_MSD_Mutex));
 800022a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800022e:	4618      	mov	r0, r3
 8000230:	f009 fa9e 	bl	8009770 <osMutexCreate>
 8000234:	4602      	mov	r2, r0
 8000236:	4b50      	ldr	r3, [pc, #320]	; (8000378 <MX_FREERTOS_Init+0x160>)
 8000238:	601a      	str	r2, [r3, #0]
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
	/* definition and creation of delay_click_event_tmr */
	osTimerDef(delay_click_event_tmr, delay_click_event_tmr_Callback);
 800023a:	4b50      	ldr	r3, [pc, #320]	; (800037c <MX_FREERTOS_Init+0x164>)
 800023c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	delay_click_event_tmrHandle = osTimerCreate(osTimer(delay_click_event_tmr),
 8000246:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800024a:	2200      	movs	r2, #0
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f009 fa14 	bl	800967c <osTimerCreate>
 8000254:	4602      	mov	r2, r0
 8000256:	4b4a      	ldr	r3, [pc, #296]	; (8000380 <MX_FREERTOS_Init+0x168>)
 8000258:	601a      	str	r2, [r3, #0]
			osTimerOnce, NULL);

	/* definition and creation of periodic_click_event_tmr */
	osTimerDef(periodic_click_event_tmr, periodic_click_event_Callback);
 800025a:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <MX_FREERTOS_Init+0x16c>)
 800025c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000260:	2300      	movs	r3, #0
 8000262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	periodic_click_event_tmrHandle = osTimerCreate(
 8000266:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800026a:	2200      	movs	r2, #0
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f009 fa04 	bl	800967c <osTimerCreate>
 8000274:	4602      	mov	r2, r0
 8000276:	4b44      	ldr	r3, [pc, #272]	; (8000388 <MX_FREERTOS_Init+0x170>)
 8000278:	601a      	str	r2, [r3, #0]
			osTimer(periodic_click_event_tmr), osTimerPeriodic, NULL);

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	osMessageQDef(Usb_Queue, 16, uint16_t);
 800027a:	4b44      	ldr	r3, [pc, #272]	; (800038c <MX_FREERTOS_Init+0x174>)
 800027c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000280:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Usb_QueueHandle = osMessageCreate(osMessageQ(Usb_Queue), NULL);
 8000286:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f009 fb0b 	bl	80098a8 <osMessageCreate>
 8000292:	4602      	mov	r2, r0
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_FREERTOS_Init+0x178>)
 8000296:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Queue */
	osMessageQDef(Hid_Queue, 16, uint16_t);
 8000298:	4b3c      	ldr	r3, [pc, #240]	; (800038c <MX_FREERTOS_Init+0x174>)
 800029a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800029e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Hid_QueueHandle = osMessageCreate(osMessageQ(Hid_Queue), NULL);
 80002a4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f009 fafc 	bl	80098a8 <osMessageCreate>
 80002b0:	4602      	mov	r2, r0
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <MX_FREERTOS_Init+0x17c>)
 80002b4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002b6:	4b38      	ldr	r3, [pc, #224]	; (8000398 <MX_FREERTOS_Init+0x180>)
 80002b8:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80002bc:	461d      	mov	r5, r3
 80002be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f009 f973 	bl	80095bc <osThreadCreate>
 80002d6:	4602      	mov	r2, r0
 80002d8:	4b30      	ldr	r3, [pc, #192]	; (800039c <MX_FREERTOS_Init+0x184>)
 80002da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	/* definition and creation of Usb_Task */
	osThreadDef(Usb_Task, Start_Usb_Task, osPriorityRealtime, 0, 128);
 80002dc:	4b30      	ldr	r3, [pc, #192]	; (80003a0 <MX_FREERTOS_Init+0x188>)
 80002de:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Usb_TaskHandle = osThreadCreate(osThread(Usb_Task), NULL);
 80002f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f009 f960 	bl	80095bc <osThreadCreate>
 80002fc:	4602      	mov	r2, r0
 80002fe:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <MX_FREERTOS_Init+0x18c>)
 8000300:	601a      	str	r2, [r3, #0]

	/* definition and creation of Mouse_Task */
	osThreadDef(Mouse_Task, Start_Mouse_Task, osPriorityNormal, 0, 128);
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_FREERTOS_Init+0x190>)
 8000304:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000308:	461d      	mov	r5, r3
 800030a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800030c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800030e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Mouse_TaskHandle = osThreadCreate(osThread(Mouse_Task), NULL);
 8000316:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f009 f94d 	bl	80095bc <osThreadCreate>
 8000322:	4602      	mov	r2, r0
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <MX_FREERTOS_Init+0x194>)
 8000326:	601a      	str	r2, [r3, #0]

	/* definition and creation of Hid_Task */
	osThreadDef(Hid_Task, Start_Hid_Task, osPriorityHigh, 0, 128);
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <MX_FREERTOS_Init+0x198>)
 800032a:	f107 0420 	add.w	r4, r7, #32
 800032e:	461d      	mov	r5, r3
 8000330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000338:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Hid_TaskHandle = osThreadCreate(osThread(Hid_Task), NULL);
 800033c:	f107 0320 	add.w	r3, r7, #32
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f009 f93a 	bl	80095bc <osThreadCreate>
 8000348:	4602      	mov	r2, r0
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_FREERTOS_Init+0x19c>)
 800034c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Ram_MSD_Task */
	osThreadDef(Ram_MSD_Task, Start_Ram_MSD_Task, osPriorityNormal, 0, 128);
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <MX_FREERTOS_Init+0x1a0>)
 8000350:	1d3c      	adds	r4, r7, #4
 8000352:	461d      	mov	r5, r3
 8000354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800035c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Ram_MSD_TaskHandle = osThreadCreate(osThread(Ram_MSD_Task), NULL);
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f009 f929 	bl	80095bc <osThreadCreate>
 800036a:	4602      	mov	r2, r0
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_FREERTOS_Init+0x1a4>)
 800036e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

}
 8000370:	bf00      	nop
 8000372:	37c8      	adds	r7, #200	; 0xc8
 8000374:	46bd      	mov	sp, r7
 8000376:	bdb0      	pop	{r4, r5, r7, pc}
 8000378:	20001bac 	.word	0x20001bac
 800037c:	080004e9 	.word	0x080004e9
 8000380:	20001ba4 	.word	0x20001ba4
 8000384:	08000531 	.word	0x08000531
 8000388:	20001b98 	.word	0x20001b98
 800038c:	0800d39c 	.word	0x0800d39c
 8000390:	20001c20 	.word	0x20001c20
 8000394:	20001b9c 	.word	0x20001b9c
 8000398:	0800d3b8 	.word	0x0800d3b8
 800039c:	20001b94 	.word	0x20001b94
 80003a0:	0800d3e0 	.word	0x0800d3e0
 80003a4:	20001bb4 	.word	0x20001bb4
 80003a8:	0800d408 	.word	0x0800d408
 80003ac:	20001bb0 	.word	0x20001bb0
 80003b0:	0800d430 	.word	0x0800d430
 80003b4:	20001ba0 	.word	0x20001ba0
 80003b8:	0800d45c 	.word	0x0800d45c
 80003bc:	20001ba8 	.word	0x20001ba8

080003c0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003c8:	f00c fb34 	bl	800ca34 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

	hid_usb_init = 1;//HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80003cc:	4b2c      	ldr	r3, [pc, #176]	; (8000480 <StartDefaultTask+0xc0>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]

	MX_USB_DEVICE_Init();
 80003d2:	f00c fb2f 	bl	800ca34 <MX_USB_DEVICE_Init>

	/* Infinite loop */
	uint8_t tst = 1;
 80003d6:	2301      	movs	r3, #1
 80003d8:	73fb      	strb	r3, [r7, #15]
	uint8_t tst1 = 1;
 80003da:	2301      	movs	r3, #1
 80003dc:	73bb      	strb	r3, [r7, #14]

	init_hid();
 80003de:	f000 f9d3 	bl	8000788 <init_hid>

	for (;;) {
		if (tst1) {
 80003e2:	7bbb      	ldrb	r3, [r7, #14]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d02a      	beq.n	800043e <StartDefaultTask+0x7e>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	737b      	strb	r3, [r7, #13]
 80003ec:	e022      	b.n	8000434 <StartDefaultTask+0x74>
				keys[i].type = KEYBOARD_TYPE;
 80003ee:	7b7b      	ldrb	r3, [r7, #13]
 80003f0:	4a24      	ldr	r2, [pc, #144]	; (8000484 <StartDefaultTask+0xc4>)
 80003f2:	210f      	movs	r1, #15
 80003f4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
				keys[i].name = 'a' + i;
 80003f8:	7b7b      	ldrb	r3, [r7, #13]
 80003fa:	7b7a      	ldrb	r2, [r7, #13]
 80003fc:	3261      	adds	r2, #97	; 0x61
 80003fe:	b2d1      	uxtb	r1, r2
 8000400:	4a20      	ldr	r2, [pc, #128]	; (8000484 <StartDefaultTask+0xc4>)
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	4413      	add	r3, r2
 8000406:	460a      	mov	r2, r1
 8000408:	705a      	strb	r2, [r3, #1]

				for(uint8_t j = 0; j < STATES_LEN;j++)
 800040a:	2300      	movs	r3, #0
 800040c:	733b      	strb	r3, [r7, #12]
 800040e:	e00b      	b.n	8000428 <StartDefaultTask+0x68>
				  keys[i].states[j] =  (i & 1)?(0xFF):(0xFF);
 8000410:	7b7a      	ldrb	r2, [r7, #13]
 8000412:	7b3b      	ldrb	r3, [r7, #12]
 8000414:	491b      	ldr	r1, [pc, #108]	; (8000484 <StartDefaultTask+0xc4>)
 8000416:	0092      	lsls	r2, r2, #2
 8000418:	440a      	add	r2, r1
 800041a:	4413      	add	r3, r2
 800041c:	3302      	adds	r3, #2
 800041e:	22ff      	movs	r2, #255	; 0xff
 8000420:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < STATES_LEN;j++)
 8000422:	7b3b      	ldrb	r3, [r7, #12]
 8000424:	3301      	adds	r3, #1
 8000426:	733b      	strb	r3, [r7, #12]
 8000428:	7b3b      	ldrb	r3, [r7, #12]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d9f0      	bls.n	8000410 <StartDefaultTask+0x50>
			for (uint8_t i = 0; i < USB_HID_KEY_Z - USB_HID_KEY_A + 1; i++) {
 800042e:	7b7b      	ldrb	r3, [r7, #13]
 8000430:	3301      	adds	r3, #1
 8000432:	737b      	strb	r3, [r7, #13]
 8000434:	7b7b      	ldrb	r3, [r7, #13]
 8000436:	2b19      	cmp	r3, #25
 8000438:	d9d9      	bls.n	80003ee <StartDefaultTask+0x2e>



			}

			tst1 = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	73bb      	strb	r3, [r7, #14]
		}

		if (tst) {
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d015      	beq.n	8000470 <StartDefaultTask+0xb0>
			//ve_operate();
			for (uint32_t i = 0; i < 255; i++) {
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	e00d      	b.n	8000466 <StartDefaultTask+0xa6>
				ram_msd[i] = *((uint8_t *) (VIRT_EEPROM_ADDR + i));
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000450:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000454:	7819      	ldrb	r1, [r3, #0]
 8000456:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <StartDefaultTask+0xc8>)
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	4413      	add	r3, r2
 800045c:	460a      	mov	r2, r1
 800045e:	701a      	strb	r2, [r3, #0]
			for (uint32_t i = 0; i < 255; i++) {
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	3301      	adds	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	2bfe      	cmp	r3, #254	; 0xfe
 800046a:	d9ee      	bls.n	800044a <StartDefaultTask+0x8a>

			}
			tst = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	73fb      	strb	r3, [r7, #15]
		}
		osDelay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f009 f8ef 	bl	8009654 <osDelay>
		vTaskSuspend(NULL);
 8000476:	2000      	movs	r0, #0
 8000478:	f00b f852 	bl	800b520 <vTaskSuspend>
		if (tst1) {
 800047c:	e7b1      	b.n	80003e2 <StartDefaultTask+0x22>
 800047e:	bf00      	nop
 8000480:	200002a4 	.word	0x200002a4
 8000484:	20001bb8 	.word	0x20001bb8
 8000488:	20001cd8 	.word	0x20001cd8

0800048c <Start_Ram_MSD_Task>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* Start_Ram_MSD_Task function */
void Start_Ram_MSD_Task(void const * argument) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000494:	2001      	movs	r0, #1
 8000496:	f009 f8dd 	bl	8009654 <osDelay>
		if (hid_usb_init == 1)
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <Start_Ram_MSD_Task+0x50>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d102      	bne.n	80004aa <Start_Ram_MSD_Task+0x1e>
			vTaskSuspend(NULL); //if we are his we dont need it.
 80004a4:	2000      	movs	r0, #0
 80004a6:	f00b f83b 	bl	800b520 <vTaskSuspend>

		if (st_info.eof_flg == 1) {
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <Start_Ram_MSD_Task+0x54>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d1ef      	bne.n	8000494 <Start_Ram_MSD_Task+0x8>
			st_info.eof_flg = 0;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <Start_Ram_MSD_Task+0x54>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
			osMutexWait(Ram_MSD_MutexHandle, osWaitForever);
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <Start_Ram_MSD_Task+0x58>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f04f 31ff 	mov.w	r1, #4294967295
 80004c2:	4618      	mov	r0, r3
 80004c4:	f009 f96c 	bl	80097a0 <osMutexWait>
			ve_operate(&st_info);
 80004c8:	4805      	ldr	r0, [pc, #20]	; (80004e0 <Start_Ram_MSD_Task+0x54>)
 80004ca:	f000 fd6b 	bl	8000fa4 <ve_operate>
			osMutexRelease(Ram_MSD_MutexHandle);
 80004ce:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <Start_Ram_MSD_Task+0x58>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f009 f9b2 	bl	800983c <osMutexRelease>
		osDelay(1);
 80004d8:	e7dc      	b.n	8000494 <Start_Ram_MSD_Task+0x8>
 80004da:	bf00      	nop
 80004dc:	200002a4 	.word	0x200002a4
 80004e0:	20000954 	.word	0x20000954
 80004e4:	20001bac 	.word	0x20001bac

080004e8 <delay_click_event_tmr_Callback>:
	}

}

/* delay_click_event_tmr_Callback function */
void delay_click_event_tmr_Callback(void const * argument) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]

	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <delay_click_event_tmr_Callback+0x3c>)
 80004f2:	60bb      	str	r3, [r7, #8]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	81fb      	strh	r3, [r7, #14]
 80004f8:	e007      	b.n	800050a <delay_click_event_tmr_Callback+0x22>
		*(keyboardHID_p + j) = 0;
 80004fa:	89fb      	ldrh	r3, [r7, #14]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	4413      	add	r3, r2
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
	for (uint16_t j = 0; j < KEYS_SIZE; j++) {
 8000504:	89fb      	ldrh	r3, [r7, #14]
 8000506:	3301      	adds	r3, #1
 8000508:	81fb      	strh	r3, [r7, #14]
 800050a:	89fb      	ldrh	r3, [r7, #14]
 800050c:	2b19      	cmp	r3, #25
 800050e:	d9f4      	bls.n	80004fa <delay_click_event_tmr_Callback+0x12>
	}

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 8000510:	221c      	movs	r2, #28
 8000512:	4905      	ldr	r1, [pc, #20]	; (8000528 <delay_click_event_tmr_Callback+0x40>)
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <delay_click_event_tmr_Callback+0x44>)
 8000516:	f007 fe73 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
			sizeof(keyboardHID_t));

}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20001c26 	.word	0x20001c26
 8000528:	20001c24 	.word	0x20001c24
 800052c:	200031a8 	.word	0x200031a8

08000530 <periodic_click_event_Callback>:

/* periodic_click_event_Callback function */
void periodic_click_event_Callback(void const * argument) {
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]

	static uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
	static uint8_t bit_select = 0x01;
	static uint8_t i = 0;

	*(keyboardHID_p + i) =
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <periodic_click_event_Callback+0xb8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a2b      	ldr	r2, [pc, #172]	; (80005ec <periodic_click_event_Callback+0xbc>)
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	441a      	add	r2, r3
			((keys[i].states[keys_tic]) & bit_select) ?
 8000542:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <periodic_click_event_Callback+0xbc>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	461c      	mov	r4, r3
 8000548:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <periodic_click_event_Callback+0xc0>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	4929      	ldr	r1, [pc, #164]	; (80005f4 <periodic_click_event_Callback+0xc4>)
 8000550:	00a3      	lsls	r3, r4, #2
 8000552:	440b      	add	r3, r1
 8000554:	4403      	add	r3, r0
 8000556:	3302      	adds	r3, #2
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <periodic_click_event_Callback+0xc8>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	400b      	ands	r3, r1
 8000560:	b2db      	uxtb	r3, r3
	*(keyboardHID_p + i) =
 8000562:	2b00      	cmp	r3, #0
 8000564:	d008      	beq.n	8000578 <periodic_click_event_Callback+0x48>
					(keys[i].name - 0x5D) : (0); //key_a = a;
 8000566:	4b21      	ldr	r3, [pc, #132]	; (80005ec <periodic_click_event_Callback+0xbc>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4922      	ldr	r1, [pc, #136]	; (80005f4 <periodic_click_event_Callback+0xc4>)
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	440b      	add	r3, r1
 8000570:	785b      	ldrb	r3, [r3, #1]
	*(keyboardHID_p + i) =
 8000572:	3b5d      	subs	r3, #93	; 0x5d
 8000574:	b2db      	uxtb	r3, r3
 8000576:	e000      	b.n	800057a <periodic_click_event_Callback+0x4a>
 8000578:	2300      	movs	r3, #0
 800057a:	7013      	strb	r3, [r2, #0]

	if (i == KEYS_SIZE - 1) //passed all the keys
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <periodic_click_event_Callback+0xbc>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b19      	cmp	r3, #25
 8000582:	d10b      	bne.n	800059c <periodic_click_event_Callback+0x6c>
			{
		i = 0;
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <periodic_click_event_Callback+0xbc>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]

		while (USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 800058a:	bf00      	nop
 800058c:	221c      	movs	r2, #28
 800058e:	491b      	ldr	r1, [pc, #108]	; (80005fc <periodic_click_event_Callback+0xcc>)
 8000590:	481b      	ldr	r0, [pc, #108]	; (8000600 <periodic_click_event_Callback+0xd0>)
 8000592:	f007 fe35 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f7      	bne.n	800058c <periodic_click_event_Callback+0x5c>
				sizeof(keyboardHID_t)) != USBD_OK)
			; //add a tick


	}
	if (bit_select == 0x80) {
 800059c:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <periodic_click_event_Callback+0xc8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b80      	cmp	r3, #128	; 0x80
 80005a2:	d111      	bne.n	80005c8 <periodic_click_event_Callback+0x98>
		(keys_tic == STATES_LEN - 1) ? (keys_tic = 0) : (keys_tic++);
 80005a4:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <periodic_click_event_Callback+0xc0>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d103      	bne.n	80005b4 <periodic_click_event_Callback+0x84>
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <periodic_click_event_Callback+0xc0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
 80005b2:	e005      	b.n	80005c0 <periodic_click_event_Callback+0x90>
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <periodic_click_event_Callback+0xc0>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <periodic_click_event_Callback+0xc0>)
 80005be:	801a      	strh	r2, [r3, #0]
		bit_select = 0x01;
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <periodic_click_event_Callback+0xc8>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e005      	b.n	80005d4 <periodic_click_event_Callback+0xa4>
	} else {
		bit_select = bit_select << 1;
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <periodic_click_event_Callback+0xc8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <periodic_click_event_Callback+0xc8>)
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	i++;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <periodic_click_event_Callback+0xbc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <periodic_click_event_Callback+0xbc>)
 80005de:	701a      	strb	r2, [r3, #0]

}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000950 	.word	0x20000950
 80005f0:	200002a6 	.word	0x200002a6
 80005f4:	20001bb8 	.word	0x20001bb8
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20001c24 	.word	0x20001c24
 8000600:	200031a8 	.word	0x200031a8

08000604 <Start_Hid_Task>:

/* Start_Hid_Task function */
void Start_Hid_Task(void const * argument) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	uint8_t * keyboardHID_p = &(hid_state.keyboardHID.k_a);
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <Start_Hid_Task+0x30>)
 800060e:	60fb      	str	r3, [r7, #12]
	static uint8_t bit_select = 0x01;
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 8000610:	2064      	movs	r0, #100	; 0x64
 8000612:	f009 f81f 	bl	8009654 <osDelay>

		if (hid_usb_init == 1) {
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <Start_Hid_Task+0x34>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b01      	cmp	r3, #1
 800061e:	d1f7      	bne.n	8000610 <Start_Hid_Task+0xc>
			osTimerStart(periodic_click_event_tmrHandle, 10);
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <Start_Hid_Task+0x38>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	210a      	movs	r1, #10
 8000626:	4618      	mov	r0, r3
 8000628:	f009 f85c 	bl	80096e4 <osTimerStart>
			vTaskSuspend(NULL);
 800062c:	2000      	movs	r0, #0
 800062e:	f00a ff77 	bl	800b520 <vTaskSuspend>
		osDelay(100);
 8000632:	e7ed      	b.n	8000610 <Start_Hid_Task+0xc>
 8000634:	20001c26 	.word	0x20001c26
 8000638:	200002a4 	.word	0x200002a4
 800063c:	20001b98 	.word	0x20001b98

08000640 <Start_Usb_Task>:
	}

}

/* Start_Usb_Task function */
void Start_Usb_Task(void const * argument) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	for (;;) {
		osDelay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f009 f803 	bl	8009654 <osDelay>
		vTaskSuspend(NULL);
 800064e:	2000      	movs	r0, #0
 8000650:	f00a ff66 	bl	800b520 <vTaskSuspend>
		osDelay(1);
 8000654:	e7f8      	b.n	8000648 <Start_Usb_Task+0x8>
	...

08000658 <Start_Mouse_Task>:
	}

}

/* Start_Mouse_Task function */
void Start_Mouse_Task(void const * argument) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	vTaskSuspend(NULL);
 8000660:	2000      	movs	r0, #0
 8000662:	f00a ff5d 	bl	800b520 <vTaskSuspend>
	osEvent event;
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000666:	2001      	movs	r0, #1
 8000668:	f008 fff4 	bl	8009654 <osDelay>
		event = osMessageGet(Hid_QueueHandle, osWaitForever);
 800066c:	4b41      	ldr	r3, [pc, #260]	; (8000774 <Start_Mouse_Task+0x11c>)
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	4618      	mov	r0, r3
 800067a:	f009 f93f 	bl	80098fc <osMessageGet>
		if (event.status == osEventMessage)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b10      	cmp	r3, #16
 8000682:	d159      	bne.n	8000738 <Start_Mouse_Task+0xe0>
			switch (event.value.v) {
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	2b0f      	cmp	r3, #15
 8000688:	d856      	bhi.n	8000738 <Start_Mouse_Task+0xe0>
 800068a:	a201      	add	r2, pc, #4	; (adr r2, 8000690 <Start_Mouse_Task+0x38>)
 800068c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000690:	080006d1 	.word	0x080006d1
 8000694:	080006e1 	.word	0x080006e1
 8000698:	080006f1 	.word	0x080006f1
 800069c:	08000739 	.word	0x08000739
 80006a0:	08000701 	.word	0x08000701
 80006a4:	08000739 	.word	0x08000739
 80006a8:	08000739 	.word	0x08000739
 80006ac:	08000739 	.word	0x08000739
 80006b0:	08000739 	.word	0x08000739
 80006b4:	08000739 	.word	0x08000739
 80006b8:	08000739 	.word	0x08000739
 80006bc:	08000711 	.word	0x08000711
 80006c0:	0800071b 	.word	0x0800071b
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000739 	.word	0x08000739
 80006cc:	0800072f 	.word	0x0800072f
			case M_BUTTON_NOP: {
				hid_state.mouseHID.buttons = M_BUTTON_NOP;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <Start_Mouse_Task+0x120>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <Start_Mouse_Task+0x120>)
 80006d8:	220e      	movs	r2, #14
 80006da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006de:	e02b      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case M_BUTTON_1: {
				hid_state.mouseHID.buttons = M_BUTTON_1;
 80006e0:	4b25      	ldr	r3, [pc, #148]	; (8000778 <Start_Mouse_Task+0x120>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <Start_Mouse_Task+0x120>)
 80006e8:	220e      	movs	r2, #14
 80006ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006ee:	e023      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case M_BUTTON_2: {
				hid_state.mouseHID.buttons = M_BUTTON_2;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <Start_Mouse_Task+0x120>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <Start_Mouse_Task+0x120>)
 80006f8:	220e      	movs	r2, #14
 80006fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 80006fe:	e01b      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case M_BUTTON_3: {
				hid_state.mouseHID.buttons = M_BUTTON_3;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <Start_Mouse_Task+0x120>)
 8000702:	2204      	movs	r2, #4
 8000704:	775a      	strb	r2, [r3, #29]
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <Start_Mouse_Task+0x120>)
 8000708:	220e      	movs	r2, #14
 800070a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800070e:	e013      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case WHEEL: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <Start_Mouse_Task+0x120>)
 8000712:	220e      	movs	r2, #14
 8000714:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000718:	e00e      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case M_X: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <Start_Mouse_Task+0x120>)
 800071c:	220e      	movs	r2, #14
 800071e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000722:	e009      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case M_Y: {
				hid_state.curr_hid_type = MOUSE_TYPE;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <Start_Mouse_Task+0x120>)
 8000726:	220e      	movs	r2, #14
 8000728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 800072c:	e004      	b.n	8000738 <Start_Mouse_Task+0xe0>
			}

			case KEYBOARD_TYPE: {
				hid_state.curr_hid_type = KEYBOARD_TYPE;
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <Start_Mouse_Task+0x120>)
 8000730:	220f      	movs	r2, #15
 8000732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				break;
 8000736:	bf00      	nop
			}

			}

		if (hid_state.curr_hid_type == MOUSE_TYPE)
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <Start_Mouse_Task+0x120>)
 800073a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800073e:	2b0e      	cmp	r3, #14
 8000740:	d105      	bne.n	800074e <Start_Mouse_Task+0xf6>
			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,
 8000742:	2205      	movs	r2, #5
 8000744:	490d      	ldr	r1, [pc, #52]	; (800077c <Start_Mouse_Task+0x124>)
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <Start_Mouse_Task+0x128>)
 8000748:	f007 fd5a 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
 800074c:	e78b      	b.n	8000666 <Start_Mouse_Task+0xe>
					(uint8_t *) &hid_state.mouseHID, sizeof(mouseHID_t));
		else if (hid_state.curr_hid_type == KEYBOARD_TYPE) {
 800074e:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <Start_Mouse_Task+0x120>)
 8000750:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000754:	2b0f      	cmp	r3, #15
 8000756:	d186      	bne.n	8000666 <Start_Mouse_Task+0xe>

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &hid_state.keyboardHID,
 8000758:	221c      	movs	r2, #28
 800075a:	4907      	ldr	r1, [pc, #28]	; (8000778 <Start_Mouse_Task+0x120>)
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <Start_Mouse_Task+0x128>)
 800075e:	f007 fd4f 	bl	8008200 <USBD_CUSTOM_HID_SendReport>
					sizeof(keyboardHID_t));
			osTimerStart(delay_click_event_tmrHandle, 500);
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <Start_Mouse_Task+0x12c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800076a:	4618      	mov	r0, r3
 800076c:	f008 ffba 	bl	80096e4 <osTimerStart>
		osDelay(1);
 8000770:	e779      	b.n	8000666 <Start_Mouse_Task+0xe>
 8000772:	bf00      	nop
 8000774:	20001b9c 	.word	0x20001b9c
 8000778:	20001c24 	.word	0x20001c24
 800077c:	20001c40 	.word	0x20001c40
 8000780:	200031a8 	.word	0x200031a8
 8000784:	20001ba4 	.word	0x20001ba4

08000788 <init_hid>:
	(hid_state.mouseHID.buttons) ?
			(hid_state.mouseHID.buttons = 0) : (hid_state.mouseHID.buttons = 2);

}

uint8_t init_hid(void) {
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	hid_state.keyboardHID.id = 1;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <init_hid+0x20>)
 800078e:	2201      	movs	r2, #1
 8000790:	701a      	strb	r2, [r3, #0]
	hid_state.keyboardHID.modifiers = 0;
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <init_hid+0x20>)
 8000794:	2200      	movs	r2, #0
 8000796:	705a      	strb	r2, [r3, #1]
	hid_state.mouseHID.id = 2;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <init_hid+0x20>)
 800079a:	2202      	movs	r2, #2
 800079c:	771a      	strb	r2, [r3, #28]
}
 800079e:	bf00      	nop
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20001c24 	.word	0x20001c24

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_GPIO_Init+0x7c>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x80>)
 800081c:	f000 ff04 	bl	8001628 <HAL_GPIO_Init>

}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	40010c00 	.word	0x40010c00

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 fbcc 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f80d 	bl	8000856 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f7ff ffb6 	bl	80007ac <MX_GPIO_Init>
  MX_CRC_Init();
 8000840:	f7ff fc86 	bl	8000150 <MX_CRC_Init>
  MX_TIM1_Init();
 8000844:	f000 f932 	bl	8000aac <MX_TIM1_Init>
  MX_FATFS_Init();
 8000848:	f006 f8de 	bl	8006a08 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800084c:	f7ff fce4 	bl	8000218 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000850:	f008 fead 	bl	80095ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000854:	e7fe      	b.n	8000854 <main+0x24>

08000856 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b094      	sub	sp, #80	; 0x50
 800085a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000860:	2228      	movs	r2, #40	; 0x28
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f00c fd84 	bl	800d372 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 fd25 	bl	80032fc <HAL_RCC_OscConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008b8:	f000 f83a 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008bc:	230f      	movs	r3, #15
 80008be:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2101      	movs	r1, #1
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 ff8f 	bl	80037fc <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80008e4:	f000 f824 	bl	8000930 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008e8:	2310      	movs	r3, #16
 80008ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80008ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 f939 	bl	8003b6c <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000900:	f000 f816 	bl	8000930 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800091e:	f000 fb6d 	bl	8000ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40000800 	.word	0x40000800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000936:	e7fe      	b.n	8000936 <Error_Handler+0x6>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <HAL_MspInit+0x68>)
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <HAL_MspInit+0x68>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <HAL_MspInit+0x68>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <HAL_MspInit+0x68>)
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_MspInit+0x68>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x68>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f000 fc10 	bl	800119a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_MspInit+0x6c>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_MspInit+0x6c>)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010000 	.word	0x40010000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	201e      	movs	r0, #30
 80009be:	f000 fbec 	bl	800119a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009c2:	201e      	movs	r0, #30
 80009c4:	f000 fc05 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80009c8:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <HAL_InitTick+0xa0>)
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <HAL_InitTick+0xa0>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	61d3      	str	r3, [r2, #28]
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_InitTick+0xa0>)
 80009d6:	69db      	ldr	r3, [r3, #28]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e0:	f107 0210 	add.w	r2, r7, #16
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 f870 	bl	8003ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f0:	f003 f85a 	bl	8003aa8 <HAL_RCC_GetPCLK1Freq>
 80009f4:	4603      	mov	r3, r0
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_InitTick+0xa4>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	3b01      	subs	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <HAL_InitTick+0xac>)
 8000a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a2a:	f003 f955 	bl	8003cd8 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d104      	bne.n	8000a3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a36:	f003 f99f 	bl	8003d78 <HAL_TIM_Base_Start_IT>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	431bde83 	.word	0x431bde83
 8000a50:	20001c48 	.word	0x20001c48
 8000a54:	40000800 	.word	0x40000800

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a8a:	f001 f858 	bl	8001b3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000366c 	.word	0x2000366c

08000a98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM4_IRQHandler+0x10>)
 8000a9e:	f003 f9bd 	bl	8003e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20001c48 	.word	0x20001c48

08000aac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac8:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000aca:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <MX_TIM1_Init+0x9c>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000af6:	f003 f8ef 	bl	8003cd8 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b00:	f7ff ff16 	bl	8000930 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000b12:	f003 fa8b 	bl	800402c <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b1c:	f7ff ff08 	bl	8000930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM1_Init+0x98>)
 8000b2e:	f003 fc51 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b38:	f7ff fefa 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20001c90 	.word	0x20001c90
 8000b48:	40012c00 	.word	0x40012c00

08000b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a09      	ldr	r2, [pc, #36]	; (8000b80 <HAL_TIM_Base_MspInit+0x34>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d10b      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5e:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <HAL_TIM_Base_MspInit+0x38>)
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_TIM_Base_MspInit+0x38>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_TIM_Base_MspInit+0x38>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000

08000b88 <STORAGE_Init_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_Init_FS (uint8_t lun)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
 8000b92:	2300      	movs	r3, #0
  /* USER CODE END 2 */ 
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <STORAGE_GetCapacity_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetCapacity_FS (uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */   
 	
	*block_num  = STORAGE_BLK_NBR_USER;   
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	2208      	movs	r2, #8
 8000bb0:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ_USER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	801a      	strh	r2, [r3, #0]
	
  return (USBD_OK);
 8000bba:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr

08000bc6 <STORAGE_IsReady_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsReady_FS (uint8_t lun)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8000bd0:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <STORAGE_IsWriteProtected_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t  STORAGE_IsWriteProtected_FS (uint8_t lun)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */ 
  return (USBD_OK);
 8000be6:	2300      	movs	r3, #0
  /* USER CODE END 5 */ 
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
	...

08000bf4 <STORAGE_Read_FS>:
*******************************************************************************/
int8_t STORAGE_Read_FS (uint8_t lun, 
                        uint8_t *buf, 
                        uint32_t blk_addr,                       
                        uint16_t blk_len)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	4613      	mov	r3, r2
 8000c06:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */ 
	
	__IO uint32_t addr_rd = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  __IO uint8_t c;
	
	__IO uint16_t blk_len_tr = blk_len;
 8000c12:	89bb      	ldrh	r3, [r7, #12]
 8000c14:	82bb      	strh	r3, [r7, #20]
	
	 
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	e00f      	b.n	8000c3c <STORAGE_Read_FS+0x48>
	 {
			c = ram_msd[addr_rd  + i];
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <STORAGE_Read_FS+0x60>)
 8000c24:	5cd3      	ldrb	r3, [r2, r3]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	75fb      	strb	r3, [r7, #23]
			buf[i] = c;
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	4413      	add	r3, r2
 8000c30:	7dfa      	ldrb	r2, [r7, #23]
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	701a      	strb	r2, [r3, #0]
	 for ( i = 0; i < STORAGE_BLK_SIZ_USER*blk_len; i++)
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	89bb      	ldrh	r3, [r7, #12]
 8000c3e:	025b      	lsls	r3, r3, #9
 8000c40:	461a      	mov	r2, r3
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8e9      	bhi.n	8000c1c <STORAGE_Read_FS+0x28>
	 

	 
	  
	
   return (USBD_OK);
 8000c48:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	20001cd8 	.word	0x20001cd8

08000c58 <STORAGE_Write_FS>:
*******************************************************************************/
int8_t STORAGE_Write_FS (uint8_t lun, 
                         uint8_t *buf, 
                         uint32_t blk_addr,
                         uint16_t blk_len)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	461a      	mov	r2, r3
 8000c64:	4603      	mov	r3, r0
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */ 
	__IO uint32_t addr_wr = ((blk_addr)*STORAGE_BLK_SIZ_USER) ;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	025b      	lsls	r3, r3, #9
 8000c70:	61fb      	str	r3, [r7, #28]
	__IO uint32_t j = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
	__IO uint8_t ch;

	//__IO uint16_t blk_len_t = blk_len;

	 
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	e00e      	b.n	8000c9a <STORAGE_Write_FS+0x42>
	{
		ch = buf[j];
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	4413      	add	r3, r2
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	75fb      	strb	r3, [r7, #23]
		ram_msd[addr_wr + j] = ch;
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	7dfa      	ldrb	r2, [r7, #23]
 8000c8e:	b2d1      	uxtb	r1, r2
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <STORAGE_Write_FS+0x64>)
 8000c92:	54d1      	strb	r1, [r2, r3]
	for ( j = 0; j <  STORAGE_BLK_SIZ_USER*blk_len ; j++)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	3301      	adds	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	89bb      	ldrh	r3, [r7, #12]
 8000c9c:	025b      	lsls	r3, r3, #9
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d8ea      	bhi.n	8000c7c <STORAGE_Write_FS+0x24>
	}
	
	eof_check(blk_addr);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f814 	bl	8000cd4 <eof_check>
	st_info.blk_len = blk_len;
 8000cac:	89bb      	ldrh	r3, [r7, #12]
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <STORAGE_Write_FS+0x68>)
 8000cb0:	6053      	str	r3, [r2, #4]
//	}
//	
//	HAL_FLASH_Lock();
//	 }
	 
  return (USBD_OK);
 8000cb2:	2300      	movs	r3, #0
  /* USER CODE END 7 */ 
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20001cd8 	.word	0x20001cd8
 8000cc0:	20000954 	.word	0x20000954

08000cc4 <STORAGE_GetMaxLun_FS>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
int8_t STORAGE_GetMaxLun_FS (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
 8000cc8:	2300      	movs	r3, #0
  /* USER CODE END 8 */ 
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <eof_check>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

static void eof_check(uint32_t blk_addr)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	uint8_t pattern[EOF_LEN] = "EOF";
 8000cdc:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <eof_check+0x84>)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	8019      	strh	r1, [r3, #0]
 8000ce8:	3302      	adds	r3, #2
 8000cea:	0c12      	lsrs	r2, r2, #16
 8000cec:	701a      	strb	r2, [r3, #0]
	uint32_t i,j;

	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	025b      	lsls	r3, r3, #9
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e022      	b.n	8000d3c <eof_check+0x68>
	{
		for(j = 0; j < EOF_LEN ;j++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e017      	b.n	8000d2c <eof_check+0x58>
		{
			if(ram_msd[i + j] != pattern[j])
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <eof_check+0x88>)
 8000d04:	5cd3      	ldrb	r3, [r2, r3]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	f107 010c 	add.w	r1, r7, #12
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	440b      	add	r3, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d10e      	bne.n	8000d34 <eof_check+0x60>
			{
				break;
			}
			else if(j < EOF_LEN -1)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d803      	bhi.n	8000d24 <eof_check+0x50>
		for(j = 0; j < EOF_LEN ;j++)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e003      	b.n	8000d2c <eof_check+0x58>
				continue;
				
			st_info.eof_flg = 1;
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <eof_check+0x8c>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e011      	b.n	8000d50 <eof_check+0x7c>
		for(j = 0; j < EOF_LEN ;j++)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d9e4      	bls.n	8000cfc <eof_check+0x28>
 8000d32:	e000      	b.n	8000d36 <eof_check+0x62>
				break;
 8000d34:	bf00      	nop
	for(i = STORAGE_BLK_SIZ_USER*blk_addr; i < (STORAGE_BLK_SIZ_USER-EOF_LEN)*(blk_addr+1);i++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	4613      	mov	r3, r2
 8000d42:	01db      	lsls	r3, r3, #7
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	441a      	add	r2, r3
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8d2      	bhi.n	8000cf6 <eof_check+0x22>
			return;
		}	
	}
	
}
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	0800d478 	.word	0x0800d478
 8000d5c:	20001cd8 	.word	0x20001cd8
 8000d60:	20000954 	.word	0x20000954

08000d64 <ve_is_pg_erased>:
/*
*@param uint32_t p_addr the address of the page
*
*/
static uint8_t  ve_is_pg_erased(uint32_t p_addr)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	__IO uint8_t c =0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	72fb      	strb	r3, [r7, #11]
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	e00d      	b.n	8000d92 <ve_is_pg_erased+0x2e>
	{
		c = *((uint8_t *)(p_addr + i));
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	72fb      	strb	r3, [r7, #11]
		if( c != 0xFF )
 8000d80:	7afb      	ldrb	r3, [r7, #11]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2bff      	cmp	r3, #255	; 0xff
 8000d86:	d001      	beq.n	8000d8c <ve_is_pg_erased+0x28>
		{
			return 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e007      	b.n	8000d9c <ve_is_pg_erased+0x38>
	for(uint32_t i = 0; i < FLASH_PAGE_SIZE;i++)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d98:	d3ed      	bcc.n	8000d76 <ve_is_pg_erased+0x12>
		}
		
	}
	
	return 1;
 8000d9a:	2301      	movs	r3, #1
	
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
	...

08000da8 <ve_pgs_prep>:
*
*@param st_info storage information
*
*/
static void ve_pgs_prep(s_usbd_st_info * p_st_info)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	__IO uint8_t pg_num = ( p_st_info->blk_len / 2) + (p_st_info->blk_len & 1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	73bb      	strb	r3, [r7, #14]
	
	
	HAL_FLASH_Unlock();
 8000dca:	f000 fa9d 	bl	8001308 <HAL_FLASH_Unlock>
	
	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8000dce:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <ve_pgs_prep+0x8c>)
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <ve_pgs_prep+0x8c>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
	
	/* Get the bank */
	
	EraseInitStruct.NbPages = 1;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <ve_pgs_prep+0x90>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	60da      	str	r2, [r3, #12]
	//EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR;
	EraseInitStruct.Banks     = 3;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <ve_pgs_prep+0x90>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	605a      	str	r2, [r3, #4]
	
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e017      	b.n	8000e1c <ve_pgs_prep+0x74>
	{
		EraseInitStruct.PageAddress = VIRT_EEPROM_ADDR + FLASH_PAGE_SIZE*pg_curr;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000df2:	3320      	adds	r3, #32
 8000df4:	029b      	lsls	r3, r3, #10
 8000df6:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <ve_pgs_prep+0x90>)
 8000df8:	6093      	str	r3, [r2, #8]
		 
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <ve_pgs_prep+0x90>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ffb0 	bl	8000d64 <ve_is_pg_erased>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d104      	bne.n	8000e14 <ve_pgs_prep+0x6c>
			
		
		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError_t) != HAL_OK)
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <ve_pgs_prep+0x94>)
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <ve_pgs_prep+0x90>)
 8000e0e:	f000 fb63 	bl	80014d8 <HAL_FLASHEx_Erase>
 8000e12:	e000      	b.n	8000e16 <ve_pgs_prep+0x6e>
		if(ve_is_pg_erased(EraseInitStruct.PageAddress)) continue;
 8000e14:	bf00      	nop
	for(uint8_t pg_curr = 0;pg_curr < pg_num; pg_curr++)
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	73fb      	strb	r3, [r7, #15]
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	7bfa      	ldrb	r2, [r7, #15]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d3e2      	bcc.n	8000dec <ve_pgs_prep+0x44>
			//test1 Error_Handler();
		}
	
	}
	
	HAL_FLASH_Lock();
 8000e26:	f000 fa95 	bl	8001354 <HAL_FLASH_Lock>
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40022000 	.word	0x40022000
 8000e38:	20000960 	.word	0x20000960
 8000e3c:	2000095c 	.word	0x2000095c

08000e40 <ve_prg_blks>:
*
*@param st_info storage information
*
*/
static void ve_prg_blks(s_usbd_st_info * p_st_info)
{
 8000e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e44:	b08f      	sub	sp, #60	; 0x3c
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	62f8      	str	r0, [r7, #44]	; 0x2c
	HAL_FLASH_Unlock();
 8000e4a:	f000 fa5d 	bl	8001308 <HAL_FLASH_Unlock>
	
	
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
 8000e52:	e094      	b.n	8000f7e <ve_prg_blks+0x13e>
//			dword_to_write  = (((uint64_t )ram_msd[j ] << 56 )|((uint64_t )ram_msd[j + 1] << 48 )|
//											  ((uint64_t )ram_msd[j + 2] << 40 )|((uint64_t )ram_msd[j + 3] << 32))|
//										  	(((uint64_t )ram_msd[j + 4] << 24 )|((uint64_t )ram_msd[j + 5] << 16)|
//											  ((uint64_t )ram_msd[j + 6] << 8  )|((uint64_t )ram_msd[j + 7]));
		
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <ve_prg_blks+0x15c>)
 8000e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2d8      	uxtb	r0, r3
 8000e5e:	f04f 0100 	mov.w	r1, #0
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	4b4d      	ldr	r3, [pc, #308]	; (8000f9c <ve_prg_blks+0x15c>)
 8000e68:	5c9b      	ldrb	r3, [r3, r2]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f04f 0400 	mov.w	r4, #0
 8000e70:	0226      	lsls	r6, r4, #8
 8000e72:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8000e76:	021d      	lsls	r5, r3, #8
 8000e78:	ea40 0005 	orr.w	r0, r0, r5
 8000e7c:	ea41 0106 	orr.w	r1, r1, r6
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e82:	1c9a      	adds	r2, r3, #2
 8000e84:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <ve_prg_blks+0x15c>)
 8000e86:	5c9b      	ldrb	r3, [r3, r2]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f04f 0400 	mov.w	r4, #0
 8000e8e:	ea4f 4904 	mov.w	r9, r4, lsl #16
 8000e92:	ea49 4913 	orr.w	r9, r9, r3, lsr #16
 8000e96:	ea4f 4803 	mov.w	r8, r3, lsl #16
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000e9a:	ea40 0008 	orr.w	r0, r0, r8
 8000e9e:	ea41 0109 	orr.w	r1, r1, r9
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea4:	1cda      	adds	r2, r3, #3
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <ve_prg_blks+0x15c>)
 8000ea8:	5c9b      	ldrb	r3, [r3, r2]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f04f 0400 	mov.w	r4, #0
 8000eb0:	0a1a      	lsrs	r2, r3, #8
 8000eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8000eb4:	061b      	lsls	r3, r3, #24
 8000eb6:	623b      	str	r3, [r7, #32]
 8000eb8:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8000ebc:	ea4a 0a00 	orr.w	sl, sl, r0
 8000ec0:	ea4b 0b01 	orr.w	fp, fp, r1
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 8000ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec6:	1d1a      	adds	r2, r3, #4
 8000ec8:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <ve_prg_blks+0x15c>)
 8000eca:	5c9b      	ldrb	r3, [r3, r2]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	f04f 0400 	mov.w	r4, #0
 8000ed2:	001b      	movs	r3, r3
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
 8000eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000edc:	1d5a      	adds	r2, r3, #5
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <ve_prg_blks+0x15c>)
 8000ee0:	5c9b      	ldrb	r3, [r3, r2]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f04f 0400 	mov.w	r4, #0
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ef4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000ef8:	ea40 0003 	orr.w	r0, r0, r3
 8000efc:	ea41 0104 	orr.w	r1, r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8000f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f02:	1d9a      	adds	r2, r3, #6
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <ve_prg_blks+0x15c>)
 8000f06:	5c9b      	ldrb	r3, [r3, r2]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f04f 0400 	mov.w	r4, #0
 8000f0e:	041b      	lsls	r3, r3, #16
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
										  	(((uint64_t )ram_msd[j + 4] << 32 )|((uint64_t )ram_msd[j + 5] << 40)|
 8000f16:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f1a:	ea43 0300 	orr.w	r3, r3, r0
 8000f1e:	ea44 0401 	orr.w	r4, r4, r1
 8000f22:	4618      	mov	r0, r3
 8000f24:	4621      	mov	r1, r4
											  ((uint64_t )ram_msd[j + 6] << 48  )|((uint64_t )ram_msd[j + 7]<<56));
 8000f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f28:	1dda      	adds	r2, r3, #7
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <ve_prg_blks+0x15c>)
 8000f2c:	5c9b      	ldrb	r3, [r3, r2]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	f04f 0400 	mov.w	r4, #0
 8000f34:	061b      	lsls	r3, r3, #24
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000f40:	ea43 0300 	orr.w	r3, r3, r0
 8000f44:	ea44 0401 	orr.w	r4, r4, r1
											  ((uint64_t )ram_msd[j + 2] << 16 )|((uint64_t )ram_msd[j + 3] << 24))|
 8000f48:	ea43 030a 	orr.w	r3, r3, sl
 8000f4c:	ea44 040b 	orr.w	r4, r4, fp
		dword_to_write  = (((uint64_t )ram_msd[j ]   )|((uint64_t )ram_msd[j + 1] << 8 )|
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <ve_prg_blks+0x160>)
 8000f52:	e882 0018 	stmia.w	r2, {r3, r4}
		
		if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, VIRT_EEPROM_ADDR+j,  dword_to_write) != HAL_OK)
 8000f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f58:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000f5c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <ve_prg_blks+0x160>)
 8000f62:	cb18      	ldmia	r3, {r3, r4}
 8000f64:	461a      	mov	r2, r3
 8000f66:	4623      	mov	r3, r4
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f95d 	bl	8001228 <HAL_FLASH_Program>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <ve_prg_blks+0x138>
		{
			Error_Handler();
 8000f74:	f7ff fcdc 	bl	8000930 <Error_Handler>
	for (uint32_t j = 0; j <  STORAGE_BLK_SIZ_USER*(p_st_info->blk_len) ; j+= UINT32_T_LEN)
 8000f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	025a      	lsls	r2, r3, #9
 8000f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f86:	429a      	cmp	r2, r3
 8000f88:	f63f af64 	bhi.w	8000e54 <ve_prg_blks+0x14>
		}
	}
	
	HAL_FLASH_Lock();
 8000f8c:	f000 f9e2 	bl	8001354 <HAL_FLASH_Lock>
}
 8000f90:	bf00      	nop
 8000f92:	373c      	adds	r7, #60	; 0x3c
 8000f94:	46bd      	mov	sp, r7
 8000f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20001cd8 	.word	0x20001cd8
 8000fa0:	20000970 	.word	0x20000970

08000fa4 <ve_operate>:



uint8_t ve_operate( s_usbd_st_info * p_st_info )
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	ve_pgs_prep(p_st_info);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fefb 	bl	8000da8 <ve_pgs_prep>
	ve_prg_blks(p_st_info);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff44 	bl	8000e40 <ve_prg_blks>
	return 0;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_Init+0x28>)
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x28>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f8cf 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff fcde 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fca4 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000030 	.word	0x20000030
 800101c:	20002cd8 	.word	0x20002cd8

08001020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20002cd8 	.word	0x20002cd8

08001034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001066:	4a04      	ldr	r2, [pc, #16]	; (8001078 <__NVIC_SetPriorityGrouping+0x44>)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <__NVIC_GetPriorityGrouping+0x18>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	0a1b      	lsrs	r3, r3, #8
 8001086:	f003 0307 	and.w	r3, r3, #7
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db0b      	blt.n	80010c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_EnableIRQ+0x34>)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	f002 021f 	and.w	r2, r2, #31
 80010b8:	2001      	movs	r0, #1
 80010ba:	fa00 f202 	lsl.w	r2, r0, r2
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	4909      	ldr	r1, [pc, #36]	; (8001120 <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	2201      	movs	r2, #1
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	401a      	ands	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116a:	2101      	movs	r1, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	1e59      	subs	r1, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff51 	bl	8001034 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff66 	bl	800107c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ffb4 	bl	8001124 <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff83 	bl	80010d0 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff59 	bl	8001098 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e00e      	b.n	800121e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	795b      	ldrb	r3, [r3, #5]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7fe ffb1 	bl	8000178 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001242:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <HAL_FLASH_Program+0xd8>)
 8001244:	7e1b      	ldrb	r3, [r3, #24]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_FLASH_Program+0x26>
 800124a:	2302      	movs	r3, #2
 800124c:	e054      	b.n	80012f8 <HAL_FLASH_Program+0xd0>
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <HAL_FLASH_Program+0xd8>)
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001254:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001258:	f000 f8a8 	bl	80013ac <FLASH_WaitForLastOperation>
 800125c:	4603      	mov	r3, r0
 800125e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d144      	bne.n	80012f0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d102      	bne.n	8001272 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800126c:	2301      	movs	r3, #1
 800126e:	757b      	strb	r3, [r7, #21]
 8001270:	e007      	b.n	8001282 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d102      	bne.n	800127e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001278:	2302      	movs	r3, #2
 800127a:	757b      	strb	r3, [r7, #21]
 800127c:	e001      	b.n	8001282 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800127e:	2304      	movs	r3, #4
 8001280:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001282:	2300      	movs	r3, #0
 8001284:	75bb      	strb	r3, [r7, #22]
 8001286:	e02d      	b.n	80012e4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	005a      	lsls	r2, r3, #1
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	eb02 0e03 	add.w	lr, r2, r3
 8001292:	7dbb      	ldrb	r3, [r7, #22]
 8001294:	0119      	lsls	r1, r3, #4
 8001296:	e9d7 2300 	ldrd	r2, r3, [r7]
 800129a:	f1c1 0620 	rsb	r6, r1, #32
 800129e:	f1a1 0020 	sub.w	r0, r1, #32
 80012a2:	fa22 f401 	lsr.w	r4, r2, r1
 80012a6:	fa03 f606 	lsl.w	r6, r3, r6
 80012aa:	4334      	orrs	r4, r6
 80012ac:	fa23 f000 	lsr.w	r0, r3, r0
 80012b0:	4304      	orrs	r4, r0
 80012b2:	fa23 f501 	lsr.w	r5, r3, r1
 80012b6:	b2a3      	uxth	r3, r4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4670      	mov	r0, lr
 80012bc:	f000 f85a 	bl	8001374 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012c4:	f000 f872 	bl	80013ac <FLASH_WaitForLastOperation>
 80012c8:	4603      	mov	r3, r0
 80012ca:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_FLASH_Program+0xdc>)
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <HAL_FLASH_Program+0xdc>)
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	f023 0301 	bic.w	r3, r3, #1
 80012d6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d107      	bne.n	80012ee <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	3301      	adds	r3, #1
 80012e2:	75bb      	strb	r3, [r7, #22]
 80012e4:	7dba      	ldrb	r2, [r7, #22]
 80012e6:	7d7b      	ldrb	r3, [r7, #21]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d3cd      	bcc.n	8001288 <HAL_FLASH_Program+0x60>
 80012ec:	e000      	b.n	80012f0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80012ee:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <HAL_FLASH_Program+0xd8>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	761a      	strb	r2, [r3, #24]

  return status;
 80012f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	20002ce0 	.word	0x20002ce0
 8001304:	40022000 	.word	0x40022000

08001308 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_FLASH_Unlock+0x40>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00d      	beq.n	800133a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_FLASH_Unlock+0x40>)
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <HAL_FLASH_Unlock+0x44>)
 8001322:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_FLASH_Unlock+0x40>)
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_FLASH_Unlock+0x48>)
 8001328:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_FLASH_Unlock+0x40>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800133a:	79fb      	ldrb	r3, [r7, #7]
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000
 800134c:	45670123 	.word	0x45670123
 8001350:	cdef89ab 	.word	0xcdef89ab

08001354 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <HAL_FLASH_Lock+0x1c>)
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_FLASH_Lock+0x1c>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000

08001374 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <FLASH_Program_HalfWord+0x30>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <FLASH_Program_HalfWord+0x34>)
 8001388:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <FLASH_Program_HalfWord+0x34>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	887a      	ldrh	r2, [r7, #2]
 8001396:	801a      	strh	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20002ce0 	.word	0x20002ce0
 80013a8:	40022000 	.word	0x40022000

080013ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fe34 	bl	8001020 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013ba:	e010      	b.n	80013de <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c2:	d00c      	beq.n	80013de <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <FLASH_WaitForLastOperation+0x2e>
 80013ca:	f7ff fe29 	bl	8001020 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad2      	subs	r2, r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d901      	bls.n	80013de <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e025      	b.n	800142a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <FLASH_WaitForLastOperation+0x88>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1e8      	bne.n	80013bc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <FLASH_WaitForLastOperation+0x88>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f003 0320 	and.w	r3, r3, #32
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <FLASH_WaitForLastOperation+0x88>)
 80013f8:	2220      	movs	r2, #32
 80013fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <FLASH_WaitForLastOperation+0x88>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10b      	bne.n	8001420 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <FLASH_WaitForLastOperation+0x88>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <FLASH_WaitForLastOperation+0x88>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001420:	f000 f80a 	bl	8001438 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000

08001438 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001442:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <FLASH_SetErrorCode+0x9c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <FLASH_SetErrorCode+0x9c>)
 8001458:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f043 0310 	orr.w	r3, r3, #16
 8001460:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <FLASH_SetErrorCode+0x9c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <FLASH_SetErrorCode+0x9c>)
 8001478:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <FLASH_SetErrorCode+0x9c>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <FLASH_SetErrorCode+0x9c>)
 8001498:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f240 1201 	movw	r2, #257	; 0x101
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d106      	bne.n	80014be <FLASH_SetErrorCode+0x86>
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	61d3      	str	r3, [r2, #28]
}  
 80014bc:	e002      	b.n	80014c4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <FLASH_SetErrorCode+0x98>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60d3      	str	r3, [r2, #12]
}  
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40022000 	.word	0x40022000
 80014d4:	20002ce0 	.word	0x20002ce0

080014d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014ea:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <HAL_FLASHEx_Erase+0xd0>)
 80014ec:	7e1b      	ldrb	r3, [r3, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_FLASHEx_Erase+0x1e>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e053      	b.n	800159e <HAL_FLASHEx_Erase+0xc6>
 80014f6:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <HAL_FLASHEx_Erase+0xd0>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d116      	bne.n	8001532 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001504:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001508:	f7ff ff50 	bl	80013ac <FLASH_WaitForLastOperation>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d141      	bne.n	8001596 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 f84c 	bl	80015b0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001518:	f24c 3050 	movw	r0, #50000	; 0xc350
 800151c:	f7ff ff46 	bl	80013ac <FLASH_WaitForLastOperation>
 8001520:	4603      	mov	r3, r0
 8001522:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <HAL_FLASHEx_Erase+0xd4>)
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_FLASHEx_Erase+0xd4>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	f023 0304 	bic.w	r3, r3, #4
 800152e:	6113      	str	r3, [r2, #16]
 8001530:	e031      	b.n	8001596 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001532:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001536:	f7ff ff39 	bl	80013ac <FLASH_WaitForLastOperation>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d12a      	bne.n	8001596 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f04f 32ff 	mov.w	r2, #4294967295
 8001546:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	e019      	b.n	8001584 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	f000 f849 	bl	80015e8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001556:	f24c 3050 	movw	r0, #50000	; 0xc350
 800155a:	f7ff ff27 	bl	80013ac <FLASH_WaitForLastOperation>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_FLASHEx_Erase+0xd4>)
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_FLASHEx_Erase+0xd4>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f023 0302 	bic.w	r3, r3, #2
 800156c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	601a      	str	r2, [r3, #0]
            break;
 800157a:	e00c      	b.n	8001596 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001582:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	029a      	lsls	r2, r3, #10
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	441a      	add	r2, r3
        for(address = pEraseInit->PageAddress;
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	429a      	cmp	r2, r3
 8001594:	d8dc      	bhi.n	8001550 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001596:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <HAL_FLASHEx_Erase+0xd0>)
 8001598:	2200      	movs	r2, #0
 800159a:	761a      	strb	r2, [r3, #24]

  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20002ce0 	.word	0x20002ce0
 80015ac:	40022000 	.word	0x40022000

080015b0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <FLASH_MassErase+0x30>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <FLASH_MassErase+0x34>)
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <FLASH_MassErase+0x34>)
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015ca:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <FLASH_MassErase+0x34>)
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <FLASH_MassErase+0x34>)
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20002ce0 	.word	0x20002ce0
 80015e4:	40022000 	.word	0x40022000

080015e8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <FLASH_PageErase+0x38>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <FLASH_PageErase+0x3c>)
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <FLASH_PageErase+0x3c>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <FLASH_PageErase+0x3c>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <FLASH_PageErase+0x3c>)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <FLASH_PageErase+0x3c>)
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001612:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20002ce0 	.word	0x20002ce0
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e127      	b.n	800188c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800163c:	2201      	movs	r2, #1
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8116 	bne.w	8001886 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b12      	cmp	r3, #18
 8001660:	d034      	beq.n	80016cc <HAL_GPIO_Init+0xa4>
 8001662:	2b12      	cmp	r3, #18
 8001664:	d80d      	bhi.n	8001682 <HAL_GPIO_Init+0x5a>
 8001666:	2b02      	cmp	r3, #2
 8001668:	d02b      	beq.n	80016c2 <HAL_GPIO_Init+0x9a>
 800166a:	2b02      	cmp	r3, #2
 800166c:	d804      	bhi.n	8001678 <HAL_GPIO_Init+0x50>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d031      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 8001672:	2b01      	cmp	r3, #1
 8001674:	d01c      	beq.n	80016b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001676:	e048      	b.n	800170a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001678:	2b03      	cmp	r3, #3
 800167a:	d043      	beq.n	8001704 <HAL_GPIO_Init+0xdc>
 800167c:	2b11      	cmp	r3, #17
 800167e:	d01b      	beq.n	80016b8 <HAL_GPIO_Init+0x90>
          break;
 8001680:	e043      	b.n	800170a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001682:	4a89      	ldr	r2, [pc, #548]	; (80018a8 <HAL_GPIO_Init+0x280>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d026      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 8001688:	4a87      	ldr	r2, [pc, #540]	; (80018a8 <HAL_GPIO_Init+0x280>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d806      	bhi.n	800169c <HAL_GPIO_Init+0x74>
 800168e:	4a87      	ldr	r2, [pc, #540]	; (80018ac <HAL_GPIO_Init+0x284>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d020      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 8001694:	4a86      	ldr	r2, [pc, #536]	; (80018b0 <HAL_GPIO_Init+0x288>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01d      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
          break;
 800169a:	e036      	b.n	800170a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800169c:	4a85      	ldr	r2, [pc, #532]	; (80018b4 <HAL_GPIO_Init+0x28c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 80016a2:	4a85      	ldr	r2, [pc, #532]	; (80018b8 <HAL_GPIO_Init+0x290>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d016      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
 80016a8:	4a84      	ldr	r2, [pc, #528]	; (80018bc <HAL_GPIO_Init+0x294>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_GPIO_Init+0xae>
          break;
 80016ae:	e02c      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e028      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	3304      	adds	r3, #4
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e023      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	3308      	adds	r3, #8
 80016c8:	623b      	str	r3, [r7, #32]
          break;
 80016ca:	e01e      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	330c      	adds	r3, #12
 80016d2:	623b      	str	r3, [r7, #32]
          break;
 80016d4:	e019      	b.n	800170a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016de:	2304      	movs	r3, #4
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e012      	b.n	800170a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016ec:	2308      	movs	r3, #8
 80016ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	611a      	str	r2, [r3, #16]
          break;
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f8:	2308      	movs	r3, #8
 80016fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	615a      	str	r2, [r3, #20]
          break;
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	2bff      	cmp	r3, #255	; 0xff
 800170e:	d801      	bhi.n	8001714 <HAL_GPIO_Init+0xec>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	e001      	b.n	8001718 <HAL_GPIO_Init+0xf0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3304      	adds	r3, #4
 8001718:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2bff      	cmp	r3, #255	; 0xff
 800171e:	d802      	bhi.n	8001726 <HAL_GPIO_Init+0xfe>
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x104>
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	3b08      	subs	r3, #8
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	210f      	movs	r1, #15
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	401a      	ands	r2, r3
 800173e:	6a39      	ldr	r1, [r7, #32]
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	431a      	orrs	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8096 	beq.w	8001886 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800175a:	4a59      	ldr	r2, [pc, #356]	; (80018c0 <HAL_GPIO_Init+0x298>)
 800175c:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <HAL_GPIO_Init+0x298>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6193      	str	r3, [r2, #24]
 8001766:	4b56      	ldr	r3, [pc, #344]	; (80018c0 <HAL_GPIO_Init+0x298>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001772:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <HAL_GPIO_Init+0x29c>)
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <HAL_GPIO_Init+0x2a0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x19e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4a      	ldr	r2, [pc, #296]	; (80018cc <HAL_GPIO_Init+0x2a4>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x19a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_GPIO_Init+0x2a8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x196>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a48      	ldr	r2, [pc, #288]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x192>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017ba:	2304      	movs	r3, #4
 80017bc:	e004      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017be:	2302      	movs	r3, #2
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_GPIO_Init+0x1a0>
 80017c6:	2300      	movs	r3, #0
 80017c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ca:	f002 0203 	and.w	r2, r2, #3
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4093      	lsls	r3, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d8:	493a      	ldr	r1, [pc, #232]	; (80018c4 <HAL_GPIO_Init+0x29c>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f2:	4939      	ldr	r1, [pc, #228]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	e006      	b.n	800180e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001800:	4935      	ldr	r1, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001802:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	43db      	mvns	r3, r3
 800180a:	4013      	ands	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800181a:	492f      	ldr	r1, [pc, #188]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e006      	b.n	8001836 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001828:	492b      	ldr	r1, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	43db      	mvns	r3, r3
 8001832:	4013      	ands	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001842:	4925      	ldr	r1, [pc, #148]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
 800184e:	e006      	b.n	800185e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001850:	4921      	ldr	r1, [pc, #132]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4013      	ands	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800186a:	491b      	ldr	r1, [pc, #108]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
 8001876:	e006      	b.n	8001886 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001878:	4917      	ldr	r1, [pc, #92]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	3301      	adds	r3, #1
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f aed0 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 800189c:	bf00      	nop
 800189e:	372c      	adds	r7, #44	; 0x2c
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	10210000 	.word	0x10210000
 80018ac:	10110000 	.word	0x10110000
 80018b0:	10120000 	.word	0x10120000
 80018b4:	10310000 	.word	0x10310000
 80018b8:	10320000 	.word	0x10320000
 80018bc:	10220000 	.word	0x10220000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40011400 	.word	0x40011400
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018de:	b08b      	sub	sp, #44	; 0x2c
 80018e0:	af06      	add	r7, sp, #24
 80018e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e0fd      	b.n	8001aea <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f00b fa20 	bl	800cd48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2203      	movs	r2, #3
 800190c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f002 fdf3 	bl	8004500 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	687e      	ldr	r6, [r7, #4]
 8001922:	466d      	mov	r5, sp
 8001924:	f106 0410 	add.w	r4, r6, #16
 8001928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	602b      	str	r3, [r5, #0]
 8001930:	1d33      	adds	r3, r6, #4
 8001932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f002 fdbd 	bl	80044b4 <USB_CoreInit>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2202      	movs	r2, #2
 8001944:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0ce      	b.n	8001aea <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f002 fdee 	bl	8004534 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e04c      	b.n	80019f8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3301      	adds	r3, #1
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	7bfa      	ldrb	r2, [r7, #15]
 8001986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	b298      	uxth	r0, r3
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3336      	adds	r3, #54	; 0x36
 800199c:	4602      	mov	r2, r0
 800199e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	440b      	add	r3, r1
 80019b0:	3303      	adds	r3, #3
 80019b2:	2200      	movs	r2, #0
 80019b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3338      	adds	r3, #56	; 0x38
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	333c      	adds	r3, #60	; 0x3c
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	3340      	adds	r3, #64	; 0x40
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	3301      	adds	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3ad      	bcc.n	800195e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
 8001a06:	e044      	b.n	8001a92 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a4a:	7bfa      	ldrb	r2, [r7, #15]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3b5      	bcc.n	8001a08 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	687e      	ldr	r6, [r7, #4]
 8001aa4:	466d      	mov	r5, sp
 8001aa6:	f106 0410 	add.w	r4, r6, #16
 8001aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aae:	6823      	ldr	r3, [r4, #0]
 8001ab0:	602b      	str	r3, [r5, #0]
 8001ab2:	1d33      	adds	r3, r6, #4
 8001ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f002 fd48 	bl	800454c <USB_DevInit>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00d      	b.n	8001aea <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 fed9 	bl	800689a <USB_DevDisconnect>

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_PCD_Start+0x16>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e016      	b.n	8001b36 <HAL_PCD_Start+0x44>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 fcdd 	bl	80044d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f00b fb9c 	bl	800d25a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fead 	bl	8006886 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b088      	sub	sp, #32
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f004 feaf 	bl	80068ae <USB_ReadInterrupts>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b5a:	d102      	bne.n	8001b62 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fb8e 	bl	800227e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f004 fea1 	bl	80068ae <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d112      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001b84:	b292      	uxth	r2, r2
 8001b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f00b f954 	bl	800ce3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f925 	bl	8001de8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 fe83 	bl	80068ae <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 fe6c 	bl	80068ae <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be0:	d10b      	bne.n	8001bfa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001bee:	b292      	uxth	r2, r2
 8001bf0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 fe55 	bl	80068ae <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0e:	d126      	bne.n	8001c5e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c1c:	b292      	uxth	r2, r2
 8001c1e:	f022 0204 	bic.w	r2, r2, #4
 8001c22:	b292      	uxth	r2, r2
 8001c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001c34:	b292      	uxth	r2, r2
 8001c36:	f022 0208 	bic.w	r2, r2, #8
 8001c3a:	b292      	uxth	r2, r2
 8001c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f00b f935 	bl	800ceb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001c52:	b292      	uxth	r2, r2
 8001c54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c58:	b292      	uxth	r2, r2
 8001c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fe23 	bl	80068ae <USB_ReadInterrupts>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c72:	f040 8084 	bne.w	8001d7e <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	77fb      	strb	r3, [r7, #31]
 8001c7a:	e011      	b.n	8001ca0 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001c7c:	7ffb      	ldrb	r3, [r7, #31]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	4611      	mov	r1, r2
 8001c84:	7ffa      	ldrb	r2, [r7, #31]
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	440a      	add	r2, r1
 8001c8a:	8812      	ldrh	r2, [r2, #0]
 8001c8c:	b292      	uxth	r2, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	f107 0120 	add.w	r1, r7, #32
 8001c94:	440b      	add	r3, r1
 8001c96:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	77fb      	strb	r3, [r7, #31]
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	2b07      	cmp	r3, #7
 8001ca4:	d9ea      	bls.n	8001c7c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f042 0201 	orr.w	r2, r2, #1
 8001cb8:	b292      	uxth	r2, r2
 8001cba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001cd6:	bf00      	nop
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f6      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfc:	b292      	uxth	r2, r2
 8001cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	77fb      	strb	r3, [r7, #31]
 8001d06:	e010      	b.n	8001d2a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	7ffb      	ldrb	r3, [r7, #31]
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	441a      	add	r2, r3
 8001d14:	7ffb      	ldrb	r3, [r7, #31]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	f107 0120 	add.w	r1, r7, #32
 8001d1c:	440b      	add	r3, r1
 8001d1e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d22:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
 8001d26:	3301      	adds	r3, #1
 8001d28:	77fb      	strb	r3, [r7, #31]
 8001d2a:	7ffb      	ldrb	r3, [r7, #31]
 8001d2c:	2b07      	cmp	r3, #7
 8001d2e:	d9eb      	bls.n	8001d08 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d3c:	b292      	uxth	r2, r2
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	b292      	uxth	r2, r2
 8001d44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001d54:	b292      	uxth	r2, r2
 8001d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5a:	b292      	uxth	r2, r2
 8001d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	f042 0204 	orr.w	r2, r2, #4
 8001d72:	b292      	uxth	r2, r2
 8001d74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f00b f87f 	bl	800ce7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fd93 	bl	80068ae <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d92:	d10e      	bne.n	8001db2 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001da0:	b292      	uxth	r2, r2
 8001da2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da6:	b292      	uxth	r2, r2
 8001da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f00b f838 	bl	800ce22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 fd79 	bl	80068ae <USB_ReadInterrupts>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc6:	d10b      	bne.n	8001de0 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8001dd4:	b292      	uxth	r2, r2
 8001dd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_SetAddress+0x1a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e013      	b.n	8001e2a <HAL_PCD_SetAddress+0x42>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	4611      	mov	r1, r2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fd20 	bl	8006860 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	4608      	mov	r0, r1
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4603      	mov	r3, r0
 8001e42:	70fb      	strb	r3, [r7, #3]
 8001e44:	460b      	mov	r3, r1
 8001e46:	803b      	strh	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da0e      	bge.n	8001e76 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	705a      	strb	r2, [r3, #1]
 8001e74:	e00e      	b.n	8001e94 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	f003 0207 	and.w	r2, r3, #7
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ea0:	883a      	ldrh	r2, [r7, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	78ba      	ldrb	r2, [r7, #2]
 8001eaa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	785b      	ldrb	r3, [r3, #1]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ebe:	78bb      	ldrb	r3, [r7, #2]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d102      	bne.n	8001eca <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_EP_Open+0xa6>
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e00e      	b.n	8001ef6 <HAL_PCD_EP_Open+0xc4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f002 fb66 	bl	80045b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da0e      	bge.n	8001f30 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	705a      	strb	r2, [r3, #1]
 8001f2e:	e00e      	b.n	8001f4e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 0207 	and.w	r2, r3, #7
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_PCD_EP_Close+0x6a>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e00e      	b.n	8001f86 <HAL_PCD_EP_Close+0x88>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 fe82 	bl	8004c80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f003 0207 	and.w	r2, r3, #7
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fda:	7afb      	ldrb	r3, [r7, #11]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d106      	bne.n	8001ff2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 f834 	bl	8005058 <USB_EPStartXfer>
 8001ff0:	e005      	b.n	8001ffe <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 f82d 	bl	8005058 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0207 	and.w	r2, r3, #7
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b086      	sub	sp, #24
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	460b      	mov	r3, r1
 8002044:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2201      	movs	r2, #1
 8002080:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	b2da      	uxtb	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6979      	ldr	r1, [r7, #20]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 ffda 	bl	8005058 <USB_EPStartXfer>
 80020a4:	e005      	b.n	80020b2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6979      	ldr	r1, [r7, #20]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 ffd3 	bl	8005058 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	f003 0207 	and.w	r2, r3, #7
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d901      	bls.n	80020da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e04c      	b.n	8002174 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	da0e      	bge.n	8002100 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	705a      	strb	r2, [r3, #1]
 80020fe:	e00c      	b.n	800211a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2201      	movs	r2, #1
 800211e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	b2da      	uxtb	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_PCD_EP_SetStall+0x7e>
 8002136:	2302      	movs	r3, #2
 8002138:	e01c      	b.n	8002174 <HAL_PCD_EP_SetStall+0xb8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	4618      	mov	r0, r3
 800214a:	f004 fa8c 	bl	8006666 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f004 fbb1 	bl	80068cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	f003 020f 	and.w	r2, r3, #15
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d901      	bls.n	800219a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e040      	b.n	800221c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800219a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	da0e      	bge.n	80021c0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	705a      	strb	r2, [r3, #1]
 80021be:	e00e      	b.n	80021de <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	f003 0207 	and.w	r2, r3, #7
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_PCD_EP_ClrStall+0x82>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e00e      	b.n	800221c <HAL_PCD_EP_ClrStall+0xa0>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fa7a 	bl	8006706 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_PCD_EP_Flush+0x1a>
 800223a:	2302      	movs	r3, #2
 800223c:	e01b      	b.n	8002276 <HAL_PCD_EP_Flush+0x52>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8002246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800224a:	2b00      	cmp	r3, #0
 800224c:	da09      	bge.n	8002262 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	4619      	mov	r1, r3
 800225a:	4610      	mov	r0, r2
 800225c:	f002 f996 	bl	800458c <USB_FlushTxFifo>
 8002260:	e004      	b.n	800226c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 f99b 	bl	80045a2 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b08e      	sub	sp, #56	; 0x38
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002286:	e2ec      	b.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002290:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002292:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800229e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8161 	bne.w	800256a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80022a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d152      	bne.n	8002358 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3328      	adds	r3, #40	; 0x28
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	3302      	adds	r3, #2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	441a      	add	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002316:	2100      	movs	r1, #0
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f00a fd68 	bl	800cdee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 829b 	beq.w	8002862 <PCD_EP_ISR_Handler+0x5e4>
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 8296 	bne.w	8002862 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002356:	e284      	b.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	847b      	strh	r3, [r7, #34]	; 0x22

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800236a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236e:	2b00      	cmp	r3, #0
 8002370:	d034      	beq.n	80023dc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4413      	add	r3, r2
 8002386:	3306      	adds	r3, #6
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f004 fada 	bl	800696a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023c2:	4013      	ands	r3, r2
 80023c4:	843b      	strh	r3, [r7, #32]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	8c3a      	ldrh	r2, [r7, #32]
 80023cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023d0:	b292      	uxth	r2, r2
 80023d2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f00a fcdd 	bl	800cd94 <HAL_PCD_SetupStageCallback>
 80023da:	e242      	b.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80023dc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f280 823e 	bge.w	8002862 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f640 738f 	movw	r3, #3983	; 0xf8f
 80023f2:	4013      	ands	r3, r2
 80023f4:	83fb      	strh	r3, [r7, #30]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	8bfa      	ldrh	r2, [r7, #30]
 80023fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002400:	b292      	uxth	r2, r2
 8002402:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800240c:	b29b      	uxth	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	3306      	adds	r3, #6
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d019      	beq.n	800246c <PCD_EP_ISR_Handler+0x1ee>
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d015      	beq.n	800246c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	6959      	ldr	r1, [r3, #20]
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002450:	b29b      	uxth	r3, r3
 8002452:	f004 fa8a 	bl	800696a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	441a      	add	r2, r3
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002464:	2100      	movs	r1, #0
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f00a fca6 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	b29b      	uxth	r3, r3
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	f040 81f2 	bne.w	8002862 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d112      	bne.n	80024cc <PCD_EP_ISR_Handler+0x24e>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	e02f      	b.n	800252c <PCD_EP_ISR_Handler+0x2ae>
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b3e      	cmp	r3, #62	; 0x3e
 80024d2:	d813      	bhi.n	80024fc <PCD_EP_ISR_Handler+0x27e>
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <PCD_EP_ISR_Handler+0x270>
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	3301      	adds	r3, #1
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	029b      	lsls	r3, r3, #10
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	e017      	b.n	800252c <PCD_EP_ISR_Handler+0x2ae>
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	633b      	str	r3, [r7, #48]	; 0x30
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <PCD_EP_ISR_Handler+0x298>
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	3b01      	subs	r3, #1
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	b29b      	uxth	r3, r3
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	b29b      	uxth	r3, r3
 800251e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002526:	b29a      	uxth	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253c:	827b      	strh	r3, [r7, #18]
 800253e:	8a7b      	ldrh	r3, [r7, #18]
 8002540:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002544:	827b      	strh	r3, [r7, #18]
 8002546:	8a7b      	ldrh	r3, [r7, #18]
 8002548:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800254c:	827b      	strh	r3, [r7, #18]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	8a7b      	ldrh	r3, [r7, #18]
 8002554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800255c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002564:	b29b      	uxth	r3, r3
 8002566:	8013      	strh	r3, [r2, #0]
 8002568:	e17b      	b.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	847b      	strh	r3, [r7, #34]	; 0x22

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800257c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002580:	2b00      	cmp	r3, #0
 8002582:	f280 80ea 	bge.w	800275a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f640 738f 	movw	r3, #3983	; 0xf8f
 800259c:	4013      	ands	r3, r2
 800259e:	823b      	strh	r3, [r7, #16]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	8a3a      	ldrh	r2, [r7, #16]
 80025b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b4:	b292      	uxth	r2, r2
 80025b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80025b8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	7b1b      	ldrb	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d122      	bne.n	800261c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	3306      	adds	r3, #6
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fe:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8087 	beq.w	8002716 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	6959      	ldr	r1, [r3, #20]
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	88da      	ldrh	r2, [r3, #6]
 8002614:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002616:	f004 f9a8 	bl	800696a <USB_ReadPMA>
 800261a:	e07c      	b.n	8002716 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	78db      	ldrb	r3, [r3, #3]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d108      	bne.n	8002636 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002626:	461a      	mov	r2, r3
 8002628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f927 	bl	800287e <HAL_PCD_EP_DB_Receive>
 8002630:	4603      	mov	r3, r0
 8002632:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002634:	e06f      	b.n	8002716 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800264c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002650:	81fb      	strh	r3, [r7, #14]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	441a      	add	r2, r3
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d021      	beq.n	80026d4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	3302      	adds	r3, #2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02a      	beq.n	8002716 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	6959      	ldr	r1, [r3, #20]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	891a      	ldrh	r2, [r3, #8]
 80026cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80026ce:	f004 f94c 	bl	800696a <USB_ReadPMA>
 80026d2:	e020      	b.n	8002716 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026dc:	b29b      	uxth	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	3306      	adds	r3, #6
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80026fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6818      	ldr	r0, [r3, #0]
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	6959      	ldr	r1, [r3, #20]
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	895a      	ldrh	r2, [r3, #10]
 8002710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002712:	f004 f92a 	bl	800696a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	69da      	ldr	r2, [r3, #28]
 800271a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800271c:	441a      	add	r2, r3
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002728:	441a      	add	r2, r3
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <PCD_EP_ISR_Handler+0x4c2>
 8002736:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d206      	bcs.n	800274e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f00a fb36 	bl	800cdb8 <HAL_PCD_DataOutStageCallback>
 800274c:	e005      	b.n	800275a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fc7f 	bl	8005058 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800275a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800275c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002760:	2b00      	cmp	r3, #0
 8002762:	d07e      	beq.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002764:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	81bb      	strh	r3, [r7, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	441a      	add	r2, r3
 80027a2:	89bb      	ldrh	r3, [r7, #12]
 80027a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	78db      	ldrb	r3, [r3, #3]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d00c      	beq.n	80027d2 <PCD_EP_ISR_Handler+0x554>
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	78db      	ldrb	r3, [r3, #3]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d146      	bne.n	8002856 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80027c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d141      	bne.n	8002856 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	3302      	adds	r3, #2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027fa:	817b      	strh	r3, [r7, #10]

          if (ep->xfer_len > TxByteNbre)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	897b      	ldrh	r3, [r7, #10]
 8002802:	429a      	cmp	r2, r3
 8002804:	d906      	bls.n	8002814 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	1ad2      	subs	r2, r2, r3
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	e002      	b.n	800281a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	2200      	movs	r2, #0
 8002818:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	4619      	mov	r1, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f00a fae0 	bl	800cdee <HAL_PCD_DataInStageCallback>
 800282e:	e018      	b.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	897b      	ldrh	r3, [r7, #10]
 8002836:	441a      	add	r2, r3
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	897b      	ldrh	r3, [r7, #10]
 8002842:	441a      	add	r2, r3
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fc02 	bl	8005058 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002854:	e005      	b.n	8002862 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002858:	461a      	mov	r2, r3
 800285a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f91b 	bl	8002a98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800286a:	b29b      	uxth	r3, r3
 800286c:	b21b      	sxth	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	f6ff ad0a 	blt.w	8002288 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3738      	adds	r7, #56	; 0x38
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b088      	sub	sp, #32
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	4613      	mov	r3, r2
 800288a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07e      	beq.n	8002994 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	3302      	adds	r3, #2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028be:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	8bfb      	ldrh	r3, [r7, #30]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d306      	bcc.n	80028d8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	699a      	ldr	r2, [r3, #24]
 80028ce:	8bfb      	ldrh	r3, [r7, #30]
 80028d0:	1ad2      	subs	r2, r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	619a      	str	r2, [r3, #24]
 80028d6:	e002      	b.n	80028de <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d123      	bne.n	800292e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002900:	83bb      	strh	r3, [r7, #28]
 8002902:	8bbb      	ldrh	r3, [r7, #28]
 8002904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002908:	83bb      	strh	r3, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	441a      	add	r2, r3
 8002918:	8bbb      	ldrh	r3, [r7, #28]
 800291a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800291e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800292a:	b29b      	uxth	r3, r3
 800292c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01f      	beq.n	8002978 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	837b      	strh	r3, [r7, #26]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	8b7b      	ldrh	r3, [r7, #26]
 8002964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800296c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002970:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002974:	b29b      	uxth	r3, r3
 8002976:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002978:	8bfb      	ldrh	r3, [r7, #30]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8087 	beq.w	8002a8e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	6959      	ldr	r1, [r3, #20]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	891a      	ldrh	r2, [r3, #8]
 800298c:	8bfb      	ldrh	r3, [r7, #30]
 800298e:	f003 ffec 	bl	800696a <USB_ReadPMA>
 8002992:	e07c      	b.n	8002a8e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800299c:	b29b      	uxth	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	3306      	adds	r3, #6
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029bc:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	8bfb      	ldrh	r3, [r7, #30]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d306      	bcc.n	80029d6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	699a      	ldr	r2, [r3, #24]
 80029cc:	8bfb      	ldrh	r3, [r7, #30]
 80029ce:	1ad2      	subs	r2, r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	619a      	str	r2, [r3, #24]
 80029d4:	e002      	b.n	80029dc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d123      	bne.n	8002a2c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fe:	833b      	strh	r3, [r7, #24]
 8002a00:	8b3b      	ldrh	r3, [r7, #24]
 8002a02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a06:	833b      	strh	r3, [r7, #24]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	8b3b      	ldrh	r3, [r7, #24]
 8002a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a50:	82fb      	strh	r3, [r7, #22]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	8afb      	ldrh	r3, [r7, #22]
 8002a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002a76:	8bfb      	ldrh	r3, [r7, #30]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6959      	ldr	r1, [r3, #20]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	895a      	ldrh	r2, [r3, #10]
 8002a88:	8bfb      	ldrh	r3, [r7, #30]
 8002a8a:	f003 ff6e 	bl	800696a <USB_ReadPMA>
    }
  }

  return count;
 8002a8e:	8bfb      	ldrh	r3, [r7, #30]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0a4      	sub	sp, #144	; 0x90
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 81dd 	beq.w	8002e6c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6812      	ldr	r2, [r2, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ada:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len > TxByteNbre)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d907      	bls.n	8002afa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002af2:	1ad2      	subs	r2, r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	619a      	str	r2, [r3, #24]
 8002af8:	e002      	b.n	8002b00 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 80bb 	bne.w	8002c80 <HAL_PCD_EP_DB_Transmit+0x1e8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d126      	bne.n	8002b60 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b26:	4413      	add	r3, r2
 8002b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	011a      	lsls	r2, r3, #4
 8002b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b32:	4413      	add	r3, r2
 8002b34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b38:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b48:	801a      	strh	r2, [r3, #0]
 8002b4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e01a      	b.n	8002b96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d116      	bne.n	8002b96 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b7c:	4413      	add	r3, r2
 8002b7e:	677b      	str	r3, [r7, #116]	; 0x74
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	011a      	lsls	r2, r3, #4
 8002b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b88:	4413      	add	r3, r2
 8002b8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b92:	2200      	movs	r2, #0
 8002b94:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	785b      	ldrb	r3, [r3, #1]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d126      	bne.n	8002bf2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb8:	4413      	add	r3, r2
 8002bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	011a      	lsls	r2, r3, #4
 8002bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bca:	667b      	str	r3, [r7, #100]	; 0x64
 8002bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bda:	801a      	strh	r2, [r3, #0]
 8002bdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	e017      	b.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d113      	bne.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c08:	4413      	add	r3, r2
 8002c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	011a      	lsls	r2, r3, #4
 8002c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c14:	4413      	add	r3, r2
 8002c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c1e:	2200      	movs	r2, #0
 8002c20:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	4619      	mov	r1, r3
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f00a f8e0 	bl	800cdee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 82f1 	beq.w	800321c <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	8013      	strh	r3, [r2, #0]
 8002c7e:	e2cd      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d021      	beq.n	8002cce <HAL_PCD_EP_DB_Transmit+0x236>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	441a      	add	r2, r3
 8002cb6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	f040 82a1 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ce2:	441a      	add	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cf0:	441a      	add	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	6a1a      	ldr	r2, [r3, #32]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d30b      	bcc.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6a1a      	ldr	r2, [r3, #32]
 8002d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d12:	1ad2      	subs	r2, r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	621a      	str	r2, [r3, #32]
 8002d18:	e017      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else if (ep->xfer_len_db == 0U)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d108      	bne.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxByteNbre;
 8002d22:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d32:	e00a      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x2b2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	785b      	ldrb	r3, [r3, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d163      	bne.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x382>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d66:	4413      	add	r3, r2
 8002d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	011a      	lsls	r2, r3, #4
 8002d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d72:	4413      	add	r3, r2
 8002d74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d78:	657b      	str	r3, [r7, #84]	; 0x54
 8002d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d112      	bne.n	8002da8 <HAL_PCD_EP_DB_Transmit+0x310>
 8002d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d90:	801a      	strh	r2, [r3, #0]
 8002d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da4:	801a      	strh	r2, [r3, #0]
 8002da6:	e055      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dac:	2b3e      	cmp	r3, #62	; 0x3e
 8002dae:	d817      	bhi.n	8002de0 <HAL_PCD_EP_DB_Transmit+0x348>
 8002db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d004      	beq.n	8002dd0 <HAL_PCD_EP_DB_Transmit+0x338>
 8002dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dca:	3301      	adds	r3, #1
 8002dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e039      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de4:	095b      	lsrs	r3, r3, #5
 8002de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x368>
 8002df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e01c      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d118      	bne.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	653b      	str	r3, [r7, #80]	; 0x50
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e36:	4413      	add	r3, r2
 8002e38:	653b      	str	r3, [r7, #80]	; 0x50
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	011a      	lsls	r2, r3, #4
 8002e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e42:	4413      	add	r3, r2
 8002e44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e52:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	6959      	ldr	r1, [r3, #20]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	891a      	ldrh	r2, [r3, #8]
 8002e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f003 fd3c 	bl	80068e2 <USB_WritePMA>
 8002e6a:	e1d7      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x784>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	3306      	adds	r3, #6
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e94:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

    if (ep->xfer_len >= TxByteNbre)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d307      	bcc.n	8002eb4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxByteNbre;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002eac:	1ad2      	subs	r2, r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	619a      	str	r2, [r3, #24]
 8002eb2:	e002      	b.n	8002eba <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 80b9 	bne.w	8003036 <HAL_PCD_EP_DB_Transmit+0x59e>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	785b      	ldrb	r3, [r3, #1]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d126      	bne.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x482>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee0:	4413      	add	r3, r2
 8002ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	011a      	lsls	r2, r3, #4
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	4413      	add	r3, r2
 8002eee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e01a      	b.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d116      	bne.n	8002f50 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f36:	4413      	add	r3, r2
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	011a      	lsls	r2, r3, #4
 8002f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f42:	4413      	add	r3, r2
 8002f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d126      	bne.n	8002fac <HAL_PCD_EP_DB_Transmit+0x514>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	637b      	str	r3, [r7, #52]	; 0x34
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	4413      	add	r3, r2
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	011a      	lsls	r2, r3, #4
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	4413      	add	r3, r2
 8002f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f84:	633b      	str	r3, [r7, #48]	; 0x30
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	801a      	strh	r2, [r3, #0]
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	801a      	strh	r2, [r3, #0]
 8002faa:	e017      	b.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x544>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d113      	bne.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x544>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	4413      	add	r3, r2
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	011a      	lsls	r2, r3, #4
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	4413      	add	r3, r2
 8002fd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f009 ff03 	bl	800cdee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 8114 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x784>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	441a      	add	r2, r3
 800301e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	b29b      	uxth	r3, r3
 8003032:	8013      	strh	r3, [r2, #0]
 8003034:	e0f2      	b.n	800321c <HAL_PCD_EP_DB_Transmit+0x784>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11f      	bne.n	8003080 <HAL_PCD_EP_DB_Transmit+0x5e8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	853b      	strh	r3, [r7, #40]	; 0x28
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800306c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003086:	2b01      	cmp	r3, #1
 8003088:	f040 80c8 	bne.w	800321c <HAL_PCD_EP_DB_Transmit+0x784>
      {
        ep->xfer_buff += TxByteNbre;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8003094:	441a      	add	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80030a2:	441a      	add	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d30b      	bcc.n	80030cc <HAL_PCD_EP_DB_Transmit+0x634>
        {
          len = ep->maxpacket;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030c4:	1ad2      	subs	r2, r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	621a      	str	r2, [r3, #32]
 80030ca:	e017      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else if (ep->xfer_len_db == 0U)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d108      	bne.n	80030e6 <HAL_PCD_EP_DB_Transmit+0x64e>
        {
          len = TxByteNbre;
 80030d4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80030d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030e4:	e00a      	b.n	80030fc <HAL_PCD_EP_DB_Transmit+0x664>
        }
        else
        {
          len = ep->xfer_len_db;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2200      	movs	r2, #0
 80030f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d163      	bne.n	80031d2 <HAL_PCD_EP_DB_Transmit+0x73a>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003118:	b29b      	uxth	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	4413      	add	r3, r2
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	011a      	lsls	r2, r3, #4
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	4413      	add	r3, r2
 800312c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d112      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003144:	b29a      	uxth	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003158:	b29a      	uxth	r2, r3
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	e052      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003164:	2b3e      	cmp	r3, #62	; 0x3e
 8003166:	d817      	bhi.n	8003198 <HAL_PCD_EP_DB_Transmit+0x700>
 8003168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_PCD_EP_DB_Transmit+0x6f0>
 800317e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003182:	3301      	adds	r3, #1
 8003184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800318c:	b29b      	uxth	r3, r3
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	b29a      	uxth	r2, r3
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	801a      	strh	r2, [r3, #0]
 8003196:	e036      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x76e>
 8003198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <HAL_PCD_EP_DB_Transmit+0x720>
 80031ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031b2:	3b01      	subs	r3, #1
 80031b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031bc:	b29b      	uxth	r3, r3
 80031be:	029b      	lsls	r3, r3, #10
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	801a      	strh	r2, [r3, #0]
 80031d0:	e019      	b.n	8003206 <HAL_PCD_EP_DB_Transmit+0x76e>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d115      	bne.n	8003206 <HAL_PCD_EP_DB_Transmit+0x76e>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	4413      	add	r3, r2
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	011a      	lsls	r2, r3, #4
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	4413      	add	r3, r2
 80031f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003200:	b29a      	uxth	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	6959      	ldr	r1, [r3, #20]
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	895a      	ldrh	r2, [r3, #10]
 8003212:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 fb63 	bl	80068e2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003236:	82fb      	strh	r3, [r7, #22]
 8003238:	8afb      	ldrh	r3, [r7, #22]
 800323a:	f083 0310 	eor.w	r3, r3, #16
 800323e:	82fb      	strh	r3, [r7, #22]
 8003240:	8afb      	ldrh	r3, [r7, #22]
 8003242:	f083 0320 	eor.w	r3, r3, #32
 8003246:	82fb      	strh	r3, [r7, #22]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	8afb      	ldrh	r3, [r7, #22]
 8003258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800325c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	b29b      	uxth	r3, r3
 800326a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3790      	adds	r7, #144	; 0x90
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003276:	b480      	push	{r7}
 8003278:	b087      	sub	sp, #28
 800327a:	af00      	add	r7, sp, #0
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	817b      	strh	r3, [r7, #10]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003288:	897b      	ldrh	r3, [r7, #10]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e009      	b.n	80032c0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032ac:	897a      	ldrh	r2, [r7, #10]
 80032ae:	4613      	mov	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2200      	movs	r2, #0
 80032ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	80da      	strh	r2, [r3, #6]
 80032d4:	e00b      	b.n	80032ee <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2201      	movs	r2, #1
 80032da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	b29a      	uxth	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e26c      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8087 	beq.w	800342a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800331c:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b04      	cmp	r3, #4
 8003326:	d00c      	beq.n	8003342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003328:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 030c 	and.w	r3, r3, #12
 8003330:	2b08      	cmp	r3, #8
 8003332:	d112      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
 8003334:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d10b      	bne.n	800335a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003342:	4b89      	ldr	r3, [pc, #548]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d06c      	beq.n	8003428 <HAL_RCC_OscConfig+0x12c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d168      	bne.n	8003428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e246      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d106      	bne.n	8003372 <HAL_RCC_OscConfig+0x76>
 8003364:	4a80      	ldr	r2, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003366:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	6013      	str	r3, [r2, #0]
 8003370:	e02e      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4a7b      	ldr	r2, [pc, #492]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800337c:	4b7a      	ldr	r3, [pc, #488]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003388:	4b77      	ldr	r3, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e01d      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0xbc>
 800339e:	4a72      	ldr	r2, [pc, #456]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	4b71      	ldr	r3, [pc, #452]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4a6f      	ldr	r2, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	4b6e      	ldr	r3, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0xd4>
 80033b8:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	4b6b      	ldr	r3, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	4a68      	ldr	r2, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fe22 	bl	8001020 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fd fe1e 	bl	8001020 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1fa      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xe4>
 80033fe:	e014      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd fe0e 	bl	8001020 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003408:	f7fd fe0a 	bl	8001020 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1e6      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	4b53      	ldr	r3, [pc, #332]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_OscConfig+0x10c>
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d063      	beq.n	80034fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003436:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003442:	4b49      	ldr	r3, [pc, #292]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d11c      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
 800344e:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d116      	bne.n	8003488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d001      	beq.n	8003472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e1ba      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003472:	493d      	ldr	r1, [pc, #244]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003474:	4b3c      	ldr	r3, [pc, #240]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4313      	orrs	r3, r2
 8003484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003486:	e03a      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003490:	4b36      	ldr	r3, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003492:	2201      	movs	r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fd fdc3 	bl	8001020 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349e:	f7fd fdbf 	bl	8001020 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e19b      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034bc:	492a      	ldr	r1, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]
 80034d0:	e015      	b.n	80034fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fd fda2 	bl	8001020 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fd fd9e 	bl	8001020 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e17a      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03a      	beq.n	8003580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d019      	beq.n	8003546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003514:	2201      	movs	r2, #1
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fd fd82 	bl	8001020 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fd fd7e 	bl	8001020 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e15a      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <HAL_RCC_OscConfig+0x26c>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800353e:	2001      	movs	r0, #1
 8003540:	f000 faf6 	bl	8003b30 <RCC_Delay>
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7fd fd68 	bl	8001020 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003552:	e00f      	b.n	8003574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7fd fd64 	bl	8001020 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d908      	bls.n	8003574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e140      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000
 800356c:	42420000 	.word	0x42420000
 8003570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b9e      	ldr	r3, [pc, #632]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e9      	bne.n	8003554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a6 	beq.w	80036da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b97      	ldr	r3, [pc, #604]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	4a94      	ldr	r2, [pc, #592]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	4b93      	ldr	r3, [pc, #588]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]
 80035aa:	4b91      	ldr	r3, [pc, #580]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ba:	4b8e      	ldr	r3, [pc, #568]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d118      	bne.n	80035f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c6:	4a8b      	ldr	r2, [pc, #556]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035c8:	4b8a      	ldr	r3, [pc, #552]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d2:	f7fd fd25 	bl	8001020 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035da:	f7fd fd21 	bl	8001020 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0fd      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	4b81      	ldr	r3, [pc, #516]	; (80037f4 <HAL_RCC_OscConfig+0x4f8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <HAL_RCC_OscConfig+0x312>
 8003600:	4a7b      	ldr	r2, [pc, #492]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003602:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	6213      	str	r3, [r2, #32]
 800360c:	e02d      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCC_OscConfig+0x334>
 8003616:	4a76      	ldr	r2, [pc, #472]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003618:	4b75      	ldr	r3, [pc, #468]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f023 0301 	bic.w	r3, r3, #1
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	4a73      	ldr	r2, [pc, #460]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	4b72      	ldr	r3, [pc, #456]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	6213      	str	r3, [r2, #32]
 800362e:	e01c      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b05      	cmp	r3, #5
 8003636:	d10c      	bne.n	8003652 <HAL_RCC_OscConfig+0x356>
 8003638:	4a6d      	ldr	r2, [pc, #436]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	4a6a      	ldr	r2, [pc, #424]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003646:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e00b      	b.n	800366a <HAL_RCC_OscConfig+0x36e>
 8003652:	4a67      	ldr	r2, [pc, #412]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003654:	4b66      	ldr	r3, [pc, #408]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	6213      	str	r3, [r2, #32]
 800365e:	4a64      	ldr	r2, [pc, #400]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003660:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f023 0304 	bic.w	r3, r3, #4
 8003668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d015      	beq.n	800369e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fd fcd5 	bl	8001020 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fd fcd1 	bl	8001020 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0ab      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	4b57      	ldr	r3, [pc, #348]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0ee      	beq.n	800367a <HAL_RCC_OscConfig+0x37e>
 800369c:	e014      	b.n	80036c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369e:	f7fd fcbf 	bl	8001020 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	e00a      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fd fcbb 	bl	8001020 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e095      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	4b4c      	ldr	r3, [pc, #304]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ee      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ce:	4a48      	ldr	r2, [pc, #288]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8081 	beq.w	80037e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e4:	4b42      	ldr	r3, [pc, #264]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d061      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d146      	bne.n	8003786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f8:	4b3f      	ldr	r3, [pc, #252]	; (80037f8 <HAL_RCC_OscConfig+0x4fc>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fe:	f7fd fc8f 	bl	8001020 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003706:	f7fd fc8b 	bl	8001020 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e067      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003718:	4b35      	ldr	r3, [pc, #212]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f0      	bne.n	8003706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d108      	bne.n	8003740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800372e:	4930      	ldr	r1, [pc, #192]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003730:	4b2f      	ldr	r3, [pc, #188]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	482b      	ldr	r0, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a19      	ldr	r1, [r3, #32]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	430b      	orrs	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003758:	4b27      	ldr	r3, [pc, #156]	; (80037f8 <HAL_RCC_OscConfig+0x4fc>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fd fc5f 	bl	8001020 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fd fc5b 	bl	8001020 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e037      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003778:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x46a>
 8003784:	e02f      	b.n	80037e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_RCC_OscConfig+0x4fc>)
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378c:	f7fd fc48 	bl	8001020 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fc44 	bl	8001020 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e020      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x498>
 80037b2:	e018      	b.n	80037e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e013      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40007000 	.word	0x40007000
 80037f8:	42420060 	.word	0x42420060

080037fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d0      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0207 	and.w	r2, r3, #7
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d210      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4967      	ldr	r1, [pc, #412]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 0207 	bic.w	r2, r3, #7
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b63      	ldr	r3, [pc, #396]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0207 	and.w	r2, r3, #7
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003858:	4a59      	ldr	r2, [pc, #356]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4b59      	ldr	r3, [pc, #356]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003870:	4a53      	ldr	r2, [pc, #332]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	4b53      	ldr	r3, [pc, #332]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800387a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4950      	ldr	r1, [pc, #320]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d040      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b47      	ldr	r3, [pc, #284]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d115      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e073      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3d      	ldr	r3, [pc, #244]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4939      	ldr	r1, [pc, #228]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 0203 	bic.w	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fb98 	bl	8001020 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd fb94 	bl	8001020 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e053      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0207 	and.w	r2, r3, #7
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d910      	bls.n	800394c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4924      	ldr	r1, [pc, #144]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 0207 	bic.w	r2, r3, #7
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b20      	ldr	r3, [pc, #128]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0207 	and.w	r2, r3, #7
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e032      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4919      	ldr	r1, [pc, #100]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003976:	4912      	ldr	r1, [pc, #72]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398a:	f000 f821 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 800398e:	4601      	mov	r1, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	fa21 f303 	lsr.w	r3, r1, r3
 80039a2:	4a09      	ldr	r2, [pc, #36]	; (80039c8 <HAL_RCC_ClockConfig+0x1cc>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1d0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fc fffc 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40021000 	.word	0x40021000
 80039c4:	0800d530 	.word	0x0800d530
 80039c8:	20000028 	.word	0x20000028
 80039cc:	2000002c 	.word	0x2000002c

080039d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	b490      	push	{r4, r7}
 80039d2:	b08a      	sub	sp, #40	; 0x28
 80039d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039d6:	4b2a      	ldr	r3, [pc, #168]	; (8003a80 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039d8:	1d3c      	adds	r4, r7, #4
 80039da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	2300      	movs	r3, #0
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039fa:	4b23      	ldr	r3, [pc, #140]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d002      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d003      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x46>
 8003a0e:	e02d      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a12:	623b      	str	r3, [r7, #32]
      break;
 8003a14:	e02d      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	0c9b      	lsrs	r3, r3, #18
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a22:	4413      	add	r3, r2
 8003a24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c5b      	lsrs	r3, r3, #17
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a42:	4413      	add	r3, r2
 8003a44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4a0f      	ldr	r2, [pc, #60]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a4e:	fb02 f203 	mul.w	r2, r2, r3
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e004      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4a0c      	ldr	r2, [pc, #48]	; (8003a90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	623b      	str	r3, [r7, #32]
      break;
 8003a6a:	e002      	b.n	8003a72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a6e:	623b      	str	r3, [r7, #32]
      break;
 8003a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a72:	6a3b      	ldr	r3, [r7, #32]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3728      	adds	r7, #40	; 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc90      	pop	{r4, r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	0800d47c 	.word	0x0800d47c
 8003a84:	0800d48c 	.word	0x0800d48c
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	007a1200 	.word	0x007a1200
 8003a90:	003d0900 	.word	0x003d0900

08003a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a98:	4b02      	ldr	r3, [pc, #8]	; (8003aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	20000028 	.word	0x20000028

08003aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aac:	f7ff fff2 	bl	8003a94 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	0800d540 	.word	0x0800d540

08003ad0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	220f      	movs	r2, #15
 8003ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_GetClockConfig+0x58>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003aec:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <HAL_RCC_GetClockConfig+0x58>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_GetClockConfig+0x58>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_RCC_GetClockConfig+0x58>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	08db      	lsrs	r3, r3, #3
 8003b0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <HAL_RCC_GetClockConfig+0x5c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0207 	and.w	r2, r3, #7
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40022000 	.word	0x40022000

08003b30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <RCC_Delay+0x34>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <RCC_Delay+0x38>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0a5b      	lsrs	r3, r3, #9
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b4c:	bf00      	nop
  }
  while (Delay --);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	60fa      	str	r2, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f9      	bne.n	8003b4c <RCC_Delay+0x1c>
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000028 	.word	0x20000028
 8003b68:	10624dd3 	.word	0x10624dd3

08003b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d07d      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8c:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4a4c      	ldr	r2, [pc, #304]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	61d3      	str	r3, [r2, #28]
 8003ba4:	4b49      	ldr	r3, [pc, #292]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d118      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc0:	4a43      	ldr	r2, [pc, #268]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fa28 	bl	8001020 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	e008      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd4:	f7fd fa24 	bl	8001020 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b64      	cmp	r3, #100	; 0x64
 8003be0:	d901      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e06d      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d02e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d027      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1a:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c26:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c36:	f7fd f9f3 	bl	8001020 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3c:	e00a      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3e:	f7fd f9ef 	bl	8001020 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e036      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ee      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c60:	491a      	ldr	r1, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d008      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c90:	490e      	ldr	r1, [pc, #56]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cae:	4907      	ldr	r1, [pc, #28]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	4b06      	ldr	r3, [pc, #24]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	40007000 	.word	0x40007000
 8003cd4:	42420440 	.word	0x42420440

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e041      	b.n	8003d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fc ff24 	bl	8000b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fa64 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e03a      	b.n	8003e06 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_TIM_Base_Start_IT+0x98>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d009      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIM_Base_Start_IT+0x9c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_TIM_Base_Start_IT+0x58>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_TIM_Base_Start_IT+0xa0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d111      	bne.n	8003df4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b06      	cmp	r3, #6
 8003de0:	d010      	beq.n	8003e04 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	e007      	b.n	8003e04 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	f042 0201 	orr.w	r2, r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d122      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d11b      	bne.n	8003e78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0202 	mvn.w	r2, #2
 8003e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f9a4 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e64:	e005      	b.n	8003e72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 f997 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f9a6 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d122      	bne.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d11b      	bne.n	8003ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f06f 0204 	mvn.w	r2, #4
 8003e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f97a 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003eb8:	e005      	b.n	8003ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f96d 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f97c 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d122      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d11b      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0208 	mvn.w	r2, #8
 8003ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f950 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003f0c:	e005      	b.n	8003f1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f943 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 f952 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d122      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d11b      	bne.n	8003f74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0210 	mvn.w	r2, #16
 8003f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2208      	movs	r2, #8
 8003f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f926 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f919 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f928 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10e      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0201 	mvn.w	r2, #1
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7fc fcb6 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb8:	2b80      	cmp	r3, #128	; 0x80
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa6b 	bl	80044a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8ec 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b20      	cmp	r3, #32
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b20      	cmp	r3, #32
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0220 	mvn.w	r2, #32
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa36 	bl	8004490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_TIM_ConfigClockSource+0x18>
 8004040:	2302      	movs	r3, #2
 8004042:	e0a6      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x166>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800406a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d067      	beq.n	800414c <HAL_TIM_ConfigClockSource+0x120>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d80b      	bhi.n	8004098 <HAL_TIM_ConfigClockSource+0x6c>
 8004080:	2b10      	cmp	r3, #16
 8004082:	d073      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x140>
 8004084:	2b10      	cmp	r3, #16
 8004086:	d802      	bhi.n	800408e <HAL_TIM_ConfigClockSource+0x62>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d06f      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800408c:	e078      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800408e:	2b20      	cmp	r3, #32
 8004090:	d06c      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x140>
 8004092:	2b30      	cmp	r3, #48	; 0x30
 8004094:	d06a      	beq.n	800416c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004096:	e073      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004098:	2b70      	cmp	r3, #112	; 0x70
 800409a:	d00d      	beq.n	80040b8 <HAL_TIM_ConfigClockSource+0x8c>
 800409c:	2b70      	cmp	r3, #112	; 0x70
 800409e:	d804      	bhi.n	80040aa <HAL_TIM_ConfigClockSource+0x7e>
 80040a0:	2b50      	cmp	r3, #80	; 0x50
 80040a2:	d033      	beq.n	800410c <HAL_TIM_ConfigClockSource+0xe0>
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d041      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040a8:	e06a      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d066      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x152>
 80040b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b4:	d017      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040b6:	e063      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	6899      	ldr	r1, [r3, #8]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f000 f965 	bl	8004396 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	609a      	str	r2, [r3, #8]
      break;
 80040e4:	e04c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6899      	ldr	r1, [r3, #8]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f000 f94e 	bl	8004396 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6892      	ldr	r2, [r2, #8]
 8004104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004108:	609a      	str	r2, [r3, #8]
      break;
 800410a:	e039      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	461a      	mov	r2, r3
 800411a:	f000 f8c5 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2150      	movs	r1, #80	; 0x50
 8004124:	4618      	mov	r0, r3
 8004126:	f000 f91c 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 800412a:	e029      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	461a      	mov	r2, r3
 800413a:	f000 f8e3 	bl	8004304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2160      	movs	r1, #96	; 0x60
 8004144:	4618      	mov	r0, r3
 8004146:	f000 f90c 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 800414a:	e019      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	461a      	mov	r2, r3
 800415a:	f000 f8a5 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	4618      	mov	r0, r3
 8004166:	f000 f8fc 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 800416a:	e009      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	4610      	mov	r0, r2
 8004178:	f000 f8f3 	bl	8004362 <TIM_ITRx_SetConfig>
        break;
 800417c:	e000      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800417e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
	...

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a29      	ldr	r2, [pc, #164]	; (800429c <TIM_Base_SetConfig+0xb8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <TIM_Base_SetConfig+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <TIM_Base_SetConfig+0xc0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1c      	ldr	r2, [pc, #112]	; (800429c <TIM_Base_SetConfig+0xb8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a19      	ldr	r2, [pc, #100]	; (80042a0 <TIM_Base_SetConfig+0xbc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a18      	ldr	r2, [pc, #96]	; (80042a4 <TIM_Base_SetConfig+0xc0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a07      	ldr	r2, [pc, #28]	; (800429c <TIM_Base_SetConfig+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	f023 0210 	bic.w	r2, r3, #16
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	621a      	str	r2, [r3, #32]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	f043 0307 	orr.w	r3, r3, #7
 8004384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e046      	b.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a16      	ldr	r2, [pc, #88]	; (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004438:	d009      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a12      	ldr	r2, [pc, #72]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a10      	ldr	r2, [pc, #64]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800

08004490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044b4:	b084      	sub	sp, #16
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	f107 0014 	add.w	r0, r7, #20
 80044c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	b004      	add	sp, #16
 80044d2:	4770      	bx	lr

080044d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004508:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800450c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	b29b      	uxth	r3, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	b29b      	uxth	r3, r3
 800451e:	4013      	ands	r3, r2
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800454c:	b084      	sub	sp, #16
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	f107 0014 	add.w	r0, r7, #20
 800455a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	b004      	add	sp, #16
 800458a:	4770      	bx	lr

0800458c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr

080045a2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
	...

080045b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b09b      	sub	sp, #108	; 0x6c
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	78db      	ldrb	r3, [r3, #3]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d81f      	bhi.n	800462a <USB_ActivateEndpoint+0x72>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <USB_ActivateEndpoint+0x38>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004633 	.word	0x08004633
 80045fc:	0800460f 	.word	0x0800460f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004600:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004608:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800460c:	e012      	b.n	8004634 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800460e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004612:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004616:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800461a:	e00b      	b.n	8004634 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800461c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004620:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004624:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004628:	e004      	b.n	8004634 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004630:	e000      	b.n	8004634 <USB_ActivateEndpoint+0x7c>
      break;
 8004632:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	b29a      	uxth	r2, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	4313      	orrs	r3, r2
 8004676:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	441a      	add	r2, r3
 8004684:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004698:	b29b      	uxth	r3, r3
 800469a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	7b1b      	ldrb	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 8153 	bne.w	800494c <USB_ActivateEndpoint+0x394>
  {
    if (ep->is_in != 0U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 808e 	beq.w	80047cc <USB_ActivateEndpoint+0x214>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	4413      	add	r3, r2
 80046c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046d2:	657b      	str	r3, [r7, #84]	; 0x54
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	88db      	ldrh	r3, [r3, #6]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80046f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01d      	beq.n	800473c <USB_ActivateEndpoint+0x184>
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004716:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800472c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004734:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004738:	b29b      	uxth	r3, r3
 800473a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	78db      	ldrb	r3, [r3, #3]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d024      	beq.n	800478e <USB_ActivateEndpoint+0x1d6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800475e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004762:	f083 0320 	eor.w	r3, r3, #32
 8004766:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	441a      	add	r2, r3
 8004774:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800477c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004780:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]
 800478c:	e271      	b.n	8004c72 <USB_ActivateEndpoint+0x6ba>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80047b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	8013      	strh	r3, [r2, #0]
 80047ca:	e252      	b.n	8004c72 <USB_ActivateEndpoint+0x6ba>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047dc:	4413      	add	r3, r2
 80047de:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	011a      	lsls	r2, r3, #4
 80047e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047ee:	647b      	str	r3, [r7, #68]	; 0x44
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	88db      	ldrh	r3, [r3, #6]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047fe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480a:	b29b      	uxth	r3, r3
 800480c:	461a      	mov	r2, r3
 800480e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004810:	4413      	add	r3, r2
 8004812:	643b      	str	r3, [r7, #64]	; 0x40
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	011a      	lsls	r2, r3, #4
 800481a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481c:	4413      	add	r3, r2
 800481e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d112      	bne.n	8004852 <USB_ActivateEndpoint+0x29a>
 800482c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b29b      	uxth	r3, r3
 8004832:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004836:	b29a      	uxth	r2, r3
 8004838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484a:	b29a      	uxth	r2, r3
 800484c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	e02f      	b.n	80048b2 <USB_ActivateEndpoint+0x2fa>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b3e      	cmp	r3, #62	; 0x3e
 8004858:	d813      	bhi.n	8004882 <USB_ActivateEndpoint+0x2ca>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	663b      	str	r3, [r7, #96]	; 0x60
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <USB_ActivateEndpoint+0x2bc>
 800486e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004870:	3301      	adds	r3, #1
 8004872:	663b      	str	r3, [r7, #96]	; 0x60
 8004874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004876:	b29b      	uxth	r3, r3
 8004878:	029b      	lsls	r3, r3, #10
 800487a:	b29a      	uxth	r2, r3
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	e017      	b.n	80048b2 <USB_ActivateEndpoint+0x2fa>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	663b      	str	r3, [r7, #96]	; 0x60
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <USB_ActivateEndpoint+0x2e4>
 8004896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004898:	3b01      	subs	r3, #1
 800489a:	663b      	str	r3, [r7, #96]	; 0x60
 800489c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800489e:	b29b      	uxth	r3, r3
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	877b      	strh	r3, [r7, #58]	; 0x3a
 80048c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01b      	beq.n	8004902 <USB_ActivateEndpoint+0x34a>
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	86fb      	strh	r3, [r7, #54]	; 0x36
 800491a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800491c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004920:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004922:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004924:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004928:	86fb      	strh	r3, [r7, #54]	; 0x36
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	441a      	add	r2, r3
 8004934:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800493e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004946:	b29b      	uxth	r3, r3
 8004948:	8013      	strh	r3, [r2, #0]
 800494a:	e192      	b.n	8004c72 <USB_ActivateEndpoint+0x6ba>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	441a      	add	r2, r3
 800496e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004978:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800497c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004980:	b29b      	uxth	r3, r3
 8004982:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	633b      	str	r3, [r7, #48]	; 0x30
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498e:	b29b      	uxth	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	4413      	add	r3, r2
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	011a      	lsls	r2, r3, #4
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	891b      	ldrh	r3, [r3, #8]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	801a      	strh	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	4413      	add	r3, r2
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	011a      	lsls	r2, r3, #4
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	895b      	ldrh	r3, [r3, #10]
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 8091 	bne.w	8004b18 <USB_ActivateEndpoint+0x560>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8004a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01b      	beq.n	8004a46 <USB_ActivateEndpoint+0x48e>
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	843b      	strh	r3, [r7, #32]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8c3b      	ldrh	r3, [r7, #32]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	83fb      	strh	r3, [r7, #30]
 8004a54:	8bfb      	ldrh	r3, [r7, #30]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01b      	beq.n	8004a96 <USB_ActivateEndpoint+0x4de>
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a74:	83bb      	strh	r3, [r7, #28]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8bbb      	ldrh	r3, [r7, #28]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	837b      	strh	r3, [r7, #26]
 8004aae:	8b7b      	ldrh	r3, [r7, #26]
 8004ab0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ab4:	837b      	strh	r3, [r7, #26]
 8004ab6:	8b7b      	ldrh	r3, [r7, #26]
 8004ab8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004abc:	837b      	strh	r3, [r7, #26]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8b7b      	ldrh	r3, [r7, #26]
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	833b      	strh	r3, [r7, #24]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	8b3b      	ldrh	r3, [r7, #24]
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e0ac      	b.n	8004c72 <USB_ActivateEndpoint+0x6ba>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	82fb      	strh	r3, [r7, #22]
 8004b26:	8afb      	ldrh	r3, [r7, #22]
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <USB_ActivateEndpoint+0x5b0>
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	82bb      	strh	r3, [r7, #20]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	8abb      	ldrh	r3, [r7, #20]
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	827b      	strh	r3, [r7, #18]
 8004b76:	8a7b      	ldrh	r3, [r7, #18]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <USB_ActivateEndpoint+0x600>
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	823b      	strh	r3, [r7, #16]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	8a3b      	ldrh	r3, [r7, #16]
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d020      	beq.n	8004c02 <USB_ActivateEndpoint+0x64a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	81fb      	strh	r3, [r7, #14]
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	f083 0320 	eor.w	r3, r3, #32
 8004bde:	81fb      	strh	r3, [r7, #14]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	441a      	add	r2, r3
 8004bea:	89fb      	ldrh	r3, [r7, #14]
 8004bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	8013      	strh	r3, [r2, #0]
 8004c00:	e01b      	b.n	8004c3a <USB_ActivateEndpoint+0x682>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c18:	81bb      	strh	r3, [r7, #12]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	89bb      	ldrh	r3, [r7, #12]
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c50:	817b      	strh	r3, [r7, #10]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	897b      	ldrh	r3, [r7, #10]
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	376c      	adds	r7, #108	; 0x6c
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b08d      	sub	sp, #52	; 0x34
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	7b1b      	ldrb	r3, [r3, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f040 808e 	bne.w	8004db0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d044      	beq.n	8004d26 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d01b      	beq.n	8004cec <USB_DeactivateEndpoint+0x6c>
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ce0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d02:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	441a      	add	r2, r3
 8004d0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]
 8004d24:	e192      	b.n	800504c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	853b      	strh	r3, [r7, #40]	; 0x28
 8004d34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01b      	beq.n	8004d76 <USB_DeactivateEndpoint+0xf6>
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	441a      	add	r2, r3
 8004d60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	8013      	strh	r3, [r2, #0]
 8004dae:	e14d      	b.n	800504c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f040 80a5 	bne.w	8004f04 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01b      	beq.n	8004e0a <USB_DeactivateEndpoint+0x18a>
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de8:	843b      	strh	r3, [r7, #32]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	441a      	add	r2, r3
 8004df4:	8c3b      	ldrh	r3, [r7, #32]
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	83fb      	strh	r3, [r7, #30]
 8004e18:	8bfb      	ldrh	r3, [r7, #30]
 8004e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01b      	beq.n	8004e5a <USB_DeactivateEndpoint+0x1da>
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e38:	83bb      	strh	r3, [r7, #28]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	8bbb      	ldrh	r3, [r7, #28]
 8004e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e70:	837b      	strh	r3, [r7, #26]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	8b7b      	ldrh	r3, [r7, #26]
 8004e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	833b      	strh	r3, [r7, #24]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	441a      	add	r2, r3
 8004eb4:	8b3b      	ldrh	r3, [r7, #24]
 8004eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee0:	82fb      	strh	r3, [r7, #22]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	441a      	add	r2, r3
 8004eec:	8afb      	ldrh	r3, [r7, #22]
 8004eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	8013      	strh	r3, [r2, #0]
 8004f02:	e0a3      	b.n	800504c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	82bb      	strh	r3, [r7, #20]
 8004f12:	8abb      	ldrh	r3, [r7, #20]
 8004f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01b      	beq.n	8004f54 <USB_DeactivateEndpoint+0x2d4>
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f32:	827b      	strh	r3, [r7, #18]
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	8a7b      	ldrh	r3, [r7, #18]
 8004f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	823b      	strh	r3, [r7, #16]
 8004f62:	8a3b      	ldrh	r3, [r7, #16]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01b      	beq.n	8004fa4 <USB_DeactivateEndpoint+0x324>
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	81fb      	strh	r3, [r7, #14]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	89fb      	ldrh	r3, [r7, #14]
 8004f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	881b      	ldrh	r3, [r3, #0]
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	81bb      	strh	r3, [r7, #12]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	89bb      	ldrh	r3, [r7, #12]
 8004fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff2:	817b      	strh	r3, [r7, #10]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005004:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005010:	b29b      	uxth	r3, r3
 8005012:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	813b      	strh	r3, [r7, #8]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	441a      	add	r2, r3
 8005036:	893b      	ldrh	r3, [r7, #8]
 8005038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005048:	b29b      	uxth	r3, r3
 800504a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3734      	adds	r7, #52	; 0x34
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b0ce      	sub	sp, #312	; 0x138
 800505c:	af00      	add	r7, sp, #0
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	6018      	str	r0, [r3, #0]
 8005062:	463b      	mov	r3, r7
 8005064:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005066:	463b      	mov	r3, r7
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	785b      	ldrb	r3, [r3, #1]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 873e 	bne.w	8005eee <USB_EPStartXfer+0xe96>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005072:	463b      	mov	r3, r7
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699a      	ldr	r2, [r3, #24]
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d905      	bls.n	800508e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005082:	463b      	mov	r3, r7
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800508c:	e004      	b.n	8005098 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800508e:	463b      	mov	r3, r7
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005098:	463b      	mov	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	7b1b      	ldrb	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d12e      	bne.n	8005100 <USB_EPStartXfer+0xa8>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6959      	ldr	r1, [r3, #20]
 80050a8:	463b      	mov	r3, r7
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	88da      	ldrh	r2, [r3, #6]
 80050ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	1d38      	adds	r0, r7, #4
 80050b6:	6800      	ldr	r0, [r0, #0]
 80050b8:	f001 fc13 	bl	80068e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050da:	463b      	mov	r3, r7
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	011a      	lsls	r2, r3, #4
 80050e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050e6:	4413      	add	r3, r2
 80050e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	f000 bec2 	b.w	8005e84 <USB_EPStartXfer+0xe2c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005100:	463b      	mov	r3, r7
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	2b02      	cmp	r3, #2
 8005108:	f040 836a 	bne.w	80057e0 <USB_EPStartXfer+0x788>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a1a      	ldr	r2, [r3, #32]
 8005112:	463b      	mov	r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	429a      	cmp	r2, r3
 800511a:	f240 830e 	bls.w	800573a <USB_EPStartXfer+0x6e2>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	463b      	mov	r3, r7
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	b29b      	uxth	r3, r3
 8005130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800513c:	1d3b      	adds	r3, r7, #4
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	463b      	mov	r3, r7
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800514e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005156:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800515a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515e:	b29b      	uxth	r3, r3
 8005160:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005162:	463b      	mov	r3, r7
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800516c:	1ad2      	subs	r2, r2, r3
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005174:	1d3b      	adds	r3, r7, #4
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 817c 	beq.w	8005488 <USB_EPStartXfer+0x430>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	785b      	ldrb	r3, [r3, #1]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d16f      	bne.n	8005282 <USB_EPStartXfer+0x22a>
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ba:	4413      	add	r3, r2
 80051bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051c0:	463b      	mov	r3, r7
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	011a      	lsls	r2, r3, #4
 80051c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051cc:	4413      	add	r3, r2
 80051ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d116      	bne.n	800520c <USB_EPStartXfer+0x1b4>
 80051de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005202:	b29a      	uxth	r2, r3
 8005204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	e05b      	b.n	80052c4 <USB_EPStartXfer+0x26c>
 800520c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005210:	2b3e      	cmp	r3, #62	; 0x3e
 8005212:	d818      	bhi.n	8005246 <USB_EPStartXfer+0x1ee>
 8005214:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005218:	085b      	lsrs	r3, r3, #1
 800521a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800521e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <USB_EPStartXfer+0x1dc>
 800522a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800522e:	3301      	adds	r3, #1
 8005230:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005238:	b29b      	uxth	r3, r3
 800523a:	029b      	lsls	r3, r3, #10
 800523c:	b29a      	uxth	r2, r3
 800523e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	e03e      	b.n	80052c4 <USB_EPStartXfer+0x26c>
 8005246:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005250:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <USB_EPStartXfer+0x20e>
 800525c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005260:	3b01      	subs	r3, #1
 8005262:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005266:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800526a:	b29b      	uxth	r3, r3
 800526c:	029b      	lsls	r3, r3, #10
 800526e:	b29b      	uxth	r3, r3
 8005270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005278:	b29a      	uxth	r2, r3
 800527a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e020      	b.n	80052c4 <USB_EPStartXfer+0x26c>
 8005282:	463b      	mov	r3, r7
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d11b      	bne.n	80052c4 <USB_EPStartXfer+0x26c>
 800528c:	1d3b      	adds	r3, r7, #4
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800529c:	4413      	add	r3, r2
 800529e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80052b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80052c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	895b      	ldrh	r3, [r3, #10]
 80052ca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6959      	ldr	r1, [r3, #20]
 80052d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80052de:	1d38      	adds	r0, r7, #4
 80052e0:	6800      	ldr	r0, [r0, #0]
 80052e2:	f001 fafe 	bl	80068e2 <USB_WritePMA>
            ep->xfer_buff += len;
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80052f0:	441a      	add	r2, r3
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d909      	bls.n	800531c <USB_EPStartXfer+0x2c4>
            {
              ep->xfer_len_db -= len;
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	621a      	str	r2, [r3, #32]
 800531a:	e008      	b.n	800532e <USB_EPStartXfer+0x2d6>
            }
            else
            {
              len = ep->xfer_len_db;
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800532e:	463b      	mov	r3, r7
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d16f      	bne.n	8005418 <USB_EPStartXfer+0x3c0>
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005348:	b29b      	uxth	r3, r3
 800534a:	461a      	mov	r2, r3
 800534c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005350:	4413      	add	r3, r2
 8005352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005362:	4413      	add	r3, r2
 8005364:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800536c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005370:	2b00      	cmp	r3, #0
 8005372:	d116      	bne.n	80053a2 <USB_EPStartXfer+0x34a>
 8005374:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005380:	b29a      	uxth	r2, r3
 8005382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005386:	801a      	strh	r2, [r3, #0]
 8005388:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005398:	b29a      	uxth	r2, r3
 800539a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	e05f      	b.n	8005462 <USB_EPStartXfer+0x40a>
 80053a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053a6:	2b3e      	cmp	r3, #62	; 0x3e
 80053a8:	d818      	bhi.n	80053dc <USB_EPStartXfer+0x384>
 80053aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <USB_EPStartXfer+0x372>
 80053c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e042      	b.n	8005462 <USB_EPStartXfer+0x40a>
 80053dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <USB_EPStartXfer+0x3a4>
 80053f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f6:	3b01      	subs	r3, #1
 80053f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80053fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005400:	b29b      	uxth	r3, r3
 8005402:	029b      	lsls	r3, r3, #10
 8005404:	b29b      	uxth	r3, r3
 8005406:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540e:	b29a      	uxth	r2, r3
 8005410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e024      	b.n	8005462 <USB_EPStartXfer+0x40a>
 8005418:	463b      	mov	r3, r7
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	785b      	ldrb	r3, [r3, #1]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d11f      	bne.n	8005462 <USB_EPStartXfer+0x40a>
 8005422:	1d3b      	adds	r3, r7, #4
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005432:	b29b      	uxth	r3, r3
 8005434:	461a      	mov	r2, r3
 8005436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800543a:	4413      	add	r3, r2
 800543c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	011a      	lsls	r2, r3, #4
 8005448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800544c:	4413      	add	r3, r2
 800544e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005452:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005456:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800545a:	b29a      	uxth	r2, r3
 800545c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005460:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005462:	463b      	mov	r3, r7
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	891b      	ldrh	r3, [r3, #8]
 8005468:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800546c:	463b      	mov	r3, r7
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6959      	ldr	r1, [r3, #20]
 8005472:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005476:	b29b      	uxth	r3, r3
 8005478:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800547c:	1d38      	adds	r0, r7, #4
 800547e:	6800      	ldr	r0, [r0, #0]
 8005480:	f001 fa2f 	bl	80068e2 <USB_WritePMA>
 8005484:	f000 bcfe 	b.w	8005e84 <USB_EPStartXfer+0xe2c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d164      	bne.n	800555c <USB_EPStartXfer+0x504>
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005498:	1d3b      	adds	r3, r7, #4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	461a      	mov	r2, r3
 80054a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054a6:	4413      	add	r3, r2
 80054a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	011a      	lsls	r2, r3, #4
 80054b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054b4:	4413      	add	r3, r2
 80054b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80054bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d112      	bne.n	80054ea <USB_EPStartXfer+0x492>
 80054c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	e057      	b.n	800559a <USB_EPStartXfer+0x542>
 80054ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054ee:	2b3e      	cmp	r3, #62	; 0x3e
 80054f0:	d817      	bhi.n	8005522 <USB_EPStartXfer+0x4ca>
 80054f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80054f6:	085b      	lsrs	r3, r3, #1
 80054f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80054fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <USB_EPStartXfer+0x4ba>
 8005508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800550c:	3301      	adds	r3, #1
 800550e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005516:	b29b      	uxth	r3, r3
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	b29a      	uxth	r2, r3
 800551c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e03b      	b.n	800559a <USB_EPStartXfer+0x542>
 8005522:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800552c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	2b00      	cmp	r3, #0
 8005536:	d104      	bne.n	8005542 <USB_EPStartXfer+0x4ea>
 8005538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800553c:	3b01      	subs	r3, #1
 800553e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005546:	b29b      	uxth	r3, r3
 8005548:	029b      	lsls	r3, r3, #10
 800554a:	b29b      	uxth	r3, r3
 800554c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005554:	b29a      	uxth	r2, r3
 8005556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	e01e      	b.n	800559a <USB_EPStartXfer+0x542>
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d119      	bne.n	800559a <USB_EPStartXfer+0x542>
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	677b      	str	r3, [r7, #116]	; 0x74
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005574:	b29b      	uxth	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557a:	4413      	add	r3, r2
 800557c:	677b      	str	r3, [r7, #116]	; 0x74
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	011a      	lsls	r2, r3, #4
 8005586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005588:	4413      	add	r3, r2
 800558a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800558e:	673b      	str	r3, [r7, #112]	; 0x70
 8005590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005594:	b29a      	uxth	r2, r3
 8005596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005598:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800559a:	463b      	mov	r3, r7
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	891b      	ldrh	r3, [r3, #8]
 80055a0:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6959      	ldr	r1, [r3, #20]
 80055aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80055b4:	1d38      	adds	r0, r7, #4
 80055b6:	6800      	ldr	r0, [r0, #0]
 80055b8:	f001 f993 	bl	80068e2 <USB_WritePMA>
            ep->xfer_buff += len;
 80055bc:	463b      	mov	r3, r7
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055c6:	441a      	add	r2, r3
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055ce:	463b      	mov	r3, r7
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a1a      	ldr	r2, [r3, #32]
 80055d4:	463b      	mov	r3, r7
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d909      	bls.n	80055f2 <USB_EPStartXfer+0x59a>
            {
              ep->xfer_len_db -= len;
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055e8:	1ad2      	subs	r2, r2, r3
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	621a      	str	r2, [r3, #32]
 80055f0:	e008      	b.n	8005604 <USB_EPStartXfer+0x5ac>
            }
            else
            {
              len = ep->xfer_len_db;
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
              ep->xfer_len_db = 0U;
 80055fc:	463b      	mov	r3, r7
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2200      	movs	r2, #0
 8005602:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005604:	1d3b      	adds	r3, r7, #4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800560a:	463b      	mov	r3, r7
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d164      	bne.n	80056de <USB_EPStartXfer+0x686>
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005622:	b29b      	uxth	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005628:	4413      	add	r3, r2
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	463b      	mov	r3, r7
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	011a      	lsls	r2, r3, #4
 8005634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005636:	4413      	add	r3, r2
 8005638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800563c:	667b      	str	r3, [r7, #100]	; 0x64
 800563e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005642:	2b00      	cmp	r3, #0
 8005644:	d112      	bne.n	800566c <USB_EPStartXfer+0x614>
 8005646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005650:	b29a      	uxth	r2, r3
 8005652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005664:	b29a      	uxth	r2, r3
 8005666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	e054      	b.n	8005716 <USB_EPStartXfer+0x6be>
 800566c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005670:	2b3e      	cmp	r3, #62	; 0x3e
 8005672:	d817      	bhi.n	80056a4 <USB_EPStartXfer+0x64c>
 8005674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800567e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <USB_EPStartXfer+0x63c>
 800568a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800568e:	3301      	adds	r3, #1
 8005690:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005694:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005698:	b29b      	uxth	r3, r3
 800569a:	029b      	lsls	r3, r3, #10
 800569c:	b29a      	uxth	r2, r3
 800569e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056a0:	801a      	strh	r2, [r3, #0]
 80056a2:	e038      	b.n	8005716 <USB_EPStartXfer+0x6be>
 80056a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <USB_EPStartXfer+0x66c>
 80056ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056be:	3b01      	subs	r3, #1
 80056c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	029b      	lsls	r3, r3, #10
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056da:	801a      	strh	r2, [r3, #0]
 80056dc:	e01b      	b.n	8005716 <USB_EPStartXfer+0x6be>
 80056de:	463b      	mov	r3, r7
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d116      	bne.n	8005716 <USB_EPStartXfer+0x6be>
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	461a      	mov	r2, r3
 80056f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f6:	4413      	add	r3, r2
 80056f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	011a      	lsls	r2, r3, #4
 8005702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005704:	4413      	add	r3, r2
 8005706:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800570a:	663b      	str	r3, [r7, #96]	; 0x60
 800570c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005710:	b29a      	uxth	r2, r3
 8005712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005714:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	895b      	ldrh	r3, [r3, #10]
 800571c:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6959      	ldr	r1, [r3, #20]
 8005726:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800572a:	b29b      	uxth	r3, r3
 800572c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005730:	1d38      	adds	r0, r7, #4
 8005732:	6800      	ldr	r0, [r0, #0]
 8005734:	f001 f8d5 	bl	80068e2 <USB_WritePMA>
 8005738:	e3a4      	b.n	8005e84 <USB_EPStartXfer+0xe2c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800573a:	463b      	mov	r3, r7
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	463b      	mov	r3, r7
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	441a      	add	r2, r3
 8005770:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	b29b      	uxth	r3, r3
 8005786:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	65bb      	str	r3, [r7, #88]	; 0x58
 800578e:	1d3b      	adds	r3, r7, #4
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005796:	b29b      	uxth	r3, r3
 8005798:	461a      	mov	r2, r3
 800579a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800579c:	4413      	add	r3, r2
 800579e:	65bb      	str	r3, [r7, #88]	; 0x58
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	011a      	lsls	r2, r3, #4
 80057a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057aa:	4413      	add	r3, r2
 80057ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057b0:	657b      	str	r3, [r7, #84]	; 0x54
 80057b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	891b      	ldrh	r3, [r3, #8]
 80057c2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057c6:	463b      	mov	r3, r7
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6959      	ldr	r1, [r3, #20]
 80057cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80057d6:	1d38      	adds	r0, r7, #4
 80057d8:	6800      	ldr	r0, [r0, #0]
 80057da:	f001 f882 	bl	80068e2 <USB_WritePMA>
 80057de:	e351      	b.n	8005e84 <USB_EPStartXfer+0xe2c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	463b      	mov	r3, r7
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80057fe:	1d3b      	adds	r3, r7, #4
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	463b      	mov	r3, r7
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	441a      	add	r2, r3
 800580c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005818:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800581c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005820:	b29b      	uxth	r3, r3
 8005822:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005824:	463b      	mov	r3, r7
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	463b      	mov	r3, r7
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	463b      	mov	r3, r7
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	b29b      	uxth	r3, r3
 8005848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8178 	beq.w	8005b42 <USB_EPStartXfer+0xaea>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d164      	bne.n	800592c <USB_EPStartXfer+0x8d4>
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	64bb      	str	r3, [r7, #72]	; 0x48
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005870:	b29b      	uxth	r3, r3
 8005872:	461a      	mov	r2, r3
 8005874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005876:	4413      	add	r3, r2
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
 800587a:	463b      	mov	r3, r7
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005884:	4413      	add	r3, r2
 8005886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
 800588c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005890:	2b00      	cmp	r3, #0
 8005892:	d112      	bne.n	80058ba <USB_EPStartXfer+0x862>
 8005894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	b29b      	uxth	r3, r3
 800589a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b6:	801a      	strh	r2, [r3, #0]
 80058b8:	e054      	b.n	8005964 <USB_EPStartXfer+0x90c>
 80058ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058be:	2b3e      	cmp	r3, #62	; 0x3e
 80058c0:	d817      	bhi.n	80058f2 <USB_EPStartXfer+0x89a>
 80058c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d004      	beq.n	80058e2 <USB_EPStartXfer+0x88a>
 80058d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058dc:	3301      	adds	r3, #1
 80058de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	029b      	lsls	r3, r3, #10
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ee:	801a      	strh	r2, [r3, #0]
 80058f0:	e038      	b.n	8005964 <USB_EPStartXfer+0x90c>
 80058f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80058fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <USB_EPStartXfer+0x8ba>
 8005908:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800590c:	3b01      	subs	r3, #1
 800590e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005912:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005924:	b29a      	uxth	r2, r3
 8005926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e01b      	b.n	8005964 <USB_EPStartXfer+0x90c>
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d116      	bne.n	8005964 <USB_EPStartXfer+0x90c>
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005944:	4413      	add	r3, r2
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005948:	463b      	mov	r3, r7
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	011a      	lsls	r2, r3, #4
 8005950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005952:	4413      	add	r3, r2
 8005954:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005958:	643b      	str	r3, [r7, #64]	; 0x40
 800595a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800595e:	b29a      	uxth	r2, r3
 8005960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005962:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005964:	463b      	mov	r3, r7
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	895b      	ldrh	r3, [r3, #10]
 800596a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596e:	463b      	mov	r3, r7
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6959      	ldr	r1, [r3, #20]
 8005974:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005978:	b29b      	uxth	r3, r3
 800597a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800597e:	1d38      	adds	r0, r7, #4
 8005980:	6800      	ldr	r0, [r0, #0]
 8005982:	f000 ffae 	bl	80068e2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005990:	441a      	add	r2, r3
 8005992:	463b      	mov	r3, r7
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d909      	bls.n	80059bc <USB_EPStartXfer+0x964>
          {
            ep->xfer_len_db -= len;
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059b2:	1ad2      	subs	r2, r2, r3
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	621a      	str	r2, [r3, #32]
 80059ba:	e008      	b.n	80059ce <USB_EPStartXfer+0x976>
          }
          else
          {
            len = ep->xfer_len_db;
 80059bc:	463b      	mov	r3, r7
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 80059c6:	463b      	mov	r3, r7
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2200      	movs	r2, #0
 80059cc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80059ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 8256 	beq.w	8005e84 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059d8:	463b      	mov	r3, r7
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	785b      	ldrb	r3, [r3, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d172      	bne.n	8005ac8 <USB_EPStartXfer+0xa70>
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059f6:	4413      	add	r3, r2
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fa:	463b      	mov	r3, r7
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005a0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11a      	bne.n	8005a4e <USB_EPStartXfer+0x9f6>
 8005a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e067      	b.n	8005b1e <USB_EPStartXfer+0xac6>
 8005a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a52:	2b3e      	cmp	r3, #62	; 0x3e
 8005a54:	d819      	bhi.n	8005a8a <USB_EPStartXfer+0xa32>
 8005a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a5a:	085b      	lsrs	r3, r3, #1
 8005a5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <USB_EPStartXfer+0xa1e>
 8005a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a70:	3301      	adds	r3, #1
 8005a72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	029b      	lsls	r3, r3, #10
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	e049      	b.n	8005b1e <USB_EPStartXfer+0xac6>
 8005a8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005a94:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a98:	f003 031f 	and.w	r3, r3, #31
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <USB_EPStartXfer+0xa52>
 8005aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	029b      	lsls	r3, r3, #10
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	e02a      	b.n	8005b1e <USB_EPStartXfer+0xac6>
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	785b      	ldrb	r3, [r3, #1]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d125      	bne.n	8005b1e <USB_EPStartXfer+0xac6>
 8005ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005ad6:	1d3a      	adds	r2, r7, #4
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005aec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	440a      	add	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4413      	add	r3, r2
 8005b06:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b1e:	463b      	mov	r3, r7
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	891b      	ldrh	r3, [r3, #8]
 8005b24:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b28:	463b      	mov	r3, r7
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6959      	ldr	r1, [r3, #20]
 8005b2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005b38:	1d38      	adds	r0, r7, #4
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	f000 fed1 	bl	80068e2 <USB_WritePMA>
 8005b40:	e1a0      	b.n	8005e84 <USB_EPStartXfer+0xe2c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	785b      	ldrb	r3, [r3, #1]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d17a      	bne.n	8005c42 <USB_EPStartXfer+0xbea>
 8005b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b50:	1d3a      	adds	r2, r7, #4
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	1d3b      	adds	r3, r7, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	4619      	mov	r1, r3
 8005b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b66:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	463b      	mov	r3, r7
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d11a      	bne.n	8005bc8 <USB_EPStartXfer+0xb70>
 8005b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	e067      	b.n	8005c98 <USB_EPStartXfer+0xc40>
 8005bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005bce:	d819      	bhi.n	8005c04 <USB_EPStartXfer+0xbac>
 8005bd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <USB_EPStartXfer+0xb98>
 8005be6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bea:	3301      	adds	r3, #1
 8005bec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bf0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e049      	b.n	8005c98 <USB_EPStartXfer+0xc40>
 8005c04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <USB_EPStartXfer+0xbcc>
 8005c1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e02a      	b.n	8005c98 <USB_EPStartXfer+0xc40>
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d125      	bne.n	8005c98 <USB_EPStartXfer+0xc40>
 8005c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c50:	1d3a      	adds	r2, r7, #4
 8005c52:	6812      	ldr	r2, [r2, #0]
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	1d3b      	adds	r3, r7, #4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	463b      	mov	r3, r7
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	011a      	lsls	r2, r3, #4
 8005c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c84:	f107 0320 	add.w	r3, r7, #32
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	f107 0320 	add.w	r3, r7, #32
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c98:	463b      	mov	r3, r7
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	891b      	ldrh	r3, [r3, #8]
 8005c9e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6959      	ldr	r1, [r3, #20]
 8005ca8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005cb2:	1d38      	adds	r0, r7, #4
 8005cb4:	6800      	ldr	r0, [r0, #0]
 8005cb6:	f000 fe14 	bl	80068e2 <USB_WritePMA>
          ep->xfer_buff += len;
 8005cba:	463b      	mov	r3, r7
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cc4:	441a      	add	r2, r3
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d909      	bls.n	8005cf0 <USB_EPStartXfer+0xc98>
          {
            ep->xfer_len_db -= len;
 8005cdc:	463b      	mov	r3, r7
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6a1a      	ldr	r2, [r3, #32]
 8005ce2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ce6:	1ad2      	subs	r2, r2, r3
 8005ce8:	463b      	mov	r3, r7
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	621a      	str	r2, [r3, #32]
 8005cee:	e008      	b.n	8005d02 <USB_EPStartXfer+0xcaa>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            ep->xfer_len_db = 0U;
 8005cfa:	463b      	mov	r3, r7
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80bc 	beq.w	8005e84 <USB_EPStartXfer+0xe2c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d0c:	f107 031c 	add.w	r3, r7, #28
 8005d10:	1d3a      	adds	r2, r7, #4
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	463b      	mov	r3, r7
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d17a      	bne.n	8005e16 <USB_EPStartXfer+0xdbe>
 8005d20:	f107 0318 	add.w	r3, r7, #24
 8005d24:	1d3a      	adds	r2, r7, #4
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	1d3b      	adds	r3, r7, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	4619      	mov	r1, r3
 8005d36:	f107 0318 	add.w	r3, r7, #24
 8005d3a:	f107 0218 	add.w	r2, r7, #24
 8005d3e:	6812      	ldr	r2, [r2, #0]
 8005d40:	440a      	add	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	011a      	lsls	r2, r3, #4
 8005d4c:	f107 0318 	add.w	r3, r7, #24
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4413      	add	r3, r2
 8005d54:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005d58:	f107 0314 	add.w	r3, r7, #20
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11a      	bne.n	8005d9c <USB_EPStartXfer+0xd44>
 8005d66:	f107 0314 	add.w	r3, r7, #20
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	f107 0314 	add.w	r3, r7, #20
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	f107 0314 	add.w	r3, r7, #20
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	f107 0314 	add.w	r3, r7, #20
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e062      	b.n	8005e62 <USB_EPStartXfer+0xe0a>
 8005d9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005da0:	2b3e      	cmp	r3, #62	; 0x3e
 8005da2:	d819      	bhi.n	8005dd8 <USB_EPStartXfer+0xd80>
 8005da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <USB_EPStartXfer+0xd6c>
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	f107 0314 	add.w	r3, r7, #20
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	e044      	b.n	8005e62 <USB_EPStartXfer+0xe0a>
 8005dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005de2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <USB_EPStartXfer+0xda0>
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df2:	3b01      	subs	r3, #1
 8005df4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	029b      	lsls	r3, r3, #10
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e025      	b.n	8005e62 <USB_EPStartXfer+0xe0a>
 8005e16:	463b      	mov	r3, r7
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d120      	bne.n	8005e62 <USB_EPStartXfer+0xe0a>
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f107 031c 	add.w	r3, r7, #28
 8005e30:	f107 021c 	add.w	r2, r7, #28
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	440a      	add	r2, r1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	011a      	lsls	r2, r3, #4
 8005e42:	f107 031c 	add.w	r3, r7, #28
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e4e:	f107 0310 	add.w	r3, r7, #16
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	f107 0310 	add.w	r3, r7, #16
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e62:	463b      	mov	r3, r7
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	895b      	ldrh	r3, [r3, #10]
 8005e68:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6959      	ldr	r1, [r3, #20]
 8005e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8005e7c:	1d38      	adds	r0, r7, #4
 8005e7e:	6800      	ldr	r0, [r0, #0]
 8005e80:	f000 fd2f 	bl	80068e2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	f107 020e 	add.w	r2, r7, #14
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea2:	8013      	strh	r3, [r2, #0]
 8005ea4:	f107 030e 	add.w	r3, r7, #14
 8005ea8:	f107 020e 	add.w	r2, r7, #14
 8005eac:	8812      	ldrh	r2, [r2, #0]
 8005eae:	f082 0210 	eor.w	r2, r2, #16
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	f107 030e 	add.w	r3, r7, #14
 8005eb8:	f107 020e 	add.w	r2, r7, #14
 8005ebc:	8812      	ldrh	r2, [r2, #0]
 8005ebe:	f082 0220 	eor.w	r2, r2, #32
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	1d3b      	adds	r3, r7, #4
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	463b      	mov	r3, r7
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	f107 030e 	add.w	r3, r7, #14
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]
 8005eec:	e3b5      	b.n	800665a <USB_EPStartXfer+0x1602>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005eee:	463b      	mov	r3, r7
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	7b1b      	ldrb	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f040 8090 	bne.w	800601a <USB_EPStartXfer+0xfc2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005efa:	463b      	mov	r3, r7
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	463b      	mov	r3, r7
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d90e      	bls.n	8005f28 <USB_EPStartXfer+0xed0>
      {
        len = ep->maxpacket;
 8005f0a:	463b      	mov	r3, r7
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len -= len;
 8005f14:	463b      	mov	r3, r7
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f1e:	1ad2      	subs	r2, r2, r3
 8005f20:	463b      	mov	r3, r7
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	619a      	str	r2, [r3, #24]
 8005f26:	e008      	b.n	8005f3a <USB_EPStartXfer+0xee2>
      }
      else
      {
        len = ep->xfer_len;
 8005f28:	463b      	mov	r3, r7
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        ep->xfer_len = 0U;
 8005f32:	463b      	mov	r3, r7
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f3a:	1d3b      	adds	r3, r7, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f42:	1d3b      	adds	r3, r7, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f52:	4413      	add	r3, r2
 8005f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	011a      	lsls	r2, r3, #4
 8005f60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f64:	4413      	add	r3, r2
 8005f66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d116      	bne.n	8005fa4 <USB_EPStartXfer+0xf4c>
 8005f76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fa0:	801a      	strh	r2, [r3, #0]
 8005fa2:	e32c      	b.n	80065fe <USB_EPStartXfer+0x15a6>
 8005fa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005faa:	d818      	bhi.n	8005fde <USB_EPStartXfer+0xf86>
 8005fac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d004      	beq.n	8005fcc <USB_EPStartXfer+0xf74>
 8005fc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	029b      	lsls	r3, r3, #10
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e30f      	b.n	80065fe <USB_EPStartXfer+0x15a6>
 8005fde:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fe8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <USB_EPStartXfer+0xfa6>
 8005ff4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005ffe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006002:	b29b      	uxth	r3, r3
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	b29b      	uxth	r3, r3
 8006008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800600c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006010:	b29a      	uxth	r2, r3
 8006012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006016:	801a      	strh	r2, [r3, #0]
 8006018:	e2f1      	b.n	80065fe <USB_EPStartXfer+0x15a6>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800601a:	463b      	mov	r3, r7
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	78db      	ldrb	r3, [r3, #3]
 8006020:	2b02      	cmp	r3, #2
 8006022:	f040 818f 	bne.w	8006344 <USB_EPStartXfer+0x12ec>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006026:	463b      	mov	r3, r7
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d175      	bne.n	800611c <USB_EPStartXfer+0x10c4>
 8006030:	1d3b      	adds	r3, r7, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006038:	1d3b      	adds	r3, r7, #4
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006040:	b29b      	uxth	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006048:	4413      	add	r3, r2
 800604a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800604e:	463b      	mov	r3, r7
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	011a      	lsls	r2, r3, #4
 8006056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800605a:	4413      	add	r3, r2
 800605c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006060:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006064:	463b      	mov	r3, r7
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d116      	bne.n	800609c <USB_EPStartXfer+0x1044>
 800606e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800607a:	b29a      	uxth	r2, r3
 800607c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006080:	801a      	strh	r2, [r3, #0]
 8006082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e065      	b.n	8006168 <USB_EPStartXfer+0x1110>
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b3e      	cmp	r3, #62	; 0x3e
 80060a4:	d81a      	bhi.n	80060dc <USB_EPStartXfer+0x1084>
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <USB_EPStartXfer+0x1072>
 80060c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	029b      	lsls	r3, r3, #10
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060d8:	801a      	strh	r2, [r3, #0]
 80060da:	e045      	b.n	8006168 <USB_EPStartXfer+0x1110>
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060e8:	463b      	mov	r3, r7
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d104      	bne.n	8006100 <USB_EPStartXfer+0x10a8>
 80060f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fa:	3b01      	subs	r3, #1
 80060fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006104:	b29b      	uxth	r3, r3
 8006106:	029b      	lsls	r3, r3, #10
 8006108:	b29b      	uxth	r3, r3
 800610a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800610e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006112:	b29a      	uxth	r2, r3
 8006114:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e025      	b.n	8006168 <USB_EPStartXfer+0x1110>
 800611c:	463b      	mov	r3, r7
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d120      	bne.n	8006168 <USB_EPStartXfer+0x1110>
 8006126:	1d3b      	adds	r3, r7, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800612e:	1d3b      	adds	r3, r7, #4
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800613e:	4413      	add	r3, r2
 8006140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006144:	463b      	mov	r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	011a      	lsls	r2, r3, #4
 800614c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006150:	4413      	add	r3, r2
 8006152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006156:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	b29a      	uxth	r2, r3
 8006162:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	1d3b      	adds	r3, r7, #4
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	785b      	ldrb	r3, [r3, #1]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d175      	bne.n	8006266 <USB_EPStartXfer+0x120e>
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006192:	4413      	add	r3, r2
 8006194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006198:	463b      	mov	r3, r7
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	011a      	lsls	r2, r3, #4
 80061a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061a4:	4413      	add	r3, r2
 80061a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061ae:	463b      	mov	r3, r7
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d116      	bne.n	80061e6 <USB_EPStartXfer+0x118e>
 80061b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061dc:	b29a      	uxth	r2, r3
 80061de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	e061      	b.n	80062aa <USB_EPStartXfer+0x1252>
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b3e      	cmp	r3, #62	; 0x3e
 80061ee:	d81a      	bhi.n	8006226 <USB_EPStartXfer+0x11ce>
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061fc:	463b      	mov	r3, r7
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d004      	beq.n	8006214 <USB_EPStartXfer+0x11bc>
 800620a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800620e:	3301      	adds	r3, #1
 8006210:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006214:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006218:	b29b      	uxth	r3, r3
 800621a:	029b      	lsls	r3, r3, #10
 800621c:	b29a      	uxth	r2, r3
 800621e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	e041      	b.n	80062aa <USB_EPStartXfer+0x1252>
 8006226:	463b      	mov	r3, r7
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006232:	463b      	mov	r3, r7
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	2b00      	cmp	r3, #0
 800623e:	d104      	bne.n	800624a <USB_EPStartXfer+0x11f2>
 8006240:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006244:	3b01      	subs	r3, #1
 8006246:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800624a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800624e:	b29b      	uxth	r3, r3
 8006250:	029b      	lsls	r3, r3, #10
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e021      	b.n	80062aa <USB_EPStartXfer+0x1252>
 8006266:	463b      	mov	r3, r7
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d11c      	bne.n	80062aa <USB_EPStartXfer+0x1252>
 8006270:	1d3b      	adds	r3, r7, #4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006280:	4413      	add	r3, r2
 8006282:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006286:	463b      	mov	r3, r7
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	011a      	lsls	r2, r3, #4
 800628e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006292:	4413      	add	r3, r2
 8006294:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80062aa:	463b      	mov	r3, r7
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 81a4 	beq.w	80065fe <USB_EPStartXfer+0x15a6>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	463b      	mov	r3, r7
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d005      	beq.n	80062e2 <USB_EPStartXfer+0x128a>
 80062d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10d      	bne.n	80062fe <USB_EPStartXfer+0x12a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 8187 	bne.w	80065fe <USB_EPStartXfer+0x15a6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 8180 	bne.w	80065fe <USB_EPStartXfer+0x15a6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800633a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]
 8006342:	e15c      	b.n	80065fe <USB_EPStartXfer+0x15a6>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	78db      	ldrb	r3, [r3, #3]
 800634a:	2b01      	cmp	r3, #1
 800634c:	f040 8155 	bne.w	80065fa <USB_EPStartXfer+0x15a2>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	429a      	cmp	r2, r3
 800635e:	d90e      	bls.n	800637e <USB_EPStartXfer+0x1326>
        {
          len = ep->maxpacket;
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len -= len;
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699a      	ldr	r2, [r3, #24]
 8006370:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006374:	1ad2      	subs	r2, r2, r3
 8006376:	463b      	mov	r3, r7
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	619a      	str	r2, [r3, #24]
 800637c:	e008      	b.n	8006390 <USB_EPStartXfer+0x1338>
        }
        else
        {
          len = ep->xfer_len;
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          ep->xfer_len = 0U;
 8006388:	463b      	mov	r3, r7
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006390:	463b      	mov	r3, r7
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	785b      	ldrb	r3, [r3, #1]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d16f      	bne.n	800647a <USB_EPStartXfer+0x1422>
 800639a:	1d3b      	adds	r3, r7, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063a2:	1d3b      	adds	r3, r7, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063b2:	4413      	add	r3, r2
 80063b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80063b8:	463b      	mov	r3, r7
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	011a      	lsls	r2, r3, #4
 80063c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80063ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d116      	bne.n	8006404 <USB_EPStartXfer+0x13ac>
 80063d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e05f      	b.n	80064c4 <USB_EPStartXfer+0x146c>
 8006404:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006408:	2b3e      	cmp	r3, #62	; 0x3e
 800640a:	d818      	bhi.n	800643e <USB_EPStartXfer+0x13e6>
 800640c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006416:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <USB_EPStartXfer+0x13d4>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	3301      	adds	r3, #1
 8006428:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800642c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006430:	b29b      	uxth	r3, r3
 8006432:	029b      	lsls	r3, r3, #10
 8006434:	b29a      	uxth	r2, r3
 8006436:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	e042      	b.n	80064c4 <USB_EPStartXfer+0x146c>
 800643e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006448:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <USB_EPStartXfer+0x1406>
 8006454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006458:	3b01      	subs	r3, #1
 800645a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800645e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006462:	b29b      	uxth	r3, r3
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	b29b      	uxth	r3, r3
 8006468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006470:	b29a      	uxth	r2, r3
 8006472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	e024      	b.n	80064c4 <USB_EPStartXfer+0x146c>
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	785b      	ldrb	r3, [r3, #1]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d11f      	bne.n	80064c4 <USB_EPStartXfer+0x146c>
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800648c:	1d3b      	adds	r3, r7, #4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800649c:	4413      	add	r3, r2
 800649e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80064a2:	463b      	mov	r3, r7
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	011a      	lsls	r2, r3, #4
 80064aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ae:	4413      	add	r3, r2
 80064b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80064c2:	801a      	strh	r2, [r3, #0]
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	785b      	ldrb	r3, [r3, #1]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d16f      	bne.n	80065b6 <USB_EPStartXfer+0x155e>
 80064d6:	1d3b      	adds	r3, r7, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ee:	4413      	add	r3, r2
 80064f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064f4:	463b      	mov	r3, r7
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	011a      	lsls	r2, r3, #4
 80064fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006500:	4413      	add	r3, r2
 8006502:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006506:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800650a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800650e:	2b00      	cmp	r3, #0
 8006510:	d116      	bne.n	8006540 <USB_EPStartXfer+0x14e8>
 8006512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800651e:	b29a      	uxth	r2, r3
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	801a      	strh	r2, [r3, #0]
 8006526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006536:	b29a      	uxth	r2, r3
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	e05e      	b.n	80065fe <USB_EPStartXfer+0x15a6>
 8006540:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006544:	2b3e      	cmp	r3, #62	; 0x3e
 8006546:	d818      	bhi.n	800657a <USB_EPStartXfer+0x1522>
 8006548:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800654c:	085b      	lsrs	r3, r3, #1
 800654e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006552:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <USB_EPStartXfer+0x1510>
 800655e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006562:	3301      	adds	r3, #1
 8006564:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006568:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800656c:	b29b      	uxth	r3, r3
 800656e:	029b      	lsls	r3, r3, #10
 8006570:	b29a      	uxth	r2, r3
 8006572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006576:	801a      	strh	r2, [r3, #0]
 8006578:	e041      	b.n	80065fe <USB_EPStartXfer+0x15a6>
 800657a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800657e:	095b      	lsrs	r3, r3, #5
 8006580:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006584:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <USB_EPStartXfer+0x1542>
 8006590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006594:	3b01      	subs	r3, #1
 8006596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800659a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800659e:	b29b      	uxth	r3, r3
 80065a0:	029b      	lsls	r3, r3, #10
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e023      	b.n	80065fe <USB_EPStartXfer+0x15a6>
 80065b6:	463b      	mov	r3, r7
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d11e      	bne.n	80065fe <USB_EPStartXfer+0x15a6>
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	461a      	mov	r2, r3
 80065cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065d0:	4413      	add	r3, r2
 80065d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065d6:	463b      	mov	r3, r7
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	011a      	lsls	r2, r3, #4
 80065de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	e001      	b.n	80065fe <USB_EPStartXfer+0x15a6>
      }
      else
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e02e      	b.n	800665c <USB_EPStartXfer+0x1604>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	463b      	mov	r3, r7
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29b      	uxth	r3, r3
 8006610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006618:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800661c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006620:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006624:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006628:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800662c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006630:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	463b      	mov	r3, r7
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	441a      	add	r2, r3
 8006642:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
 800666e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	785b      	ldrb	r3, [r3, #1]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d020      	beq.n	80066ba <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800668e:	81fb      	strh	r3, [r7, #14]
 8006690:	89fb      	ldrh	r3, [r7, #14]
 8006692:	f083 0310 	eor.w	r3, r3, #16
 8006696:	81fb      	strh	r3, [r7, #14]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	89fb      	ldrh	r3, [r7, #14]
 80066a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	8013      	strh	r3, [r2, #0]
 80066b8:	e01f      	b.n	80066fa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d0:	81bb      	strh	r3, [r7, #12]
 80066d2:	89bb      	ldrh	r3, [r7, #12]
 80066d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066d8:	81bb      	strh	r3, [r7, #12]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	89bb      	ldrh	r3, [r7, #12]
 80066e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006706:	b480      	push	{r7}
 8006708:	b087      	sub	sp, #28
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	7b1b      	ldrb	r3, [r3, #12]
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 809d 	bne.w	8006854 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d04c      	beq.n	80067bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	82fb      	strh	r3, [r7, #22]
 8006730:	8afb      	ldrh	r3, [r7, #22]
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d01b      	beq.n	8006772 <USB_EPClearStall+0x6c>
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006750:	82bb      	strh	r3, [r7, #20]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	8abb      	ldrh	r3, [r7, #20]
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	78db      	ldrb	r3, [r3, #3]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d06c      	beq.n	8006854 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	b29b      	uxth	r3, r3
 8006788:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800678c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006790:	827b      	strh	r3, [r7, #18]
 8006792:	8a7b      	ldrh	r3, [r7, #18]
 8006794:	f083 0320 	eor.w	r3, r3, #32
 8006798:	827b      	strh	r3, [r7, #18]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	441a      	add	r2, r3
 80067a4:	8a7b      	ldrh	r3, [r7, #18]
 80067a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	8013      	strh	r3, [r2, #0]
 80067ba:	e04b      	b.n	8006854 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	823b      	strh	r3, [r7, #16]
 80067ca:	8a3b      	ldrh	r3, [r7, #16]
 80067cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01b      	beq.n	800680c <USB_EPClearStall+0x106>
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	81fb      	strh	r3, [r7, #14]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	441a      	add	r2, r3
 80067f6:	89fb      	ldrh	r3, [r7, #14]
 80067f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006808:	b29b      	uxth	r3, r3
 800680a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	81bb      	strh	r3, [r7, #12]
 8006824:	89bb      	ldrh	r3, [r7, #12]
 8006826:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800682a:	81bb      	strh	r3, [r7, #12]
 800682c:	89bb      	ldrh	r3, [r7, #12]
 800682e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006832:	81bb      	strh	r3, [r7, #12]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	89bb      	ldrh	r3, [r7, #12]
 8006840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006850:	b29b      	uxth	r3, r3
 8006852:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2280      	movs	r2, #128	; 0x80
 8006876:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	bc80      	pop	{r7}
 8006884:	4770      	bx	lr

08006886 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr

0800689a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bc80      	pop	{r7}
 80068ac:	4770      	bx	lr

080068ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b085      	sub	sp, #20
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068bc:	b29b      	uxth	r3, r3
 80068be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b08d      	sub	sp, #52	; 0x34
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	4611      	mov	r1, r2
 80068ee:	461a      	mov	r2, r3
 80068f0:	460b      	mov	r3, r1
 80068f2:	80fb      	strh	r3, [r7, #6]
 80068f4:	4613      	mov	r3, r2
 80068f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068f8:	88bb      	ldrh	r3, [r7, #4]
 80068fa:	3301      	adds	r3, #1
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006908:	88fb      	ldrh	r3, [r7, #6]
 800690a:	005a      	lsls	r2, r3, #1
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691a:	e01e      	b.n	800695a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	3301      	adds	r3, #1
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	b29b      	uxth	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	b29a      	uxth	r2, r3
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	3302      	adds	r3, #2
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	3302      	adds	r3, #2
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	3301      	adds	r3, #1
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	3b01      	subs	r3, #1
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1dd      	bne.n	800691c <USB_WritePMA+0x3a>
  }
}
 8006960:	bf00      	nop
 8006962:	3734      	adds	r7, #52	; 0x34
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800696a:	b480      	push	{r7}
 800696c:	b08b      	sub	sp, #44	; 0x2c
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	4611      	mov	r1, r2
 8006976:	461a      	mov	r2, r3
 8006978:	460b      	mov	r3, r1
 800697a:	80fb      	strh	r3, [r7, #6]
 800697c:	4613      	mov	r3, r2
 800697e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006980:	88bb      	ldrh	r3, [r7, #4]
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	b29b      	uxth	r3, r3
 8006986:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	005a      	lsls	r2, r3, #1
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800699c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	627b      	str	r3, [r7, #36]	; 0x24
 80069a2:	e01b      	b.n	80069dc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	3302      	adds	r3, #2
 80069b0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3301      	adds	r3, #1
 80069be:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	3301      	adds	r3, #1
 80069ce:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	3302      	adds	r3, #2
 80069d4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	3b01      	subs	r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e0      	bne.n	80069a4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80069e2:	88bb      	ldrh	r3, [r7, #4]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	701a      	strb	r2, [r3, #0]
  }
}
 80069fe:	bf00      	nop
 8006a00:	372c      	adds	r7, #44	; 0x2c
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a0c:	4904      	ldr	r1, [pc, #16]	; (8006a20 <MX_FATFS_Init+0x18>)
 8006a0e:	4805      	ldr	r0, [pc, #20]	; (8006a24 <MX_FATFS_Init+0x1c>)
 8006a10:	f002 fd96 	bl	8009540 <FATFS_LinkDriver>
 8006a14:	4603      	mov	r3, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <MX_FATFS_Init+0x20>)
 8006a1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006a1c:	bf00      	nop
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20002d00 	.word	0x20002d00
 8006a24:	20000034 	.word	0x20000034
 8006a28:	20002d04 	.word	0x20002d04

08006a2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <USER_initialize+0x20>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <USER_initialize+0x20>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	20000031 	.word	0x20000031

08006a50 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <USER_status+0x20>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <USER_status+0x20>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr
 8006a70:	20000031 	.word	0x20000031

08006a74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006a84:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006aa0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	603a      	str	r2, [r7, #0]
 8006ab6:	71fb      	strb	r3, [r7, #7]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
    return res;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	7c1b      	ldrb	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d115      	bne.n	8006b0c <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f006 fa5a 	bl	800cfa2 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006afa:	2202      	movs	r2, #2
 8006afc:	2181      	movs	r1, #129	; 0x81
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f006 fa4f 	bl	800cfa2 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b0a:	e012      	b.n	8006b32 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	2202      	movs	r2, #2
 8006b10:	2101      	movs	r1, #1
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f006 fa45 	bl	800cfa2 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	2202      	movs	r2, #2
 8006b24:	2181      	movs	r1, #129	; 0x81
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f006 fa3b 	bl	800cfa2 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006b32:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8006b36:	f006 fb7b 	bl	800d230 <USBD_static_malloc>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e003      	b.n	8006b58 <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f9d9 	bl	8006f08 <MSC_BOT_Init>

  return USBD_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f006 fa3d 	bl	800cfee <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006b7c:	2181      	movs	r1, #129	; 0x81
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f006 fa35 	bl	800cfee <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa06 	bl	8006f9c <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f006 fb51 	bl	800d248 <USBD_static_free>
    pdev->pClassData  = NULL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc8:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d04d      	beq.n	8006c7a <USBD_MSC_Setup+0xc2>
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	f040 8113 	bne.w	8006e0a <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2bfe      	cmp	r3, #254	; 0xfe
 8006bea:	d002      	beq.n	8006bf2 <USBD_MSC_Setup+0x3a>
 8006bec:	2bff      	cmp	r3, #255	; 0xff
 8006bee:	d024      	beq.n	8006c3a <USBD_MSC_Setup+0x82>
 8006bf0:	e03b      	b.n	8006c6a <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	885b      	ldrh	r3, [r3, #2]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d118      	bne.n	8006c2c <USBD_MSC_Setup+0x74>
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	88db      	ldrh	r3, [r3, #6]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d114      	bne.n	8006c2c <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	da0f      	bge.n	8006c2c <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	4798      	blx	r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	461a      	mov	r2, r3
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2201      	movs	r2, #1
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f002 fbbd 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c2a:	e025      	b.n	8006c78 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f002 fb4e 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c34:	2302      	movs	r3, #2
 8006c36:	75fb      	strb	r3, [r7, #23]
          break;
 8006c38:	e01e      	b.n	8006c78 <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10c      	bne.n	8006c5c <USBD_MSC_Setup+0xa4>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	88db      	ldrh	r3, [r3, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d108      	bne.n	8006c5c <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	db03      	blt.n	8006c5c <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f987 	bl	8006f68 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c5a:	e00d      	b.n	8006c78 <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f002 fb36 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c64:	2302      	movs	r3, #2
 8006c66:	75fb      	strb	r3, [r7, #23]
          break;
 8006c68:	e006      	b.n	8006c78 <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f002 fb2f 	bl	80092d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c72:	2302      	movs	r3, #2
 8006c74:	75fb      	strb	r3, [r7, #23]
          break;
 8006c76:	bf00      	nop
      }
      break;
 8006c78:	e0ce      	b.n	8006e18 <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b0b      	cmp	r3, #11
 8006c80:	f200 80bb 	bhi.w	8006dfa <USBD_MSC_Setup+0x242>
 8006c84:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <USBD_MSC_Setup+0xd4>)
 8006c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8a:	bf00      	nop
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006d33 	.word	0x08006d33
 8006c94:	08006dfb 	.word	0x08006dfb
 8006c98:	08006dfb 	.word	0x08006dfb
 8006c9c:	08006dfb 	.word	0x08006dfb
 8006ca0:	08006dfb 	.word	0x08006dfb
 8006ca4:	08006dfb 	.word	0x08006dfb
 8006ca8:	08006dfb 	.word	0x08006dfb
 8006cac:	08006dfb 	.word	0x08006dfb
 8006cb0:	08006dfb 	.word	0x08006dfb
 8006cb4:	08006ce5 	.word	0x08006ce5
 8006cb8:	08006d0d 	.word	0x08006d0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d107      	bne.n	8006cd6 <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cc6:	f107 030e 	add.w	r3, r7, #14
 8006cca:	2202      	movs	r2, #2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f002 fb68 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd4:	e098      	b.n	8006e08 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 faf9 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce2:	e091      	b.n	8006e08 <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d107      	bne.n	8006cfe <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f002 fb54 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cfc:	e084      	b.n	8006e08 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f002 fae5 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d06:	2302      	movs	r3, #2
 8006d08:	75fb      	strb	r3, [r7, #23]
          break;
 8006d0a:	e07d      	b.n	8006e08 <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d106      	bne.n	8006d24 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	885b      	ldrh	r3, [r3, #2]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d22:	e071      	b.n	8006e08 <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f002 fad2 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006d30:	e06a      	b.n	8006e08 <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	889b      	ldrh	r3, [r3, #4]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f006 f976 	bl	800d02c <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	889b      	ldrh	r3, [r3, #4]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f006 f950 	bl	800cfee <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	889b      	ldrh	r3, [r3, #4]
 8006d52:	b25b      	sxtb	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da23      	bge.n	8006da0 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	889b      	ldrh	r3, [r3, #4]
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	f003 020f 	and.w	r2, r3, #15
 8006d62:	6879      	ldr	r1, [r7, #4]
 8006d64:	4613      	mov	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3318      	adds	r3, #24
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7c1b      	ldrb	r3, [r3, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006d7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d80:	2202      	movs	r2, #2
 8006d82:	2181      	movs	r1, #129	; 0x81
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f006 f90c 	bl	800cfa2 <USBD_LL_OpenEP>
 8006d8a:	e005      	b.n	8006d98 <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	2202      	movs	r2, #2
 8006d90:	2181      	movs	r1, #129	; 0x81
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f006 f905 	bl	800cfa2 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d9e:	e024      	b.n	8006dea <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	889b      	ldrh	r3, [r3, #4]
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7c1b      	ldrb	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d107      	bne.n	8006dd6 <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dca:	2202      	movs	r2, #2
 8006dcc:	2101      	movs	r1, #1
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f006 f8e7 	bl	800cfa2 <USBD_LL_OpenEP>
 8006dd4:	e005      	b.n	8006de2 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006dd6:	2340      	movs	r3, #64	; 0x40
 8006dd8:	2202      	movs	r2, #2
 8006dda:	2101      	movs	r1, #1
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f006 f8e0 	bl	800cfa2 <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	889b      	ldrh	r3, [r3, #4]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa50 	bl	8007298 <MSC_BOT_CplClrFeature>
          break;
 8006df8:	e006      	b.n	8006e08 <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f002 fa67 	bl	80092d0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e02:	2302      	movs	r3, #2
 8006e04:	75fb      	strb	r3, [r7, #23]
          break;
 8006e06:	bf00      	nop
      }
      break;
 8006e08:	e006      	b.n	8006e18 <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 fa5f 	bl	80092d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e12:	2302      	movs	r3, #2
 8006e14:	75fb      	strb	r3, [r7, #23]
      break;
 8006e16:	bf00      	nop
  }

  return ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop

08006e24 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f8c1 	bl	8006fbc <MSC_BOT_DataIn>

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8e2 	bl	800701e <MSC_BOT_DataOut>

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006e72:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bc80      	pop	{r7}
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	20000080 	.word	0x20000080

08006e84 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006e92:	4b03      	ldr	r3, [pc, #12]	; (8006ea0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	200000a0 	.word	0x200000a0

08006ea4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006eb2:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	200000c0 	.word	0x200000c0

08006ec4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	220a      	movs	r2, #10
 8006ed0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006ed2:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	200000e0 	.word	0x200000e0

08006ee4 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f16:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  hmsc->scsi_sense_head = 0U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006f40:	2101      	movs	r1, #1
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f006 f872 	bl	800d02c <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006f48:	2181      	movs	r1, #129	; 0x81
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f006 f86e 	bl	800d02c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f56:	231f      	movs	r3, #31
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f006 f931 	bl	800d1c2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f76:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8006f8a:	231f      	movs	r3, #31
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f006 f917 	bl	800d1c2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	721a      	strb	r2, [r3, #8]
}
 8006fb2:	bf00      	nop
 8006fb4:	3714      	adds	r7, #20
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fce:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7a1b      	ldrb	r3, [r3, #8]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d004      	beq.n	8006fe2 <MSC_BOT_DataIn+0x26>
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	db19      	blt.n	8007010 <MSC_BOT_DataIn+0x54>
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	dc17      	bgt.n	8007010 <MSC_BOT_DataIn+0x54>
 8006fe0:	e011      	b.n	8007006 <MSC_BOT_DataIn+0x4a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f979 	bl	80072e8 <SCSI_ProcessCmd>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da0b      	bge.n	8007014 <MSC_BOT_DataIn+0x58>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8f0 	bl	80071e4 <MSC_BOT_SendCSW>
      }
      break;
 8007004:	e006      	b.n	8007014 <MSC_BOT_DataIn+0x58>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8eb 	bl	80071e4 <MSC_BOT_SendCSW>
      break;
 800700e:	e002      	b.n	8007016 <MSC_BOT_DataIn+0x5a>

    default:
      break;
 8007010:	bf00      	nop
 8007012:	e000      	b.n	8007016 <MSC_BOT_DataIn+0x5a>
      break;
 8007014:	bf00      	nop
  }
}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	460b      	mov	r3, r1
 8007028:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007030:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	7a1b      	ldrb	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <MSC_BOT_DataOut+0x22>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d004      	beq.n	8007048 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800703e:	e015      	b.n	800706c <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f817 	bl	8007074 <MSC_BOT_CBW_Decode>
      break;
 8007046:	e011      	b.n	800706c <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8007054:	461a      	mov	r2, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f946 	bl	80072e8 <SCSI_ProcessCmd>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	da03      	bge.n	800706a <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007062:	2101      	movs	r1, #1
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f8bd 	bl	80071e4 <MSC_BOT_SendCSW>
      break;
 800706a:	bf00      	nop
  }
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800709c:	2101      	movs	r1, #1
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f006 f8b2 	bl	800d208 <USBD_LL_GetRxDataSize>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b1f      	cmp	r3, #31
 80070a8:	d114      	bne.n	80070d4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80070b0:	4a32      	ldr	r2, [pc, #200]	; (800717c <MSC_BOT_CBW_Decode+0x108>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10e      	bne.n	80070d4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f893 3219 	ldrb.w	r3, [r3, #537]	; 0x219
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d809      	bhi.n	80070d4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
      (hmsc->cbw.bLUN > 1U) ||
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 80070d0:	2b10      	cmp	r3, #16
 80070d2:	d90e      	bls.n	80070f2 <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80070da:	2320      	movs	r3, #32
 80070dc:	2205      	movs	r2, #5
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fc48 	bl	8007974 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2202      	movs	r2, #2
 80070e8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f8a6 	bl	800723c <MSC_BOT_Abort>
 80070f0:	e041      	b.n	8007176 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80070fe:	461a      	mov	r2, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8f1 	bl	80072e8 <SCSI_ProcessCmd>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	da0c      	bge.n	8007126 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	7a1b      	ldrb	r3, [r3, #8]
 8007110:	2b05      	cmp	r3, #5
 8007112:	d104      	bne.n	800711e <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007114:	2101      	movs	r1, #1
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f864 	bl	80071e4 <MSC_BOT_SendCSW>
 800711c:	e02b      	b.n	8007176 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f88c 	bl	800723c <MSC_BOT_Abort>
 8007124:	e027      	b.n	8007176 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	7a1b      	ldrb	r3, [r3, #8]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d022      	beq.n	8007174 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007132:	2b01      	cmp	r3, #1
 8007134:	d01e      	beq.n	8007174 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800713a:	2b03      	cmp	r3, #3
 800713c:	d01a      	beq.n	8007174 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	895b      	ldrh	r3, [r3, #10]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f103 010c 	add.w	r1, r3, #12
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	461a      	mov	r2, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f814 	bl	8007180 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007158:	e00d      	b.n	8007176 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	895b      	ldrh	r3, [r3, #10]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d104      	bne.n	800716c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007162:	2100      	movs	r1, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f83d 	bl	80071e4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800716a:	e004      	b.n	8007176 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f865 	bl	800723c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007172:	e000      	b.n	8007176 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 8007174:	bf00      	nop
    }
  }
}
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	43425355 	.word	0x43425355

08007180 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007194:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d204      	bcs.n	80071ac <MSC_BOT_SendData+0x2c>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	e000      	b.n	80071ae <MSC_BOT_SendData+0x2e>
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 80071b6:	88fb      	ldrh	r3, [r7, #6]
 80071b8:	1ad2      	subs	r2, r2, r3
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2204      	movs	r2, #4
 80071cc:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80071ce:	8a7b      	ldrh	r3, [r7, #18]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	2181      	movs	r1, #129	; 0x81
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f005 ffd1 	bl	800d17c <USBD_LL_Transmit>
}
 80071da:	bf00      	nop
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f6:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	4a0f      	ldr	r2, [pc, #60]	; (8007238 <MSC_BOT_SendCSW+0x54>)
 80071fc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
  hmsc->csw.bStatus = CSW_Status;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	f883 2238 	strb.w	r2, [r3, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 720b 	add.w	r2, r3, #556	; 0x22c
 8007214:	230d      	movs	r3, #13
 8007216:	2181      	movs	r1, #129	; 0x81
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f005 ffaf 	bl	800d17c <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007224:	231f      	movs	r3, #31
 8007226:	2101      	movs	r1, #1
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f005 ffca 	bl	800d1c2 <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 800722e:	bf00      	nop
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	53425355 	.word	0x53425355

0800723c <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724a:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
  if ((hmsc->cbw.bmFlags == 0U) &&
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007264:	2b00      	cmp	r3, #0
 8007266:	d103      	bne.n	8007270 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007268:	2101      	movs	r1, #1
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f005 fefd 	bl	800d06a <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007270:	2181      	movs	r1, #129	; 0x81
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f005 fef9 	bl	800d06a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	7a5b      	ldrb	r3, [r3, #9]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d107      	bne.n	8007290 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 7203 	add.w	r2, r3, #524	; 0x20c
 8007286:	231f      	movs	r3, #31
 8007288:	2101      	movs	r1, #1
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f005 ff99 	bl	800d1c2 <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072aa:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	7a5b      	ldrb	r3, [r3, #9]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d107      	bne.n	80072c4 <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80072b4:	2181      	movs	r1, #129	; 0x81
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f005 fed7 	bl	800d06a <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	725a      	strb	r2, [r3, #9]
 80072c2:	e00d      	b.n	80072e0 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80072c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da08      	bge.n	80072de <MSC_BOT_CplClrFeature+0x46>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	7a5b      	ldrb	r3, [r3, #9]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d004      	beq.n	80072de <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80072d4:	2101      	movs	r1, #1
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff ff84 	bl	80071e4 <MSC_BOT_SendCSW>
 80072dc:	e000      	b.n	80072e0 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 80072de:	bf00      	nop
  }
}
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	460b      	mov	r3, r1
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b5a      	cmp	r3, #90	; 0x5a
 80072fc:	f200 810e 	bhi.w	800751c <SCSI_ProcessCmd+0x234>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <SCSI_ProcessCmd+0x20>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007475 	.word	0x08007475
 800730c:	0800751d 	.word	0x0800751d
 8007310:	0800751d 	.word	0x0800751d
 8007314:	08007483 	.word	0x08007483
 8007318:	0800751d 	.word	0x0800751d
 800731c:	0800751d 	.word	0x0800751d
 8007320:	0800751d 	.word	0x0800751d
 8007324:	0800751d 	.word	0x0800751d
 8007328:	0800751d 	.word	0x0800751d
 800732c:	0800751d 	.word	0x0800751d
 8007330:	0800751d 	.word	0x0800751d
 8007334:	0800751d 	.word	0x0800751d
 8007338:	0800751d 	.word	0x0800751d
 800733c:	0800751d 	.word	0x0800751d
 8007340:	0800751d 	.word	0x0800751d
 8007344:	0800751d 	.word	0x0800751d
 8007348:	0800751d 	.word	0x0800751d
 800734c:	0800751d 	.word	0x0800751d
 8007350:	08007491 	.word	0x08007491
 8007354:	0800751d 	.word	0x0800751d
 8007358:	0800751d 	.word	0x0800751d
 800735c:	0800751d 	.word	0x0800751d
 8007360:	0800751d 	.word	0x0800751d
 8007364:	0800751d 	.word	0x0800751d
 8007368:	0800751d 	.word	0x0800751d
 800736c:	0800751d 	.word	0x0800751d
 8007370:	080074bb 	.word	0x080074bb
 8007374:	0800749f 	.word	0x0800749f
 8007378:	0800751d 	.word	0x0800751d
 800737c:	0800751d 	.word	0x0800751d
 8007380:	080074ad 	.word	0x080074ad
 8007384:	0800751d 	.word	0x0800751d
 8007388:	0800751d 	.word	0x0800751d
 800738c:	0800751d 	.word	0x0800751d
 8007390:	0800751d 	.word	0x0800751d
 8007394:	080074d7 	.word	0x080074d7
 8007398:	0800751d 	.word	0x0800751d
 800739c:	080074e5 	.word	0x080074e5
 80073a0:	0800751d 	.word	0x0800751d
 80073a4:	0800751d 	.word	0x0800751d
 80073a8:	080074f3 	.word	0x080074f3
 80073ac:	0800751d 	.word	0x0800751d
 80073b0:	08007501 	.word	0x08007501
 80073b4:	0800751d 	.word	0x0800751d
 80073b8:	0800751d 	.word	0x0800751d
 80073bc:	0800751d 	.word	0x0800751d
 80073c0:	0800751d 	.word	0x0800751d
 80073c4:	0800750f 	.word	0x0800750f
 80073c8:	0800751d 	.word	0x0800751d
 80073cc:	0800751d 	.word	0x0800751d
 80073d0:	0800751d 	.word	0x0800751d
 80073d4:	0800751d 	.word	0x0800751d
 80073d8:	0800751d 	.word	0x0800751d
 80073dc:	0800751d 	.word	0x0800751d
 80073e0:	0800751d 	.word	0x0800751d
 80073e4:	0800751d 	.word	0x0800751d
 80073e8:	0800751d 	.word	0x0800751d
 80073ec:	0800751d 	.word	0x0800751d
 80073f0:	0800751d 	.word	0x0800751d
 80073f4:	0800751d 	.word	0x0800751d
 80073f8:	0800751d 	.word	0x0800751d
 80073fc:	0800751d 	.word	0x0800751d
 8007400:	0800751d 	.word	0x0800751d
 8007404:	0800751d 	.word	0x0800751d
 8007408:	0800751d 	.word	0x0800751d
 800740c:	0800751d 	.word	0x0800751d
 8007410:	0800751d 	.word	0x0800751d
 8007414:	0800751d 	.word	0x0800751d
 8007418:	0800751d 	.word	0x0800751d
 800741c:	0800751d 	.word	0x0800751d
 8007420:	0800751d 	.word	0x0800751d
 8007424:	0800751d 	.word	0x0800751d
 8007428:	0800751d 	.word	0x0800751d
 800742c:	0800751d 	.word	0x0800751d
 8007430:	0800751d 	.word	0x0800751d
 8007434:	0800751d 	.word	0x0800751d
 8007438:	0800751d 	.word	0x0800751d
 800743c:	0800751d 	.word	0x0800751d
 8007440:	0800751d 	.word	0x0800751d
 8007444:	0800751d 	.word	0x0800751d
 8007448:	0800751d 	.word	0x0800751d
 800744c:	0800751d 	.word	0x0800751d
 8007450:	0800751d 	.word	0x0800751d
 8007454:	0800751d 	.word	0x0800751d
 8007458:	0800751d 	.word	0x0800751d
 800745c:	0800751d 	.word	0x0800751d
 8007460:	0800751d 	.word	0x0800751d
 8007464:	0800751d 	.word	0x0800751d
 8007468:	0800751d 	.word	0x0800751d
 800746c:	0800751d 	.word	0x0800751d
 8007470:	080074c9 	.word	0x080074c9
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	4619      	mov	r1, r3
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f85c 	bl	8007538 <SCSI_TestUnitReady>
      break;
 8007480:	e055      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fa09 	bl	80078a0 <SCSI_RequestSense>
      break;
 800748e:	e04e      	b.n	800752e <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	4619      	mov	r1, r3
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f888 	bl	80075ac <SCSI_Inquiry>
      break;
 800749c:	e047      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 800749e:	7afb      	ldrb	r3, [r7, #11]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	4619      	mov	r1, r3
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fa9e 	bl	80079e6 <SCSI_StartStopUnit>
      break;
 80074aa:	e040      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4619      	mov	r1, r3
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 fa97 	bl	80079e6 <SCSI_StartStopUnit>
      break;
 80074b8:	e039      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	4619      	mov	r1, r3
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 f99d 	bl	8007800 <SCSI_ModeSense6>
      break;
 80074c6:	e032      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4619      	mov	r1, r3
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f9be 	bl	8007850 <SCSI_ModeSense10>
      break;
 80074d4:	e02b      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80074d6:	7afb      	ldrb	r3, [r7, #11]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4619      	mov	r1, r3
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f92a 	bl	8007736 <SCSI_ReadFormatCapacity>
      break;
 80074e2:	e024      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4619      	mov	r1, r3
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 f8bc 	bl	8007668 <SCSI_ReadCapacity10>
      break;
 80074f0:	e01d      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 fa88 	bl	8007a0e <SCSI_Read10>
      break;
 80074fe:	e016      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 fb0d 	bl	8007b26 <SCSI_Write10>
      break;
 800750c:	e00f      	b.n	800752e <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 800750e:	7afb      	ldrb	r3, [r7, #11]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	4619      	mov	r1, r3
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fbb6 	bl	8007c86 <SCSI_Verify10>
      break;
 800751a:	e008      	b.n	800752e <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800751c:	7af9      	ldrb	r1, [r7, #11]
 800751e:	2320      	movs	r3, #32
 8007520:	2205      	movs	r2, #5
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fa26 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007528:	f04f 33ff 	mov.w	r3, #4294967295
 800752c:	e000      	b.n	8007530 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	460b      	mov	r3, r1
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800754c:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 800755e:	2320      	movs	r3, #32
 8007560:	2205      	movs	r2, #5
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fa06 	bl	8007974 <SCSI_SenseCode>

    return -1;
 8007568:	f04f 33ff 	mov.w	r3, #4294967295
 800756c:	e019      	b.n	80075a2 <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	7afa      	ldrb	r2, [r7, #11]
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007582:	7af9      	ldrb	r1, [r7, #11]
 8007584:	233a      	movs	r3, #58	; 0x3a
 8007586:	2202      	movs	r2, #2
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f9f3 	bl	8007974 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2205      	movs	r2, #5
 8007592:	721a      	strb	r2, [r3, #8]

    return -1;
 8007594:	f04f 33ff 	mov.w	r3, #4294967295
 8007598:	e003      	b.n	80075a2 <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2200      	movs	r2, #0
 800759e:	815a      	strh	r2, [r3, #10]

  return 0;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
	...

080075ac <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b089      	sub	sp, #36	; 0x24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	460b      	mov	r3, r1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c0:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3301      	adds	r3, #1
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d014      	beq.n	80075fa <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 80075d0:	2307      	movs	r3, #7
 80075d2:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	8bfa      	ldrh	r2, [r7, #30]
 80075d8:	815a      	strh	r2, [r3, #10]

    while (len)
 80075da:	e00a      	b.n	80075f2 <SCSI_Inquiry+0x46>
    {
      len--;
 80075dc:	8bfb      	ldrh	r3, [r7, #30]
 80075de:	3b01      	subs	r3, #1
 80075e0:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 80075e2:	8bfb      	ldrh	r3, [r7, #30]
 80075e4:	8bfa      	ldrh	r2, [r7, #30]
 80075e6:	491f      	ldr	r1, [pc, #124]	; (8007664 <SCSI_Inquiry+0xb8>)
 80075e8:	5c89      	ldrb	r1, [r1, r2]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	4413      	add	r3, r2
 80075ee:	460a      	mov	r2, r1
 80075f0:	731a      	strb	r2, [r3, #12]
    while (len)
 80075f2:	8bfb      	ldrh	r3, [r7, #30]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1f1      	bne.n	80075dc <SCSI_Inquiry+0x30>
 80075f8:	e02e      	b.n	8007658 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007600:	69d9      	ldr	r1, [r3, #28]
 8007602:	7afa      	ldrb	r2, [r7, #11]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3304      	adds	r3, #4
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	3305      	adds	r3, #5
 800761a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3304      	adds	r3, #4
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	8bfa      	ldrh	r2, [r7, #30]
 8007626:	429a      	cmp	r2, r3
 8007628:	d303      	bcc.n	8007632 <SCSI_Inquiry+0x86>
    {
      len = params[4];
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3304      	adds	r3, #4
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	8bfa      	ldrh	r2, [r7, #30]
 8007636:	815a      	strh	r2, [r3, #10]

    while (len)
 8007638:	e00b      	b.n	8007652 <SCSI_Inquiry+0xa6>
    {
      len--;
 800763a:	8bfb      	ldrh	r3, [r7, #30]
 800763c:	3b01      	subs	r3, #1
 800763e:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 8007640:	8bfb      	ldrh	r3, [r7, #30]
 8007642:	8bfa      	ldrh	r2, [r7, #30]
 8007644:	6979      	ldr	r1, [r7, #20]
 8007646:	440a      	add	r2, r1
 8007648:	7811      	ldrb	r1, [r2, #0]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	4413      	add	r3, r2
 800764e:	460a      	mov	r2, r1
 8007650:	731a      	strb	r2, [r3, #12]
    while (len)
 8007652:	8bfb      	ldrh	r3, [r7, #30]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f0      	bne.n	800763a <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3724      	adds	r7, #36	; 0x24
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr
 8007664:	0800d548 	.word	0x0800d548

08007668 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	460b      	mov	r3, r1
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800767c:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	f502 7118 	add.w	r1, r2, #608	; 0x260
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	f202 225e 	addw	r2, r2, #606	; 0x25e
 8007692:	7af8      	ldrb	r0, [r7, #11]
 8007694:	4798      	blx	r3
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800769c:	7af9      	ldrb	r1, [r7, #11]
 800769e:	233a      	movs	r3, #58	; 0x3a
 80076a0:	2202      	movs	r2, #2
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f966 	bl	8007974 <SCSI_SenseCode>
    return -1;
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ac:	e03f      	b.n	800772e <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80076b4:	3b01      	subs	r3, #1
 80076b6:	0e1b      	lsrs	r3, r3, #24
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80076c4:	3b01      	subs	r3, #1
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80076d4:	3b01      	subs	r3, #1
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 80076f4:	161b      	asrs	r3, r3, #24
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007702:	141b      	asrs	r3, r3, #16
 8007704:	b2da      	uxtb	r2, r3
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007710:	0a1b      	lsrs	r3, r3, #8
 8007712:	b29b      	uxth	r3, r3
 8007714:	b2da      	uxtb	r2, r3
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007720:	b2da      	uxtb	r2, r3
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2208      	movs	r2, #8
 800772a:	815a      	strh	r2, [r3, #10]
    return 0;
 800772c:	2300      	movs	r3, #0
  }
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b088      	sub	sp, #32
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	460b      	mov	r3, r1
 8007740:	607a      	str	r2, [r7, #4]
 8007742:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800774a:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 800774c:	2300      	movs	r3, #0
 800774e:	83fb      	strh	r3, [r7, #30]
 8007750:	e007      	b.n	8007762 <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007752:	8bfb      	ldrh	r3, [r7, #30]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4413      	add	r3, r2
 8007758:	2200      	movs	r2, #0
 800775a:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 800775c:	8bfb      	ldrh	r3, [r7, #30]
 800775e:	3301      	adds	r3, #1
 8007760:	83fb      	strh	r3, [r7, #30]
 8007762:	8bfb      	ldrh	r3, [r7, #30]
 8007764:	2b0b      	cmp	r3, #11
 8007766:	d9f4      	bls.n	8007752 <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f107 0216 	add.w	r2, r7, #22
 8007774:	f107 0110 	add.w	r1, r7, #16
 8007778:	7af8      	ldrb	r0, [r7, #11]
 800777a:	4798      	blx	r3
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d008      	beq.n	8007794 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007782:	7af9      	ldrb	r1, [r7, #11]
 8007784:	233a      	movs	r3, #58	; 0x3a
 8007786:	2202      	movs	r2, #2
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f8f3 	bl	8007974 <SCSI_SenseCode>
    return -1;
 800778e:	f04f 33ff 	mov.w	r3, #4294967295
 8007792:	e030      	b.n	80077f6 <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	2208      	movs	r2, #8
 8007798:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3b01      	subs	r3, #1
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	0c1b      	lsrs	r3, r3, #16
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	0a1b      	lsrs	r3, r3, #8
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	3b01      	subs	r3, #1
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2202      	movs	r2, #2
 80077ce:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80077d0:	8afb      	ldrh	r3, [r7, #22]
 80077d2:	141b      	asrs	r3, r3, #16
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80077da:	8afb      	ldrh	r3, [r7, #22]
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	b29b      	uxth	r3, r3
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 80077e6:	8afb      	ldrh	r3, [r7, #22]
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	220c      	movs	r2, #12
 80077f2:	815a      	strh	r2, [r3, #10]
    return 0;
 80077f4:	2300      	movs	r3, #0
  }
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	460b      	mov	r3, r1
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007814:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 8007816:	2308      	movs	r3, #8
 8007818:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	8afa      	ldrh	r2, [r7, #22]
 800781e:	815a      	strh	r2, [r3, #10]

  while (len)
 8007820:	e00a      	b.n	8007838 <SCSI_ModeSense6+0x38>
  {
    len--;
 8007822:	8afb      	ldrh	r3, [r7, #22]
 8007824:	3b01      	subs	r3, #1
 8007826:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8007828:	8afb      	ldrh	r3, [r7, #22]
 800782a:	8afa      	ldrh	r2, [r7, #22]
 800782c:	4907      	ldr	r1, [pc, #28]	; (800784c <SCSI_ModeSense6+0x4c>)
 800782e:	5c89      	ldrb	r1, [r1, r2]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4413      	add	r3, r2
 8007834:	460a      	mov	r2, r1
 8007836:	731a      	strb	r2, [r3, #12]
  while (len)
 8007838:	8afb      	ldrh	r3, [r7, #22]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f1      	bne.n	8007822 <SCSI_ModeSense6+0x22>
  }
  return 0;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	371c      	adds	r7, #28
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	0800d550 	.word	0x0800d550

08007850 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007850:	b480      	push	{r7}
 8007852:	b087      	sub	sp, #28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	460b      	mov	r3, r1
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 800785e:	2308      	movs	r3, #8
 8007860:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007868:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	8afa      	ldrh	r2, [r7, #22]
 800786e:	815a      	strh	r2, [r3, #10]

  while (len)
 8007870:	e00a      	b.n	8007888 <SCSI_ModeSense10+0x38>
  {
    len--;
 8007872:	8afb      	ldrh	r3, [r7, #22]
 8007874:	3b01      	subs	r3, #1
 8007876:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007878:	8afb      	ldrh	r3, [r7, #22]
 800787a:	8afa      	ldrh	r2, [r7, #22]
 800787c:	4907      	ldr	r1, [pc, #28]	; (800789c <SCSI_ModeSense10+0x4c>)
 800787e:	5c89      	ldrb	r1, [r1, r2]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	460a      	mov	r2, r1
 8007886:	731a      	strb	r2, [r3, #12]
  while (len)
 8007888:	8afb      	ldrh	r3, [r7, #22]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1f1      	bne.n	8007872 <SCSI_ModeSense10+0x22>
  }

  return 0;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	371c      	adds	r7, #28
 8007894:	46bd      	mov	sp, r7
 8007896:	bc80      	pop	{r7}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	0800d558 	.word	0x0800d558

080078a0 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	460b      	mov	r3, r1
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b4:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80078b6:	2300      	movs	r3, #0
 80078b8:	75fb      	strb	r3, [r7, #23]
 80078ba:	e007      	b.n	80078cc <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	3301      	adds	r3, #1
 80078ca:	75fb      	strb	r3, [r7, #23]
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	2b11      	cmp	r3, #17
 80078d0:	d9f4      	bls.n	80078bc <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2270      	movs	r2, #112	; 0x70
 80078d6:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	220c      	movs	r2, #12
 80078dc:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f893 225c 	ldrb.w	r2, [r3, #604]	; 0x25c
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d02e      	beq.n	800794c <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	3347      	adds	r3, #71	; 0x47
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	4413      	add	r3, r2
 80078fc:	791a      	ldrb	r2, [r3, #4]
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	3347      	adds	r3, #71	; 0x47
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4413      	add	r3, r2
 8007910:	7a5a      	ldrb	r2, [r3, #9]
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	3347      	adds	r3, #71	; 0x47
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	4413      	add	r3, r2
 8007924:	7a1a      	ldrb	r2, [r3, #8]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007930:	3301      	adds	r3, #1
 8007932:	b2da      	uxtb	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f893 325c 	ldrb.w	r3, [r3, #604]	; 0x25c
 8007940:	2b04      	cmp	r3, #4
 8007942:	d103      	bne.n	800794c <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 225c 	strb.w	r2, [r3, #604]	; 0x25c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	2212      	movs	r2, #18
 8007950:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3304      	adds	r3, #4
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b12      	cmp	r3, #18
 800795a:	d805      	bhi.n	8007968 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3304      	adds	r3, #4
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b29a      	uxth	r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	bc80      	pop	{r7}
 8007972:	4770      	bx	lr

08007974 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	4608      	mov	r0, r1
 800797e:	4611      	mov	r1, r2
 8007980:	461a      	mov	r2, r3
 8007982:	4603      	mov	r3, r0
 8007984:	70fb      	strb	r3, [r7, #3]
 8007986:	460b      	mov	r3, r1
 8007988:	70bb      	strb	r3, [r7, #2]
 800798a:	4613      	mov	r3, r2
 800798c:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007994:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	3347      	adds	r3, #71	; 0x47
 80079a0:	00db      	lsls	r3, r3, #3
 80079a2:	4413      	add	r3, r2
 80079a4:	78ba      	ldrb	r2, [r7, #2]
 80079a6:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	3347      	adds	r3, #71	; 0x47
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4413      	add	r3, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80079c0:	3301      	adds	r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d103      	bne.n	80079dc <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
  }
}
 80079dc:	bf00      	nop
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr

080079e6 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b087      	sub	sp, #28
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	460b      	mov	r3, r1
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fa:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2200      	movs	r2, #0
 8007a00:	815a      	strh	r2, [r3, #10]
  return 0;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	371c      	adds	r7, #28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr

08007a0e <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	60f8      	str	r0, [r7, #12]
 8007a16:	460b      	mov	r3, r1
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a22:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	7a1b      	ldrb	r3, [r3, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d16e      	bne.n	8007b0a <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007a32:	b25b      	sxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	db0a      	blt.n	8007a4e <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007a3e:	2320      	movs	r3, #32
 8007a40:	2205      	movs	r2, #5
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff ff96 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007a48:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4c:	e067      	b.n	8007b1e <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	7afa      	ldrb	r2, [r7, #11]
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007a62:	7af9      	ldrb	r1, [r7, #11]
 8007a64:	233a      	movs	r3, #58	; 0x3a
 8007a66:	2202      	movs	r2, #2
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f7ff ff83 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a72:	e054      	b.n	8007b1e <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3302      	adds	r3, #2
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3303      	adds	r3, #3
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a84:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007a8e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	3205      	adds	r2, #5
 8007a94:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007a96:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	021b      	lsls	r3, r3, #8
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	3208      	adds	r2, #8
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ac0:	7af9      	ldrb	r1, [r7, #11]
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 f912 	bl	8007cec <SCSI_CheckAddressRange>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da02      	bge.n	8007ad4 <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	e024      	b.n	8007b1e <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ae6:	6979      	ldr	r1, [r7, #20]
 8007ae8:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d00a      	beq.n	8007b0a <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007afa:	2320      	movs	r3, #32
 8007afc:	2205      	movs	r2, #5
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff ff38 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007b04:	f04f 33ff 	mov.w	r3, #4294967295
 8007b08:	e009      	b.n	8007b1e <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b10:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007b12:	7afb      	ldrb	r3, [r7, #11]
 8007b14:	4619      	mov	r1, r3
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f000 f90a 	bl	8007d30 <SCSI_ProcessRead>
 8007b1c:	4603      	mov	r3, r0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3718      	adds	r7, #24
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b086      	sub	sp, #24
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	460b      	mov	r3, r1
 8007b30:	607a      	str	r2, [r7, #4]
 8007b32:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	7a1b      	ldrb	r3, [r3, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f040 8096 	bne.w	8007c72 <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8007b4c:	b25b      	sxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	da0a      	bge.n	8007b68 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007b58:	2320      	movs	r3, #32
 8007b5a:	2205      	movs	r2, #5
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7ff ff09 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295
 8007b66:	e08a      	b.n	8007c7e <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	7afa      	ldrb	r2, [r7, #11]
 8007b72:	4610      	mov	r0, r2
 8007b74:	4798      	blx	r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b7c:	7af9      	ldrb	r1, [r7, #11]
 8007b7e:	233a      	movs	r3, #58	; 0x3a
 8007b80:	2202      	movs	r2, #2
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fef6 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	e077      	b.n	8007c7e <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	7afa      	ldrb	r2, [r7, #11]
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007ba2:	7af9      	ldrb	r1, [r7, #11]
 8007ba4:	2327      	movs	r3, #39	; 0x27
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff fee3 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007bae:	f04f 33ff 	mov.w	r3, #4294967295
 8007bb2:	e064      	b.n	8007c7e <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3302      	adds	r3, #2
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3303      	adds	r3, #3
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007bc4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007bce:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	3205      	adds	r2, #5
 8007bd4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007bd6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3307      	adds	r3, #7
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	3208      	adds	r2, #8
 8007bea:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007bec:	431a      	orrs	r2, r3
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c00:	7af9      	ldrb	r1, [r7, #11]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f872 	bl	8007cec <SCSI_CheckAddressRange>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da02      	bge.n	8007c14 <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c12:	e034      	b.n	8007c7e <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007c20:	fb02 f303 	mul.w	r3, r2, r3
 8007c24:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d00a      	beq.n	8007c48 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f893 1219 	ldrb.w	r1, [r3, #537]	; 0x219
 8007c38:	2320      	movs	r3, #32
 8007c3a:	2205      	movs	r2, #5
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fe99 	bl	8007974 <SCSI_SenseCode>
      return -1;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	e01a      	b.n	8007c7e <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c4e:	bf28      	it	cs
 8007c50:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007c54:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f103 020c 	add.w	r2, r3, #12
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2101      	movs	r1, #1
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f005 faaa 	bl	800d1c2 <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e005      	b.n	8007c7e <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	4619      	mov	r1, r3
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 f8ce 	bl	8007e18 <SCSI_ProcessWrite>
 8007c7c:	4603      	mov	r3, r0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b086      	sub	sp, #24
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c9a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007caa:	7af9      	ldrb	r1, [r7, #11]
 8007cac:	2324      	movs	r3, #36	; 0x24
 8007cae:	2205      	movs	r2, #5
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff fe5f 	bl	8007974 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cba:	e013      	b.n	8007ce4 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007cc8:	7af9      	ldrb	r1, [r7, #11]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 f80e 	bl	8007cec <SCSI_CheckAddressRange>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da02      	bge.n	8007cdc <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	e003      	b.n	8007ce4 <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	815a      	strh	r2, [r3, #10]
  return 0;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	607a      	str	r2, [r7, #4]
 8007cf6:	603b      	str	r3, [r7, #0]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d02:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	441a      	add	r2, r3
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d908      	bls.n	8007d26 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	2321      	movs	r3, #33	; 0x21
 8007d18:	2205      	movs	r2, #5
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7ff fe2a 	bl	8007974 <SCSI_SenseCode>
    return -1;
 8007d20:	f04f 33ff 	mov.w	r3, #4294967295
 8007d24:	e000      	b.n	8007d28 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007d30:	b590      	push	{r4, r7, lr}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007d50:	fb02 f303 	mul.w	r3, r2, r3
 8007d54:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d5c:	bf28      	it	cs
 8007d5e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007d62:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d6a:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007d7e:	4618      	mov	r0, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	78f8      	ldrb	r0, [r7, #3]
 8007d8a:	47a0      	blx	r4
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da08      	bge.n	8007da4 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007d92:	78f9      	ldrb	r1, [r7, #3]
 8007d94:	2311      	movs	r3, #17
 8007d96:	2204      	movs	r2, #4
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fdeb 	bl	8007974 <SCSI_SenseCode>
    return -1;
 8007d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007da2:	e035      	b.n	8007e10 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f103 020c 	add.w	r2, r3, #12
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	2181      	movs	r1, #129	; 0x81
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f005 f9e3 	bl	800d17c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dca:	441a      	add	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007dde:	4619      	mov	r1, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d102      	bne.n	8007e0e <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd90      	pop	{r4, r7, pc}

08007e18 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e44:	bf28      	it	cs
 8007e46:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007e4a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e52:	695c      	ldr	r4, [r3, #20]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f103 010c 	add.w	r1, r3, #12
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e66:	4618      	mov	r0, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	78f8      	ldrb	r0, [r7, #3]
 8007e72:	47a0      	blx	r4
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	da08      	bge.n	8007e8c <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8007e7a:	78f9      	ldrb	r1, [r7, #3]
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	2204      	movs	r2, #4
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fd77 	bl	8007974 <SCSI_SenseCode>

    return -1;
 8007e86:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8a:	e045      	b.n	8007f18 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007e98:	4619      	mov	r1, r3
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 325e 	ldrh.w	r3, [r3, #606]	; 0x25e
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8007ebc:	1ad2      	subs	r2, r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	1ad2      	subs	r2, r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

  if (hmsc->scsi_blk_len == 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d104      	bne.n	8007ee8 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007ede:	2100      	movs	r1, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7ff f97f 	bl	80071e4 <MSC_BOT_SendCSW>
 8007ee6:	e016      	b.n	8007f16 <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	f8b2 225e 	ldrh.w	r2, [r2, #606]	; 0x25e
 8007ef4:	fb02 f303 	mul.w	r3, r2, r3
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efc:	bf28      	it	cs
 8007efe:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007f02:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f103 020c 	add.w	r2, r3, #12
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2101      	movs	r1, #1
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f005 f956 	bl	800d1c2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}

08007f20 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007f30:	2302      	movs	r3, #2
 8007f32:	2203      	movs	r2, #3
 8007f34:	2181      	movs	r1, #129	; 0x81
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f005 f833 	bl	800cfa2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f42:	2302      	movs	r3, #2
 8007f44:	2203      	movs	r2, #3
 8007f46:	2101      	movs	r1, #1
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f005 f82a 	bl	800cfa2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007f56:	2018      	movs	r0, #24
 8007f58:	f005 f96a 	bl	800d230 <USBD_static_malloc>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d102      	bne.n	8007f74 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]
 8007f72:	e011      	b.n	8007f98 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f7a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	2302      	movs	r3, #2
 8007f90:	2101      	movs	r1, #1
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f005 f915 	bl	800d1c2 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	460b      	mov	r3, r1
 8007fac:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007fae:	2181      	movs	r1, #129	; 0x81
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f005 f81c 	bl	800cfee <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f005 f815 	bl	800cfee <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f005 f92e 	bl	800d248 <USBD_static_free>
    pdev->pClassData = NULL;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800802a:	2b00      	cmp	r3, #0
 800802c:	d051      	beq.n	80080d2 <USBD_CUSTOM_HID_Setup+0xd2>
 800802e:	2b20      	cmp	r3, #32
 8008030:	f040 80d8 	bne.w	80081e4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	785b      	ldrb	r3, [r3, #1]
 8008038:	3b02      	subs	r3, #2
 800803a:	2b09      	cmp	r3, #9
 800803c:	d841      	bhi.n	80080c2 <USBD_CUSTOM_HID_Setup+0xc2>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <USBD_CUSTOM_HID_Setup+0x44>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	0800809d 	.word	0x0800809d
 8008048:	0800807b 	.word	0x0800807b
 800804c:	080080c3 	.word	0x080080c3
 8008050:	080080c3 	.word	0x080080c3
 8008054:	080080c3 	.word	0x080080c3
 8008058:	080080c3 	.word	0x080080c3
 800805c:	080080c3 	.word	0x080080c3
 8008060:	080080ad 	.word	0x080080ad
 8008064:	0800808b 	.word	0x0800808b
 8008068:	0800806d 	.word	0x0800806d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	885b      	ldrh	r3, [r3, #2]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	461a      	mov	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	605a      	str	r2, [r3, #4]
          break;
 8008078:	e02a      	b.n	80080d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	3304      	adds	r3, #4
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f001 f98e 	bl	80093a4 <USBD_CtlSendData>
          break;
 8008088:	e022      	b.n	80080d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	0a1b      	lsrs	r3, r3, #8
 8008090:	b29b      	uxth	r3, r3
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	609a      	str	r2, [r3, #8]
          break;
 800809a:	e019      	b.n	80080d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	3308      	adds	r3, #8
 80080a0:	2201      	movs	r2, #1
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 f97d 	bl	80093a4 <USBD_CtlSendData>
          break;
 80080aa:	e011      	b.n	80080d0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2201      	movs	r2, #1
 80080b0:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80080b2:	6939      	ldr	r1, [r7, #16]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	461a      	mov	r2, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f001 f9a0 	bl	8009400 <USBD_CtlPrepareRx>
          break;
 80080c0:	e006      	b.n	80080d0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 f903 	bl	80092d0 <USBD_CtlError>
          ret = USBD_FAIL;
 80080ca:	2302      	movs	r3, #2
 80080cc:	75fb      	strb	r3, [r7, #23]
          break;
 80080ce:	bf00      	nop
      }
      break;
 80080d0:	e08f      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	2b0b      	cmp	r3, #11
 80080d8:	d87c      	bhi.n	80081d4 <USBD_CUSTOM_HID_Setup+0x1d4>
 80080da:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <USBD_CUSTOM_HID_Setup+0xe0>)
 80080dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e0:	08008111 	.word	0x08008111
 80080e4:	080081d5 	.word	0x080081d5
 80080e8:	080081d5 	.word	0x080081d5
 80080ec:	080081d5 	.word	0x080081d5
 80080f0:	080081d5 	.word	0x080081d5
 80080f4:	080081d5 	.word	0x080081d5
 80080f8:	08008139 	.word	0x08008139
 80080fc:	080081d5 	.word	0x080081d5
 8008100:	080081d5 	.word	0x080081d5
 8008104:	080081d5 	.word	0x080081d5
 8008108:	08008187 	.word	0x08008187
 800810c:	080081af 	.word	0x080081af
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008116:	2b03      	cmp	r3, #3
 8008118:	d107      	bne.n	800812a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800811a:	f107 030e 	add.w	r3, r7, #14
 800811e:	2202      	movs	r2, #2
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 f93e 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008128:	e05b      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f8cf 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008132:	2302      	movs	r3, #2
 8008134:	75fb      	strb	r3, [r7, #23]
          break;
 8008136:	e054      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	885b      	ldrh	r3, [r3, #2]
 800813c:	0a1b      	lsrs	r3, r3, #8
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b22      	cmp	r3, #34	; 0x22
 8008142:	d10b      	bne.n	800815c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	88db      	ldrh	r3, [r3, #6]
 8008148:	2b5f      	cmp	r3, #95	; 0x5f
 800814a:	bf28      	it	cs
 800814c:	235f      	movcs	r3, #95	; 0x5f
 800814e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	e00d      	b.n	8008178 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	885b      	ldrh	r3, [r3, #2]
 8008160:	0a1b      	lsrs	r3, r3, #8
 8008162:	b29b      	uxth	r3, r3
 8008164:	2b21      	cmp	r3, #33	; 0x21
 8008166:	d107      	bne.n	8008178 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008168:	4b24      	ldr	r3, [pc, #144]	; (80081fc <USBD_CUSTOM_HID_Setup+0x1fc>)
 800816a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	88db      	ldrh	r3, [r3, #6]
 8008170:	2b09      	cmp	r3, #9
 8008172:	bf28      	it	cs
 8008174:	2309      	movcs	r3, #9
 8008176:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008178:	8bfb      	ldrh	r3, [r7, #30]
 800817a:	461a      	mov	r2, r3
 800817c:	69b9      	ldr	r1, [r7, #24]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f910 	bl	80093a4 <USBD_CtlSendData>
          break;
 8008184:	e02d      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818c:	2b03      	cmp	r3, #3
 800818e:	d107      	bne.n	80081a0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	330c      	adds	r3, #12
 8008194:	2201      	movs	r2, #1
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 f903 	bl	80093a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800819e:	e020      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f001 f894 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081a8:	2302      	movs	r3, #2
 80081aa:	75fb      	strb	r3, [r7, #23]
          break;
 80081ac:	e019      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d106      	bne.n	80081c6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081c4:	e00d      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f881 	bl	80092d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80081ce:	2302      	movs	r3, #2
 80081d0:	75fb      	strb	r3, [r7, #23]
          break;
 80081d2:	e006      	b.n	80081e2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 f87a 	bl	80092d0 <USBD_CtlError>
          ret = USBD_FAIL;
 80081dc:	2302      	movs	r3, #2
 80081de:	75fb      	strb	r3, [r7, #23]
          break;
 80081e0:	bf00      	nop
      }
      break;
 80081e2:	e006      	b.n	80081f2 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 f872 	bl	80092d0 <USBD_CtlError>
      ret = USBD_FAIL;
 80081ec:	2302      	movs	r3, #2
 80081ee:	75fb      	strb	r3, [r7, #23]
      break;
 80081f0:	bf00      	nop
  }
  return ret;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200001a8 	.word	0x200001a8

08008200 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	2b03      	cmp	r3, #3
 800821e:	d10f      	bne.n	8008240 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	7d1b      	ldrb	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d109      	bne.n	800823c <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2201      	movs	r2, #1
 800822c:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800822e:	88fb      	ldrh	r3, [r7, #6]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	2181      	movs	r1, #129	; 0x81
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f004 ffa1 	bl	800d17c <USBD_LL_Transmit>
 800823a:	e001      	b.n	8008240 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 800823c:	2301      	movs	r3, #1
 800823e:	e000      	b.n	8008242 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2229      	movs	r2, #41	; 0x29
 8008258:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800825a:	4b03      	ldr	r3, [pc, #12]	; (8008268 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	bc80      	pop	{r7}
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	20000124 	.word	0x20000124

0800826c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2229      	movs	r2, #41	; 0x29
 8008278:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800827a:	4b03      	ldr	r3, [pc, #12]	; (8008288 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	20000150 	.word	0x20000150

0800828c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2229      	movs	r2, #41	; 0x29
 8008298:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800829a:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800829c:	4618      	mov	r0, r3
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	2000017c 	.word	0x2000017c

080082ac <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082be:	2200      	movs	r2, #0
 80082c0:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e0:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	7810      	ldrb	r0, [r2, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	7852      	ldrb	r2, [r2, #1]
 80082f2:	4611      	mov	r1, r2
 80082f4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	2302      	movs	r3, #2
 80082fa:	2101      	movs	r1, #1
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f004 ff60 	bl	800d1c2 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d10c      	bne.n	800833e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	7810      	ldrb	r0, [r2, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	7852      	ldrb	r2, [r2, #1]
 8008334:	4611      	mov	r1, r2
 8008336:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	220a      	movs	r2, #10
 8008354:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008356:	4b03      	ldr	r3, [pc, #12]	; (8008364 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	200001b4 	.word	0x200001b4

08008368 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008372:	2302      	movs	r3, #2
 8008374:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr

08008394 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	4613      	mov	r3, r2
 80083a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083a8:	2302      	movs	r3, #2
 80083aa:	e01a      	b.n	80083e2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	79fa      	ldrb	r2, [r7, #7]
 80083d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f004 fd76 	bl	800cecc <USBD_LL_Init>

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b085      	sub	sp, #20
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d006      	beq.n	800840c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	73fb      	strb	r3, [r7, #15]
 800840a:	e001      	b.n	8008410 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800840c:	2302      	movs	r3, #2
 800840e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr

0800841c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f004 fda1 	bl	800cf6c <USBD_LL_Start>

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008454:	2302      	movs	r3, #2
 8008456:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00c      	beq.n	800847c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	78fa      	ldrb	r2, [r7, #3]
 800846c:	4611      	mov	r1, r2
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	4611      	mov	r1, r2
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3

  return USBD_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084bc:	6839      	ldr	r1, [r7, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 feca 	bl	8009258 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80084e0:	f003 031f 	and.w	r3, r3, #31
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d00c      	beq.n	8008502 <USBD_LL_SetupStage+0x56>
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d302      	bcc.n	80084f2 <USBD_LL_SetupStage+0x46>
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d010      	beq.n	8008512 <USBD_LL_SetupStage+0x66>
 80084f0:	e017      	b.n	8008522 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f9ca 	bl	8008894 <USBD_StdDevReq>
      break;
 8008500:	e01a      	b.n	8008538 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008508:	4619      	mov	r1, r3
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fa2c 	bl	8008968 <USBD_StdItfReq>
      break;
 8008510:	e012      	b.n	8008538 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008518:	4619      	mov	r1, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f000 fa6a 	bl	80089f4 <USBD_StdEPReq>
      break;
 8008520:	e00a      	b.n	8008538 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800852c:	b2db      	uxtb	r3, r3
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f004 fd9a 	bl	800d06a <USBD_LL_StallEP>
      break;
 8008536:	bf00      	nop
  }

  return USBD_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b086      	sub	sp, #24
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	460b      	mov	r3, r1
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d14b      	bne.n	80085ee <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800855c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008564:	2b03      	cmp	r3, #3
 8008566:	d134      	bne.n	80085d2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	429a      	cmp	r2, r3
 8008572:	d919      	bls.n	80085a8 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	1ad2      	subs	r2, r2, r3
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800858a:	429a      	cmp	r2, r3
 800858c:	d203      	bcs.n	8008596 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008592:	b29b      	uxth	r3, r3
 8008594:	e002      	b.n	800859c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 ff4b 	bl	800943c <USBD_CtlContinueRx>
 80085a6:	e038      	b.n	800861a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d105      	bne.n	80085ca <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 ff48 	bl	8009460 <USBD_CtlSendStatus>
 80085d0:	e023      	b.n	800861a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085d8:	2b05      	cmp	r3, #5
 80085da:	d11e      	bne.n	800861a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80085e4:	2100      	movs	r1, #0
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f004 fd3f 	bl	800d06a <USBD_LL_StallEP>
 80085ec:	e015      	b.n	800861a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00d      	beq.n	8008616 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008600:	2b03      	cmp	r3, #3
 8008602:	d108      	bne.n	8008616 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	7afa      	ldrb	r2, [r7, #11]
 800860e:	4611      	mov	r1, r2
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	4798      	blx	r3
 8008614:	e001      	b.n	800861a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008616:	2302      	movs	r3, #2
 8008618:	e000      	b.n	800861c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	460b      	mov	r3, r1
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d17f      	bne.n	8008738 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3314      	adds	r3, #20
 800863c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008644:	2b02      	cmp	r3, #2
 8008646:	d15c      	bne.n	8008702 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	429a      	cmp	r2, r3
 8008652:	d915      	bls.n	8008680 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	1ad2      	subs	r2, r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	b29b      	uxth	r3, r3
 8008668:	461a      	mov	r2, r3
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 feb5 	bl	80093dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008672:	2300      	movs	r3, #0
 8008674:	2200      	movs	r2, #0
 8008676:	2100      	movs	r1, #0
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f004 fda2 	bl	800d1c2 <USBD_LL_PrepareReceive>
 800867e:	e04e      	b.n	800871e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	6912      	ldr	r2, [r2, #16]
 8008688:	fbb3 f1f2 	udiv	r1, r3, r2
 800868c:	fb02 f201 	mul.w	r2, r2, r1
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d11c      	bne.n	80086d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800869e:	429a      	cmp	r2, r3
 80086a0:	d316      	bcc.n	80086d0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d20f      	bcs.n	80086d0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086b0:	2200      	movs	r2, #0
 80086b2:	2100      	movs	r1, #0
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f000 fe91 	bl	80093dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086c2:	2300      	movs	r3, #0
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f004 fd7a 	bl	800d1c2 <USBD_LL_PrepareReceive>
 80086ce:	e026      	b.n	800871e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d105      	bne.n	80086f2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f004 fcb8 	bl	800d06a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fec3 	bl	8009486 <USBD_CtlReceiveStatus>
 8008700:	e00d      	b.n	800871e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008708:	2b04      	cmp	r3, #4
 800870a:	d004      	beq.n	8008716 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008716:	2180      	movs	r1, #128	; 0x80
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f004 fca6 	bl	800d06a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008724:	2b01      	cmp	r3, #1
 8008726:	d11d      	bne.n	8008764 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff fe83 	bl	8008434 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008736:	e015      	b.n	8008764 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00d      	beq.n	8008760 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800874a:	2b03      	cmp	r3, #3
 800874c:	d108      	bne.n	8008760 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	7afa      	ldrb	r2, [r7, #11]
 8008758:	4611      	mov	r1, r2
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	4798      	blx	r3
 800875e:	e001      	b.n	8008764 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008760:	2302      	movs	r3, #2
 8008762:	e000      	b.n	8008766 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008776:	2340      	movs	r3, #64	; 0x40
 8008778:	2200      	movs	r2, #0
 800877a:	2100      	movs	r1, #0
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f004 fc10 	bl	800cfa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2240      	movs	r2, #64	; 0x40
 800878e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	2200      	movs	r2, #0
 8008796:	2180      	movs	r1, #128	; 0x80
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f004 fc02 	bl	800cfa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2240      	movs	r2, #64	; 0x40
 80087a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6852      	ldr	r2, [r2, #4]
 80087de:	b2d2      	uxtb	r2, r2
 80087e0:	4611      	mov	r1, r2
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
  }

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	78fa      	ldrb	r2, [r7, #3]
 8008800:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr

0800880e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2204      	movs	r2, #4
 8008826:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr

08008836 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008844:	2b04      	cmp	r3, #4
 8008846:	d105      	bne.n	8008854 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800886e:	2b03      	cmp	r3, #3
 8008870:	d10b      	bne.n	800888a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d004      	beq.n	80088b8 <USBD_StdDevReq+0x24>
 80088ae:	2b40      	cmp	r3, #64	; 0x40
 80088b0:	d002      	beq.n	80088b8 <USBD_StdDevReq+0x24>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <USBD_StdDevReq+0x34>
 80088b6:	e04c      	b.n	8008952 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
      break;
 80088c6:	e049      	b.n	800895c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d83a      	bhi.n	8008946 <USBD_StdDevReq+0xb2>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <USBD_StdDevReq+0x44>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	08008929 	.word	0x08008929
 80088dc:	0800893d 	.word	0x0800893d
 80088e0:	08008947 	.word	0x08008947
 80088e4:	08008933 	.word	0x08008933
 80088e8:	08008947 	.word	0x08008947
 80088ec:	0800890b 	.word	0x0800890b
 80088f0:	08008901 	.word	0x08008901
 80088f4:	08008947 	.word	0x08008947
 80088f8:	0800891f 	.word	0x0800891f
 80088fc:	08008915 	.word	0x08008915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f9d4 	bl	8008cb0 <USBD_GetDescriptor>
          break;
 8008908:	e022      	b.n	8008950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb37 	bl	8008f80 <USBD_SetAddress>
          break;
 8008912:	e01d      	b.n	8008950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fb74 	bl	8009004 <USBD_SetConfig>
          break;
 800891c:	e018      	b.n	8008950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fbfd 	bl	8009120 <USBD_GetConfig>
          break;
 8008926:	e013      	b.n	8008950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008928:	6839      	ldr	r1, [r7, #0]
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc2c 	bl	8009188 <USBD_GetStatus>
          break;
 8008930:	e00e      	b.n	8008950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008932:	6839      	ldr	r1, [r7, #0]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fc5a 	bl	80091ee <USBD_SetFeature>
          break;
 800893a:	e009      	b.n	8008950 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc69 	bl	8009216 <USBD_ClrFeature>
          break;
 8008944:	e004      	b.n	8008950 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fcc1 	bl	80092d0 <USBD_CtlError>
          break;
 800894e:	bf00      	nop
      }
      break;
 8008950:	e004      	b.n	800895c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fcbb 	bl	80092d0 <USBD_CtlError>
      break;
 800895a:	bf00      	nop
  }

  return ret;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop

08008968 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800897e:	2b20      	cmp	r3, #32
 8008980:	d003      	beq.n	800898a <USBD_StdItfReq+0x22>
 8008982:	2b40      	cmp	r3, #64	; 0x40
 8008984:	d001      	beq.n	800898a <USBD_StdItfReq+0x22>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d12a      	bne.n	80089e0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008990:	3b01      	subs	r3, #1
 8008992:	2b02      	cmp	r3, #2
 8008994:	d81d      	bhi.n	80089d2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	889b      	ldrh	r3, [r3, #4]
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d813      	bhi.n	80089c8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	4798      	blx	r3
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	88db      	ldrh	r3, [r3, #6]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d110      	bne.n	80089dc <USBD_StdItfReq+0x74>
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10d      	bne.n	80089dc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fd4d 	bl	8009460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80089c6:	e009      	b.n	80089dc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc80 	bl	80092d0 <USBD_CtlError>
          break;
 80089d0:	e004      	b.n	80089dc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc7b 	bl	80092d0 <USBD_CtlError>
          break;
 80089da:	e000      	b.n	80089de <USBD_StdItfReq+0x76>
          break;
 80089dc:	bf00      	nop
      }
      break;
 80089de:	e004      	b.n	80089ea <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80089e0:	6839      	ldr	r1, [r7, #0]
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fc74 	bl	80092d0 <USBD_CtlError>
      break;
 80089e8:	bf00      	nop
  }

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	889b      	ldrh	r3, [r3, #4]
 8008a06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a10:	2b20      	cmp	r3, #32
 8008a12:	d004      	beq.n	8008a1e <USBD_StdEPReq+0x2a>
 8008a14:	2b40      	cmp	r3, #64	; 0x40
 8008a16:	d002      	beq.n	8008a1e <USBD_StdEPReq+0x2a>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <USBD_StdEPReq+0x3a>
 8008a1c:	e13d      	b.n	8008c9a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
      break;
 8008a2c:	e13a      	b.n	8008ca4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	d10a      	bne.n	8008a50 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	4798      	blx	r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	e12a      	b.n	8008ca6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	785b      	ldrb	r3, [r3, #1]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d03e      	beq.n	8008ad6 <USBD_StdEPReq+0xe2>
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d002      	beq.n	8008a62 <USBD_StdEPReq+0x6e>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d070      	beq.n	8008b42 <USBD_StdEPReq+0x14e>
 8008a60:	e115      	b.n	8008c8e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d002      	beq.n	8008a72 <USBD_StdEPReq+0x7e>
 8008a6c:	2b03      	cmp	r3, #3
 8008a6e:	d015      	beq.n	8008a9c <USBD_StdEPReq+0xa8>
 8008a70:	e02b      	b.n	8008aca <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00c      	beq.n	8008a92 <USBD_StdEPReq+0x9e>
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d009      	beq.n	8008a92 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f004 faf1 	bl	800d06a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008a88:	2180      	movs	r1, #128	; 0x80
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f004 faed 	bl	800d06a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a90:	e020      	b.n	8008ad4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc1b 	bl	80092d0 <USBD_CtlError>
              break;
 8008a9a:	e01b      	b.n	8008ad4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	885b      	ldrh	r3, [r3, #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10e      	bne.n	8008ac2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008aa4:	7bbb      	ldrb	r3, [r7, #14]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <USBD_StdEPReq+0xce>
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b80      	cmp	r3, #128	; 0x80
 8008aae:	d008      	beq.n	8008ac2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	88db      	ldrh	r3, [r3, #6]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ab8:	7bbb      	ldrb	r3, [r7, #14]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f004 fad4 	bl	800d06a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 fccc 	bl	8009460 <USBD_CtlSendStatus>

              break;
 8008ac8:	e004      	b.n	8008ad4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8008aca:	6839      	ldr	r1, [r7, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fbff 	bl	80092d0 <USBD_CtlError>
              break;
 8008ad2:	bf00      	nop
          }
          break;
 8008ad4:	e0e0      	b.n	8008c98 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d002      	beq.n	8008ae6 <USBD_StdEPReq+0xf2>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d015      	beq.n	8008b10 <USBD_StdEPReq+0x11c>
 8008ae4:	e026      	b.n	8008b34 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00c      	beq.n	8008b06 <USBD_StdEPReq+0x112>
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b80      	cmp	r3, #128	; 0x80
 8008af0:	d009      	beq.n	8008b06 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f004 fab7 	bl	800d06a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008afc:	2180      	movs	r1, #128	; 0x80
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f004 fab3 	bl	800d06a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b04:	e01c      	b.n	8008b40 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fbe1 	bl	80092d0 <USBD_CtlError>
              break;
 8008b0e:	e017      	b.n	8008b40 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	885b      	ldrh	r3, [r3, #2]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d112      	bne.n	8008b3e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b18:	7bbb      	ldrb	r3, [r7, #14]
 8008b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f004 fabe 	bl	800d0a8 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fc97 	bl	8009460 <USBD_CtlSendStatus>
              }
              break;
 8008b32:	e004      	b.n	8008b3e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fbca 	bl	80092d0 <USBD_CtlError>
              break;
 8008b3c:	e000      	b.n	8008b40 <USBD_StdEPReq+0x14c>
              break;
 8008b3e:	bf00      	nop
          }
          break;
 8008b40:	e0aa      	b.n	8008c98 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d002      	beq.n	8008b52 <USBD_StdEPReq+0x15e>
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d032      	beq.n	8008bb6 <USBD_StdEPReq+0x1c2>
 8008b50:	e097      	b.n	8008c82 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <USBD_StdEPReq+0x174>
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b80      	cmp	r3, #128	; 0x80
 8008b5c:	d004      	beq.n	8008b68 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbb5 	bl	80092d0 <USBD_CtlError>
                break;
 8008b66:	e091      	b.n	8008c8c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da0b      	bge.n	8008b88 <USBD_StdEPReq+0x194>
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b76:	4613      	mov	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	3310      	adds	r3, #16
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	e00b      	b.n	8008ba0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2202      	movs	r2, #2
 8008bac:	4619      	mov	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fbf8 	bl	80093a4 <USBD_CtlSendData>
              break;
 8008bb4:	e06a      	b.n	8008c8c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da11      	bge.n	8008be2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	f003 020f 	and.w	r2, r3, #15
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	3318      	adds	r3, #24
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d117      	bne.n	8008c08 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fb78 	bl	80092d0 <USBD_CtlError>
                  break;
 8008be0:	e054      	b.n	8008c8c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	f003 020f 	and.w	r2, r3, #15
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d104      	bne.n	8008c08 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fb65 	bl	80092d0 <USBD_CtlError>
                  break;
 8008c06:	e041      	b.n	8008c8c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	da0b      	bge.n	8008c28 <USBD_StdEPReq+0x234>
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c16:	4613      	mov	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	3310      	adds	r3, #16
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	3304      	adds	r3, #4
 8008c26:	e00b      	b.n	8008c40 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c28:	7bbb      	ldrb	r3, [r7, #14]
 8008c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	3304      	adds	r3, #4
 8008c40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <USBD_StdEPReq+0x25a>
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b80      	cmp	r3, #128	; 0x80
 8008c4c:	d103      	bne.n	8008c56 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	e00e      	b.n	8008c74 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f004 fa43 	bl	800d0e6 <USBD_LL_IsStallEP>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	e002      	b.n	8008c74 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2202      	movs	r2, #2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fb92 	bl	80093a4 <USBD_CtlSendData>
              break;
 8008c80:	e004      	b.n	8008c8c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fb23 	bl	80092d0 <USBD_CtlError>
              break;
 8008c8a:	bf00      	nop
          }
          break;
 8008c8c:	e004      	b.n	8008c98 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fb1d 	bl	80092d0 <USBD_CtlError>
          break;
 8008c96:	bf00      	nop
      }
      break;
 8008c98:	e004      	b.n	8008ca4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fb17 	bl	80092d0 <USBD_CtlError>
      break;
 8008ca2:	bf00      	nop
  }

  return ret;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	885b      	ldrh	r3, [r3, #2]
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	2b06      	cmp	r3, #6
 8008cd2:	f200 8128 	bhi.w	8008f26 <USBD_GetDescriptor+0x276>
 8008cd6:	a201      	add	r2, pc, #4	; (adr r2, 8008cdc <USBD_GetDescriptor+0x2c>)
 8008cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d51 	.word	0x08008d51
 8008ce8:	08008f27 	.word	0x08008f27
 8008cec:	08008f27 	.word	0x08008f27
 8008cf0:	08008ec7 	.word	0x08008ec7
 8008cf4:	08008ef3 	.word	0x08008ef3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	7c12      	ldrb	r2, [r2, #16]
 8008d04:	f107 0108 	add.w	r1, r7, #8
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4798      	blx	r3
 8008d0c:	60f8      	str	r0, [r7, #12]
      break;
 8008d0e:	e112      	b.n	8008f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	7c1b      	ldrb	r3, [r3, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10d      	bne.n	8008d34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f107 0208 	add.w	r2, r7, #8
 8008d24:	4610      	mov	r0, r2
 8008d26:	4798      	blx	r3
 8008d28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	2202      	movs	r2, #2
 8008d30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d32:	e100      	b.n	8008f36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	f107 0208 	add.w	r2, r7, #8
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
 8008d44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	701a      	strb	r2, [r3, #0]
      break;
 8008d4e:	e0f2      	b.n	8008f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	885b      	ldrh	r3, [r3, #2]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	f200 80ac 	bhi.w	8008eb4 <USBD_GetDescriptor+0x204>
 8008d5c:	a201      	add	r2, pc, #4	; (adr r2, 8008d64 <USBD_GetDescriptor+0xb4>)
 8008d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d62:	bf00      	nop
 8008d64:	08008d7d 	.word	0x08008d7d
 8008d68:	08008db1 	.word	0x08008db1
 8008d6c:	08008de5 	.word	0x08008de5
 8008d70:	08008e19 	.word	0x08008e19
 8008d74:	08008e4d 	.word	0x08008e4d
 8008d78:	08008e81 	.word	0x08008e81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7c12      	ldrb	r2, [r2, #16]
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d9e:	e091      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fa94 	bl	80092d0 <USBD_CtlError>
            err++;
 8008da8:	7afb      	ldrb	r3, [r7, #11]
 8008daa:	3301      	adds	r3, #1
 8008dac:	72fb      	strb	r3, [r7, #11]
          break;
 8008dae:	e089      	b.n	8008ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d00b      	beq.n	8008dd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	7c12      	ldrb	r2, [r2, #16]
 8008dc8:	f107 0108 	add.w	r1, r7, #8
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
 8008dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd2:	e077      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fa7a 	bl	80092d0 <USBD_CtlError>
            err++;
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	3301      	adds	r3, #1
 8008de0:	72fb      	strb	r3, [r7, #11]
          break;
 8008de2:	e06f      	b.n	8008ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	7c12      	ldrb	r2, [r2, #16]
 8008dfc:	f107 0108 	add.w	r1, r7, #8
 8008e00:	4610      	mov	r0, r2
 8008e02:	4798      	blx	r3
 8008e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e06:	e05d      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e08:	6839      	ldr	r1, [r7, #0]
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fa60 	bl	80092d0 <USBD_CtlError>
            err++;
 8008e10:	7afb      	ldrb	r3, [r7, #11]
 8008e12:	3301      	adds	r3, #1
 8008e14:	72fb      	strb	r3, [r7, #11]
          break;
 8008e16:	e055      	b.n	8008ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	7c12      	ldrb	r2, [r2, #16]
 8008e30:	f107 0108 	add.w	r1, r7, #8
 8008e34:	4610      	mov	r0, r2
 8008e36:	4798      	blx	r3
 8008e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e3a:	e043      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa46 	bl	80092d0 <USBD_CtlError>
            err++;
 8008e44:	7afb      	ldrb	r3, [r7, #11]
 8008e46:	3301      	adds	r3, #1
 8008e48:	72fb      	strb	r3, [r7, #11]
          break;
 8008e4a:	e03b      	b.n	8008ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	7c12      	ldrb	r2, [r2, #16]
 8008e64:	f107 0108 	add.w	r1, r7, #8
 8008e68:	4610      	mov	r0, r2
 8008e6a:	4798      	blx	r3
 8008e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e6e:	e029      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fa2c 	bl	80092d0 <USBD_CtlError>
            err++;
 8008e78:	7afb      	ldrb	r3, [r7, #11]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e7e:	e021      	b.n	8008ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00b      	beq.n	8008ea4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7c12      	ldrb	r2, [r2, #16]
 8008e98:	f107 0108 	add.w	r1, r7, #8
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ea2:	e00f      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa12 	bl	80092d0 <USBD_CtlError>
            err++;
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	3301      	adds	r3, #1
 8008eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008eb2:	e007      	b.n	8008ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa0a 	bl	80092d0 <USBD_CtlError>
          err++;
 8008ebc:	7afb      	ldrb	r3, [r7, #11]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008ec2:	e038      	b.n	8008f36 <USBD_GetDescriptor+0x286>
 8008ec4:	e037      	b.n	8008f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7c1b      	ldrb	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed6:	f107 0208 	add.w	r2, r7, #8
 8008eda:	4610      	mov	r0, r2
 8008edc:	4798      	blx	r3
 8008ede:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee0:	e029      	b.n	8008f36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 f9f3 	bl	80092d0 <USBD_CtlError>
        err++;
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	3301      	adds	r3, #1
 8008eee:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef0:	e021      	b.n	8008f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7c1b      	ldrb	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10d      	bne.n	8008f16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	f107 0208 	add.w	r2, r7, #8
 8008f06:	4610      	mov	r0, r2
 8008f08:	4798      	blx	r3
 8008f0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	2207      	movs	r2, #7
 8008f12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f14:	e00f      	b.n	8008f36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f9d9 	bl	80092d0 <USBD_CtlError>
        err++;
 8008f1e:	7afb      	ldrb	r3, [r7, #11]
 8008f20:	3301      	adds	r3, #1
 8008f22:	72fb      	strb	r3, [r7, #11]
      break;
 8008f24:	e007      	b.n	8008f36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f9d1 	bl	80092d0 <USBD_CtlError>
      err++;
 8008f2e:	7afb      	ldrb	r3, [r7, #11]
 8008f30:	3301      	adds	r3, #1
 8008f32:	72fb      	strb	r3, [r7, #11]
      break;
 8008f34:	bf00      	nop
  }

  if (err != 0U)
 8008f36:	7afb      	ldrb	r3, [r7, #11]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d11c      	bne.n	8008f76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f3c:	893b      	ldrh	r3, [r7, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d011      	beq.n	8008f66 <USBD_GetDescriptor+0x2b6>
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	88db      	ldrh	r3, [r3, #6]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	88da      	ldrh	r2, [r3, #6]
 8008f4e:	893b      	ldrh	r3, [r7, #8]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	bf28      	it	cs
 8008f54:	4613      	movcs	r3, r2
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f5a:	893b      	ldrh	r3, [r7, #8]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	68f9      	ldr	r1, [r7, #12]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa1f 	bl	80093a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	88db      	ldrh	r3, [r3, #6]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d104      	bne.n	8008f78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa76 	bl	8009460 <USBD_CtlSendStatus>
 8008f74:	e000      	b.n	8008f78 <USBD_GetDescriptor+0x2c8>
    return;
 8008f76:	bf00      	nop
    }
  }
}
 8008f78:	3710      	adds	r7, #16
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop

08008f80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	889b      	ldrh	r3, [r3, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d130      	bne.n	8008ff4 <USBD_SetAddress+0x74>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	88db      	ldrh	r3, [r3, #6]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d12c      	bne.n	8008ff4 <USBD_SetAddress+0x74>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008fa0:	d828      	bhi.n	8008ff4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	885b      	ldrh	r3, [r3, #2]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d104      	bne.n	8008fc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f988 	bl	80092d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fc0:	e01c      	b.n	8008ffc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	7bfa      	ldrb	r2, [r7, #15]
 8008fc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f004 f8b5 	bl	800d13e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fa43 	bl	8009460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe8:	e008      	b.n	8008ffc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff2:	e003      	b.n	8008ffc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f96a 	bl	80092d0 <USBD_CtlError>
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	885b      	ldrh	r3, [r3, #2]
 8009012:	b2da      	uxtb	r2, r3
 8009014:	4b41      	ldr	r3, [pc, #260]	; (800911c <USBD_SetConfig+0x118>)
 8009016:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009018:	4b40      	ldr	r3, [pc, #256]	; (800911c <USBD_SetConfig+0x118>)
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d904      	bls.n	800902a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f954 	bl	80092d0 <USBD_CtlError>
 8009028:	e075      	b.n	8009116 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009030:	2b02      	cmp	r3, #2
 8009032:	d002      	beq.n	800903a <USBD_SetConfig+0x36>
 8009034:	2b03      	cmp	r3, #3
 8009036:	d023      	beq.n	8009080 <USBD_SetConfig+0x7c>
 8009038:	e062      	b.n	8009100 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800903a:	4b38      	ldr	r3, [pc, #224]	; (800911c <USBD_SetConfig+0x118>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01a      	beq.n	8009078 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009042:	4b36      	ldr	r3, [pc, #216]	; (800911c <USBD_SetConfig+0x118>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2203      	movs	r2, #3
 8009050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009054:	4b31      	ldr	r3, [pc, #196]	; (800911c <USBD_SetConfig+0x118>)
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	4619      	mov	r1, r3
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f7ff f9f4 	bl	8008448 <USBD_SetClassConfig>
 8009060:	4603      	mov	r3, r0
 8009062:	2b02      	cmp	r3, #2
 8009064:	d104      	bne.n	8009070 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f931 	bl	80092d0 <USBD_CtlError>
            return;
 800906e:	e052      	b.n	8009116 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f9f5 	bl	8009460 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009076:	e04e      	b.n	8009116 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f9f1 	bl	8009460 <USBD_CtlSendStatus>
        break;
 800907e:	e04a      	b.n	8009116 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009080:	4b26      	ldr	r3, [pc, #152]	; (800911c <USBD_SetConfig+0x118>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d112      	bne.n	80090ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2202      	movs	r2, #2
 800908c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009090:	4b22      	ldr	r3, [pc, #136]	; (800911c <USBD_SetConfig+0x118>)
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800909a:	4b20      	ldr	r3, [pc, #128]	; (800911c <USBD_SetConfig+0x118>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff f9f0 	bl	8008486 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f9da 	bl	8009460 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090ac:	e033      	b.n	8009116 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80090ae:	4b1b      	ldr	r3, [pc, #108]	; (800911c <USBD_SetConfig+0x118>)
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d01d      	beq.n	80090f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff f9de 	bl	8008486 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80090ca:	4b14      	ldr	r3, [pc, #80]	; (800911c <USBD_SetConfig+0x118>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090d4:	4b11      	ldr	r3, [pc, #68]	; (800911c <USBD_SetConfig+0x118>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	4619      	mov	r1, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff f9b4 	bl	8008448 <USBD_SetClassConfig>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d104      	bne.n	80090f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f8f1 	bl	80092d0 <USBD_CtlError>
            return;
 80090ee:	e012      	b.n	8009116 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f9b5 	bl	8009460 <USBD_CtlSendStatus>
        break;
 80090f6:	e00e      	b.n	8009116 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9b1 	bl	8009460 <USBD_CtlSendStatus>
        break;
 80090fe:	e00a      	b.n	8009116 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f8e4 	bl	80092d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009108:	4b04      	ldr	r3, [pc, #16]	; (800911c <USBD_SetConfig+0x118>)
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff f9b9 	bl	8008486 <USBD_ClrClassConfig>
        break;
 8009114:	bf00      	nop
    }
  }
}
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20000978 	.word	0x20000978

08009120 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	88db      	ldrh	r3, [r3, #6]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d004      	beq.n	800913c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8cb 	bl	80092d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800913a:	e021      	b.n	8009180 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009142:	2b01      	cmp	r3, #1
 8009144:	db17      	blt.n	8009176 <USBD_GetConfig+0x56>
 8009146:	2b02      	cmp	r3, #2
 8009148:	dd02      	ble.n	8009150 <USBD_GetConfig+0x30>
 800914a:	2b03      	cmp	r3, #3
 800914c:	d00b      	beq.n	8009166 <USBD_GetConfig+0x46>
 800914e:	e012      	b.n	8009176 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3308      	adds	r3, #8
 800915a:	2201      	movs	r2, #1
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f920 	bl	80093a4 <USBD_CtlSendData>
        break;
 8009164:	e00c      	b.n	8009180 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3304      	adds	r3, #4
 800916a:	2201      	movs	r2, #1
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f918 	bl	80093a4 <USBD_CtlSendData>
        break;
 8009174:	e004      	b.n	8009180 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8009176:	6839      	ldr	r1, [r7, #0]
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f8a9 	bl	80092d0 <USBD_CtlError>
        break;
 800917e:	bf00      	nop
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009198:	3b01      	subs	r3, #1
 800919a:	2b02      	cmp	r3, #2
 800919c:	d81e      	bhi.n	80091dc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	88db      	ldrh	r3, [r3, #6]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d004      	beq.n	80091b0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f891 	bl	80092d0 <USBD_CtlError>
        break;
 80091ae:	e01a      	b.n	80091e6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f043 0202 	orr.w	r2, r3, #2
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	330c      	adds	r3, #12
 80091d0:	2202      	movs	r2, #2
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f8e5 	bl	80093a4 <USBD_CtlSendData>
      break;
 80091da:	e004      	b.n	80091e6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f876 	bl	80092d0 <USBD_CtlError>
      break;
 80091e4:	bf00      	nop
  }
}
 80091e6:	bf00      	nop
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	885b      	ldrh	r3, [r3, #2]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d106      	bne.n	800920e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f929 	bl	8009460 <USBD_CtlSendStatus>
  }
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009226:	3b01      	subs	r3, #1
 8009228:	2b02      	cmp	r3, #2
 800922a:	d80b      	bhi.n	8009244 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	885b      	ldrh	r3, [r3, #2]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d10c      	bne.n	800924e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f90f 	bl	8009460 <USBD_CtlSendStatus>
      }
      break;
 8009242:	e004      	b.n	800924e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f842 	bl	80092d0 <USBD_CtlError>
      break;
 800924c:	e000      	b.n	8009250 <USBD_ClrFeature+0x3a>
      break;
 800924e:	bf00      	nop
  }
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781a      	ldrb	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	785a      	ldrb	r2, [r3, #1]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	3302      	adds	r3, #2
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	b29a      	uxth	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	3303      	adds	r3, #3
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	b29b      	uxth	r3, r3
 8009286:	4413      	add	r3, r2
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	3304      	adds	r3, #4
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	b29a      	uxth	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	3305      	adds	r3, #5
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	021b      	lsls	r3, r3, #8
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	4413      	add	r3, r2
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	3306      	adds	r3, #6
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	3307      	adds	r3, #7
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	021b      	lsls	r3, r3, #8
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4413      	add	r3, r2
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	80da      	strh	r2, [r3, #6]

}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bc80      	pop	{r7}
 80092ce:	4770      	bx	lr

080092d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80092da:	2180      	movs	r1, #128	; 0x80
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f003 fec4 	bl	800d06a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80092e2:	2100      	movs	r1, #0
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f003 fec0 	bl	800d06a <USBD_LL_StallEP>
}
 80092ea:	bf00      	nop
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b086      	sub	sp, #24
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	60f8      	str	r0, [r7, #12]
 80092fa:	60b9      	str	r1, [r7, #8]
 80092fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d032      	beq.n	800936e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	f000 f834 	bl	8009376 <USBD_GetLen>
 800930e:	4603      	mov	r3, r0
 8009310:	3301      	adds	r3, #1
 8009312:	b29b      	uxth	r3, r3
 8009314:	005b      	lsls	r3, r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	75fa      	strb	r2, [r7, #23]
 8009322:	461a      	mov	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4413      	add	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	7812      	ldrb	r2, [r2, #0]
 800932c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800932e:	7dfb      	ldrb	r3, [r7, #23]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	75fa      	strb	r2, [r7, #23]
 8009334:	461a      	mov	r2, r3
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	4413      	add	r3, r2
 800933a:	2203      	movs	r2, #3
 800933c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800933e:	e012      	b.n	8009366 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	75fa      	strb	r2, [r7, #23]
 8009346:	461a      	mov	r2, r3
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	441a      	add	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	1c59      	adds	r1, r3, #1
 8009350:	60f9      	str	r1, [r7, #12]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	75fa      	strb	r2, [r7, #23]
 800935c:	461a      	mov	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	4413      	add	r3, r2
 8009362:	2200      	movs	r2, #0
 8009364:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e8      	bne.n	8009340 <USBD_GetString+0x4e>
    }
  }
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009382:	e005      	b.n	8009390 <USBD_GetLen+0x1a>
  {
    len++;
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	3301      	adds	r3, #1
 8009388:	73fb      	strb	r3, [r7, #15]
    buf++;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3301      	adds	r3, #1
 800938e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1f5      	bne.n	8009384 <USBD_GetLen+0xe>
  }

  return len;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	4613      	mov	r3, r2
 80093b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2202      	movs	r2, #2
 80093b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80093c0:	88fa      	ldrh	r2, [r7, #6]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	68ba      	ldr	r2, [r7, #8]
 80093ca:	2100      	movs	r1, #0
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f003 fed5 	bl	800d17c <USBD_LL_Transmit>

  return USBD_OK;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	2100      	movs	r1, #0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f003 fec3 	bl	800d17c <USBD_LL_Transmit>

  return USBD_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4613      	mov	r3, r2
 800940c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2203      	movs	r2, #3
 8009412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009416:	88fa      	ldrh	r2, [r7, #6]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800941e:	88fa      	ldrh	r2, [r7, #6]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009426:	88fb      	ldrh	r3, [r7, #6]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	2100      	movs	r1, #0
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f003 fec8 	bl	800d1c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3710      	adds	r7, #16
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800944a:	88fb      	ldrh	r3, [r7, #6]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	2100      	movs	r1, #0
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f003 feb6 	bl	800d1c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009470:	2300      	movs	r3, #0
 8009472:	2200      	movs	r2, #0
 8009474:	2100      	movs	r1, #0
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f003 fe80 	bl	800d17c <USBD_LL_Transmit>

  return USBD_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2205      	movs	r2, #5
 8009492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009496:	2300      	movs	r3, #0
 8009498:	2200      	movs	r2, #0
 800949a:	2100      	movs	r1, #0
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f003 fe90 	bl	800d1c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	4613      	mov	r3, r2
 80094b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80094ba:	2301      	movs	r3, #1
 80094bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80094c2:	4b1e      	ldr	r3, [pc, #120]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094c4:	7a5b      	ldrb	r3, [r3, #9]
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d831      	bhi.n	8009530 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80094cc:	4b1b      	ldr	r3, [pc, #108]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094ce:	7a5b      	ldrb	r3, [r3, #9]
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	4b19      	ldr	r3, [pc, #100]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094d6:	2100      	movs	r1, #0
 80094d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80094da:	4b18      	ldr	r3, [pc, #96]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094dc:	7a5b      	ldrb	r3, [r3, #9]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	4a16      	ldr	r2, [pc, #88]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4413      	add	r3, r2
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094ec:	7a5b      	ldrb	r3, [r3, #9]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094f4:	4413      	add	r3, r2
 80094f6:	79fa      	ldrb	r2, [r7, #7]
 80094f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <FATFS_LinkDriverEx+0x90>)
 80094fc:	7a5b      	ldrb	r3, [r3, #9]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	b2d1      	uxtb	r1, r2
 8009504:	4a0d      	ldr	r2, [pc, #52]	; (800953c <FATFS_LinkDriverEx+0x90>)
 8009506:	7251      	strb	r1, [r2, #9]
 8009508:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800950a:	7dbb      	ldrb	r3, [r7, #22]
 800950c:	3330      	adds	r3, #48	; 0x30
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	3301      	adds	r3, #1
 8009518:	223a      	movs	r2, #58	; 0x3a
 800951a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3302      	adds	r3, #2
 8009520:	222f      	movs	r2, #47	; 0x2f
 8009522:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	3303      	adds	r3, #3
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
}
 8009532:	4618      	mov	r0, r3
 8009534:	371c      	adds	r7, #28
 8009536:	46bd      	mov	sp, r7
 8009538:	bc80      	pop	{r7}
 800953a:	4770      	bx	lr
 800953c:	2000097c 	.word	0x2000097c

08009540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800954a:	2200      	movs	r2, #0
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff ffac 	bl	80094ac <FATFS_LinkDriverEx>
 8009554:	4603      	mov	r3, r0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800955e:	b480      	push	{r7}
 8009560:	b085      	sub	sp, #20
 8009562:	af00      	add	r7, sp, #0
 8009564:	4603      	mov	r3, r0
 8009566:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009568:	2300      	movs	r3, #0
 800956a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800956c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009570:	2b84      	cmp	r3, #132	; 0x84
 8009572:	d005      	beq.n	8009580 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	3303      	adds	r3, #3
 800957e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009580:	68fb      	ldr	r3, [r7, #12]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3714      	adds	r7, #20
 8009586:	46bd      	mov	sp, r7
 8009588:	bc80      	pop	{r7}
 800958a:	4770      	bx	lr

0800958c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009592:	f3ef 8305 	mrs	r3, IPSR
 8009596:	607b      	str	r3, [r7, #4]
  return(result);
 8009598:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800959a:	2b00      	cmp	r3, #0
 800959c:	bf14      	ite	ne
 800959e:	2301      	movne	r3, #1
 80095a0:	2300      	moveq	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bc80      	pop	{r7}
 80095ac:	4770      	bx	lr

080095ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80095b2:	f002 f847 	bl	800b644 <vTaskStartScheduler>
  
  return osOK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	bd80      	pop	{r7, pc}

080095bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	b089      	sub	sp, #36	; 0x24
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d020      	beq.n	8009610 <osThreadCreate+0x54>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01c      	beq.n	8009610 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685c      	ldr	r4, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681d      	ldr	r5, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691e      	ldr	r6, [r3, #16]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff ffb8 	bl	800955e <makeFreeRtosPriority>
 80095ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095f8:	9202      	str	r2, [sp, #8]
 80095fa:	9301      	str	r3, [sp, #4]
 80095fc:	9100      	str	r1, [sp, #0]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	4632      	mov	r2, r6
 8009602:	4629      	mov	r1, r5
 8009604:	4620      	mov	r0, r4
 8009606:	f001 fdd1 	bl	800b1ac <xTaskCreateStatic>
 800960a:	4603      	mov	r3, r0
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e01c      	b.n	800964a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685c      	ldr	r4, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800961c:	b29e      	uxth	r6, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ff9a 	bl	800955e <makeFreeRtosPriority>
 800962a:	4602      	mov	r2, r0
 800962c:	f107 030c 	add.w	r3, r7, #12
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	9200      	str	r2, [sp, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	4632      	mov	r2, r6
 8009638:	4629      	mov	r1, r5
 800963a:	4620      	mov	r0, r4
 800963c:	f001 fe0f 	bl	800b25e <xTaskCreate>
 8009640:	4603      	mov	r3, r0
 8009642:	2b01      	cmp	r3, #1
 8009644:	d001      	beq.n	800964a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009646:	2300      	movs	r3, #0
 8009648:	e000      	b.n	800964c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800964a:	68fb      	ldr	r3, [r7, #12]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009654 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <osDelay+0x16>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	e000      	b.n	800966c <osDelay+0x18>
 800966a:	2301      	movs	r3, #1
 800966c:	4618      	mov	r0, r3
 800966e:	f001 ff23 	bl	800b4b8 <vTaskDelay>
  
  return osOK;
 8009672:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009674:	4618      	mov	r0, r3
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	460b      	mov	r3, r1
 8009686:	607a      	str	r2, [r7, #4]
 8009688:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d013      	beq.n	80096ba <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8009692:	7afb      	ldrb	r3, [r7, #11]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <osTimerCreate+0x20>
 8009698:	2101      	movs	r1, #1
 800969a:	e000      	b.n	800969e <osTimerCreate+0x22>
 800969c:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80096a6:	9201      	str	r2, [sp, #4]
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	460a      	mov	r2, r1
 80096ae:	2101      	movs	r1, #1
 80096b0:	480b      	ldr	r0, [pc, #44]	; (80096e0 <osTimerCreate+0x64>)
 80096b2:	f002 feaa 	bl	800c40a <xTimerCreateStatic>
 80096b6:	4603      	mov	r3, r0
 80096b8:	e00e      	b.n	80096d8 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d101      	bne.n	80096c4 <osTimerCreate+0x48>
 80096c0:	2201      	movs	r2, #1
 80096c2:	e000      	b.n	80096c6 <osTimerCreate+0x4a>
 80096c4:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2101      	movs	r1, #1
 80096d0:	4803      	ldr	r0, [pc, #12]	; (80096e0 <osTimerCreate+0x64>)
 80096d2:	f002 fe79 	bl	800c3c8 <xTimerCreate>
 80096d6:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	0800d490 	.word	0x0800d490

080096e4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af02      	add	r7, sp, #8
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <osTimerStart+0x20>
    ticks = 1;
 8009700:	2301      	movs	r3, #1
 8009702:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8009704:	f7ff ff42 	bl	800958c <inHandlerMode>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d01b      	beq.n	8009746 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800970e:	f107 020c 	add.w	r2, r7, #12
 8009712:	2300      	movs	r3, #0
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	4613      	mov	r3, r2
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	2109      	movs	r1, #9
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f002 fee1 	bl	800c4e4 <xTimerGenericCommand>
 8009722:	4603      	mov	r3, r0
 8009724:	2b01      	cmp	r3, #1
 8009726:	d002      	beq.n	800972e <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8009728:	23ff      	movs	r3, #255	; 0xff
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e018      	b.n	8009760 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d015      	beq.n	8009760 <osTimerStart+0x7c>
 8009734:	4b0d      	ldr	r3, [pc, #52]	; (800976c <osTimerStart+0x88>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	e00c      	b.n	8009760 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8009746:	2300      	movs	r3, #0
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	2300      	movs	r3, #0
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	2104      	movs	r1, #4
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f002 fec7 	bl	800c4e4 <xTimerGenericCommand>
 8009756:	4603      	mov	r3, r0
 8009758:	2b01      	cmp	r3, #1
 800975a:	d001      	beq.n	8009760 <osTimerStart+0x7c>
      result = osErrorOS;
 800975c:	23ff      	movs	r3, #255	; 0xff
 800975e:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8009760:	697b      	ldr	r3, [r7, #20]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d007      	beq.n	8009790 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	4619      	mov	r1, r3
 8009786:	2001      	movs	r0, #1
 8009788:	f000 fef8 	bl	800a57c <xQueueCreateMutexStatic>
 800978c:	4603      	mov	r3, r0
 800978e:	e003      	b.n	8009798 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009790:	2001      	movs	r0, #1
 8009792:	f000 fedb 	bl	800a54c <xQueueCreateMutex>
 8009796:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80097aa:	2300      	movs	r3, #0
 80097ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <osMutexWait+0x18>
    return osErrorParameter;
 80097b4:	2380      	movs	r3, #128	; 0x80
 80097b6:	e03a      	b.n	800982e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c2:	d103      	bne.n	80097cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80097c4:	f04f 33ff 	mov.w	r3, #4294967295
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e009      	b.n	80097e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d006      	beq.n	80097e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <osMutexWait+0x40>
      ticks = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80097e0:	f7ff fed4 	bl	800958c <inHandlerMode>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d017      	beq.n	800981a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80097ea:	f107 0308 	add.w	r3, r7, #8
 80097ee:	461a      	mov	r2, r3
 80097f0:	2100      	movs	r1, #0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 fada 	bl	800adac <xQueueReceiveFromISR>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d001      	beq.n	8009802 <osMutexWait+0x62>
      return osErrorOS;
 80097fe:	23ff      	movs	r3, #255	; 0xff
 8009800:	e015      	b.n	800982e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d011      	beq.n	800982c <osMutexWait+0x8c>
 8009808:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <osMutexWait+0x98>)
 800980a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	f3bf 8f4f 	dsb	sy
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	e008      	b.n	800982c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800981a:	68f9      	ldr	r1, [r7, #12]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 f9bd 	bl	800ab9c <xQueueSemaphoreTake>
 8009822:	4603      	mov	r3, r0
 8009824:	2b01      	cmp	r3, #1
 8009826:	d001      	beq.n	800982c <osMutexWait+0x8c>
    return osErrorOS;
 8009828:	23ff      	movs	r3, #255	; 0xff
 800982a:	e000      	b.n	800982e <osMutexWait+0x8e>
  }
  
  return osOK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	e000ed04 	.word	0xe000ed04

0800983c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009844:	2300      	movs	r3, #0
 8009846:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800984c:	f7ff fe9e 	bl	800958c <inHandlerMode>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d016      	beq.n	8009884 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009856:	f107 0308 	add.w	r3, r7, #8
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 f837 	bl	800a8d0 <xQueueGiveFromISR>
 8009862:	4603      	mov	r3, r0
 8009864:	2b01      	cmp	r3, #1
 8009866:	d001      	beq.n	800986c <osMutexRelease+0x30>
      return osErrorOS;
 8009868:	23ff      	movs	r3, #255	; 0xff
 800986a:	e017      	b.n	800989c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d013      	beq.n	800989a <osMutexRelease+0x5e>
 8009872:	4b0c      	ldr	r3, [pc, #48]	; (80098a4 <osMutexRelease+0x68>)
 8009874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009878:	601a      	str	r2, [r3, #0]
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	e00a      	b.n	800989a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009884:	2300      	movs	r3, #0
 8009886:	2200      	movs	r2, #0
 8009888:	2100      	movs	r1, #0
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fe92 	bl	800a5b4 <xQueueGenericSend>
 8009890:	4603      	mov	r3, r0
 8009892:	2b01      	cmp	r3, #1
 8009894:	d001      	beq.n	800989a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009896:	23ff      	movs	r3, #255	; 0xff
 8009898:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800989a:	68fb      	ldr	r3, [r7, #12]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80098a8:	b590      	push	{r4, r7, lr}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af02      	add	r7, sp, #8
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d012      	beq.n	80098e0 <osMessageCreate+0x38>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00e      	beq.n	80098e0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6859      	ldr	r1, [r3, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68dc      	ldr	r4, [r3, #12]
 80098d2:	2300      	movs	r3, #0
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	4623      	mov	r3, r4
 80098d8:	f000 fd50 	bl	800a37c <xQueueGenericCreateStatic>
 80098dc:	4603      	mov	r3, r0
 80098de:	e008      	b.n	80098f2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	4619      	mov	r1, r3
 80098ec:	f000 fdb8 	bl	800a460 <xQueueGenericCreate>
 80098f0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd90      	pop	{r4, r7, pc}
	...

080098fc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80098fc:	b590      	push	{r4, r7, lr}
 80098fe:	b08b      	sub	sp, #44	; 0x2c
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009916:	2380      	movs	r3, #128	; 0x80
 8009918:	617b      	str	r3, [r7, #20]
    return event;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	461c      	mov	r4, r3
 800991e:	f107 0314 	add.w	r3, r7, #20
 8009922:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009926:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800992a:	e054      	b.n	80099d6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800992c:	2300      	movs	r3, #0
 800992e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d103      	bne.n	8009944 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800993c:	f04f 33ff 	mov.w	r3, #4294967295
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
 8009942:	e009      	b.n	8009958 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <osMessageGet+0x5c>
      ticks = 1;
 8009954:	2301      	movs	r3, #1
 8009956:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009958:	f7ff fe18 	bl	800958c <inHandlerMode>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d01c      	beq.n	800999c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009962:	f107 0220 	add.w	r2, r7, #32
 8009966:	f107 0314 	add.w	r3, r7, #20
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	68b8      	ldr	r0, [r7, #8]
 8009970:	f001 fa1c 	bl	800adac <xQueueReceiveFromISR>
 8009974:	4603      	mov	r3, r0
 8009976:	2b01      	cmp	r3, #1
 8009978:	d102      	bne.n	8009980 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800997a:	2310      	movs	r3, #16
 800997c:	617b      	str	r3, [r7, #20]
 800997e:	e001      	b.n	8009984 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d01d      	beq.n	80099c6 <osMessageGet+0xca>
 800998a:	4b15      	ldr	r3, [pc, #84]	; (80099e0 <osMessageGet+0xe4>)
 800998c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	e014      	b.n	80099c6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800999c:	f107 0314 	add.w	r3, r7, #20
 80099a0:	3304      	adds	r3, #4
 80099a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a4:	4619      	mov	r1, r3
 80099a6:	68b8      	ldr	r0, [r7, #8]
 80099a8:	f001 f81c 	bl	800a9e4 <xQueueReceive>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d102      	bne.n	80099b8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80099b2:	2310      	movs	r3, #16
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e006      	b.n	80099c6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <osMessageGet+0xc6>
 80099be:	2300      	movs	r3, #0
 80099c0:	e000      	b.n	80099c4 <osMessageGet+0xc8>
 80099c2:	2340      	movs	r3, #64	; 0x40
 80099c4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	461c      	mov	r4, r3
 80099ca:	f107 0314 	add.w	r3, r7, #20
 80099ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80099d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	372c      	adds	r7, #44	; 0x2c
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd90      	pop	{r4, r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000ed04 	.word	0xe000ed04

080099e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f103 0208 	add.w	r2, r3, #8
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f04f 32ff 	mov.w	r2, #4294967295
 80099fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f103 0208 	add.w	r2, r3, #8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f103 0208 	add.w	r2, r3, #8
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr

08009a22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr

08009a3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b085      	sub	sp, #20
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689a      	ldr	r2, [r3, #8]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bc80      	pop	{r7}
 8009a7e:	4770      	bx	lr

08009a80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a96:	d103      	bne.n	8009aa0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	e00c      	b.n	8009aba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	e002      	b.n	8009aae <vListInsert+0x2e>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d9f6      	bls.n	8009aa8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	1c5a      	adds	r2, r3, #1
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	601a      	str	r2, [r3, #0]
}
 8009ae6:	bf00      	nop
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bc80      	pop	{r7}
 8009aee:	4770      	bx	lr

08009af0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6892      	ldr	r2, [r2, #8]
 8009b06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6852      	ldr	r2, [r2, #4]
 8009b10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	685a      	ldr	r2, [r3, #4]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d103      	bne.n	8009b24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	1e5a      	subs	r2, r3, #1
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr
	...

08009b44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	3b04      	subs	r3, #4
 8009b54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3b04      	subs	r3, #4
 8009b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	f023 0201 	bic.w	r2, r3, #1
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3b04      	subs	r3, #4
 8009b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b74:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <pxPortInitialiseStack+0x54>)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3b14      	subs	r3, #20
 8009b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3b20      	subs	r3, #32
 8009b8a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr
 8009b98:	08009b9d 	.word	0x08009b9d

08009b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ba6:	4b10      	ldr	r3, [pc, #64]	; (8009be8 <prvTaskExitError+0x4c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bae:	d009      	beq.n	8009bc4 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	e7fe      	b.n	8009bc2 <prvTaskExitError+0x26>
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bd6:	bf00      	nop
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0fc      	beq.n	8009bd8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bde:	bf00      	nop
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr
 8009be8:	200001c0 	.word	0x200001c0
 8009bec:	00000000 	.word	0x00000000

08009bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009bf0:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <pxCurrentTCBConst2>)
 8009bf2:	6819      	ldr	r1, [r3, #0]
 8009bf4:	6808      	ldr	r0, [r1, #0]
 8009bf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009bfa:	f380 8809 	msr	PSP, r0
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f04f 0000 	mov.w	r0, #0
 8009c06:	f380 8811 	msr	BASEPRI, r0
 8009c0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009c0e:	4770      	bx	lr

08009c10 <pxCurrentTCBConst2>:
 8009c10:	20001948 	.word	0x20001948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009c18:	4806      	ldr	r0, [pc, #24]	; (8009c34 <prvPortStartFirstTask+0x1c>)
 8009c1a:	6800      	ldr	r0, [r0, #0]
 8009c1c:	6800      	ldr	r0, [r0, #0]
 8009c1e:	f380 8808 	msr	MSP, r0
 8009c22:	b662      	cpsie	i
 8009c24:	b661      	cpsie	f
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	df00      	svc	0
 8009c30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c32:	bf00      	nop
 8009c34:	e000ed08 	.word	0xe000ed08

08009c38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c3e:	4b31      	ldr	r3, [pc, #196]	; (8009d04 <xPortStartScheduler+0xcc>)
 8009c40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	22ff      	movs	r2, #255	; 0xff
 8009c4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <xPortStartScheduler+0xd0>)
 8009c64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c66:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009c68:	2207      	movs	r2, #7
 8009c6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c6c:	e009      	b.n	8009c82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009c6e:	4b27      	ldr	r3, [pc, #156]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	4a25      	ldr	r2, [pc, #148]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009c76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c8a:	2b80      	cmp	r3, #128	; 0x80
 8009c8c:	d0ef      	beq.n	8009c6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c8e:	4b1f      	ldr	r3, [pc, #124]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f1c3 0307 	rsb	r3, r3, #7
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d009      	beq.n	8009cae <xPortStartScheduler+0x76>
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	60bb      	str	r3, [r7, #8]
 8009cac:	e7fe      	b.n	8009cac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cae:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	021b      	lsls	r3, r3, #8
 8009cb4:	4a15      	ldr	r2, [pc, #84]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cb8:	4b14      	ldr	r3, [pc, #80]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cc0:	4a12      	ldr	r2, [pc, #72]	; (8009d0c <xPortStartScheduler+0xd4>)
 8009cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	b2da      	uxtb	r2, r3
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ccc:	4a10      	ldr	r2, [pc, #64]	; (8009d10 <xPortStartScheduler+0xd8>)
 8009cce:	4b10      	ldr	r3, [pc, #64]	; (8009d10 <xPortStartScheduler+0xd8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009cd8:	4a0d      	ldr	r2, [pc, #52]	; (8009d10 <xPortStartScheduler+0xd8>)
 8009cda:	4b0d      	ldr	r3, [pc, #52]	; (8009d10 <xPortStartScheduler+0xd8>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ce4:	f000 f8b0 	bl	8009e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ce8:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <xPortStartScheduler+0xdc>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009cee:	f7ff ff93 	bl	8009c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009cf2:	f001 fe7f 	bl	800b9f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009cf6:	f7ff ff51 	bl	8009b9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	e000e400 	.word	0xe000e400
 8009d08:	20000988 	.word	0x20000988
 8009d0c:	2000098c 	.word	0x2000098c
 8009d10:	e000ed20 	.word	0xe000ed20
 8009d14:	200001c0 	.word	0x200001c0

08009d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d30:	4b0e      	ldr	r3, [pc, #56]	; (8009d6c <vPortEnterCritical+0x54>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3301      	adds	r3, #1
 8009d36:	4a0d      	ldr	r2, [pc, #52]	; (8009d6c <vPortEnterCritical+0x54>)
 8009d38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d3a:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <vPortEnterCritical+0x54>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d10e      	bne.n	8009d60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d42:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <vPortEnterCritical+0x58>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <vPortEnterCritical+0x48>
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	603b      	str	r3, [r7, #0]
 8009d5e:	e7fe      	b.n	8009d5e <vPortEnterCritical+0x46>
	}
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bc80      	pop	{r7}
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	200001c0 	.word	0x200001c0
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d7a:	4b10      	ldr	r3, [pc, #64]	; (8009dbc <vPortExitCritical+0x48>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d109      	bne.n	8009d96 <vPortExitCritical+0x22>
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	607b      	str	r3, [r7, #4]
 8009d94:	e7fe      	b.n	8009d94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009d96:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <vPortExitCritical+0x48>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	4a07      	ldr	r2, [pc, #28]	; (8009dbc <vPortExitCritical+0x48>)
 8009d9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <vPortExitCritical+0x48>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d104      	bne.n	8009db2 <vPortExitCritical+0x3e>
 8009da8:	2300      	movs	r3, #0
 8009daa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009db2:	bf00      	nop
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bc80      	pop	{r7}
 8009dba:	4770      	bx	lr
 8009dbc:	200001c0 	.word	0x200001c0

08009dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009dc0:	f3ef 8009 	mrs	r0, PSP
 8009dc4:	f3bf 8f6f 	isb	sy
 8009dc8:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <pxCurrentTCBConst>)
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009dd0:	6010      	str	r0, [r2, #0]
 8009dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009dd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009dda:	f380 8811 	msr	BASEPRI, r0
 8009dde:	f001 fe09 	bl	800b9f4 <vTaskSwitchContext>
 8009de2:	f04f 0000 	mov.w	r0, #0
 8009de6:	f380 8811 	msr	BASEPRI, r0
 8009dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dee:	6819      	ldr	r1, [r3, #0]
 8009df0:	6808      	ldr	r0, [r1, #0]
 8009df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009df6:	f380 8809 	msr	PSP, r0
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	4770      	bx	lr

08009e00 <pxCurrentTCBConst>:
 8009e00:	20001948 	.word	0x20001948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop

08009e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e20:	f001 fd2c 	bl	800b87c <xTaskIncrementTick>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e2a:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <SysTick_Handler+0x3c>)
 8009e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e3c:	bf00      	nop
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	e000ed04 	.word	0xe000ed04

08009e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <vPortSetupTimerInterrupt+0x30>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e52:	4b0a      	ldr	r3, [pc, #40]	; (8009e7c <vPortSetupTimerInterrupt+0x34>)
 8009e54:	2200      	movs	r2, #0
 8009e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <vPortSetupTimerInterrupt+0x38>)
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <vPortSetupTimerInterrupt+0x3c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	490a      	ldr	r1, [pc, #40]	; (8009e88 <vPortSetupTimerInterrupt+0x40>)
 8009e60:	fba1 1303 	umull	r1, r3, r1, r3
 8009e64:	099b      	lsrs	r3, r3, #6
 8009e66:	3b01      	subs	r3, #1
 8009e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e6a:	4b03      	ldr	r3, [pc, #12]	; (8009e78 <vPortSetupTimerInterrupt+0x30>)
 8009e6c:	2207      	movs	r2, #7
 8009e6e:	601a      	str	r2, [r3, #0]
}
 8009e70:	bf00      	nop
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr
 8009e78:	e000e010 	.word	0xe000e010
 8009e7c:	e000e018 	.word	0xe000e018
 8009e80:	e000e014 	.word	0xe000e014
 8009e84:	20000028 	.word	0x20000028
 8009e88:	10624dd3 	.word	0x10624dd3

08009e8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e92:	f3ef 8305 	mrs	r3, IPSR
 8009e96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b0f      	cmp	r3, #15
 8009e9c:	d913      	bls.n	8009ec6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e9e:	4a15      	ldr	r2, [pc, #84]	; (8009ef4 <vPortValidateInterruptPriority+0x68>)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ea8:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <vPortValidateInterruptPriority+0x6c>)
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	7afa      	ldrb	r2, [r7, #11]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d209      	bcs.n	8009ec6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	607b      	str	r3, [r7, #4]
 8009ec4:	e7fe      	b.n	8009ec4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ec6:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <vPortValidateInterruptPriority+0x70>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ece:	4b0c      	ldr	r3, [pc, #48]	; (8009f00 <vPortValidateInterruptPriority+0x74>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d909      	bls.n	8009eea <vPortValidateInterruptPriority+0x5e>
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	603b      	str	r3, [r7, #0]
 8009ee8:	e7fe      	b.n	8009ee8 <vPortValidateInterruptPriority+0x5c>
	}
 8009eea:	bf00      	nop
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bc80      	pop	{r7}
 8009ef2:	4770      	bx	lr
 8009ef4:	e000e3f0 	.word	0xe000e3f0
 8009ef8:	20000988 	.word	0x20000988
 8009efc:	e000ed0c 	.word	0xe000ed0c
 8009f00:	2000098c 	.word	0x2000098c

08009f04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08a      	sub	sp, #40	; 0x28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009f10:	f001 fbfc 	bl	800b70c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009f14:	4b57      	ldr	r3, [pc, #348]	; (800a074 <pvPortMalloc+0x170>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f1c:	f000 f90c 	bl	800a138 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f20:	4b55      	ldr	r3, [pc, #340]	; (800a078 <pvPortMalloc+0x174>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f040 808c 	bne.w	800a046 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01c      	beq.n	8009f6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009f34:	2208      	movs	r2, #8
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d013      	beq.n	8009f6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f023 0307 	bic.w	r3, r3, #7
 8009f4c:	3308      	adds	r3, #8
 8009f4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <pvPortMalloc+0x6a>
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	e7fe      	b.n	8009f6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d068      	beq.n	800a046 <pvPortMalloc+0x142>
 8009f74:	4b41      	ldr	r3, [pc, #260]	; (800a07c <pvPortMalloc+0x178>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d863      	bhi.n	800a046 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f7e:	4b40      	ldr	r3, [pc, #256]	; (800a080 <pvPortMalloc+0x17c>)
 8009f80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f82:	4b3f      	ldr	r3, [pc, #252]	; (800a080 <pvPortMalloc+0x17c>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f88:	e004      	b.n	8009f94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d203      	bcs.n	8009fa6 <pvPortMalloc+0xa2>
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1f1      	bne.n	8009f8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009fa6:	4b33      	ldr	r3, [pc, #204]	; (800a074 <pvPortMalloc+0x170>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d04a      	beq.n	800a046 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	4413      	add	r3, r2
 8009fb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
 8009fc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	1ad2      	subs	r2, r2, r3
 8009fca:	2308      	movs	r3, #8
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d91e      	bls.n	800a010 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	f003 0307 	and.w	r3, r3, #7
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d009      	beq.n	8009ff8 <pvPortMalloc+0xf4>
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	613b      	str	r3, [r7, #16]
 8009ff6:	e7fe      	b.n	8009ff6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a00a:	69b8      	ldr	r0, [r7, #24]
 800a00c:	f000 f8f6 	bl	800a1fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a010:	4b1a      	ldr	r3, [pc, #104]	; (800a07c <pvPortMalloc+0x178>)
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	4a18      	ldr	r2, [pc, #96]	; (800a07c <pvPortMalloc+0x178>)
 800a01c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a01e:	4b17      	ldr	r3, [pc, #92]	; (800a07c <pvPortMalloc+0x178>)
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b18      	ldr	r3, [pc, #96]	; (800a084 <pvPortMalloc+0x180>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	429a      	cmp	r2, r3
 800a028:	d203      	bcs.n	800a032 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a02a:	4b14      	ldr	r3, [pc, #80]	; (800a07c <pvPortMalloc+0x178>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a15      	ldr	r2, [pc, #84]	; (800a084 <pvPortMalloc+0x180>)
 800a030:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	4b10      	ldr	r3, [pc, #64]	; (800a078 <pvPortMalloc+0x174>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a046:	f001 fb6f 	bl	800b728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <pvPortMalloc+0x164>
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	e7fe      	b.n	800a066 <pvPortMalloc+0x162>
	return pvReturn;
 800a068:	69fb      	ldr	r3, [r7, #28]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3728      	adds	r7, #40	; 0x28
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20001938 	.word	0x20001938
 800a078:	20001944 	.word	0x20001944
 800a07c:	2000193c 	.word	0x2000193c
 800a080:	20001930 	.word	0x20001930
 800a084:	20001940 	.word	0x20001940

0800a088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d046      	beq.n	800a128 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a09a:	2308      	movs	r3, #8
 800a09c:	425b      	negs	r3, r3
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4b20      	ldr	r3, [pc, #128]	; (800a130 <vPortFree+0xa8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d109      	bne.n	800a0ca <vPortFree+0x42>
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60fb      	str	r3, [r7, #12]
 800a0c8:	e7fe      	b.n	800a0c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <vPortFree+0x5e>
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60bb      	str	r3, [r7, #8]
 800a0e4:	e7fe      	b.n	800a0e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	4b11      	ldr	r3, [pc, #68]	; (800a130 <vPortFree+0xa8>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d019      	beq.n	800a128 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d115      	bne.n	800a128 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	4b0b      	ldr	r3, [pc, #44]	; (800a130 <vPortFree+0xa8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	43db      	mvns	r3, r3
 800a106:	401a      	ands	r2, r3
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a10c:	f001 fafe 	bl	800b70c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	685a      	ldr	r2, [r3, #4]
 800a114:	4b07      	ldr	r3, [pc, #28]	; (800a134 <vPortFree+0xac>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4413      	add	r3, r2
 800a11a:	4a06      	ldr	r2, [pc, #24]	; (800a134 <vPortFree+0xac>)
 800a11c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a11e:	6938      	ldr	r0, [r7, #16]
 800a120:	f000 f86c 	bl	800a1fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a124:	f001 fb00 	bl	800b728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a128:	bf00      	nop
 800a12a:	3718      	adds	r7, #24
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	20001944 	.word	0x20001944
 800a134:	2000193c 	.word	0x2000193c

0800a138 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a13e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800a142:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a144:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <prvHeapInit+0xac>)
 800a146:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f003 0307 	and.w	r3, r3, #7
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00c      	beq.n	800a16c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	3307      	adds	r3, #7
 800a156:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f023 0307 	bic.w	r3, r3, #7
 800a15e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	4a1f      	ldr	r2, [pc, #124]	; (800a1e4 <prvHeapInit+0xac>)
 800a168:	4413      	add	r3, r2
 800a16a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a170:	4a1d      	ldr	r2, [pc, #116]	; (800a1e8 <prvHeapInit+0xb0>)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a176:	4b1c      	ldr	r3, [pc, #112]	; (800a1e8 <prvHeapInit+0xb0>)
 800a178:	2200      	movs	r2, #0
 800a17a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4413      	add	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a184:	2208      	movs	r2, #8
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	1a9b      	subs	r3, r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4a15      	ldr	r2, [pc, #84]	; (800a1ec <prvHeapInit+0xb4>)
 800a198:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a19a:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <prvHeapInit+0xb4>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1a2:	4b12      	ldr	r3, [pc, #72]	; (800a1ec <prvHeapInit+0xb4>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68fa      	ldr	r2, [r7, #12]
 800a1b2:	1ad2      	subs	r2, r2, r3
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1b8:	4b0c      	ldr	r3, [pc, #48]	; (800a1ec <prvHeapInit+0xb4>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	4a0a      	ldr	r2, [pc, #40]	; (800a1f0 <prvHeapInit+0xb8>)
 800a1c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <prvHeapInit+0xbc>)
 800a1ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <prvHeapInit+0xc0>)
 800a1d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1d6:	601a      	str	r2, [r3, #0]
}
 800a1d8:	bf00      	nop
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bc80      	pop	{r7}
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	20000990 	.word	0x20000990
 800a1e8:	20001930 	.word	0x20001930
 800a1ec:	20001938 	.word	0x20001938
 800a1f0:	20001940 	.word	0x20001940
 800a1f4:	2000193c 	.word	0x2000193c
 800a1f8:	20001944 	.word	0x20001944

0800a1fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a204:	4b27      	ldr	r3, [pc, #156]	; (800a2a4 <prvInsertBlockIntoFreeList+0xa8>)
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	e002      	b.n	800a210 <prvInsertBlockIntoFreeList+0x14>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60fb      	str	r3, [r7, #12]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	429a      	cmp	r2, r3
 800a218:	d3f7      	bcc.n	800a20a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	441a      	add	r2, r3
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d108      	bne.n	800a23e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	685a      	ldr	r2, [r3, #4]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	441a      	add	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	441a      	add	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d118      	bne.n	800a284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <prvInsertBlockIntoFreeList+0xac>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d00d      	beq.n	800a27a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	441a      	add	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	e008      	b.n	800a28c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a27a:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <prvInsertBlockIntoFreeList+0xac>)
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	601a      	str	r2, [r3, #0]
 800a282:	e003      	b.n	800a28c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	d002      	beq.n	800a29a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr
 800a2a4:	20001930 	.word	0x20001930
 800a2a8:	20001938 	.word	0x20001938

0800a2ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d109      	bne.n	800a2d4 <xQueueGenericReset+0x28>
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	e7fe      	b.n	800a2d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a2d4:	f7ff fd20 	bl	8009d18 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e0:	68f9      	ldr	r1, [r7, #12]
 800a2e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2e4:	fb01 f303 	mul.w	r3, r1, r3
 800a2e8:	441a      	add	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a304:	3b01      	subs	r3, #1
 800a306:	68f9      	ldr	r1, [r7, #12]
 800a308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a30a:	fb01 f303 	mul.w	r3, r1, r3
 800a30e:	441a      	add	r2, r3
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	22ff      	movs	r2, #255	; 0xff
 800a318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	22ff      	movs	r2, #255	; 0xff
 800a320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d114      	bne.n	800a354 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d01a      	beq.n	800a368 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3310      	adds	r3, #16
 800a336:	4618      	mov	r0, r3
 800a338:	f001 fc04 	bl	800bb44 <xTaskRemoveFromEventList>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d012      	beq.n	800a368 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a342:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <xQueueGenericReset+0xcc>)
 800a344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	e009      	b.n	800a368 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3310      	adds	r3, #16
 800a358:	4618      	mov	r0, r3
 800a35a:	f7ff fb43 	bl	80099e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3324      	adds	r3, #36	; 0x24
 800a362:	4618      	mov	r0, r3
 800a364:	f7ff fb3e 	bl	80099e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a368:	f7ff fd04 	bl	8009d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a36c:	2301      	movs	r3, #1
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08e      	sub	sp, #56	; 0x38
 800a380:	af02      	add	r7, sp, #8
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d109      	bne.n	800a3a4 <xQueueGenericCreateStatic+0x28>
 800a390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a394:	f383 8811 	msr	BASEPRI, r3
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3a2:	e7fe      	b.n	800a3a2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <xQueueGenericCreateStatic+0x42>
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a3bc:	e7fe      	b.n	800a3bc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <xQueueGenericCreateStatic+0x4e>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <xQueueGenericCreateStatic+0x52>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e000      	b.n	800a3d0 <xQueueGenericCreateStatic+0x54>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d109      	bne.n	800a3e8 <xQueueGenericCreateStatic+0x6c>
 800a3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	623b      	str	r3, [r7, #32]
 800a3e6:	e7fe      	b.n	800a3e6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d102      	bne.n	800a3f4 <xQueueGenericCreateStatic+0x78>
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <xQueueGenericCreateStatic+0x7c>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <xQueueGenericCreateStatic+0x7e>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d109      	bne.n	800a412 <xQueueGenericCreateStatic+0x96>
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	e7fe      	b.n	800a410 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a412:	2348      	movs	r3, #72	; 0x48
 800a414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b48      	cmp	r3, #72	; 0x48
 800a41a:	d009      	beq.n	800a430 <xQueueGenericCreateStatic+0xb4>
 800a41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a420:	f383 8811 	msr	BASEPRI, r3
 800a424:	f3bf 8f6f 	isb	sy
 800a428:	f3bf 8f4f 	dsb	sy
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	e7fe      	b.n	800a42e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a442:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	4613      	mov	r3, r2
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	68b9      	ldr	r1, [r7, #8]
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 f842 	bl	800a4da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a458:	4618      	mov	r0, r3
 800a45a:	3730      	adds	r7, #48	; 0x30
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08a      	sub	sp, #40	; 0x28
 800a464:	af02      	add	r7, sp, #8
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	4613      	mov	r3, r2
 800a46c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d109      	bne.n	800a488 <xQueueGenericCreate+0x28>
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	e7fe      	b.n	800a486 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	61fb      	str	r3, [r7, #28]
 800a492:	e004      	b.n	800a49e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	fb02 f303 	mul.w	r3, r2, r3
 800a49c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	3348      	adds	r3, #72	; 0x48
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7ff fd2e 	bl	8009f04 <pvPortMalloc>
 800a4a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00f      	beq.n	800a4d0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	3348      	adds	r3, #72	; 0x48
 800a4b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4be:	79fa      	ldrb	r2, [r7, #7]
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f805 	bl	800a4da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4d0:	69bb      	ldr	r3, [r7, #24]
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3720      	adds	r7, #32
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d103      	bne.n	800a4f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	69ba      	ldr	r2, [r7, #24]
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	e002      	b.n	800a4fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a508:	2101      	movs	r1, #1
 800a50a:	69b8      	ldr	r0, [r7, #24]
 800a50c:	f7ff fece 	bl	800a2ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a510:	bf00      	nop
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d00e      	beq.n	800a544 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a538:	2300      	movs	r3, #0
 800a53a:	2200      	movs	r2, #0
 800a53c:	2100      	movs	r1, #0
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f838 	bl	800a5b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a556:	2301      	movs	r3, #1
 800a558:	617b      	str	r3, [r7, #20]
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	461a      	mov	r2, r3
 800a562:	6939      	ldr	r1, [r7, #16]
 800a564:	6978      	ldr	r0, [r7, #20]
 800a566:	f7ff ff7b 	bl	800a460 <xQueueGenericCreate>
 800a56a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff ffd3 	bl	800a518 <prvInitialiseMutex>

		return pxNewQueue;
 800a572:	68fb      	ldr	r3, [r7, #12]
	}
 800a574:	4618      	mov	r0, r3
 800a576:	3718      	adds	r7, #24
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af02      	add	r7, sp, #8
 800a582:	4603      	mov	r3, r0
 800a584:	6039      	str	r1, [r7, #0]
 800a586:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a588:	2301      	movs	r3, #1
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	2300      	movs	r3, #0
 800a58e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2200      	movs	r2, #0
 800a598:	6939      	ldr	r1, [r7, #16]
 800a59a:	6978      	ldr	r0, [r7, #20]
 800a59c:	f7ff feee 	bl	800a37c <xQueueGenericCreateStatic>
 800a5a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f7ff ffb8 	bl	800a518 <prvInitialiseMutex>

		return pxNewQueue;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
	}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08e      	sub	sp, #56	; 0x38
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d109      	bne.n	800a5e4 <xQueueGenericSend+0x30>
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5e2:	e7fe      	b.n	800a5e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d103      	bne.n	800a5f2 <xQueueGenericSend+0x3e>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <xQueueGenericSend+0x42>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <xQueueGenericSend+0x44>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d109      	bne.n	800a610 <xQueueGenericSend+0x5c>
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
 800a60e:	e7fe      	b.n	800a60e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d103      	bne.n	800a61e <xQueueGenericSend+0x6a>
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <xQueueGenericSend+0x6e>
 800a61e:	2301      	movs	r3, #1
 800a620:	e000      	b.n	800a624 <xQueueGenericSend+0x70>
 800a622:	2300      	movs	r3, #0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d109      	bne.n	800a63c <xQueueGenericSend+0x88>
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	623b      	str	r3, [r7, #32]
 800a63a:	e7fe      	b.n	800a63a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63c:	f001 fc3c 	bl	800beb8 <xTaskGetSchedulerState>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <xQueueGenericSend+0x98>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <xQueueGenericSend+0x9c>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <xQueueGenericSend+0x9e>
 800a650:	2300      	movs	r3, #0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d109      	bne.n	800a66a <xQueueGenericSend+0xb6>
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	61fb      	str	r3, [r7, #28]
 800a668:	e7fe      	b.n	800a668 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a66a:	f7ff fb55 	bl	8009d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a676:	429a      	cmp	r2, r3
 800a678:	d302      	bcc.n	800a680 <xQueueGenericSend+0xcc>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b02      	cmp	r3, #2
 800a67e:	d129      	bne.n	800a6d4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a686:	f000 fc25 	bl	800aed4 <prvCopyDataToQueue>
 800a68a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b00      	cmp	r3, #0
 800a692:	d010      	beq.n	800a6b6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3324      	adds	r3, #36	; 0x24
 800a698:	4618      	mov	r0, r3
 800a69a:	f001 fa53 	bl	800bb44 <xTaskRemoveFromEventList>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d013      	beq.n	800a6cc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6a4:	4b3f      	ldr	r3, [pc, #252]	; (800a7a4 <xQueueGenericSend+0x1f0>)
 800a6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	e00a      	b.n	800a6cc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d007      	beq.n	800a6cc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6bc:	4b39      	ldr	r3, [pc, #228]	; (800a7a4 <xQueueGenericSend+0x1f0>)
 800a6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6c2:	601a      	str	r2, [r3, #0]
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6cc:	f7ff fb52 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e063      	b.n	800a79c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d103      	bne.n	800a6e2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6da:	f7ff fb4b 	bl	8009d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e05c      	b.n	800a79c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d106      	bne.n	800a6f6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6e8:	f107 0314 	add.w	r3, r7, #20
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f001 fa8b 	bl	800bc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6f6:	f7ff fb3d 	bl	8009d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6fa:	f001 f807 	bl	800b70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6fe:	f7ff fb0b 	bl	8009d18 <vPortEnterCritical>
 800a702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a708:	b25b      	sxtb	r3, r3
 800a70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70e:	d103      	bne.n	800a718 <xQueueGenericSend+0x164>
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71e:	b25b      	sxtb	r3, r3
 800a720:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a724:	d103      	bne.n	800a72e <xQueueGenericSend+0x17a>
 800a726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a72e:	f7ff fb21 	bl	8009d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a732:	1d3a      	adds	r2, r7, #4
 800a734:	f107 0314 	add.w	r3, r7, #20
 800a738:	4611      	mov	r1, r2
 800a73a:	4618      	mov	r0, r3
 800a73c:	f001 fa7a 	bl	800bc34 <xTaskCheckForTimeOut>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d124      	bne.n	800a790 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a748:	f000 fcbc 	bl	800b0c4 <prvIsQueueFull>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d018      	beq.n	800a784 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	3310      	adds	r3, #16
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4611      	mov	r1, r2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 f9a4 	bl	800baa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a762:	f000 fc47 	bl	800aff4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a766:	f000 ffdf 	bl	800b728 <xTaskResumeAll>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f af7c 	bne.w	800a66a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a772:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <xQueueGenericSend+0x1f0>)
 800a774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	e772      	b.n	800a66a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a786:	f000 fc35 	bl	800aff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a78a:	f000 ffcd 	bl	800b728 <xTaskResumeAll>
 800a78e:	e76c      	b.n	800a66a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a792:	f000 fc2f 	bl	800aff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a796:	f000 ffc7 	bl	800b728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a79a:	2300      	movs	r3, #0
		}
	}
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3738      	adds	r7, #56	; 0x38
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d109      	bne.n	800a7d4 <xQueueGenericSendFromISR+0x2c>
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d2:	e7fe      	b.n	800a7d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d103      	bne.n	800a7e2 <xQueueGenericSendFromISR+0x3a>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d101      	bne.n	800a7e6 <xQueueGenericSendFromISR+0x3e>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e000      	b.n	800a7e8 <xQueueGenericSendFromISR+0x40>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d109      	bne.n	800a800 <xQueueGenericSendFromISR+0x58>
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	623b      	str	r3, [r7, #32]
 800a7fe:	e7fe      	b.n	800a7fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d103      	bne.n	800a80e <xQueueGenericSendFromISR+0x66>
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d101      	bne.n	800a812 <xQueueGenericSendFromISR+0x6a>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <xQueueGenericSendFromISR+0x6c>
 800a812:	2300      	movs	r3, #0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d109      	bne.n	800a82c <xQueueGenericSendFromISR+0x84>
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	e7fe      	b.n	800a82a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a82c:	f7ff fb2e 	bl	8009e8c <vPortValidateInterruptPriority>
	__asm volatile
 800a830:	f3ef 8211 	mrs	r2, BASEPRI
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	61ba      	str	r2, [r7, #24]
 800a846:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a848:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a84a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a854:	429a      	cmp	r2, r3
 800a856:	d302      	bcc.n	800a85e <xQueueGenericSendFromISR+0xb6>
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d12c      	bne.n	800a8b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a868:	683a      	ldr	r2, [r7, #0]
 800a86a:	68b9      	ldr	r1, [r7, #8]
 800a86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a86e:	f000 fb31 	bl	800aed4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a872:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87a:	d112      	bne.n	800a8a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	d016      	beq.n	800a8b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a886:	3324      	adds	r3, #36	; 0x24
 800a888:	4618      	mov	r0, r3
 800a88a:	f001 f95b 	bl	800bb44 <xTaskRemoveFromEventList>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00e      	beq.n	800a8b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00b      	beq.n	800a8b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	601a      	str	r2, [r3, #0]
 800a8a0:	e007      	b.n	800a8b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	b25a      	sxtb	r2, r3
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a8b6:	e001      	b.n	800a8bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3738      	adds	r7, #56	; 0x38
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08e      	sub	sp, #56	; 0x38
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d109      	bne.n	800a8f8 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	623b      	str	r3, [r7, #32]
 800a8f6:	e7fe      	b.n	800a8f6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d009      	beq.n	800a914 <xQueueGiveFromISR+0x44>
 800a900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	61fb      	str	r3, [r7, #28]
 800a912:	e7fe      	b.n	800a912 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <xQueueGiveFromISR+0x54>
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <xQueueGiveFromISR+0x58>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <xQueueGiveFromISR+0x5a>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d109      	bne.n	800a942 <xQueueGiveFromISR+0x72>
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	61bb      	str	r3, [r7, #24]
 800a940:	e7fe      	b.n	800a940 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a942:	f7ff faa3 	bl	8009e8c <vPortValidateInterruptPriority>
	__asm volatile
 800a946:	f3ef 8211 	mrs	r2, BASEPRI
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	617a      	str	r2, [r7, #20]
 800a95c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a95e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a966:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	429a      	cmp	r2, r3
 800a970:	d92b      	bls.n	800a9ca <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d112      	bne.n	800a9b4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	2b00      	cmp	r3, #0
 800a994:	d016      	beq.n	800a9c4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a998:	3324      	adds	r3, #36	; 0x24
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 f8d2 	bl	800bb44 <xTaskRemoveFromEventList>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00e      	beq.n	800a9c4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00b      	beq.n	800a9c4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	e007      	b.n	800a9c4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	b25a      	sxtb	r2, r3
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c8:	e001      	b.n	800a9ce <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3738      	adds	r7, #56	; 0x38
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
	...

0800a9e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08c      	sub	sp, #48	; 0x30
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d109      	bne.n	800aa12 <xQueueReceive+0x2e>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	623b      	str	r3, [r7, #32]
 800aa10:	e7fe      	b.n	800aa10 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d103      	bne.n	800aa20 <xQueueReceive+0x3c>
 800aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <xQueueReceive+0x40>
 800aa20:	2301      	movs	r3, #1
 800aa22:	e000      	b.n	800aa26 <xQueueReceive+0x42>
 800aa24:	2300      	movs	r3, #0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d109      	bne.n	800aa3e <xQueueReceive+0x5a>
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	e7fe      	b.n	800aa3c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa3e:	f001 fa3b 	bl	800beb8 <xTaskGetSchedulerState>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d102      	bne.n	800aa4e <xQueueReceive+0x6a>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <xQueueReceive+0x6e>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <xQueueReceive+0x70>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d109      	bne.n	800aa6c <xQueueReceive+0x88>
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	e7fe      	b.n	800aa6a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa6c:	f7ff f954 	bl	8009d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01f      	beq.n	800aabc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa80:	f000 fa92 	bl	800afa8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	1e5a      	subs	r2, r3, #1
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00f      	beq.n	800aab4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	3310      	adds	r3, #16
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f001 f853 	bl	800bb44 <xTaskRemoveFromEventList>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d007      	beq.n	800aab4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aaa4:	4b3c      	ldr	r3, [pc, #240]	; (800ab98 <xQueueReceive+0x1b4>)
 800aaa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaaa:	601a      	str	r2, [r3, #0]
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aab4:	f7ff f95e 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e069      	b.n	800ab90 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d103      	bne.n	800aaca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aac2:	f7ff f957 	bl	8009d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aac6:	2300      	movs	r3, #0
 800aac8:	e062      	b.n	800ab90 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d106      	bne.n	800aade <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aad0:	f107 0310 	add.w	r3, r7, #16
 800aad4:	4618      	mov	r0, r3
 800aad6:	f001 f897 	bl	800bc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aada:	2301      	movs	r3, #1
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aade:	f7ff f949 	bl	8009d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aae2:	f000 fe13 	bl	800b70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aae6:	f7ff f917 	bl	8009d18 <vPortEnterCritical>
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaf0:	b25b      	sxtb	r3, r3
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d103      	bne.n	800ab00 <xQueueReceive+0x11c>
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab06:	b25b      	sxtb	r3, r3
 800ab08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0c:	d103      	bne.n	800ab16 <xQueueReceive+0x132>
 800ab0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab16:	f7ff f92d 	bl	8009d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab1a:	1d3a      	adds	r2, r7, #4
 800ab1c:	f107 0310 	add.w	r3, r7, #16
 800ab20:	4611      	mov	r1, r2
 800ab22:	4618      	mov	r0, r3
 800ab24:	f001 f886 	bl	800bc34 <xTaskCheckForTimeOut>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d123      	bne.n	800ab76 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab30:	f000 fab2 	bl	800b098 <prvIsQueueEmpty>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d017      	beq.n	800ab6a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3c:	3324      	adds	r3, #36	; 0x24
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	4611      	mov	r1, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 ffb0 	bl	800baa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab4a:	f000 fa53 	bl	800aff4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab4e:	f000 fdeb 	bl	800b728 <xTaskResumeAll>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d189      	bne.n	800aa6c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ab58:	4b0f      	ldr	r3, [pc, #60]	; (800ab98 <xQueueReceive+0x1b4>)
 800ab5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab5e:	601a      	str	r2, [r3, #0]
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	e780      	b.n	800aa6c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab6c:	f000 fa42 	bl	800aff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab70:	f000 fdda 	bl	800b728 <xTaskResumeAll>
 800ab74:	e77a      	b.n	800aa6c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab78:	f000 fa3c 	bl	800aff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab7c:	f000 fdd4 	bl	800b728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab82:	f000 fa89 	bl	800b098 <prvIsQueueEmpty>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f43f af6f 	beq.w	800aa6c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3730      	adds	r7, #48	; 0x30
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	e000ed04 	.word	0xe000ed04

0800ab9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08e      	sub	sp, #56	; 0x38
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800abae:	2300      	movs	r3, #0
 800abb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <xQueueSemaphoreTake+0x30>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	623b      	str	r3, [r7, #32]
 800abca:	e7fe      	b.n	800abca <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d009      	beq.n	800abe8 <xQueueSemaphoreTake+0x4c>
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	61fb      	str	r3, [r7, #28]
 800abe6:	e7fe      	b.n	800abe6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abe8:	f001 f966 	bl	800beb8 <xTaskGetSchedulerState>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d102      	bne.n	800abf8 <xQueueSemaphoreTake+0x5c>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <xQueueSemaphoreTake+0x60>
 800abf8:	2301      	movs	r3, #1
 800abfa:	e000      	b.n	800abfe <xQueueSemaphoreTake+0x62>
 800abfc:	2300      	movs	r3, #0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <xQueueSemaphoreTake+0x7a>
 800ac02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	61bb      	str	r3, [r7, #24]
 800ac14:	e7fe      	b.n	800ac14 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac16:	f7ff f87f 	bl	8009d18 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d024      	beq.n	800ac70 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	1e5a      	subs	r2, r3, #1
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d104      	bne.n	800ac40 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800ac36:	f001 fb05 	bl	800c244 <pvTaskIncrementMutexHeldCount>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00f      	beq.n	800ac68 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac4a:	3310      	adds	r3, #16
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f000 ff79 	bl	800bb44 <xTaskRemoveFromEventList>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d007      	beq.n	800ac68 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac58:	4b53      	ldr	r3, [pc, #332]	; (800ada8 <xQueueSemaphoreTake+0x20c>)
 800ac5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	f3bf 8f4f 	dsb	sy
 800ac64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac68:	f7ff f884 	bl	8009d74 <vPortExitCritical>
				return pdPASS;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e096      	b.n	800ad9e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d110      	bne.n	800ac98 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d009      	beq.n	800ac90 <xQueueSemaphoreTake+0xf4>
 800ac7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	617b      	str	r3, [r7, #20]
 800ac8e:	e7fe      	b.n	800ac8e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac90:	f7ff f870 	bl	8009d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac94:	2300      	movs	r3, #0
 800ac96:	e082      	b.n	800ad9e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d106      	bne.n	800acac <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac9e:	f107 030c 	add.w	r3, r7, #12
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 ffb0 	bl	800bc08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aca8:	2301      	movs	r3, #1
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acac:	f7ff f862 	bl	8009d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acb0:	f000 fd2c 	bl	800b70c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acb4:	f7ff f830 	bl	8009d18 <vPortEnterCritical>
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acbe:	b25b      	sxtb	r3, r3
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc4:	d103      	bne.n	800acce <xQueueSemaphoreTake+0x132>
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acd4:	b25b      	sxtb	r3, r3
 800acd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acda:	d103      	bne.n	800ace4 <xQueueSemaphoreTake+0x148>
 800acdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ace4:	f7ff f846 	bl	8009d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ace8:	463a      	mov	r2, r7
 800acea:	f107 030c 	add.w	r3, r7, #12
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 ff9f 	bl	800bc34 <xTaskCheckForTimeOut>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d132      	bne.n	800ad62 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acfe:	f000 f9cb 	bl	800b098 <prvIsQueueEmpty>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d026      	beq.n	800ad56 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ad10:	f7ff f802 	bl	8009d18 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800ad14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f001 f8eb 	bl	800bef4 <xTaskPriorityInherit>
 800ad1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad20:	f7ff f828 	bl	8009d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad26:	3324      	adds	r3, #36	; 0x24
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f000 febb 	bl	800baa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad34:	f000 f95e 	bl	800aff4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad38:	f000 fcf6 	bl	800b728 <xTaskResumeAll>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f47f af69 	bne.w	800ac16 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ad44:	4b18      	ldr	r3, [pc, #96]	; (800ada8 <xQueueSemaphoreTake+0x20c>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	e75f      	b.n	800ac16 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad58:	f000 f94c 	bl	800aff4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad5c:	f000 fce4 	bl	800b728 <xTaskResumeAll>
 800ad60:	e759      	b.n	800ac16 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad64:	f000 f946 	bl	800aff4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad68:	f000 fcde 	bl	800b728 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad6e:	f000 f993 	bl	800b098 <prvIsQueueEmpty>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f43f af4e 	beq.w	800ac16 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00d      	beq.n	800ad9c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ad80:	f7fe ffca 	bl	8009d18 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad86:	f000 f88e 	bl	800aea6 <prvGetDisinheritPriorityAfterTimeout>
 800ad8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad92:	4618      	mov	r0, r3
 800ad94:	f001 f9b8 	bl	800c108 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad98:	f7fe ffec 	bl	8009d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3738      	adds	r7, #56	; 0x38
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	e000ed04 	.word	0xe000ed04

0800adac <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08e      	sub	sp, #56	; 0x38
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d109      	bne.n	800add6 <xQueueReceiveFromISR+0x2a>
 800adc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc6:	f383 8811 	msr	BASEPRI, r3
 800adca:	f3bf 8f6f 	isb	sy
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	623b      	str	r3, [r7, #32]
 800add4:	e7fe      	b.n	800add4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <xQueueReceiveFromISR+0x38>
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <xQueueReceiveFromISR+0x3c>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <xQueueReceiveFromISR+0x3e>
 800ade8:	2300      	movs	r3, #0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <xQueueReceiveFromISR+0x56>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	e7fe      	b.n	800ae00 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae02:	f7ff f843 	bl	8009e8c <vPortValidateInterruptPriority>
	__asm volatile
 800ae06:	f3ef 8211 	mrs	r2, BASEPRI
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	61ba      	str	r2, [r7, #24]
 800ae1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d02f      	beq.n	800ae8e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae3c:	f000 f8b4 	bl	800afa8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae42:	1e5a      	subs	r2, r3, #1
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae50:	d112      	bne.n	800ae78 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d016      	beq.n	800ae88 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	3310      	adds	r3, #16
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 fe70 	bl	800bb44 <xTaskRemoveFromEventList>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00e      	beq.n	800ae88 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	e007      	b.n	800ae88 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	b25a      	sxtb	r2, r3
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ae8c:	e001      	b.n	800ae92 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	637b      	str	r3, [r7, #52]	; 0x34
 800ae92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae94:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3738      	adds	r7, #56	; 0x38
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aea6:	b480      	push	{r7}
 800aea8:	b085      	sub	sp, #20
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d006      	beq.n	800aec4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f1c3 0307 	rsb	r3, r3, #7
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	e001      	b.n	800aec8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aec8:	68fb      	ldr	r3, [r7, #12]
	}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	bc80      	pop	{r7}
 800aed2:	4770      	bx	lr

0800aed4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aee0:	2300      	movs	r3, #0
 800aee2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10d      	bne.n	800af0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d14d      	bne.n	800af96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4618      	mov	r0, r3
 800af00:	f001 f87e 	bl	800c000 <xTaskPriorityDisinherit>
 800af04:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	605a      	str	r2, [r3, #4]
 800af0c:	e043      	b.n	800af96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d119      	bne.n	800af48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6898      	ldr	r0, [r3, #8]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af1c:	461a      	mov	r2, r3
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	f002 fa1c 	bl	800d35c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	441a      	add	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	689a      	ldr	r2, [r3, #8]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d32b      	bcc.n	800af96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	609a      	str	r2, [r3, #8]
 800af46:	e026      	b.n	800af96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68d8      	ldr	r0, [r3, #12]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af50:	461a      	mov	r2, r3
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	f002 fa02 	bl	800d35c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af60:	425b      	negs	r3, r3
 800af62:	441a      	add	r2, r3
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	68da      	ldr	r2, [r3, #12]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d207      	bcs.n	800af84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7c:	425b      	negs	r3, r3
 800af7e:	441a      	add	r2, r3
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2b02      	cmp	r3, #2
 800af88:	d105      	bne.n	800af96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d002      	beq.n	800af96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	3b01      	subs	r3, #1
 800af94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af9e:	697b      	ldr	r3, [r7, #20]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d018      	beq.n	800afec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	441a      	add	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d303      	bcc.n	800afdc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68d9      	ldr	r1, [r3, #12]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe4:	461a      	mov	r2, r3
 800afe6:	6838      	ldr	r0, [r7, #0]
 800afe8:	f002 f9b8 	bl	800d35c <memcpy>
	}
}
 800afec:	bf00      	nop
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800affc:	f7fe fe8c 	bl	8009d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b006:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b008:	e011      	b.n	800b02e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d012      	beq.n	800b038 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3324      	adds	r3, #36	; 0x24
 800b016:	4618      	mov	r0, r3
 800b018:	f000 fd94 	bl	800bb44 <xTaskRemoveFromEventList>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b022:	f000 fe67 	bl	800bcf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	3b01      	subs	r3, #1
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b032:	2b00      	cmp	r3, #0
 800b034:	dce9      	bgt.n	800b00a <prvUnlockQueue+0x16>
 800b036:	e000      	b.n	800b03a <prvUnlockQueue+0x46>
					break;
 800b038:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	22ff      	movs	r2, #255	; 0xff
 800b03e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b042:	f7fe fe97 	bl	8009d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b046:	f7fe fe67 	bl	8009d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b050:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b052:	e011      	b.n	800b078 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d012      	beq.n	800b082 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3310      	adds	r3, #16
 800b060:	4618      	mov	r0, r3
 800b062:	f000 fd6f 	bl	800bb44 <xTaskRemoveFromEventList>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d001      	beq.n	800b070 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b06c:	f000 fe42 	bl	800bcf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	3b01      	subs	r3, #1
 800b074:	b2db      	uxtb	r3, r3
 800b076:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	dce9      	bgt.n	800b054 <prvUnlockQueue+0x60>
 800b080:	e000      	b.n	800b084 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b082:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	22ff      	movs	r2, #255	; 0xff
 800b088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b08c:	f7fe fe72 	bl	8009d74 <vPortExitCritical>
}
 800b090:	bf00      	nop
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0a0:	f7fe fe3a 	bl	8009d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	60fb      	str	r3, [r7, #12]
 800b0b0:	e001      	b.n	800b0b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0b6:	f7fe fe5d 	bl	8009d74 <vPortExitCritical>

	return xReturn;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0cc:	f7fe fe24 	bl	8009d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d102      	bne.n	800b0e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	e001      	b.n	800b0e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0e6:	f7fe fe45 	bl	8009d74 <vPortExitCritical>

	return xReturn;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	e014      	b.n	800b12e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b104:	4a0e      	ldr	r2, [pc, #56]	; (800b140 <vQueueAddToRegistry+0x4c>)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10b      	bne.n	800b128 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b110:	490b      	ldr	r1, [pc, #44]	; (800b140 <vQueueAddToRegistry+0x4c>)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b11a:	4a09      	ldr	r2, [pc, #36]	; (800b140 <vQueueAddToRegistry+0x4c>)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	4413      	add	r3, r2
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b126:	e005      	b.n	800b134 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b07      	cmp	r3, #7
 800b132:	d9e7      	bls.n	800b104 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b134:	bf00      	nop
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc80      	pop	{r7}
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	20003168 	.word	0x20003168

0800b144 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b086      	sub	sp, #24
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b154:	f7fe fde0 	bl	8009d18 <vPortEnterCritical>
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d103      	bne.n	800b16e <vQueueWaitForMessageRestricted+0x2a>
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b174:	b25b      	sxtb	r3, r3
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17a:	d103      	bne.n	800b184 <vQueueWaitForMessageRestricted+0x40>
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b184:	f7fe fdf6 	bl	8009d74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d106      	bne.n	800b19e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fca9 	bl	800baf0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b19e:	6978      	ldr	r0, [r7, #20]
 800b1a0:	f7ff ff28 	bl	800aff4 <prvUnlockQueue>
	}
 800b1a4:	bf00      	nop
 800b1a6:	3718      	adds	r7, #24
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b08e      	sub	sp, #56	; 0x38
 800b1b0:	af04      	add	r7, sp, #16
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
 800b1b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d109      	bne.n	800b1d4 <xTaskCreateStatic+0x28>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	623b      	str	r3, [r7, #32]
 800b1d2:	e7fe      	b.n	800b1d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d109      	bne.n	800b1ee <xTaskCreateStatic+0x42>
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	61fb      	str	r3, [r7, #28]
 800b1ec:	e7fe      	b.n	800b1ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1ee:	2354      	movs	r3, #84	; 0x54
 800b1f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2b54      	cmp	r3, #84	; 0x54
 800b1f6:	d009      	beq.n	800b20c <xTaskCreateStatic+0x60>
 800b1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fc:	f383 8811 	msr	BASEPRI, r3
 800b200:	f3bf 8f6f 	isb	sy
 800b204:	f3bf 8f4f 	dsb	sy
 800b208:	61bb      	str	r3, [r7, #24]
 800b20a:	e7fe      	b.n	800b20a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d01e      	beq.n	800b250 <xTaskCreateStatic+0xa4>
 800b212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01b      	beq.n	800b250 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b220:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	2202      	movs	r2, #2
 800b226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b22a:	2300      	movs	r3, #0
 800b22c:	9303      	str	r3, [sp, #12]
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	9302      	str	r3, [sp, #8]
 800b232:	f107 0314 	add.w	r3, r7, #20
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 f850 	bl	800b2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b24a:	f000 f8cb 	bl	800b3e4 <prvAddNewTaskToReadyList>
 800b24e:	e001      	b.n	800b254 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800b250:	2300      	movs	r3, #0
 800b252:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b254:	697b      	ldr	r3, [r7, #20]
	}
 800b256:	4618      	mov	r0, r3
 800b258:	3728      	adds	r7, #40	; 0x28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b08c      	sub	sp, #48	; 0x30
 800b262:	af04      	add	r7, sp, #16
 800b264:	60f8      	str	r0, [r7, #12]
 800b266:	60b9      	str	r1, [r7, #8]
 800b268:	603b      	str	r3, [r7, #0]
 800b26a:	4613      	mov	r3, r2
 800b26c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26e:	88fb      	ldrh	r3, [r7, #6]
 800b270:	009b      	lsls	r3, r3, #2
 800b272:	4618      	mov	r0, r3
 800b274:	f7fe fe46 	bl	8009f04 <pvPortMalloc>
 800b278:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00e      	beq.n	800b29e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800b280:	2054      	movs	r0, #84	; 0x54
 800b282:	f7fe fe3f 	bl	8009f04 <pvPortMalloc>
 800b286:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	697a      	ldr	r2, [r7, #20]
 800b292:	631a      	str	r2, [r3, #48]	; 0x30
 800b294:	e005      	b.n	800b2a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b296:	6978      	ldr	r0, [r7, #20]
 800b298:	f7fe fef6 	bl	800a088 <vPortFree>
 800b29c:	e001      	b.n	800b2a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d017      	beq.n	800b2d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2b0:	88fa      	ldrh	r2, [r7, #6]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 f80e 	bl	800b2e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2cc:	69f8      	ldr	r0, [r7, #28]
 800b2ce:	f000 f889 	bl	800b3e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	61bb      	str	r3, [r7, #24]
 800b2d6:	e002      	b.n	800b2de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2de:	69bb      	ldr	r3, [r7, #24]
	}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3720      	adds	r7, #32
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b300:	3b01      	subs	r3, #1
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	f023 0307 	bic.w	r3, r3, #7
 800b30e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	2b00      	cmp	r3, #0
 800b318:	d009      	beq.n	800b32e <prvInitialiseNewTask+0x46>
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	617b      	str	r3, [r7, #20]
 800b32c:	e7fe      	b.n	800b32c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b32e:	2300      	movs	r3, #0
 800b330:	61fb      	str	r3, [r7, #28]
 800b332:	e012      	b.n	800b35a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	4413      	add	r3, r2
 800b33a:	7819      	ldrb	r1, [r3, #0]
 800b33c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	4413      	add	r3, r2
 800b342:	3334      	adds	r3, #52	; 0x34
 800b344:	460a      	mov	r2, r1
 800b346:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800b348:	68ba      	ldr	r2, [r7, #8]
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	4413      	add	r3, r2
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d006      	beq.n	800b362 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	3301      	adds	r3, #1
 800b358:	61fb      	str	r3, [r7, #28]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	2b0f      	cmp	r3, #15
 800b35e:	d9e9      	bls.n	800b334 <prvInitialiseNewTask+0x4c>
 800b360:	e000      	b.n	800b364 <prvInitialiseNewTask+0x7c>
		{
			break;
 800b362:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36e:	2b06      	cmp	r3, #6
 800b370:	d901      	bls.n	800b376 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b372:	2306      	movs	r3, #6
 800b374:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b37a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b380:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	2200      	movs	r2, #0
 800b386:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	3304      	adds	r3, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fb48 	bl	8009a22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	3318      	adds	r3, #24
 800b396:	4618      	mov	r0, r3
 800b398:	f7fe fb43 	bl	8009a22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	f1c3 0207 	rsb	r2, r3, #7
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	68f9      	ldr	r1, [r7, #12]
 800b3c4:	69b8      	ldr	r0, [r7, #24]
 800b3c6:	f7fe fbbd 	bl	8009b44 <pxPortInitialiseStack>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3dc:	bf00      	nop
 800b3de:	3720      	adds	r7, #32
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3ec:	f7fe fc94 	bl	8009d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3f0:	4b2a      	ldr	r3, [pc, #168]	; (800b49c <prvAddNewTaskToReadyList+0xb8>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	4a29      	ldr	r2, [pc, #164]	; (800b49c <prvAddNewTaskToReadyList+0xb8>)
 800b3f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3fa:	4b29      	ldr	r3, [pc, #164]	; (800b4a0 <prvAddNewTaskToReadyList+0xbc>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b402:	4a27      	ldr	r2, [pc, #156]	; (800b4a0 <prvAddNewTaskToReadyList+0xbc>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b408:	4b24      	ldr	r3, [pc, #144]	; (800b49c <prvAddNewTaskToReadyList+0xb8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d110      	bne.n	800b432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b410:	f000 fc94 	bl	800bd3c <prvInitialiseTaskLists>
 800b414:	e00d      	b.n	800b432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b416:	4b23      	ldr	r3, [pc, #140]	; (800b4a4 <prvAddNewTaskToReadyList+0xc0>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d109      	bne.n	800b432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b41e:	4b20      	ldr	r3, [pc, #128]	; (800b4a0 <prvAddNewTaskToReadyList+0xbc>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b428:	429a      	cmp	r2, r3
 800b42a:	d802      	bhi.n	800b432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b42c:	4a1c      	ldr	r2, [pc, #112]	; (800b4a0 <prvAddNewTaskToReadyList+0xbc>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b432:	4b1d      	ldr	r3, [pc, #116]	; (800b4a8 <prvAddNewTaskToReadyList+0xc4>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3301      	adds	r3, #1
 800b438:	4a1b      	ldr	r2, [pc, #108]	; (800b4a8 <prvAddNewTaskToReadyList+0xc4>)
 800b43a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b440:	2201      	movs	r2, #1
 800b442:	409a      	lsls	r2, r3
 800b444:	4b19      	ldr	r3, [pc, #100]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4313      	orrs	r3, r2
 800b44a:	4a18      	ldr	r2, [pc, #96]	; (800b4ac <prvAddNewTaskToReadyList+0xc8>)
 800b44c:	6013      	str	r3, [r2, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b452:	4613      	mov	r3, r2
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	4a15      	ldr	r2, [pc, #84]	; (800b4b0 <prvAddNewTaskToReadyList+0xcc>)
 800b45c:	441a      	add	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	3304      	adds	r3, #4
 800b462:	4619      	mov	r1, r3
 800b464:	4610      	mov	r0, r2
 800b466:	f7fe fae8 	bl	8009a3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b46a:	f7fe fc83 	bl	8009d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b46e:	4b0d      	ldr	r3, [pc, #52]	; (800b4a4 <prvAddNewTaskToReadyList+0xc0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00e      	beq.n	800b494 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b476:	4b0a      	ldr	r3, [pc, #40]	; (800b4a0 <prvAddNewTaskToReadyList+0xbc>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	429a      	cmp	r2, r3
 800b482:	d207      	bcs.n	800b494 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b484:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <prvAddNewTaskToReadyList+0xd0>)
 800b486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b494:	bf00      	nop
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20001a48 	.word	0x20001a48
 800b4a0:	20001948 	.word	0x20001948
 800b4a4:	20001a54 	.word	0x20001a54
 800b4a8:	20001a64 	.word	0x20001a64
 800b4ac:	20001a50 	.word	0x20001a50
 800b4b0:	2000194c 	.word	0x2000194c
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d016      	beq.n	800b4f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4ca:	4b13      	ldr	r3, [pc, #76]	; (800b518 <vTaskDelay+0x60>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d009      	beq.n	800b4e6 <vTaskDelay+0x2e>
 800b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d6:	f383 8811 	msr	BASEPRI, r3
 800b4da:	f3bf 8f6f 	isb	sy
 800b4de:	f3bf 8f4f 	dsb	sy
 800b4e2:	60bb      	str	r3, [r7, #8]
 800b4e4:	e7fe      	b.n	800b4e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b4e6:	f000 f911 	bl	800b70c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 febd 	bl	800c26c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4f2:	f000 f919 	bl	800b728 <xTaskResumeAll>
 800b4f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d107      	bne.n	800b50e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b4fe:	4b07      	ldr	r3, [pc, #28]	; (800b51c <vTaskDelay+0x64>)
 800b500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b50e:	bf00      	nop
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20001a70 	.word	0x20001a70
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b528:	f7fe fbf6 	bl	8009d18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d102      	bne.n	800b538 <vTaskSuspend+0x18>
 800b532:	4b3c      	ldr	r3, [pc, #240]	; (800b624 <vTaskSuspend+0x104>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	e000      	b.n	800b53a <vTaskSuspend+0x1a>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3304      	adds	r3, #4
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe fad5 	bl	8009af0 <uxListRemove>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d115      	bne.n	800b578 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b550:	4935      	ldr	r1, [pc, #212]	; (800b628 <vTaskSuspend+0x108>)
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	440b      	add	r3, r1
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <vTaskSuspend+0x58>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	2201      	movs	r2, #1
 800b568:	fa02 f303 	lsl.w	r3, r2, r3
 800b56c:	43da      	mvns	r2, r3
 800b56e:	4b2f      	ldr	r3, [pc, #188]	; (800b62c <vTaskSuspend+0x10c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4013      	ands	r3, r2
 800b574:	4a2d      	ldr	r2, [pc, #180]	; (800b62c <vTaskSuspend+0x10c>)
 800b576:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d004      	beq.n	800b58a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3318      	adds	r3, #24
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe fab3 	bl	8009af0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4619      	mov	r1, r3
 800b590:	4827      	ldr	r0, [pc, #156]	; (800b630 <vTaskSuspend+0x110>)
 800b592:	f7fe fa52 	bl	8009a3a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d103      	bne.n	800b5aa <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b5aa:	f7fe fbe3 	bl	8009d74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b5ae:	4b21      	ldr	r3, [pc, #132]	; (800b634 <vTaskSuspend+0x114>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b5b6:	f7fe fbaf 	bl	8009d18 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b5ba:	f000 fc59 	bl	800be70 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b5be:	f7fe fbd9 	bl	8009d74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b5c2:	4b18      	ldr	r3, [pc, #96]	; (800b624 <vTaskSuspend+0x104>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d126      	bne.n	800b61a <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 800b5cc:	4b19      	ldr	r3, [pc, #100]	; (800b634 <vTaskSuspend+0x114>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d016      	beq.n	800b602 <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b5d4:	4b18      	ldr	r3, [pc, #96]	; (800b638 <vTaskSuspend+0x118>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d009      	beq.n	800b5f0 <vTaskSuspend+0xd0>
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60bb      	str	r3, [r7, #8]
 800b5ee:	e7fe      	b.n	800b5ee <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 800b5f0:	4b12      	ldr	r3, [pc, #72]	; (800b63c <vTaskSuspend+0x11c>)
 800b5f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5f6:	601a      	str	r2, [r3, #0]
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b600:	e00b      	b.n	800b61a <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800b602:	4b0b      	ldr	r3, [pc, #44]	; (800b630 <vTaskSuspend+0x110>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <vTaskSuspend+0x120>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d103      	bne.n	800b616 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800b60e:	4b05      	ldr	r3, [pc, #20]	; (800b624 <vTaskSuspend+0x104>)
 800b610:	2200      	movs	r2, #0
 800b612:	601a      	str	r2, [r3, #0]
	}
 800b614:	e001      	b.n	800b61a <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 800b616:	f000 f9ed 	bl	800b9f4 <vTaskSwitchContext>
	}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	20001948 	.word	0x20001948
 800b628:	2000194c 	.word	0x2000194c
 800b62c:	20001a50 	.word	0x20001a50
 800b630:	20001a34 	.word	0x20001a34
 800b634:	20001a54 	.word	0x20001a54
 800b638:	20001a70 	.word	0x20001a70
 800b63c:	e000ed04 	.word	0xe000ed04
 800b640:	20001a48 	.word	0x20001a48

0800b644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b08a      	sub	sp, #40	; 0x28
 800b648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b652:	463a      	mov	r2, r7
 800b654:	1d39      	adds	r1, r7, #4
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7f4 fdaa 	bl	80001b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b660:	6839      	ldr	r1, [r7, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	9202      	str	r2, [sp, #8]
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	2300      	movs	r3, #0
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	2300      	movs	r3, #0
 800b670:	460a      	mov	r2, r1
 800b672:	4920      	ldr	r1, [pc, #128]	; (800b6f4 <vTaskStartScheduler+0xb0>)
 800b674:	4820      	ldr	r0, [pc, #128]	; (800b6f8 <vTaskStartScheduler+0xb4>)
 800b676:	f7ff fd99 	bl	800b1ac <xTaskCreateStatic>
 800b67a:	4602      	mov	r2, r0
 800b67c:	4b1f      	ldr	r3, [pc, #124]	; (800b6fc <vTaskStartScheduler+0xb8>)
 800b67e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b680:	4b1e      	ldr	r3, [pc, #120]	; (800b6fc <vTaskStartScheduler+0xb8>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b688:	2301      	movs	r3, #1
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	e001      	b.n	800b692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b68e:	2300      	movs	r3, #0
 800b690:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b01      	cmp	r3, #1
 800b696:	d102      	bne.n	800b69e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b698:	f000 fe4e 	bl	800c338 <xTimerCreateTimerTask>
 800b69c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d115      	bne.n	800b6d0 <vTaskStartScheduler+0x8c>
 800b6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6b6:	4b12      	ldr	r3, [pc, #72]	; (800b700 <vTaskStartScheduler+0xbc>)
 800b6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6be:	4b11      	ldr	r3, [pc, #68]	; (800b704 <vTaskStartScheduler+0xc0>)
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b6c4:	4b10      	ldr	r3, [pc, #64]	; (800b708 <vTaskStartScheduler+0xc4>)
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6ca:	f7fe fab5 	bl	8009c38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6ce:	e00d      	b.n	800b6ec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d109      	bne.n	800b6ec <vTaskStartScheduler+0xa8>
 800b6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6dc:	f383 8811 	msr	BASEPRI, r3
 800b6e0:	f3bf 8f6f 	isb	sy
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	e7fe      	b.n	800b6ea <vTaskStartScheduler+0xa6>
}
 800b6ec:	bf00      	nop
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	0800d494 	.word	0x0800d494
 800b6f8:	0800bd0d 	.word	0x0800bd0d
 800b6fc:	20001a6c 	.word	0x20001a6c
 800b700:	20001a68 	.word	0x20001a68
 800b704:	20001a54 	.word	0x20001a54
 800b708:	20001a4c 	.word	0x20001a4c

0800b70c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b710:	4b04      	ldr	r3, [pc, #16]	; (800b724 <vTaskSuspendAll+0x18>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3301      	adds	r3, #1
 800b716:	4a03      	ldr	r2, [pc, #12]	; (800b724 <vTaskSuspendAll+0x18>)
 800b718:	6013      	str	r3, [r2, #0]
}
 800b71a:	bf00      	nop
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bc80      	pop	{r7}
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	20001a70 	.word	0x20001a70

0800b728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b732:	2300      	movs	r3, #0
 800b734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b736:	4b41      	ldr	r3, [pc, #260]	; (800b83c <xTaskResumeAll+0x114>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <xTaskResumeAll+0x2a>
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	603b      	str	r3, [r7, #0]
 800b750:	e7fe      	b.n	800b750 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b752:	f7fe fae1 	bl	8009d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b756:	4b39      	ldr	r3, [pc, #228]	; (800b83c <xTaskResumeAll+0x114>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	4a37      	ldr	r2, [pc, #220]	; (800b83c <xTaskResumeAll+0x114>)
 800b75e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b760:	4b36      	ldr	r3, [pc, #216]	; (800b83c <xTaskResumeAll+0x114>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d161      	bne.n	800b82c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b768:	4b35      	ldr	r3, [pc, #212]	; (800b840 <xTaskResumeAll+0x118>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05d      	beq.n	800b82c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b770:	e02e      	b.n	800b7d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b772:	4b34      	ldr	r3, [pc, #208]	; (800b844 <xTaskResumeAll+0x11c>)
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3318      	adds	r3, #24
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe f9b6 	bl	8009af0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3304      	adds	r3, #4
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fe f9b1 	bl	8009af0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	2201      	movs	r2, #1
 800b794:	409a      	lsls	r2, r3
 800b796:	4b2c      	ldr	r3, [pc, #176]	; (800b848 <xTaskResumeAll+0x120>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4313      	orrs	r3, r2
 800b79c:	4a2a      	ldr	r2, [pc, #168]	; (800b848 <xTaskResumeAll+0x120>)
 800b79e:	6013      	str	r3, [r2, #0]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4a27      	ldr	r2, [pc, #156]	; (800b84c <xTaskResumeAll+0x124>)
 800b7ae:	441a      	add	r2, r3
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3304      	adds	r3, #4
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4610      	mov	r0, r2
 800b7b8:	f7fe f93f 	bl	8009a3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c0:	4b23      	ldr	r3, [pc, #140]	; (800b850 <xTaskResumeAll+0x128>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d302      	bcc.n	800b7d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b7ca:	4b22      	ldr	r3, [pc, #136]	; (800b854 <xTaskResumeAll+0x12c>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7d0:	4b1c      	ldr	r3, [pc, #112]	; (800b844 <xTaskResumeAll+0x11c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1cc      	bne.n	800b772 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7de:	f000 fb47 	bl	800be70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b7e2:	4b1d      	ldr	r3, [pc, #116]	; (800b858 <xTaskResumeAll+0x130>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d010      	beq.n	800b810 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7ee:	f000 f845 	bl	800b87c <xTaskIncrementTick>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d002      	beq.n	800b7fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b7f8:	4b16      	ldr	r3, [pc, #88]	; (800b854 <xTaskResumeAll+0x12c>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	3b01      	subs	r3, #1
 800b802:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1f1      	bne.n	800b7ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b80a:	4b13      	ldr	r3, [pc, #76]	; (800b858 <xTaskResumeAll+0x130>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b810:	4b10      	ldr	r3, [pc, #64]	; (800b854 <xTaskResumeAll+0x12c>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d009      	beq.n	800b82c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b818:	2301      	movs	r3, #1
 800b81a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b81c:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <xTaskResumeAll+0x134>)
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b82c:	f7fe faa2 	bl	8009d74 <vPortExitCritical>

	return xAlreadyYielded;
 800b830:	68bb      	ldr	r3, [r7, #8]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20001a70 	.word	0x20001a70
 800b840:	20001a48 	.word	0x20001a48
 800b844:	20001a08 	.word	0x20001a08
 800b848:	20001a50 	.word	0x20001a50
 800b84c:	2000194c 	.word	0x2000194c
 800b850:	20001948 	.word	0x20001948
 800b854:	20001a5c 	.word	0x20001a5c
 800b858:	20001a58 	.word	0x20001a58
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b866:	4b04      	ldr	r3, [pc, #16]	; (800b878 <xTaskGetTickCount+0x18>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b86c:	687b      	ldr	r3, [r7, #4]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	bc80      	pop	{r7}
 800b876:	4770      	bx	lr
 800b878:	20001a4c 	.word	0x20001a4c

0800b87c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b882:	2300      	movs	r3, #0
 800b884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b886:	4b50      	ldr	r3, [pc, #320]	; (800b9c8 <xTaskIncrementTick+0x14c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 808c 	bne.w	800b9a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b890:	4b4e      	ldr	r3, [pc, #312]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b898:	4a4c      	ldr	r2, [pc, #304]	; (800b9cc <xTaskIncrementTick+0x150>)
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d11f      	bne.n	800b8e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8a4:	4b4a      	ldr	r3, [pc, #296]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d009      	beq.n	800b8c2 <xTaskIncrementTick+0x46>
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	603b      	str	r3, [r7, #0]
 800b8c0:	e7fe      	b.n	800b8c0 <xTaskIncrementTick+0x44>
 800b8c2:	4b43      	ldr	r3, [pc, #268]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	4b42      	ldr	r3, [pc, #264]	; (800b9d4 <xTaskIncrementTick+0x158>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a40      	ldr	r2, [pc, #256]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	4a40      	ldr	r2, [pc, #256]	; (800b9d4 <xTaskIncrementTick+0x158>)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	4b40      	ldr	r3, [pc, #256]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	4a3e      	ldr	r2, [pc, #248]	; (800b9d8 <xTaskIncrementTick+0x15c>)
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	f000 fac6 	bl	800be70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b8e4:	4b3d      	ldr	r3, [pc, #244]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d34d      	bcc.n	800b98a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ee:	4b38      	ldr	r3, [pc, #224]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d101      	bne.n	800b8fc <xTaskIncrementTick+0x80>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	e000      	b.n	800b8fe <xTaskIncrementTick+0x82>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d004      	beq.n	800b90c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b902:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b904:	f04f 32ff 	mov.w	r2, #4294967295
 800b908:	601a      	str	r2, [r3, #0]
					break;
 800b90a:	e03e      	b.n	800b98a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b90c:	4b30      	ldr	r3, [pc, #192]	; (800b9d0 <xTaskIncrementTick+0x154>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	429a      	cmp	r2, r3
 800b922:	d203      	bcs.n	800b92c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b924:	4a2d      	ldr	r2, [pc, #180]	; (800b9dc <xTaskIncrementTick+0x160>)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6013      	str	r3, [r2, #0]
						break;
 800b92a:	e02e      	b.n	800b98a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	3304      	adds	r3, #4
 800b930:	4618      	mov	r0, r3
 800b932:	f7fe f8dd 	bl	8009af0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d004      	beq.n	800b948 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	3318      	adds	r3, #24
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe f8d4 	bl	8009af0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94c:	2201      	movs	r2, #1
 800b94e:	409a      	lsls	r2, r3
 800b950:	4b23      	ldr	r3, [pc, #140]	; (800b9e0 <xTaskIncrementTick+0x164>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4313      	orrs	r3, r2
 800b956:	4a22      	ldr	r2, [pc, #136]	; (800b9e0 <xTaskIncrementTick+0x164>)
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b95e:	4613      	mov	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4a1f      	ldr	r2, [pc, #124]	; (800b9e4 <xTaskIncrementTick+0x168>)
 800b968:	441a      	add	r2, r3
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4619      	mov	r1, r3
 800b970:	4610      	mov	r0, r2
 800b972:	f7fe f862 	bl	8009a3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <xTaskIncrementTick+0x16c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b980:	429a      	cmp	r2, r3
 800b982:	d3b4      	bcc.n	800b8ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b984:	2301      	movs	r3, #1
 800b986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b988:	e7b1      	b.n	800b8ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b98a:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <xTaskIncrementTick+0x16c>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b990:	4914      	ldr	r1, [pc, #80]	; (800b9e4 <xTaskIncrementTick+0x168>)
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	440b      	add	r3, r1
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d907      	bls.n	800b9b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	e004      	b.n	800b9b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b9a8:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <xTaskIncrementTick+0x170>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	4a0f      	ldr	r2, [pc, #60]	; (800b9ec <xTaskIncrementTick+0x170>)
 800b9b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b9b2:	4b0f      	ldr	r3, [pc, #60]	; (800b9f0 <xTaskIncrementTick+0x174>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b9be:	697b      	ldr	r3, [r7, #20]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20001a70 	.word	0x20001a70
 800b9cc:	20001a4c 	.word	0x20001a4c
 800b9d0:	20001a00 	.word	0x20001a00
 800b9d4:	20001a04 	.word	0x20001a04
 800b9d8:	20001a60 	.word	0x20001a60
 800b9dc:	20001a68 	.word	0x20001a68
 800b9e0:	20001a50 	.word	0x20001a50
 800b9e4:	2000194c 	.word	0x2000194c
 800b9e8:	20001948 	.word	0x20001948
 800b9ec:	20001a58 	.word	0x20001a58
 800b9f0:	20001a5c 	.word	0x20001a5c

0800b9f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b9fa:	4b26      	ldr	r3, [pc, #152]	; (800ba94 <vTaskSwitchContext+0xa0>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba02:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <vTaskSwitchContext+0xa4>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba08:	e03e      	b.n	800ba88 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ba0a:	4b23      	ldr	r3, [pc, #140]	; (800ba98 <vTaskSwitchContext+0xa4>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ba10:	4b22      	ldr	r3, [pc, #136]	; (800ba9c <vTaskSwitchContext+0xa8>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	fab3 f383 	clz	r3, r3
 800ba1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ba1e:	7afb      	ldrb	r3, [r7, #11]
 800ba20:	f1c3 031f 	rsb	r3, r3, #31
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	491e      	ldr	r1, [pc, #120]	; (800baa0 <vTaskSwitchContext+0xac>)
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4413      	add	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	440b      	add	r3, r1
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d109      	bne.n	800ba4e <vTaskSwitchContext+0x5a>
	__asm volatile
 800ba3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3e:	f383 8811 	msr	BASEPRI, r3
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	e7fe      	b.n	800ba4c <vTaskSwitchContext+0x58>
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	4613      	mov	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4a11      	ldr	r2, [pc, #68]	; (800baa0 <vTaskSwitchContext+0xac>)
 800ba5a:	4413      	add	r3, r2
 800ba5c:	613b      	str	r3, [r7, #16]
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	605a      	str	r2, [r3, #4]
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	3308      	adds	r3, #8
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d104      	bne.n	800ba7e <vTaskSwitchContext+0x8a>
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	605a      	str	r2, [r3, #4]
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	4a07      	ldr	r2, [pc, #28]	; (800baa4 <vTaskSwitchContext+0xb0>)
 800ba86:	6013      	str	r3, [r2, #0]
}
 800ba88:	bf00      	nop
 800ba8a:	371c      	adds	r7, #28
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bc80      	pop	{r7}
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	20001a70 	.word	0x20001a70
 800ba98:	20001a5c 	.word	0x20001a5c
 800ba9c:	20001a50 	.word	0x20001a50
 800baa0:	2000194c 	.word	0x2000194c
 800baa4:	20001948 	.word	0x20001948

0800baa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d109      	bne.n	800bacc <vTaskPlaceOnEventList+0x24>
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	e7fe      	b.n	800baca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bacc:	4b07      	ldr	r3, [pc, #28]	; (800baec <vTaskPlaceOnEventList+0x44>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	3318      	adds	r3, #24
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7fd ffd3 	bl	8009a80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bada:	2101      	movs	r1, #1
 800badc:	6838      	ldr	r0, [r7, #0]
 800bade:	f000 fbc5 	bl	800c26c <prvAddCurrentTaskToDelayedList>
}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20001948 	.word	0x20001948

0800baf0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d109      	bne.n	800bb16 <vTaskPlaceOnEventListRestricted+0x26>
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e7fe      	b.n	800bb14 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb16:	4b0a      	ldr	r3, [pc, #40]	; (800bb40 <vTaskPlaceOnEventListRestricted+0x50>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3318      	adds	r3, #24
 800bb1c:	4619      	mov	r1, r3
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7fd ff8b 	bl	8009a3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d002      	beq.n	800bb30 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800bb2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	68b8      	ldr	r0, [r7, #8]
 800bb34:	f000 fb9a 	bl	800c26c <prvAddCurrentTaskToDelayedList>
	}
 800bb38:	bf00      	nop
 800bb3a:	3718      	adds	r7, #24
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20001948 	.word	0x20001948

0800bb44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <xTaskRemoveFromEventList+0x2a>
 800bb5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e7fe      	b.n	800bb6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	3318      	adds	r3, #24
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fd ffbc 	bl	8009af0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb78:	4b1d      	ldr	r3, [pc, #116]	; (800bbf0 <xTaskRemoveFromEventList+0xac>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11c      	bne.n	800bbba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	3304      	adds	r3, #4
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fd ffb3 	bl	8009af0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8e:	2201      	movs	r2, #1
 800bb90:	409a      	lsls	r2, r3
 800bb92:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <xTaskRemoveFromEventList+0xb0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	4a16      	ldr	r2, [pc, #88]	; (800bbf4 <xTaskRemoveFromEventList+0xb0>)
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba0:	4613      	mov	r3, r2
 800bba2:	009b      	lsls	r3, r3, #2
 800bba4:	4413      	add	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4a13      	ldr	r2, [pc, #76]	; (800bbf8 <xTaskRemoveFromEventList+0xb4>)
 800bbaa:	441a      	add	r2, r3
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4610      	mov	r0, r2
 800bbb4:	f7fd ff41 	bl	8009a3a <vListInsertEnd>
 800bbb8:	e005      	b.n	800bbc6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	3318      	adds	r3, #24
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	480e      	ldr	r0, [pc, #56]	; (800bbfc <xTaskRemoveFromEventList+0xb8>)
 800bbc2:	f7fd ff3a 	bl	8009a3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbca:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <xTaskRemoveFromEventList+0xbc>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d905      	bls.n	800bbe0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <xTaskRemoveFromEventList+0xc0>)
 800bbda:	2201      	movs	r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e001      	b.n	800bbe4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800bbe4:	697b      	ldr	r3, [r7, #20]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20001a70 	.word	0x20001a70
 800bbf4:	20001a50 	.word	0x20001a50
 800bbf8:	2000194c 	.word	0x2000194c
 800bbfc:	20001a08 	.word	0x20001a08
 800bc00:	20001948 	.word	0x20001948
 800bc04:	20001a5c 	.word	0x20001a5c

0800bc08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc10:	4b06      	ldr	r3, [pc, #24]	; (800bc2c <vTaskInternalSetTimeOutState+0x24>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc18:	4b05      	ldr	r3, [pc, #20]	; (800bc30 <vTaskInternalSetTimeOutState+0x28>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	605a      	str	r2, [r3, #4]
}
 800bc20:	bf00      	nop
 800bc22:	370c      	adds	r7, #12
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bc80      	pop	{r7}
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	20001a60 	.word	0x20001a60
 800bc30:	20001a4c 	.word	0x20001a4c

0800bc34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d109      	bne.n	800bc58 <xTaskCheckForTimeOut+0x24>
 800bc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	613b      	str	r3, [r7, #16]
 800bc56:	e7fe      	b.n	800bc56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d109      	bne.n	800bc72 <xTaskCheckForTimeOut+0x3e>
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	e7fe      	b.n	800bc70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bc72:	f7fe f851 	bl	8009d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc76:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <xTaskCheckForTimeOut+0xb8>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	69ba      	ldr	r2, [r7, #24]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8e:	d102      	bne.n	800bc96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e023      	b.n	800bcde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <xTaskCheckForTimeOut+0xbc>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d007      	beq.n	800bcb2 <xTaskCheckForTimeOut+0x7e>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d802      	bhi.n	800bcb2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcac:	2301      	movs	r3, #1
 800bcae:	61fb      	str	r3, [r7, #28]
 800bcb0:	e015      	b.n	800bcde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d90b      	bls.n	800bcd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ff9d 	bl	800bc08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	e004      	b.n	800bcde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcde:	f7fe f849 	bl	8009d74 <vPortExitCritical>

	return xReturn;
 800bce2:	69fb      	ldr	r3, [r7, #28]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3720      	adds	r7, #32
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	20001a4c 	.word	0x20001a4c
 800bcf0:	20001a60 	.word	0x20001a60

0800bcf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcf8:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <vTaskMissedYield+0x14>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bc80      	pop	{r7}
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop
 800bd08:	20001a5c 	.word	0x20001a5c

0800bd0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd14:	f000 f852 	bl	800bdbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <prvIdleTask+0x28>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d9f9      	bls.n	800bd14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd20:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <prvIdleTask+0x2c>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd30:	e7f0      	b.n	800bd14 <prvIdleTask+0x8>
 800bd32:	bf00      	nop
 800bd34:	2000194c 	.word	0x2000194c
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	e00c      	b.n	800bd62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <prvInitialiseTaskLists+0x60>)
 800bd54:	4413      	add	r3, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fd fe44 	bl	80099e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b06      	cmp	r3, #6
 800bd66:	d9ef      	bls.n	800bd48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd68:	480d      	ldr	r0, [pc, #52]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd6a:	f7fd fe3b 	bl	80099e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd6e:	480d      	ldr	r0, [pc, #52]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd70:	f7fd fe38 	bl	80099e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd74:	480c      	ldr	r0, [pc, #48]	; (800bda8 <prvInitialiseTaskLists+0x6c>)
 800bd76:	f7fd fe35 	bl	80099e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd7a:	480c      	ldr	r0, [pc, #48]	; (800bdac <prvInitialiseTaskLists+0x70>)
 800bd7c:	f7fd fe32 	bl	80099e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd80:	480b      	ldr	r0, [pc, #44]	; (800bdb0 <prvInitialiseTaskLists+0x74>)
 800bd82:	f7fd fe2f 	bl	80099e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <prvInitialiseTaskLists+0x78>)
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <prvInitialiseTaskLists+0x7c>)
 800bd8e:	4a05      	ldr	r2, [pc, #20]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	2000194c 	.word	0x2000194c
 800bda0:	200019d8 	.word	0x200019d8
 800bda4:	200019ec 	.word	0x200019ec
 800bda8:	20001a08 	.word	0x20001a08
 800bdac:	20001a1c 	.word	0x20001a1c
 800bdb0:	20001a34 	.word	0x20001a34
 800bdb4:	20001a00 	.word	0x20001a00
 800bdb8:	20001a04 	.word	0x20001a04

0800bdbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdc2:	e019      	b.n	800bdf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdc4:	f7fd ffa8 	bl	8009d18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800bdc8:	4b0f      	ldr	r3, [pc, #60]	; (800be08 <prvCheckTasksWaitingTermination+0x4c>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fd fe8b 	bl	8009af0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdda:	4b0c      	ldr	r3, [pc, #48]	; (800be0c <prvCheckTasksWaitingTermination+0x50>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	4a0a      	ldr	r2, [pc, #40]	; (800be0c <prvCheckTasksWaitingTermination+0x50>)
 800bde2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	4a09      	ldr	r2, [pc, #36]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bdec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdee:	f7fd ffc1 	bl	8009d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f80e 	bl	800be14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e1      	bne.n	800bdc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	20001a1c 	.word	0x20001a1c
 800be0c:	20001a48 	.word	0x20001a48
 800be10:	20001a30 	.word	0x20001a30

0800be14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be22:	2b00      	cmp	r3, #0
 800be24:	d108      	bne.n	800be38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7fe f92c 	bl	800a088 <vPortFree>
				vPortFree( pxTCB );
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7fe f929 	bl	800a088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be36:	e017      	b.n	800be68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be3e:	2b01      	cmp	r3, #1
 800be40:	d103      	bne.n	800be4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fe f920 	bl	800a088 <vPortFree>
	}
 800be48:	e00e      	b.n	800be68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be50:	2b02      	cmp	r3, #2
 800be52:	d009      	beq.n	800be68 <prvDeleteTCB+0x54>
 800be54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e7fe      	b.n	800be66 <prvDeleteTCB+0x52>
	}
 800be68:	bf00      	nop
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be76:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <prvResetNextTaskUnblockTime+0x40>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <prvResetNextTaskUnblockTime+0x14>
 800be80:	2301      	movs	r3, #1
 800be82:	e000      	b.n	800be86 <prvResetNextTaskUnblockTime+0x16>
 800be84:	2300      	movs	r3, #0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be8a:	4b0a      	ldr	r3, [pc, #40]	; (800beb4 <prvResetNextTaskUnblockTime+0x44>)
 800be8c:	f04f 32ff 	mov.w	r2, #4294967295
 800be90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be92:	e008      	b.n	800bea6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800be94:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <prvResetNextTaskUnblockTime+0x40>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	4a04      	ldr	r2, [pc, #16]	; (800beb4 <prvResetNextTaskUnblockTime+0x44>)
 800bea4:	6013      	str	r3, [r2, #0]
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	bc80      	pop	{r7}
 800beae:	4770      	bx	lr
 800beb0:	20001a00 	.word	0x20001a00
 800beb4:	20001a68 	.word	0x20001a68

0800beb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bebe:	4b0b      	ldr	r3, [pc, #44]	; (800beec <xTaskGetSchedulerState+0x34>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bec6:	2301      	movs	r3, #1
 800bec8:	607b      	str	r3, [r7, #4]
 800beca:	e008      	b.n	800bede <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800becc:	4b08      	ldr	r3, [pc, #32]	; (800bef0 <xTaskGetSchedulerState+0x38>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bed4:	2302      	movs	r3, #2
 800bed6:	607b      	str	r3, [r7, #4]
 800bed8:	e001      	b.n	800bede <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800beda:	2300      	movs	r3, #0
 800bedc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bede:	687b      	ldr	r3, [r7, #4]
	}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bc80      	pop	{r7}
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	20001a54 	.word	0x20001a54
 800bef0:	20001a70 	.word	0x20001a70

0800bef4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d06e      	beq.n	800bfe8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0e:	4b39      	ldr	r3, [pc, #228]	; (800bff4 <xTaskPriorityInherit+0x100>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d25e      	bcs.n	800bfd6 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	699b      	ldr	r3, [r3, #24]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	db06      	blt.n	800bf2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf20:	4b34      	ldr	r3, [pc, #208]	; (800bff4 <xTaskPriorityInherit+0x100>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf26:	f1c3 0207 	rsb	r2, r3, #7
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	6959      	ldr	r1, [r3, #20]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf36:	4613      	mov	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4413      	add	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4a2e      	ldr	r2, [pc, #184]	; (800bff8 <xTaskPriorityInherit+0x104>)
 800bf40:	4413      	add	r3, r2
 800bf42:	4299      	cmp	r1, r3
 800bf44:	d101      	bne.n	800bf4a <xTaskPriorityInherit+0x56>
 800bf46:	2301      	movs	r3, #1
 800bf48:	e000      	b.n	800bf4c <xTaskPriorityInherit+0x58>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d03a      	beq.n	800bfc6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fd fdcb 	bl	8009af0 <uxListRemove>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d115      	bne.n	800bf8c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf64:	4924      	ldr	r1, [pc, #144]	; (800bff8 <xTaskPriorityInherit+0x104>)
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <xTaskPriorityInherit+0x98>
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf80:	43da      	mvns	r2, r3
 800bf82:	4b1e      	ldr	r3, [pc, #120]	; (800bffc <xTaskPriorityInherit+0x108>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4013      	ands	r3, r2
 800bf88:	4a1c      	ldr	r2, [pc, #112]	; (800bffc <xTaskPriorityInherit+0x108>)
 800bf8a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf8c:	4b19      	ldr	r3, [pc, #100]	; (800bff4 <xTaskPriorityInherit+0x100>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	409a      	lsls	r2, r3
 800bf9e:	4b17      	ldr	r3, [pc, #92]	; (800bffc <xTaskPriorityInherit+0x108>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	4a15      	ldr	r2, [pc, #84]	; (800bffc <xTaskPriorityInherit+0x108>)
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfac:	4613      	mov	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4a10      	ldr	r2, [pc, #64]	; (800bff8 <xTaskPriorityInherit+0x104>)
 800bfb6:	441a      	add	r2, r3
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	3304      	adds	r3, #4
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	f7fd fd3b 	bl	8009a3a <vListInsertEnd>
 800bfc4:	e004      	b.n	800bfd0 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bfc6:	4b0b      	ldr	r3, [pc, #44]	; (800bff4 <xTaskPriorityInherit+0x100>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	60fb      	str	r3, [r7, #12]
 800bfd4:	e008      	b.n	800bfe8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfda:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <xTaskPriorityInherit+0x100>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d201      	bcs.n	800bfe8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
	}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	20001948 	.word	0x20001948
 800bff8:	2000194c 	.word	0x2000194c
 800bffc:	20001a50 	.word	0x20001a50

0800c000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d06c      	beq.n	800c0f0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c016:	4b39      	ldr	r3, [pc, #228]	; (800c0fc <xTaskPriorityDisinherit+0xfc>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	693a      	ldr	r2, [r7, #16]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d009      	beq.n	800c034 <xTaskPriorityDisinherit+0x34>
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	f383 8811 	msr	BASEPRI, r3
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	e7fe      	b.n	800c032 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d109      	bne.n	800c050 <xTaskPriorityDisinherit+0x50>
 800c03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	60bb      	str	r3, [r7, #8]
 800c04e:	e7fe      	b.n	800c04e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c054:	1e5a      	subs	r2, r3, #1
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c062:	429a      	cmp	r2, r3
 800c064:	d044      	beq.n	800c0f0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d140      	bne.n	800c0f0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	3304      	adds	r3, #4
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd fd3c 	bl	8009af0 <uxListRemove>
 800c078:	4603      	mov	r3, r0
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d115      	bne.n	800c0aa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c082:	491f      	ldr	r1, [pc, #124]	; (800c100 <xTaskPriorityDisinherit+0x100>)
 800c084:	4613      	mov	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	440b      	add	r3, r1
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <xTaskPriorityDisinherit+0xaa>
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	2201      	movs	r2, #1
 800c09a:	fa02 f303 	lsl.w	r3, r2, r3
 800c09e:	43da      	mvns	r2, r3
 800c0a0:	4b18      	ldr	r3, [pc, #96]	; (800c104 <xTaskPriorityDisinherit+0x104>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	4a17      	ldr	r2, [pc, #92]	; (800c104 <xTaskPriorityDisinherit+0x104>)
 800c0a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b6:	f1c3 0207 	rsb	r2, r3, #7
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	409a      	lsls	r2, r3
 800c0c6:	4b0f      	ldr	r3, [pc, #60]	; (800c104 <xTaskPriorityDisinherit+0x104>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	4a0d      	ldr	r2, [pc, #52]	; (800c104 <xTaskPriorityDisinherit+0x104>)
 800c0ce:	6013      	str	r3, [r2, #0]
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4a08      	ldr	r2, [pc, #32]	; (800c100 <xTaskPriorityDisinherit+0x100>)
 800c0de:	441a      	add	r2, r3
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	f7fd fca7 	bl	8009a3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0f0:	697b      	ldr	r3, [r7, #20]
	}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20001948 	.word	0x20001948
 800c100:	2000194c 	.word	0x2000194c
 800c104:	20001a50 	.word	0x20001a50

0800c108 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b088      	sub	sp, #32
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c116:	2301      	movs	r3, #1
 800c118:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 8086 	beq.w	800c22e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c126:	2b00      	cmp	r3, #0
 800c128:	d109      	bne.n	800c13e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	e7fe      	b.n	800c13c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	429a      	cmp	r2, r3
 800c146:	d202      	bcs.n	800c14e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	61fb      	str	r3, [r7, #28]
 800c14c:	e002      	b.n	800c154 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c152:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d067      	beq.n	800c22e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	429a      	cmp	r2, r3
 800c166:	d162      	bne.n	800c22e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c168:	4b33      	ldr	r3, [pc, #204]	; (800c238 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d109      	bne.n	800c186 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	60bb      	str	r3, [r7, #8]
 800c184:	e7fe      	b.n	800c184 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	69fa      	ldr	r2, [r7, #28]
 800c190:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	2b00      	cmp	r3, #0
 800c198:	db04      	blt.n	800c1a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	f1c3 0207 	rsb	r2, r3, #7
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	6959      	ldr	r1, [r3, #20]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4a22      	ldr	r2, [pc, #136]	; (800c23c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c1b4:	4413      	add	r3, r2
 800c1b6:	4299      	cmp	r1, r3
 800c1b8:	d101      	bne.n	800c1be <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e000      	b.n	800c1c0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d034      	beq.n	800c22e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fd fc91 	bl	8009af0 <uxListRemove>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d115      	bne.n	800c200 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c1d4:	69bb      	ldr	r3, [r7, #24]
 800c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d8:	4918      	ldr	r1, [pc, #96]	; (800c23c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	440b      	add	r3, r1
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10a      	bne.n	800c200 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1f4:	43da      	mvns	r2, r3
 800c1f6:	4b12      	ldr	r3, [pc, #72]	; (800c240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4013      	ands	r3, r2
 800c1fc:	4a10      	ldr	r2, [pc, #64]	; (800c240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c1fe:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c204:	2201      	movs	r2, #1
 800c206:	409a      	lsls	r2, r3
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	4a0c      	ldr	r2, [pc, #48]	; (800c240 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c210:	6013      	str	r3, [r2, #0]
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c216:	4613      	mov	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	4a07      	ldr	r2, [pc, #28]	; (800c23c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c220:	441a      	add	r2, r3
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	3304      	adds	r3, #4
 800c226:	4619      	mov	r1, r3
 800c228:	4610      	mov	r0, r2
 800c22a:	f7fd fc06 	bl	8009a3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c22e:	bf00      	nop
 800c230:	3720      	adds	r7, #32
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20001948 	.word	0x20001948
 800c23c:	2000194c 	.word	0x2000194c
 800c240:	20001a50 	.word	0x20001a50

0800c244 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800c244:	b480      	push	{r7}
 800c246:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c248:	4b07      	ldr	r3, [pc, #28]	; (800c268 <pvTaskIncrementMutexHeldCount+0x24>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <pvTaskIncrementMutexHeldCount+0x24>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c256:	3201      	adds	r2, #1
 800c258:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c25a:	4b03      	ldr	r3, [pc, #12]	; (800c268 <pvTaskIncrementMutexHeldCount+0x24>)
 800c25c:	681b      	ldr	r3, [r3, #0]
	}
 800c25e:	4618      	mov	r0, r3
 800c260:	46bd      	mov	sp, r7
 800c262:	bc80      	pop	{r7}
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20001948 	.word	0x20001948

0800c26c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c276:	4b29      	ldr	r3, [pc, #164]	; (800c31c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c27c:	4b28      	ldr	r3, [pc, #160]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3304      	adds	r3, #4
 800c282:	4618      	mov	r0, r3
 800c284:	f7fd fc34 	bl	8009af0 <uxListRemove>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800c28e:	4b24      	ldr	r3, [pc, #144]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	2201      	movs	r2, #1
 800c296:	fa02 f303 	lsl.w	r3, r2, r3
 800c29a:	43da      	mvns	r2, r3
 800c29c:	4b21      	ldr	r3, [pc, #132]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	4a20      	ldr	r2, [pc, #128]	; (800c324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d10a      	bne.n	800c2c4 <prvAddCurrentTaskToDelayedList+0x58>
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d007      	beq.n	800c2c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2b4:	4b1a      	ldr	r3, [pc, #104]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	481a      	ldr	r0, [pc, #104]	; (800c328 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2be:	f7fd fbbc 	bl	8009a3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2c2:	e026      	b.n	800c312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2cc:	4b14      	ldr	r3, [pc, #80]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d209      	bcs.n	800c2f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2dc:	4b13      	ldr	r3, [pc, #76]	; (800c32c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7fd fbc9 	bl	8009a80 <vListInsert>
}
 800c2ee:	e010      	b.n	800c312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f0:	4b0f      	ldr	r3, [pc, #60]	; (800c330 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	4b0a      	ldr	r3, [pc, #40]	; (800c320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	f7fd fbbf 	bl	8009a80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c302:	4b0c      	ldr	r3, [pc, #48]	; (800c334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d202      	bcs.n	800c312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c30c:	4a09      	ldr	r2, [pc, #36]	; (800c334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	6013      	str	r3, [r2, #0]
}
 800c312:	bf00      	nop
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	20001a4c 	.word	0x20001a4c
 800c320:	20001948 	.word	0x20001948
 800c324:	20001a50 	.word	0x20001a50
 800c328:	20001a34 	.word	0x20001a34
 800c32c:	20001a04 	.word	0x20001a04
 800c330:	20001a00 	.word	0x20001a00
 800c334:	20001a68 	.word	0x20001a68

0800c338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08a      	sub	sp, #40	; 0x28
 800c33c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c33e:	2300      	movs	r3, #0
 800c340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c342:	f000 fb37 	bl	800c9b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c346:	4b1c      	ldr	r3, [pc, #112]	; (800c3b8 <xTimerCreateTimerTask+0x80>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d021      	beq.n	800c392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c356:	1d3a      	adds	r2, r7, #4
 800c358:	f107 0108 	add.w	r1, r7, #8
 800c35c:	f107 030c 	add.w	r3, r7, #12
 800c360:	4618      	mov	r0, r3
 800c362:	f7f3 ff3f 	bl	80001e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	9202      	str	r2, [sp, #8]
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	2302      	movs	r3, #2
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	2300      	movs	r3, #0
 800c376:	460a      	mov	r2, r1
 800c378:	4910      	ldr	r1, [pc, #64]	; (800c3bc <xTimerCreateTimerTask+0x84>)
 800c37a:	4811      	ldr	r0, [pc, #68]	; (800c3c0 <xTimerCreateTimerTask+0x88>)
 800c37c:	f7fe ff16 	bl	800b1ac <xTaskCreateStatic>
 800c380:	4602      	mov	r2, r0
 800c382:	4b10      	ldr	r3, [pc, #64]	; (800c3c4 <xTimerCreateTimerTask+0x8c>)
 800c384:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <xTimerCreateTimerTask+0x8c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c38e:	2301      	movs	r3, #1
 800c390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d109      	bne.n	800c3ac <xTimerCreateTimerTask+0x74>
 800c398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	613b      	str	r3, [r7, #16]
 800c3aa:	e7fe      	b.n	800c3aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 800c3ac:	697b      	ldr	r3, [r7, #20]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3718      	adds	r7, #24
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20001aa4 	.word	0x20001aa4
 800c3bc:	0800d49c 	.word	0x0800d49c
 800c3c0:	0800c5fd 	.word	0x0800c5fd
 800c3c4:	20001aa8 	.word	0x20001aa8

0800c3c8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	af02      	add	r7, sp, #8
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800c3d6:	202c      	movs	r0, #44	; 0x2c
 800c3d8:	f7fd fd94 	bl	8009f04 <pvPortMalloc>
 800c3dc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00d      	beq.n	800c400 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	68b9      	ldr	r1, [r7, #8]
 800c3f2:	68f8      	ldr	r0, [r7, #12]
 800c3f4:	f000 f844 	bl	800c480 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800c400:	697b      	ldr	r3, [r7, #20]
	}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b08a      	sub	sp, #40	; 0x28
 800c40e:	af02      	add	r7, sp, #8
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
 800c416:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c418:	232c      	movs	r3, #44	; 0x2c
 800c41a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	2b2c      	cmp	r3, #44	; 0x2c
 800c420:	d009      	beq.n	800c436 <xTimerCreateStatic+0x2c>
 800c422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	61bb      	str	r3, [r7, #24]
 800c434:	e7fe      	b.n	800c434 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d109      	bne.n	800c450 <xTimerCreateStatic+0x46>
 800c43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c440:	f383 8811 	msr	BASEPRI, r3
 800c444:	f3bf 8f6f 	isb	sy
 800c448:	f3bf 8f4f 	dsb	sy
 800c44c:	617b      	str	r3, [r7, #20]
 800c44e:	e7fe      	b.n	800c44e <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00d      	beq.n	800c476 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	68b9      	ldr	r1, [r7, #8]
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 f809 	bl	800c480 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	2201      	movs	r2, #1
 800c472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800c476:	69fb      	ldr	r3, [r7, #28]
	}
 800c478:	4618      	mov	r0, r3
 800c47a:	3720      	adds	r7, #32
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d109      	bne.n	800c4a8 <prvInitialiseNewTimer+0x28>
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	e7fe      	b.n	800c4a6 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d015      	beq.n	800c4da <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c4ae:	f000 fa81 	bl	800c9b4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	68ba      	ldr	r2, [r7, #8]
 800c4bc:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800c4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	683a      	ldr	r2, [r7, #0]
 800c4c8:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	6a3a      	ldr	r2, [r7, #32]
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7fd faa4 	bl	8009a22 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c4da:	bf00      	nop
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	60b9      	str	r1, [r7, #8]
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d109      	bne.n	800c510 <xTimerGenericCommand+0x2c>
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	623b      	str	r3, [r7, #32]
 800c50e:	e7fe      	b.n	800c50e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c510:	4b19      	ldr	r3, [pc, #100]	; (800c578 <xTimerGenericCommand+0x94>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d02a      	beq.n	800c56e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	2b05      	cmp	r3, #5
 800c528:	dc18      	bgt.n	800c55c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c52a:	f7ff fcc5 	bl	800beb8 <xTaskGetSchedulerState>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b02      	cmp	r3, #2
 800c532:	d109      	bne.n	800c548 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c534:	4b10      	ldr	r3, [pc, #64]	; (800c578 <xTimerGenericCommand+0x94>)
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	f107 0114 	add.w	r1, r7, #20
 800c53c:	2300      	movs	r3, #0
 800c53e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c540:	f7fe f838 	bl	800a5b4 <xQueueGenericSend>
 800c544:	6278      	str	r0, [r7, #36]	; 0x24
 800c546:	e012      	b.n	800c56e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c548:	4b0b      	ldr	r3, [pc, #44]	; (800c578 <xTimerGenericCommand+0x94>)
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	f107 0114 	add.w	r1, r7, #20
 800c550:	2300      	movs	r3, #0
 800c552:	2200      	movs	r2, #0
 800c554:	f7fe f82e 	bl	800a5b4 <xQueueGenericSend>
 800c558:	6278      	str	r0, [r7, #36]	; 0x24
 800c55a:	e008      	b.n	800c56e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c55c:	4b06      	ldr	r3, [pc, #24]	; (800c578 <xTimerGenericCommand+0x94>)
 800c55e:	6818      	ldr	r0, [r3, #0]
 800c560:	f107 0114 	add.w	r1, r7, #20
 800c564:	2300      	movs	r3, #0
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	f7fe f91e 	bl	800a7a8 <xQueueGenericSendFromISR>
 800c56c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c570:	4618      	mov	r0, r3
 800c572:	3728      	adds	r7, #40	; 0x28
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	20001aa4 	.word	0x20001aa4

0800c57c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b088      	sub	sp, #32
 800c580:	af02      	add	r7, sp, #8
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c586:	4b1c      	ldr	r3, [pc, #112]	; (800c5f8 <prvProcessExpiredTimer+0x7c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	3304      	adds	r3, #4
 800c594:	4618      	mov	r0, r3
 800c596:	f7fd faab 	bl	8009af0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	69db      	ldr	r3, [r3, #28]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d121      	bne.n	800c5e6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	699a      	ldr	r2, [r3, #24]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	18d1      	adds	r1, r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	6978      	ldr	r0, [r7, #20]
 800c5b0:	f000 f8c8 	bl	800c744 <prvInsertTimerInActiveList>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d015      	beq.n	800c5e6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	9300      	str	r3, [sp, #0]
 800c5be:	2300      	movs	r3, #0
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	6978      	ldr	r0, [r7, #20]
 800c5c6:	f7ff ff8d 	bl	800c4e4 <xTimerGenericCommand>
 800c5ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d109      	bne.n	800c5e6 <prvProcessExpiredTimer+0x6a>
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	60fb      	str	r3, [r7, #12]
 800c5e4:	e7fe      	b.n	800c5e4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ea:	6978      	ldr	r0, [r7, #20]
 800c5ec:	4798      	blx	r3
}
 800c5ee:	bf00      	nop
 800c5f0:	3718      	adds	r7, #24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20001a9c 	.word	0x20001a9c

0800c5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c604:	f107 0308 	add.w	r3, r7, #8
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f857 	bl	800c6bc <prvGetNextExpireTime>
 800c60e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	4619      	mov	r1, r3
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 f803 	bl	800c620 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c61a:	f000 f8d5 	bl	800c7c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c61e:	e7f1      	b.n	800c604 <prvTimerTask+0x8>

0800c620 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c62a:	f7ff f86f 	bl	800b70c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c62e:	f107 0308 	add.w	r3, r7, #8
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f866 	bl	800c704 <prvSampleTimeNow>
 800c638:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d130      	bne.n	800c6a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <prvProcessTimerOrBlockTask+0x3c>
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d806      	bhi.n	800c65c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c64e:	f7ff f86b 	bl	800b728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c652:	68f9      	ldr	r1, [r7, #12]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f7ff ff91 	bl	800c57c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c65a:	e024      	b.n	800c6a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d008      	beq.n	800c674 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c662:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <prvProcessTimerOrBlockTask+0x90>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	bf0c      	ite	eq
 800c66c:	2301      	moveq	r3, #1
 800c66e:	2300      	movne	r3, #0
 800c670:	b2db      	uxtb	r3, r3
 800c672:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c674:	4b0f      	ldr	r3, [pc, #60]	; (800c6b4 <prvProcessTimerOrBlockTask+0x94>)
 800c676:	6818      	ldr	r0, [r3, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	683a      	ldr	r2, [r7, #0]
 800c680:	4619      	mov	r1, r3
 800c682:	f7fe fd5f 	bl	800b144 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c686:	f7ff f84f 	bl	800b728 <xTaskResumeAll>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d10a      	bne.n	800c6a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c690:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <prvProcessTimerOrBlockTask+0x98>)
 800c692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
}
 800c6a0:	e001      	b.n	800c6a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6a2:	f7ff f841 	bl	800b728 <xTaskResumeAll>
}
 800c6a6:	bf00      	nop
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20001aa0 	.word	0x20001aa0
 800c6b4:	20001aa4 	.word	0x20001aa4
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6c4:	4b0e      	ldr	r3, [pc, #56]	; (800c700 <prvGetNextExpireTime+0x44>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	bf0c      	ite	eq
 800c6ce:	2301      	moveq	r3, #1
 800c6d0:	2300      	movne	r3, #0
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d105      	bne.n	800c6ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6e2:	4b07      	ldr	r3, [pc, #28]	; (800c700 <prvGetNextExpireTime+0x44>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e001      	b.n	800c6f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3714      	adds	r7, #20
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bc80      	pop	{r7}
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	20001a9c 	.word	0x20001a9c

0800c704 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c70c:	f7ff f8a8 	bl	800b860 <xTaskGetTickCount>
 800c710:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c712:	4b0b      	ldr	r3, [pc, #44]	; (800c740 <prvSampleTimeNow+0x3c>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d205      	bcs.n	800c728 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c71c:	f000 f8ea 	bl	800c8f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	601a      	str	r2, [r3, #0]
 800c726:	e002      	b.n	800c72e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c72e:	4a04      	ldr	r2, [pc, #16]	; (800c740 <prvSampleTimeNow+0x3c>)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c734:	68fb      	ldr	r3, [r7, #12]
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	20001aac 	.word	0x20001aac

0800c744 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	68fa      	ldr	r2, [r7, #12]
 800c760:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	429a      	cmp	r2, r3
 800c768:	d812      	bhi.n	800c790 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	1ad2      	subs	r2, r2, r3
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	699b      	ldr	r3, [r3, #24]
 800c774:	429a      	cmp	r2, r3
 800c776:	d302      	bcc.n	800c77e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c778:	2301      	movs	r3, #1
 800c77a:	617b      	str	r3, [r7, #20]
 800c77c:	e01b      	b.n	800c7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c77e:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <prvInsertTimerInActiveList+0x7c>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3304      	adds	r3, #4
 800c786:	4619      	mov	r1, r3
 800c788:	4610      	mov	r0, r2
 800c78a:	f7fd f979 	bl	8009a80 <vListInsert>
 800c78e:	e012      	b.n	800c7b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	429a      	cmp	r2, r3
 800c796:	d206      	bcs.n	800c7a6 <prvInsertTimerInActiveList+0x62>
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d302      	bcc.n	800c7a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	617b      	str	r3, [r7, #20]
 800c7a4:	e007      	b.n	800c7b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7a6:	4b07      	ldr	r3, [pc, #28]	; (800c7c4 <prvInsertTimerInActiveList+0x80>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	4610      	mov	r0, r2
 800c7b2:	f7fd f965 	bl	8009a80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7b6:	697b      	ldr	r3, [r7, #20]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3718      	adds	r7, #24
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	20001aa0 	.word	0x20001aa0
 800c7c4:	20001a9c 	.word	0x20001a9c

0800c7c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b08c      	sub	sp, #48	; 0x30
 800c7cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ce:	e07f      	b.n	800c8d0 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	db7c      	blt.n	800c8d0 <prvProcessReceivedCommands+0x108>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	695b      	ldr	r3, [r3, #20]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d004      	beq.n	800c7ec <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fd f982 	bl	8009af0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ec:	1d3b      	adds	r3, r7, #4
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff ff88 	bl	800c704 <prvSampleTimeNow>
 800c7f4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2b09      	cmp	r3, #9
 800c7fa:	d868      	bhi.n	800c8ce <prvProcessReceivedCommands+0x106>
 800c7fc:	a201      	add	r2, pc, #4	; (adr r2, 800c804 <prvProcessReceivedCommands+0x3c>)
 800c7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c802:	bf00      	nop
 800c804:	0800c82d 	.word	0x0800c82d
 800c808:	0800c82d 	.word	0x0800c82d
 800c80c:	0800c82d 	.word	0x0800c82d
 800c810:	0800c8d1 	.word	0x0800c8d1
 800c814:	0800c887 	.word	0x0800c887
 800c818:	0800c8bd 	.word	0x0800c8bd
 800c81c:	0800c82d 	.word	0x0800c82d
 800c820:	0800c82d 	.word	0x0800c82d
 800c824:	0800c8d1 	.word	0x0800c8d1
 800c828:	0800c887 	.word	0x0800c887
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c82c:	68fa      	ldr	r2, [r7, #12]
 800c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c830:	699b      	ldr	r3, [r3, #24]
 800c832:	18d1      	adds	r1, r2, r3
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a3a      	ldr	r2, [r7, #32]
 800c838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c83a:	f7ff ff83 	bl	800c744 <prvInsertTimerInActiveList>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d045      	beq.n	800c8d0 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c84a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d13d      	bne.n	800c8d0 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	699b      	ldr	r3, [r3, #24]
 800c85a:	441a      	add	r2, r3
 800c85c:	2300      	movs	r3, #0
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	2300      	movs	r3, #0
 800c862:	2100      	movs	r1, #0
 800c864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c866:	f7ff fe3d 	bl	800c4e4 <xTimerGenericCommand>
 800c86a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d12e      	bne.n	800c8d0 <prvProcessReceivedCommands+0x108>
 800c872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	61bb      	str	r3, [r7, #24]
 800c884:	e7fe      	b.n	800c884 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <prvProcessReceivedCommands+0xe0>
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	617b      	str	r3, [r7, #20]
 800c8a6:	e7fe      	b.n	800c8a6 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	699a      	ldr	r2, [r3, #24]
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	18d1      	adds	r1, r2, r3
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	6a3a      	ldr	r2, [r7, #32]
 800c8b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8b6:	f7ff ff45 	bl	800c744 <prvInsertTimerInActiveList>
					break;
 800c8ba:	e009      	b.n	800c8d0 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d104      	bne.n	800c8d0 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 800c8c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8c8:	f7fd fbde 	bl	800a088 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8cc:	e000      	b.n	800c8d0 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
 800c8ce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <prvProcessReceivedCommands+0x128>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f107 0108 	add.w	r1, r7, #8
 800c8d8:	2200      	movs	r2, #0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe f882 	bl	800a9e4 <xQueueReceive>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f47f af74 	bne.w	800c7d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c8e8:	bf00      	nop
 800c8ea:	3728      	adds	r7, #40	; 0x28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20001aa4 	.word	0x20001aa4

0800c8f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b088      	sub	sp, #32
 800c8f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8fa:	e044      	b.n	800c986 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8fc:	4b2b      	ldr	r3, [pc, #172]	; (800c9ac <prvSwitchTimerLists+0xb8>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c906:	4b29      	ldr	r3, [pc, #164]	; (800c9ac <prvSwitchTimerLists+0xb8>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	3304      	adds	r3, #4
 800c914:	4618      	mov	r0, r3
 800c916:	f7fd f8eb 	bl	8009af0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c91e:	6938      	ldr	r0, [r7, #16]
 800c920:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	69db      	ldr	r3, [r3, #28]
 800c926:	2b01      	cmp	r3, #1
 800c928:	d12d      	bne.n	800c986 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	699a      	ldr	r2, [r3, #24]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	4413      	add	r3, r2
 800c932:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d90e      	bls.n	800c95a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c948:	4b18      	ldr	r3, [pc, #96]	; (800c9ac <prvSwitchTimerLists+0xb8>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	3304      	adds	r3, #4
 800c950:	4619      	mov	r1, r3
 800c952:	4610      	mov	r0, r2
 800c954:	f7fd f894 	bl	8009a80 <vListInsert>
 800c958:	e015      	b.n	800c986 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c95a:	2300      	movs	r3, #0
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	2300      	movs	r3, #0
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	2100      	movs	r1, #0
 800c964:	6938      	ldr	r0, [r7, #16]
 800c966:	f7ff fdbd 	bl	800c4e4 <xTimerGenericCommand>
 800c96a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d109      	bne.n	800c986 <prvSwitchTimerLists+0x92>
 800c972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c976:	f383 8811 	msr	BASEPRI, r3
 800c97a:	f3bf 8f6f 	isb	sy
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	e7fe      	b.n	800c984 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c986:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <prvSwitchTimerLists+0xb8>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1b5      	bne.n	800c8fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c990:	4b06      	ldr	r3, [pc, #24]	; (800c9ac <prvSwitchTimerLists+0xb8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800c996:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <prvSwitchTimerLists+0xbc>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a04      	ldr	r2, [pc, #16]	; (800c9ac <prvSwitchTimerLists+0xb8>)
 800c99c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c99e:	4a04      	ldr	r2, [pc, #16]	; (800c9b0 <prvSwitchTimerLists+0xbc>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6013      	str	r3, [r2, #0]
}
 800c9a4:	bf00      	nop
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	20001a9c 	.word	0x20001a9c
 800c9b0:	20001aa0 	.word	0x20001aa0

0800c9b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9ba:	f7fd f9ad 	bl	8009d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9be:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d120      	bne.n	800ca08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9c6:	4814      	ldr	r0, [pc, #80]	; (800ca18 <prvCheckForValidListAndQueue+0x64>)
 800c9c8:	f7fd f80c 	bl	80099e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9cc:	4813      	ldr	r0, [pc, #76]	; (800ca1c <prvCheckForValidListAndQueue+0x68>)
 800c9ce:	f7fd f809 	bl	80099e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9d2:	4b13      	ldr	r3, [pc, #76]	; (800ca20 <prvCheckForValidListAndQueue+0x6c>)
 800c9d4:	4a10      	ldr	r2, [pc, #64]	; (800ca18 <prvCheckForValidListAndQueue+0x64>)
 800c9d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9d8:	4b12      	ldr	r3, [pc, #72]	; (800ca24 <prvCheckForValidListAndQueue+0x70>)
 800c9da:	4a10      	ldr	r2, [pc, #64]	; (800ca1c <prvCheckForValidListAndQueue+0x68>)
 800c9dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9de:	2300      	movs	r3, #0
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	4b11      	ldr	r3, [pc, #68]	; (800ca28 <prvCheckForValidListAndQueue+0x74>)
 800c9e4:	4a11      	ldr	r2, [pc, #68]	; (800ca2c <prvCheckForValidListAndQueue+0x78>)
 800c9e6:	210c      	movs	r1, #12
 800c9e8:	200a      	movs	r0, #10
 800c9ea:	f7fd fcc7 	bl	800a37c <xQueueGenericCreateStatic>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	4b08      	ldr	r3, [pc, #32]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9f2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9f4:	4b07      	ldr	r3, [pc, #28]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d005      	beq.n	800ca08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	490b      	ldr	r1, [pc, #44]	; (800ca30 <prvCheckForValidListAndQueue+0x7c>)
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fb76 	bl	800b0f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca08:	f7fd f9b4 	bl	8009d74 <vPortExitCritical>
}
 800ca0c:	bf00      	nop
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20001aa4 	.word	0x20001aa4
 800ca18:	20001a74 	.word	0x20001a74
 800ca1c:	20001a88 	.word	0x20001a88
 800ca20:	20001a9c 	.word	0x20001a9c
 800ca24:	20001aa0 	.word	0x20001aa0
 800ca28:	20001b28 	.word	0x20001b28
 800ca2c:	20001ab0 	.word	0x20001ab0
 800ca30:	0800d4a4 	.word	0x0800d4a4

0800ca34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	if (hid_usb_init == 1) {
 800ca38:	4b27      	ldr	r3, [pc, #156]	; (800cad8 <MX_USB_DEVICE_Init+0xa4>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d124      	bne.n	800ca8c <MX_USB_DEVICE_Init+0x58>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ca42:	2200      	movs	r2, #0
 800ca44:	4925      	ldr	r1, [pc, #148]	; (800cadc <MX_USB_DEVICE_Init+0xa8>)
 800ca46:	4826      	ldr	r0, [pc, #152]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800ca48:	f7fb fca4 	bl	8008394 <USBD_Init>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d001      	beq.n	800ca56 <MX_USB_DEVICE_Init+0x22>
  {
    Error_Handler();
 800ca52:	f7f3 ff6d 	bl	8000930 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800ca56:	4923      	ldr	r1, [pc, #140]	; (800cae4 <MX_USB_DEVICE_Init+0xb0>)
 800ca58:	4821      	ldr	r0, [pc, #132]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800ca5a:	f7fb fcc6 	bl	80083ea <USBD_RegisterClass>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
 800ca64:	f7f3 ff64 	bl	8000930 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800ca68:	491f      	ldr	r1, [pc, #124]	; (800cae8 <MX_USB_DEVICE_Init+0xb4>)
 800ca6a:	481d      	ldr	r0, [pc, #116]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800ca6c:	f7fb fc7c 	bl	8008368 <USBD_CUSTOM_HID_RegisterInterface>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d001      	beq.n	800ca7a <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
 800ca76:	f7f3 ff5b 	bl	8000930 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ca7a:	4819      	ldr	r0, [pc, #100]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800ca7c:	f7fb fcce 	bl	800841c <USBD_Start>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d01e      	beq.n	800cac4 <MX_USB_DEVICE_Init+0x90>
  {
    Error_Handler();
 800ca86:	f7f3 ff53 	bl	8000930 <Error_Handler>
 800ca8a:	e01b      	b.n	800cac4 <MX_USB_DEVICE_Init+0x90>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	} else {
		if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK) {
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4913      	ldr	r1, [pc, #76]	; (800cadc <MX_USB_DEVICE_Init+0xa8>)
 800ca90:	4813      	ldr	r0, [pc, #76]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800ca92:	f7fb fc7f 	bl	8008394 <USBD_Init>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d001      	beq.n	800caa0 <MX_USB_DEVICE_Init+0x6c>
			Error_Handler();
 800ca9c:	f7f3 ff48 	bl	8000930 <Error_Handler>
		}
		if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK) {
 800caa0:	4912      	ldr	r1, [pc, #72]	; (800caec <MX_USB_DEVICE_Init+0xb8>)
 800caa2:	480f      	ldr	r0, [pc, #60]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800caa4:	f7fb fca1 	bl	80083ea <USBD_RegisterClass>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <MX_USB_DEVICE_Init+0x7e>
			Error_Handler();
 800caae:	f7f3 ff3f 	bl	8000930 <Error_Handler>
		}
		if (USBD_MSC_RegisterStorage(&hUsbDeviceFS,
 800cab2:	490f      	ldr	r1, [pc, #60]	; (800caf0 <MX_USB_DEVICE_Init+0xbc>)
 800cab4:	480a      	ldr	r0, [pc, #40]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800cab6:	f7fa fa15 	bl	8006ee4 <USBD_MSC_RegisterStorage>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <MX_USB_DEVICE_Init+0x90>
				&USBD_Storage_Interface_fops_FS) != USBD_OK) {
			Error_Handler();
 800cac0:	f7f3 ff36 	bl	8000930 <Error_Handler>
		}
	}

	if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cac4:	4806      	ldr	r0, [pc, #24]	; (800cae0 <MX_USB_DEVICE_Init+0xac>)
 800cac6:	f7fb fca9 	bl	800841c <USBD_Start>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <MX_USB_DEVICE_Init+0xa0>
		Error_Handler();
 800cad0:	f7f3 ff2e 	bl	8000930 <Error_Handler>
	}
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cad4:	bf00      	nop
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	200002a4 	.word	0x200002a4
 800cadc:	20000234 	.word	0x20000234
 800cae0:	200031a8 	.word	0x200031a8
 800cae4:	200000ec 	.word	0x200000ec
 800cae8:	20000224 	.word	0x20000224
 800caec:	20000048 	.word	0x20000048
 800caf0:	20000008 	.word	0x20000008

0800caf4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800caf4:	b480      	push	{r7}
 800caf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800caf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bc80      	pop	{r7}
 800cb00:	4770      	bx	lr

0800cb02 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cb02:	b480      	push	{r7}
 800cb04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cb06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bc80      	pop	{r7}
 800cb0e:	4770      	bx	lr

0800cb10 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	4603      	mov	r3, r0
 800cb18:	460a      	mov	r2, r1
 800cb1a:	71fb      	strb	r3, [r7, #7]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800cb20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bc80      	pop	{r7}
 800cb2a:	4770      	bx	lr

0800cb2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b083      	sub	sp, #12
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	4603      	mov	r3, r0
 800cb34:	6039      	str	r1, [r7, #0]
 800cb36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2212      	movs	r2, #18
 800cb3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb3e:	4b03      	ldr	r3, [pc, #12]	; (800cb4c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	370c      	adds	r7, #12
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bc80      	pop	{r7}
 800cb48:	4770      	bx	lr
 800cb4a:	bf00      	nop
 800cb4c:	20000250 	.word	0x20000250

0800cb50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	4603      	mov	r3, r0
 800cb58:	6039      	str	r1, [r7, #0]
 800cb5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2204      	movs	r2, #4
 800cb60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb62:	4b03      	ldr	r3, [pc, #12]	; (800cb70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bc80      	pop	{r7}
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	20000264 	.word	0x20000264

0800cb74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	6039      	str	r1, [r7, #0]
 800cb7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb80:	79fb      	ldrb	r3, [r7, #7]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d105      	bne.n	800cb92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	4907      	ldr	r1, [pc, #28]	; (800cba8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb8a:	4808      	ldr	r0, [pc, #32]	; (800cbac <USBD_FS_ProductStrDescriptor+0x38>)
 800cb8c:	f7fc fbb1 	bl	80092f2 <USBD_GetString>
 800cb90:	e004      	b.n	800cb9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	4904      	ldr	r1, [pc, #16]	; (800cba8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb96:	4805      	ldr	r0, [pc, #20]	; (800cbac <USBD_FS_ProductStrDescriptor+0x38>)
 800cb98:	f7fc fbab 	bl	80092f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb9c:	4b02      	ldr	r3, [pc, #8]	; (800cba8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	2000346c 	.word	0x2000346c
 800cbac:	0800d4ac 	.word	0x0800d4ac

0800cbb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	6039      	str	r1, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	4904      	ldr	r1, [pc, #16]	; (800cbd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cbc0:	4804      	ldr	r0, [pc, #16]	; (800cbd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbc2:	f7fc fb96 	bl	80092f2 <USBD_GetString>
  return USBD_StrDesc;
 800cbc6:	4b02      	ldr	r3, [pc, #8]	; (800cbd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	2000346c 	.word	0x2000346c
 800cbd4:	0800d4cc 	.word	0x0800d4cc

0800cbd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	221a      	movs	r2, #26
 800cbe8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbea:	f000 f843 	bl	800cc74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cbee:	4b02      	ldr	r3, [pc, #8]	; (800cbf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	20000268 	.word	0x20000268

0800cbfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc08:	79fb      	ldrb	r3, [r7, #7]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d105      	bne.n	800cc1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	4907      	ldr	r1, [pc, #28]	; (800cc30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc12:	4808      	ldr	r0, [pc, #32]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc14:	f7fc fb6d 	bl	80092f2 <USBD_GetString>
 800cc18:	e004      	b.n	800cc24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	4904      	ldr	r1, [pc, #16]	; (800cc30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc1e:	4805      	ldr	r0, [pc, #20]	; (800cc34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc20:	f7fc fb67 	bl	80092f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc24:	4b02      	ldr	r3, [pc, #8]	; (800cc30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3708      	adds	r7, #8
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	2000346c 	.word	0x2000346c
 800cc34:	0800d4e0 	.word	0x0800d4e0

0800cc38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	6039      	str	r1, [r7, #0]
 800cc42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d105      	bne.n	800cc56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	4907      	ldr	r1, [pc, #28]	; (800cc6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc4e:	4808      	ldr	r0, [pc, #32]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc50:	f7fc fb4f 	bl	80092f2 <USBD_GetString>
 800cc54:	e004      	b.n	800cc60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	4904      	ldr	r1, [pc, #16]	; (800cc6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc5a:	4805      	ldr	r0, [pc, #20]	; (800cc70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc5c:	f7fc fb49 	bl	80092f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc60:	4b02      	ldr	r3, [pc, #8]	; (800cc6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000346c 	.word	0x2000346c
 800cc70:	0800d4f4 	.word	0x0800d4f4

0800cc74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc7a:	4b0f      	ldr	r3, [pc, #60]	; (800ccb8 <Get_SerialNum+0x44>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc80:	4b0e      	ldr	r3, [pc, #56]	; (800ccbc <Get_SerialNum+0x48>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc86:	4b0e      	ldr	r3, [pc, #56]	; (800ccc0 <Get_SerialNum+0x4c>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4413      	add	r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d009      	beq.n	800ccae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc9a:	2208      	movs	r2, #8
 800cc9c:	4909      	ldr	r1, [pc, #36]	; (800ccc4 <Get_SerialNum+0x50>)
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 f814 	bl	800cccc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cca4:	2204      	movs	r2, #4
 800cca6:	4908      	ldr	r1, [pc, #32]	; (800ccc8 <Get_SerialNum+0x54>)
 800cca8:	68b8      	ldr	r0, [r7, #8]
 800ccaa:	f000 f80f 	bl	800cccc <IntToUnicode>
  }
}
 800ccae:	bf00      	nop
 800ccb0:	3710      	adds	r7, #16
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	1ffff7e8 	.word	0x1ffff7e8
 800ccbc:	1ffff7ec 	.word	0x1ffff7ec
 800ccc0:	1ffff7f0 	.word	0x1ffff7f0
 800ccc4:	2000026a 	.word	0x2000026a
 800ccc8:	2000027a 	.word	0x2000027a

0800cccc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b087      	sub	sp, #28
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]
 800cce2:	e027      	b.n	800cd34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	0f1b      	lsrs	r3, r3, #28
 800cce8:	2b09      	cmp	r3, #9
 800ccea:	d80b      	bhi.n	800cd04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	005b      	lsls	r3, r3, #1
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	0f12      	lsrs	r2, r2, #28
 800ccfa:	b2d2      	uxtb	r2, r2
 800ccfc:	3230      	adds	r2, #48	; 0x30
 800ccfe:	b2d2      	uxtb	r2, r2
 800cd00:	701a      	strb	r2, [r3, #0]
 800cd02:	e00a      	b.n	800cd1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	461a      	mov	r2, r3
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	0f12      	lsrs	r2, r2, #28
 800cd12:	b2d2      	uxtb	r2, r2
 800cd14:	3237      	adds	r2, #55	; 0x37
 800cd16:	b2d2      	uxtb	r2, r2
 800cd18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	011b      	lsls	r3, r3, #4
 800cd1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
 800cd22:	005b      	lsls	r3, r3, #1
 800cd24:	3301      	adds	r3, #1
 800cd26:	68ba      	ldr	r2, [r7, #8]
 800cd28:	4413      	add	r3, r2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	3301      	adds	r3, #1
 800cd32:	75fb      	strb	r3, [r7, #23]
 800cd34:	7dfa      	ldrb	r2, [r7, #23]
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d3d3      	bcc.n	800cce4 <IntToUnicode+0x18>
  }
}
 800cd3c:	bf00      	nop
 800cd3e:	371c      	adds	r7, #28
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bc80      	pop	{r7}
 800cd44:	4770      	bx	lr
	...

0800cd48 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <HAL_PCD_MspInit+0x44>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d113      	bne.n	800cd82 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cd5a:	4a0d      	ldr	r2, [pc, #52]	; (800cd90 <HAL_PCD_MspInit+0x48>)
 800cd5c:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <HAL_PCD_MspInit+0x48>)
 800cd5e:	69db      	ldr	r3, [r3, #28]
 800cd60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd64:	61d3      	str	r3, [r2, #28]
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <HAL_PCD_MspInit+0x48>)
 800cd68:	69db      	ldr	r3, [r3, #28]
 800cd6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800cd72:	2200      	movs	r2, #0
 800cd74:	2105      	movs	r1, #5
 800cd76:	2014      	movs	r0, #20
 800cd78:	f7f4 fa0f 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cd7c:	2014      	movs	r0, #20
 800cd7e:	f7f4 fa28 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cd82:	bf00      	nop
 800cd84:	3710      	adds	r7, #16
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	40005c00 	.word	0x40005c00
 800cd90:	40021000 	.word	0x40021000

0800cd94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fb fb7e 	bl	80084ac <USBD_LL_SetupStage>
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800cdca:	78fa      	ldrb	r2, [r7, #3]
 800cdcc:	6879      	ldr	r1, [r7, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	00db      	lsls	r3, r3, #3
 800cdd6:	440b      	add	r3, r1
 800cdd8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	78fb      	ldrb	r3, [r7, #3]
 800cde0:	4619      	mov	r1, r3
 800cde2:	f7fb fbae 	bl	8008542 <USBD_LL_DataOutStage>
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ce00:	78fa      	ldrb	r2, [r7, #3]
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	4613      	mov	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	440b      	add	r3, r1
 800ce0e:	333c      	adds	r3, #60	; 0x3c
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	78fb      	ldrb	r3, [r7, #3]
 800ce14:	4619      	mov	r1, r3
 800ce16:	f7fb fc05 	bl	8008624 <USBD_LL_DataInStage>
}
 800ce1a:	bf00      	nop
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b082      	sub	sp, #8
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fb fd15 	bl	8008860 <USBD_LL_SOF>
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce46:	2301      	movs	r3, #1
 800ce48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d001      	beq.n	800ce56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ce52:	f7f3 fd6d 	bl	8000930 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce5c:	7bfa      	ldrb	r2, [r7, #15]
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fb fcc5 	bl	80087f0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fb fc7e 	bl	800876e <USBD_LL_Reset>
}
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fb fcbf 	bl	800880e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	699b      	ldr	r3, [r3, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d005      	beq.n	800cea4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce98:	4a04      	ldr	r2, [pc, #16]	; (800ceac <HAL_PCD_SuspendCallback+0x30>)
 800ce9a:	4b04      	ldr	r3, [pc, #16]	; (800ceac <HAL_PCD_SuspendCallback+0x30>)
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	f043 0306 	orr.w	r3, r3, #6
 800cea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cea4:	bf00      	nop
 800cea6:	3708      	adds	r7, #8
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	e000ed00 	.word	0xe000ed00

0800ceb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fb fcb9 	bl	8008836 <USBD_LL_Resume>
}
 800cec4:	bf00      	nop
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ced4:	4a23      	ldr	r2, [pc, #140]	; (800cf64 <USBD_LL_Init+0x98>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a21      	ldr	r2, [pc, #132]	; (800cf64 <USBD_LL_Init+0x98>)
 800cee0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cee4:	4b1f      	ldr	r3, [pc, #124]	; (800cf64 <USBD_LL_Init+0x98>)
 800cee6:	4a20      	ldr	r2, [pc, #128]	; (800cf68 <USBD_LL_Init+0x9c>)
 800cee8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ceea:	4b1e      	ldr	r3, [pc, #120]	; (800cf64 <USBD_LL_Init+0x98>)
 800ceec:	2208      	movs	r2, #8
 800ceee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cef0:	4b1c      	ldr	r3, [pc, #112]	; (800cf64 <USBD_LL_Init+0x98>)
 800cef2:	2202      	movs	r2, #2
 800cef4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cef6:	4b1b      	ldr	r3, [pc, #108]	; (800cf64 <USBD_LL_Init+0x98>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cefc:	4b19      	ldr	r3, [pc, #100]	; (800cf64 <USBD_LL_Init+0x98>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cf02:	4b18      	ldr	r3, [pc, #96]	; (800cf64 <USBD_LL_Init+0x98>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cf08:	4816      	ldr	r0, [pc, #88]	; (800cf64 <USBD_LL_Init+0x98>)
 800cf0a:	f7f4 fce7 	bl	80018dc <HAL_PCD_Init>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cf14:	f7f3 fd0c 	bl	8000930 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf1e:	2318      	movs	r3, #24
 800cf20:	2200      	movs	r2, #0
 800cf22:	2100      	movs	r1, #0
 800cf24:	f7f6 f9a7 	bl	8003276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf2e:	2358      	movs	r3, #88	; 0x58
 800cf30:	2200      	movs	r2, #0
 800cf32:	2180      	movs	r1, #128	; 0x80
 800cf34:	f7f6 f99f 	bl	8003276 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf3e:	2398      	movs	r3, #152	; 0x98
 800cf40:	2200      	movs	r2, #0
 800cf42:	2181      	movs	r1, #129	; 0x81
 800cf44:	f7f6 f997 	bl	8003276 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf4e:	23d8      	movs	r3, #216	; 0xd8
 800cf50:	2200      	movs	r2, #0
 800cf52:	2101      	movs	r1, #1
 800cf54:	f7f6 f98f 	bl	8003276 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	2000366c 	.word	0x2000366c
 800cf68:	40005c00 	.word	0x40005c00

0800cf6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7f4 fdb5 	bl	8001af2 <HAL_PCD_Start>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf8c:	7bfb      	ldrb	r3, [r7, #15]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 f96e 	bl	800d270 <USBD_Get_USB_Status>
 800cf94:	4603      	mov	r3, r0
 800cf96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	4608      	mov	r0, r1
 800cfac:	4611      	mov	r1, r2
 800cfae:	461a      	mov	r2, r3
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	70fb      	strb	r3, [r7, #3]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	70bb      	strb	r3, [r7, #2]
 800cfb8:	4613      	mov	r3, r2
 800cfba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfca:	78bb      	ldrb	r3, [r7, #2]
 800cfcc:	883a      	ldrh	r2, [r7, #0]
 800cfce:	78f9      	ldrb	r1, [r7, #3]
 800cfd0:	f7f4 ff2f 	bl	8001e32 <HAL_PCD_EP_Open>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f948 	bl	800d270 <USBD_Get_USB_Status>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d008:	78fa      	ldrb	r2, [r7, #3]
 800d00a:	4611      	mov	r1, r2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7f4 ff76 	bl	8001efe <HAL_PCD_EP_Close>
 800d012:	4603      	mov	r3, r0
 800d014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	4618      	mov	r0, r3
 800d01a:	f000 f929 	bl	800d270 <USBD_Get_USB_Status>
 800d01e:	4603      	mov	r3, r0
 800d020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d022:	7bbb      	ldrb	r3, [r7, #14]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d038:	2300      	movs	r3, #0
 800d03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d046:	78fa      	ldrb	r2, [r7, #3]
 800d048:	4611      	mov	r1, r2
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7f5 f8ea 	bl	8002224 <HAL_PCD_EP_Flush>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	4618      	mov	r0, r3
 800d058:	f000 f90a 	bl	800d270 <USBD_Get_USB_Status>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d060:	7bbb      	ldrb	r3, [r7, #14]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b084      	sub	sp, #16
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d084:	78fa      	ldrb	r2, [r7, #3]
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f7f5 f817 	bl	80020bc <HAL_PCD_EP_SetStall>
 800d08e:	4603      	mov	r3, r0
 800d090:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d092:	7bfb      	ldrb	r3, [r7, #15]
 800d094:	4618      	mov	r0, r3
 800d096:	f000 f8eb 	bl	800d270 <USBD_Get_USB_Status>
 800d09a:	4603      	mov	r3, r0
 800d09c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0c2:	78fa      	ldrb	r2, [r7, #3]
 800d0c4:	4611      	mov	r1, r2
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7f5 f858 	bl	800217c <HAL_PCD_EP_ClrStall>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f8cc 	bl	800d270 <USBD_Get_USB_Status>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b085      	sub	sp, #20
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0f8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d0fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	da0c      	bge.n	800d11c <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d102:	78fb      	ldrb	r3, [r7, #3]
 800d104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d108:	68f9      	ldr	r1, [r7, #12]
 800d10a:	1c5a      	adds	r2, r3, #1
 800d10c:	4613      	mov	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4413      	add	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	440b      	add	r3, r1
 800d116:	3302      	adds	r3, #2
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	e00b      	b.n	800d134 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d11c:	78fb      	ldrb	r3, [r7, #3]
 800d11e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d122:	68f9      	ldr	r1, [r7, #12]
 800d124:	4613      	mov	r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4413      	add	r3, r2
 800d12a:	00db      	lsls	r3, r3, #3
 800d12c:	440b      	add	r3, r1
 800d12e:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d132:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d134:	4618      	mov	r0, r3
 800d136:	3714      	adds	r7, #20
 800d138:	46bd      	mov	sp, r7
 800d13a:	bc80      	pop	{r7}
 800d13c:	4770      	bx	lr

0800d13e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b084      	sub	sp, #16
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d158:	78fa      	ldrb	r2, [r7, #3]
 800d15a:	4611      	mov	r1, r2
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7f4 fe43 	bl	8001de8 <HAL_PCD_SetAddress>
 800d162:	4603      	mov	r3, r0
 800d164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d166:	7bfb      	ldrb	r3, [r7, #15]
 800d168:	4618      	mov	r0, r3
 800d16a:	f000 f881 	bl	800d270 <USBD_Get_USB_Status>
 800d16e:	4603      	mov	r3, r0
 800d170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d172:	7bbb      	ldrb	r3, [r7, #14]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	607a      	str	r2, [r7, #4]
 800d186:	461a      	mov	r2, r3
 800d188:	460b      	mov	r3, r1
 800d18a:	72fb      	strb	r3, [r7, #11]
 800d18c:	4613      	mov	r3, r2
 800d18e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d194:	2300      	movs	r3, #0
 800d196:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d19e:	893b      	ldrh	r3, [r7, #8]
 800d1a0:	7af9      	ldrb	r1, [r7, #11]
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	f7f4 ff47 	bl	8002036 <HAL_PCD_EP_Transmit>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 f85e 	bl	800d270 <USBD_Get_USB_Status>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b086      	sub	sp, #24
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	60f8      	str	r0, [r7, #12]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	72fb      	strb	r3, [r7, #11]
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d1e4:	893b      	ldrh	r3, [r7, #8]
 800d1e6:	7af9      	ldrb	r1, [r7, #11]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	f7f4 fed0 	bl	8001f8e <HAL_PCD_EP_Receive>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1f2:	7dfb      	ldrb	r3, [r7, #23]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 f83b 	bl	800d270 <USBD_Get_USB_Status>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d1fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d21a:	78fa      	ldrb	r2, [r7, #3]
 800d21c:	4611      	mov	r1, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f4 fef2 	bl	8002008 <HAL_PCD_EP_GetRxCount>
 800d224:	4603      	mov	r3, r0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
	...

0800d230 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d238:	4b02      	ldr	r3, [pc, #8]	; (800d244 <USBD_static_malloc+0x14>)
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	bc80      	pop	{r7}
 800d242:	4770      	bx	lr
 800d244:	20001b70 	.word	0x20001b70

0800d248 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]

}
 800d250:	bf00      	nop
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	bc80      	pop	{r7}
 800d258:	4770      	bx	lr

0800d25a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d25a:	b480      	push	{r7}
 800d25c:	b083      	sub	sp, #12
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	460b      	mov	r3, r1
 800d264:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d266:	bf00      	nop
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bc80      	pop	{r7}
 800d26e:	4770      	bx	lr

0800d270 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	4603      	mov	r3, r0
 800d278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	2b03      	cmp	r3, #3
 800d282:	d817      	bhi.n	800d2b4 <USBD_Get_USB_Status+0x44>
 800d284:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <USBD_Get_USB_Status+0x1c>)
 800d286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28a:	bf00      	nop
 800d28c:	0800d29d 	.word	0x0800d29d
 800d290:	0800d2a3 	.word	0x0800d2a3
 800d294:	0800d2a9 	.word	0x0800d2a9
 800d298:	0800d2af 	.word	0x0800d2af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a0:	e00b      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2a6:	e008      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ac:	e005      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b2:	e002      	b.n	800d2ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2b8:	bf00      	nop
  }
  return usb_status;
 800d2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bc80      	pop	{r7}
 800d2c4:	4770      	bx	lr
 800d2c6:	bf00      	nop

0800d2c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d2c8:	480c      	ldr	r0, [pc, #48]	; (800d2fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800d2ca:	490d      	ldr	r1, [pc, #52]	; (800d300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800d2cc:	4a0d      	ldr	r2, [pc, #52]	; (800d304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800d2ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d2d0:	e002      	b.n	800d2d8 <LoopCopyDataInit>

0800d2d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d2d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d2d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d2d6:	3304      	adds	r3, #4

0800d2d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d2d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d2da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d2dc:	d3f9      	bcc.n	800d2d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d2de:	4a0a      	ldr	r2, [pc, #40]	; (800d308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800d2e0:	4c0a      	ldr	r4, [pc, #40]	; (800d30c <LoopFillZerobss+0x22>)
  movs r3, #0
 800d2e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d2e4:	e001      	b.n	800d2ea <LoopFillZerobss>

0800d2e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d2e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d2e8:	3204      	adds	r2, #4

0800d2ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d2ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d2ec:	d3fb      	bcc.n	800d2e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800d2ee:	f7f3 fe68 	bl	8000fc2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d2f2:	f000 f80f 	bl	800d314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800d2f6:	f7f3 fa9b 	bl	8000830 <main>
  bx lr
 800d2fa:	4770      	bx	lr
  ldr r0, =_sdata
 800d2fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d300:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 800d304:	0800d568 	.word	0x0800d568
  ldr r2, =_sbss
 800d308:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 800d30c:	20003958 	.word	0x20003958

0800d310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d310:	e7fe      	b.n	800d310 <ADC1_2_IRQHandler>
	...

0800d314 <__libc_init_array>:
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	2500      	movs	r5, #0
 800d318:	4e0c      	ldr	r6, [pc, #48]	; (800d34c <__libc_init_array+0x38>)
 800d31a:	4c0d      	ldr	r4, [pc, #52]	; (800d350 <__libc_init_array+0x3c>)
 800d31c:	1ba4      	subs	r4, r4, r6
 800d31e:	10a4      	asrs	r4, r4, #2
 800d320:	42a5      	cmp	r5, r4
 800d322:	d109      	bne.n	800d338 <__libc_init_array+0x24>
 800d324:	f000 f82e 	bl	800d384 <_init>
 800d328:	2500      	movs	r5, #0
 800d32a:	4e0a      	ldr	r6, [pc, #40]	; (800d354 <__libc_init_array+0x40>)
 800d32c:	4c0a      	ldr	r4, [pc, #40]	; (800d358 <__libc_init_array+0x44>)
 800d32e:	1ba4      	subs	r4, r4, r6
 800d330:	10a4      	asrs	r4, r4, #2
 800d332:	42a5      	cmp	r5, r4
 800d334:	d105      	bne.n	800d342 <__libc_init_array+0x2e>
 800d336:	bd70      	pop	{r4, r5, r6, pc}
 800d338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d33c:	4798      	blx	r3
 800d33e:	3501      	adds	r5, #1
 800d340:	e7ee      	b.n	800d320 <__libc_init_array+0xc>
 800d342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d346:	4798      	blx	r3
 800d348:	3501      	adds	r5, #1
 800d34a:	e7f2      	b.n	800d332 <__libc_init_array+0x1e>
 800d34c:	0800d560 	.word	0x0800d560
 800d350:	0800d560 	.word	0x0800d560
 800d354:	0800d560 	.word	0x0800d560
 800d358:	0800d564 	.word	0x0800d564

0800d35c <memcpy>:
 800d35c:	b510      	push	{r4, lr}
 800d35e:	1e43      	subs	r3, r0, #1
 800d360:	440a      	add	r2, r1
 800d362:	4291      	cmp	r1, r2
 800d364:	d100      	bne.n	800d368 <memcpy+0xc>
 800d366:	bd10      	pop	{r4, pc}
 800d368:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d36c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d370:	e7f7      	b.n	800d362 <memcpy+0x6>

0800d372 <memset>:
 800d372:	4603      	mov	r3, r0
 800d374:	4402      	add	r2, r0
 800d376:	4293      	cmp	r3, r2
 800d378:	d100      	bne.n	800d37c <memset+0xa>
 800d37a:	4770      	bx	lr
 800d37c:	f803 1b01 	strb.w	r1, [r3], #1
 800d380:	e7f9      	b.n	800d376 <memset+0x4>
	...

0800d384 <_init>:
 800d384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d386:	bf00      	nop
 800d388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d38a:	bc08      	pop	{r3}
 800d38c:	469e      	mov	lr, r3
 800d38e:	4770      	bx	lr

0800d390 <_fini>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr
